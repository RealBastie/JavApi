<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JavApi</name>
    </assembly>
    <members>
        <member name="M:biz.ritter.awt.forms.DialogFormsPeer.setTitle(System.String)">
            <summary>
            Set the title of frame
            </summary>
            <param name="newTitle">title</param>
        </member>
        <member name="M:biz.ritter.awt.forms.DialogFormsPeer.setVisible(System.Boolean)">
            <summary>
            Display or hides this dialog and contained child GUI element.
            </summary>
            <param name="showMe">true if to display, false if to hide</param>
        </member>
        <member name="M:biz.ritter.awt.forms.WindowFormsPeer.setVisible(System.Boolean)">
            <summary>
            Display or hides this frame and contained child GUI element.
            </summary>
            <param name="showMe">true if to display, false if to hide</param>
        </member>
        <member name="M:biz.ritter.awt.forms.WindowFormsPeer.show">
            <summary>
            Show the window - obsoleted by setVisisble()
            </summary>
        </member>
        <member name="M:biz.ritter.net.protocol.http.Handler.openConnection(biz.ritter.javapi.net.URL)">
            <summary>
            Create a new URLConnection for http protocol
            </summary>
            <param name="u">URL</param>
            <returns>
            </returns>
            <see cref="T:biz.ritter.javapi.net.URL" />
        </member>
        <member name="F:biz.ritter.net.protocol.http.Connection.requestProperties">
            <summary>
            contains request properties
            </summary>
        </member>
        <member name="F:biz.ritter.net.protocol.http.Connection.url">
            <summary>
            Contains URL
            </summary>
        </member>
        <member name="M:biz.ritter.net.protocol.http.Connection.#ctor(biz.ritter.javapi.net.URL)">
            <summary>
            Create new instance with given URL
            </summary>
            <param name="url">
            </param>
        </member>
        <member name="M:biz.ritter.net.protocol.http.Connection.addRequestProperty(System.String,System.String)">
            <summary>
            Add new request Properties
            </summary>
            <param name="name">
            </param>
            <param name="value">
            </param>
            <exception cref="T:biz.ritter.javapi.lang.NullPointerException">
            </exception>
            <exception cref="T:biz.ritter.javapi.lang.IllegalStateException">
            </exception>
        </member>
        <member name="M:biz.ritter.net.protocol.http.Connection.getInputStream">
            <summary>
            Return the http input stream
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:biz.ritter.net.protocol.http.Connection.getHeaderField(System.String)">
                     * Gets the value of the header field specified by {@code key} or {@code
                     * null} if there is no field with this name. The current implementation of
                     * this method returns always {@code null}.
                     *
                     * @param key
                     *            the name of the header field.
                     * @return the value of the header field.</member>
        <member name="T:biz.ritter.net.protocol.http.InputStreamWrapper">
            <summary>
            Wrap .net System.IO.Stream instance as java.io.InputStream
            </summary>
        </member>
        <member name="M:biz.ritter.net.protocol.http.InputStreamWrapper.read(System.Byte[],System.Int32,System.Int32)">
            Optimized reading for files</member>
        <member name="T:biz.ritter.javapi.awt.ActiveEvent">
                 * @author Michael Danilov</member>
        <member name="T:biz.ritter.javapi.awt.ComponentBehavior">
                 * The interface of the helper object that encapsulates the difference
                 * between lightweight and heavyweight components.
                 * @author Dmitry A. Durnev</member>
        <member name="T:biz.ritter.javapi.awt.ComponentOrientation">
             * @author Michael Danilov, Dmitry A. Durnev</member>
        <member name="M:biz.ritter.javapi.awt.ComponentOrientation.getOrientation(biz.ritter.javapi.util.ResourceBundle)">
                 * @deprecated</member>
        <member name="M:biz.ritter.javapi.awt.Container.insets">
                     * @deprecated</member>
        <member name="T:biz.ritter.javapi.awt.eventj.HierarchyEvent">
                 * @author Michael Danilov</member>
        <member name="T:biz.ritter.javapi.awt.eventj.HierarchyListener">
                 * @author Michael Danilov</member>
        <member name="T:biz.ritter.javapi.awt.eventj.InputMethodEvent">
                 * @author Michael Danilov</member>
        <member name="T:biz.ritter.javapi.awt.eventj.InputMethodListener">
                 * @author Michael Danilov</member>
        <member name="T:biz.ritter.javapi.awt.eventj.InvocationEvent">
                 * @author Michael Danilov</member>
        <member name="T:biz.ritter.javapi.awt.eventj.ItemEvent">
                 * @author Michael Danilov</member>
        <member name="T:biz.ritter.javapi.awt.eventj.ItemListener">
                 * @author Michael Danilov</member>
        <member name="T:biz.ritter.javapi.awt.eventj.WindowAdapter">
            <summary>
            Empty implementation of <see cref="T:biz.ritter.javapi.awt.eventj.WindowListener" />, <see cref="T:biz.ritter.javapi.awt.eventj.WindowFocusListener" /> and <see cref="T:biz.ritter.javapi.awt.eventj.WindowStateListener" /></summary>
        </member>
        <member name="T:biz.ritter.javapi.awt.eventj.WindowStateListener">
                 * @author Michael Danilov</member>
        <member name="T:biz.ritter.awt.forms.FormsToolkit">
            <summary>
            FormsToolkit is the AWT implementation based on Windows Forms
            </summary>
        </member>
        <member name="M:biz.ritter.awt.forms.FormsToolkit.createFrame(biz.ritter.javapi.awt.Frame)">
            <summary>
            Create a FramePeer object
            </summary>
            <param name="target">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:biz.ritter.awt.forms.FormsToolkit.createDialog(biz.ritter.javapi.awt.Dialog)">
            <summary>
            Create a DialogPeer object
            </summary>
            <param name="target">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:biz.ritter.awt.forms.FormsToolkit.createWindow(biz.ritter.javapi.awt.Window)">
            <summary>
            Create a WindowPeer object
            </summary>
            <param name="target">
            </param>
            <returns>
            </returns>
        </member>
        <member name="T:biz.ritter.io.StreamWrapper">
            <summary>
            Wrap java.io.InputStream or java.io.OutputStream as System.IO.Stream
            </summary>
        </member>
        <member name="T:biz.ritter.javapix.xml.datatype.DatatypeConstants">
                 * <p>Utility class to contain basic Datatype values as constants.</p>
                 *
                 * @author <a href="mailto:Jeff.Suttor@Sun.com">Jeff Suttor</a>
                 * @version $Revision: 446598 $, $Date: 2006-09-15 08:55:40 -0400 (Fri, 15 Sep 2006) $
                 * @since 1.5</member>
        <member name="M:biz.ritter.javapix.xml.datatype.DatatypeConstants.#ctor">
                     * <p>Private constructor to prevent instantiation.</p></member>
        <member name="F:biz.ritter.javapix.xml.datatype.DatatypeConstants.JANUARY">
                     * Value for first month of year.</member>
        <member name="F:biz.ritter.javapix.xml.datatype.DatatypeConstants.FEBRUARY">
                     * Value for second month of year.</member>
        <member name="F:biz.ritter.javapix.xml.datatype.DatatypeConstants.MARCH">
                     * Value for third month of year.</member>
        <member name="F:biz.ritter.javapix.xml.datatype.DatatypeConstants.APRIL">
                     * Value for fourth month of year.</member>
        <member name="F:biz.ritter.javapix.xml.datatype.DatatypeConstants.MAY">
                     * Value for fifth month of year.</member>
        <member name="F:biz.ritter.javapix.xml.datatype.DatatypeConstants.JUNE">
                     * Value for sixth month of year.</member>
        <member name="F:biz.ritter.javapix.xml.datatype.DatatypeConstants.JULY">
                     * Value for seventh month of year.</member>
        <member name="F:biz.ritter.javapix.xml.datatype.DatatypeConstants.AUGUST">
                     * Value for eighth month of year.</member>
        <member name="F:biz.ritter.javapix.xml.datatype.DatatypeConstants.SEPTEMBER">
                     * Value for ninth month of year.</member>
        <member name="F:biz.ritter.javapix.xml.datatype.DatatypeConstants.OCTOBER">
                     * Value for tenth month of year.</member>
        <member name="F:biz.ritter.javapix.xml.datatype.DatatypeConstants.NOVEMBER">
                     * Value for eleven month of year.</member>
        <member name="F:biz.ritter.javapix.xml.datatype.DatatypeConstants.DECEMBER">
                     * Value for twelve month of year.</member>
        <member name="F:biz.ritter.javapix.xml.datatype.DatatypeConstants.LESSER">
                     * <p>Comparison result.</p></member>
        <member name="F:biz.ritter.javapix.xml.datatype.DatatypeConstants.EQUAL">
                     * <p>Comparison result.</p></member>
        <member name="F:biz.ritter.javapix.xml.datatype.DatatypeConstants.GREATER">
                     * <p>Comparison result.</p></member>
        <member name="F:biz.ritter.javapix.xml.datatype.DatatypeConstants.INDETERMINATE">
                     * <p>Comparison result.</p></member>
        <member name="F:biz.ritter.javapix.xml.datatype.DatatypeConstants.FIELD_UNDEFINED">
                     * Designation that an "int" field is not set.</member>
        <member name="F:biz.ritter.javapix.xml.datatype.DatatypeConstants.YEARS">
                     * <p>A constant that represents the years field.</p></member>
        <member name="F:biz.ritter.javapix.xml.datatype.DatatypeConstants.MONTHS">
                     * <p>A constant that represents the months field.</p></member>
        <member name="F:biz.ritter.javapix.xml.datatype.DatatypeConstants.DAYS">
                     * <p>A constant that represents the days field.</p></member>
        <member name="F:biz.ritter.javapix.xml.datatype.DatatypeConstants.HOURS">
                     * <p>A constant that represents the hours field.</p></member>
        <member name="F:biz.ritter.javapix.xml.datatype.DatatypeConstants.MINUTES">
                     * <p>A constant that represents the minutes field.</p></member>
        <member name="F:biz.ritter.javapix.xml.datatype.DatatypeConstants.SECONDS">
                     * <p>A constant that represents the seconds field.</p></member>
        <member name="T:biz.ritter.javapix.xml.datatype.DatatypeConstants.Field">
                     * Type-safe enum class that represents six fields
                     * of the {@link Duration} class.</member>
        <member name="F:biz.ritter.javapix.xml.datatype.DatatypeConstants.Field.str">
                         * <p><code>String</code> representation of <code>Field</code>.</p></member>
        <member name="F:biz.ritter.javapix.xml.datatype.DatatypeConstants.Field.id">
                         * <p>Unique id of the field.</p>
                         *
                         * <p>This value allows the {@link Duration} class to use switch
                         * statements to process fields.</p></member>
        <member name="M:biz.ritter.javapix.xml.datatype.DatatypeConstants.Field.#ctor(System.String,System.Int32)">
                         * <p>Construct a <code>Field</code> with specified values.</p>
                         * @param str <code>String</code> representation of <code>Field</code>
                         * @param id  <code>int</code> representation of <code>Field</code></member>
        <member name="M:biz.ritter.javapix.xml.datatype.DatatypeConstants.Field.toString">
                         * Returns a field name in English. This method
                         * is intended to be used for debugging/diagnosis
                         * and not for display to end-users.
                         *
                         * @return
                         *      a non-null valid String constant.</member>
        <member name="M:biz.ritter.javapix.xml.datatype.DatatypeConstants.Field.getId">
                         * <p>Get id of this Field.</p>
                         *
                         * @return Id of field.</member>
        <member name="F:biz.ritter.javapix.xml.datatype.DatatypeConstants.DATETIME">
                     * <p>Fully qualified name for W3C XML Schema 1.0 datatype <code>dateTime</code>.</p></member>
        <member name="F:biz.ritter.javapix.xml.datatype.DatatypeConstants.TIME">
                     * <p>Fully qualified name for W3C XML Schema 1.0 datatype <code>time</code>.</p></member>
        <member name="F:biz.ritter.javapix.xml.datatype.DatatypeConstants.DATE">
                     * <p>Fully qualified name for W3C XML Schema 1.0 datatype <code>date</code>.</p></member>
        <member name="F:biz.ritter.javapix.xml.datatype.DatatypeConstants.GYEARMONTH">
                     * <p>Fully qualified name for W3C XML Schema 1.0 datatype <code>gYearMonth</code>.</p></member>
        <member name="F:biz.ritter.javapix.xml.datatype.DatatypeConstants.GMONTHDAY">
                     * <p>Fully qualified name for W3C XML Schema 1.0 datatype <code>gMonthDay</code>.</p></member>
        <member name="F:biz.ritter.javapix.xml.datatype.DatatypeConstants.GYEAR">
                     * <p>Fully qualified name for W3C XML Schema 1.0 datatype <code>gYear</code>.</p></member>
        <member name="F:biz.ritter.javapix.xml.datatype.DatatypeConstants.GMONTH">
                     * <p>Fully qualified name for W3C XML Schema 1.0 datatype <code>gMonth</code>.</p></member>
        <member name="F:biz.ritter.javapix.xml.datatype.DatatypeConstants.GDAY">
                     * <p>Fully qualified name for W3C XML Schema 1.0 datatype <code>gDay</code>.</p></member>
        <member name="F:biz.ritter.javapix.xml.datatype.DatatypeConstants.DURATION">
                     * <p>Fully qualified name for W3C XML Schema datatype <code>duration</code>.</p></member>
        <member name="F:biz.ritter.javapix.xml.datatype.DatatypeConstants.DURATION_DAYTIME">
                     * <p>Fully qualified name for XQuery 1.0 and XPath 2.0 datatype <code>dayTimeDuration</code>.</p></member>
        <member name="F:biz.ritter.javapix.xml.datatype.DatatypeConstants.DURATION_YEARMONTH">
                     * <p>Fully qualified name for XQuery 1.0 and XPath 2.0 datatype <code>yearMonthDuration</code>.</p></member>
        <member name="F:biz.ritter.javapix.xml.datatype.DatatypeConstants.MAX_TIMEZONE_OFFSET">
                     * W3C XML Schema max timezone offset is -14:00. Zone offset is in minutes.</member>
        <member name="F:biz.ritter.javapix.xml.datatype.DatatypeConstants.MIN_TIMEZONE_OFFSET">
                     * W3C XML Schema min timezone offset is +14:00. Zone offset is in minutes.</member>
        <member name="T:biz.ritter.javapix.xml.datatype.Duration">
                 * <p>Immutable representation of a time span as defined in
                 * the W3C XML Schema 1.0 specification.</p>
                 *
                 * <p>A Duration object represents a period of Gregorian time,
                 * which consists of six fields (years, months, days, hours,
                 * minutes, and seconds) plus a sign (+/-) field.</p>
                 *
                 * <p>The first five fields have non-negative (&gt;=0) integers or null
                 * (which represents that the field is not set),
                 * and the seconds field has a non-negative decimal or null.
                 * A negative sign indicates a negative duration.</p>
                 *
                 * <p>This class provides a number of methods that make it easy
                 * to use for the duration datatype of XML Schema 1.0 with
                 * the errata.</p>
                 *
                 * <h2>Order relationship</h2>
                 * <p>Duration objects only have partial order, where two values A and B
                 * maybe either:</p>
                 * <ol>
                 *  <li>A&lt;B (A is shorter than B)</li>
                 *  <li>A&gt;B (A is longer than B)</li>
                 *  <li>A==B   (A and B are of the same duration)</li>
                 *  <li>A&lt;&gt;B (Comparison between A and B is indeterminate)</li>
                 * </ol>
                 *
                 * <p>For example, 30 days cannot be meaningfully compared to one month.
                 * The {@link #compare(Duration duration)} method implements this
                 * relationship.</p>
                 *
                 * <p>See the {@link #isLongerThan(Duration)} method for details about
                 * the order relationship among <code>Duration</code> objects.</p>
                 *
                 * <h2>Operations over Duration</h2>
                 * <p>This class provides a set of basic arithmetic operations, such
                 * as addition, subtraction and multiplication.
                 * Because durations don't have total order, an operation could
                 * fail for some combinations of operations. For example, you cannot
                 * subtract 15 days from 1 month. See the javadoc of those methods
                 * for detailed conditions where this could happen.</p>
                 *
                 * <p>Also, division of a duration by a number is not provided because
                 * the <code>Duration</code> class can only deal with finite precision
                 * decimal numbers. For example, one cannot represent 1 sec divided by 3.</p>
                 *
                 * <p>However, you could substitute a division by 3 with multiplying
                 * by numbers such as 0.3 or 0.333.</p>
                 *
                 * <h2>Range of allowed values</h2>
                 * <p />
                 * Because some operations of <code>Duration</code> rely on {@link Calendar}
                 * even though {@link Duration} can hold very large or very small values,
                 * some of the methods may not work correctly on such <code>Duration</code>s.
                 * The impacted methods document their dependency on {@link Calendar}.
                 *
                 *
                 * @author <a href="mailto:Joseph.Fialli@Sun.COM">Joseph Fialli</a>
                 * @author <a href="mailto:Kohsuke.Kawaguchi@Sun.com">Kohsuke Kawaguchi</a>
                 * @author <a href="mailto:Jeff.Suttor@Sun.com">Jeff Suttor</a>
                 * @version $Revision: 446598 $, $Date: 2006-09-15 08:55:40 -0400 (Fri, 15 Sep 2006) $
                 * @see XMLGregorianCalendar#add(Duration)
                 * @since 1.5</member>
        <member name="M:biz.ritter.javapix.xml.datatype.Duration.getXMLSchemaType">
                     * <p>Return the name of the XML Schema date/time type that this instance
                     * maps to. Type is computed based on fields that are set,
                     * i.e. {@link #isSet(DatatypeConstants.Field field)} == <code>true</code>.</p>
                     *
                     * <table border="2" rules="all" cellpadding="2">
                     *   <thead>
                     *     <tr>
                     *       <th align="center" colspan="7">
                     *         Required fields for XML Schema 1.0 Date/Time Datatypes.<br />
                     *         <i>(timezone is optional for all date/time datatypes)</i>
                     *       </th>
                     *     </tr>
                     *   </thead>
                     *   <tbody>
                     *     <tr>
                     *       <td>Datatype</td>
                     *       <td>year</td>
                     *       <td>month</td>
                     *       <td>day</td>
                     *       <td>hour</td>
                     *       <td>minute</td>
                     *       <td>second</td>
                     *     </tr>
                     *     <tr>
                     *       <td>{@link DatatypeConstants#DURATION}</td>
                     *       <td>X</td>
                     *       <td>X</td>
                     *       <td>X</td>
                     *       <td>X</td>
                     *       <td>X</td>
                     *       <td>X</td>
                     *     </tr>
                     *     <tr>
                     *       <td>{@link DatatypeConstants#DURATION_DAYTIME}</td>
                     *       <td></td>
                     *       <td></td>
                     *       <td>X</td>
                     *       <td>X</td>
                     *       <td>X</td>
                     *       <td>X</td>
                     *     </tr>
                     *     <tr>
                     *       <td>{@link DatatypeConstants#DURATION_YEARMONTH}</td>
                     *       <td>X</td>
                     *       <td>X</td>
                     *       <td></td>
                     *       <td></td>
                     *       <td></td>
                     *       <td></td>
                     *     </tr>
                     *   </tbody>
                     * </table>
                     *
                     * @return one of the following constants:
                     *   {@link DatatypeConstants#DURATION},
                     *   {@link DatatypeConstants#DURATION_DAYTIME} or
                     *   {@link DatatypeConstants#DURATION_YEARMONTH}.
                     *
                     * @throws IllegalStateException If the combination of set fields does not match one of the XML Schema date/time datatypes.</member>
        <member name="M:biz.ritter.javapix.xml.datatype.Duration.getSign">
                     * Returns the sign of this duration in -1,0, or 1.
                     *
                     * @return
                     *      -1 if this duration is negative, 0 if the duration is zero,
                     *      and 1 if the duration is positive.</member>
        <member name="M:biz.ritter.javapix.xml.datatype.Duration.getYears">
                     * <p>Get the years value of this <code>Duration</code> as an <code>int</code> or <code>0</code> if not present.</p>
                     *
                     * <p><code>getYears()</code> is a convenience method for
                     * {@link #getField(DatatypeConstants.Field field) getField(DatatypeConstants.YEARS)}.</p>
                     *
                     * <p>As the return value is an <code>int</code>, an incorrect value will be returned for <code>Duration</code>s
                     * with years that go beyond the range of an <code>int</code>.
                     * Use {@link #getField(DatatypeConstants.Field field) getField(DatatypeConstants.YEARS)} to avoid possible loss of precision.</p>
                     *
                     * @return If the years field is present, return its value as an <code>int</code>, else return <code>0</code>.</member>
        <member name="M:biz.ritter.javapix.xml.datatype.Duration.getMonths">
                     * Obtains the value of the MONTHS field as an integer value,
                     * or 0 if not present.
                     *
                     * This method works just like {@link #getYears()} except
                     * that this method works on the MONTHS field.
                     *
                     * @return Months of this <code>Duration</code>.</member>
        <member name="M:biz.ritter.javapix.xml.datatype.Duration.getDays">
                     * Obtains the value of the DAYS field as an integer value,
                     * or 0 if not present.
                     *
                     * This method works just like {@link #getYears()} except
                     * that this method works on the DAYS field.
                     *
                     * @return Days of this <code>Duration</code>.</member>
        <member name="M:biz.ritter.javapix.xml.datatype.Duration.getHours">
                     * Obtains the value of the HOURS field as an integer value,
                     * or 0 if not present.
                     *
                     * This method works just like {@link #getYears()} except
                     * that this method works on the HOURS field.
                     *
                     * @return Hours of this <code>Duration</code>.
                     *</member>
        <member name="M:biz.ritter.javapix.xml.datatype.Duration.getMinutes">
                     * Obtains the value of the MINUTES field as an integer value,
                     * or 0 if not present.
                     *
                     * This method works just like {@link #getYears()} except
                     * that this method works on the MINUTES field.
                     *
                     * @return Minutes of this <code>Duration</code>.
                     *</member>
        <member name="M:biz.ritter.javapix.xml.datatype.Duration.getSeconds">
                     * Obtains the value of the SECONDS field as an integer value,
                     * or 0 if not present.
                     *
                     * This method works just like {@link #getYears()} except
                     * that this method works on the SECONDS field.
                     *
                     * @return seconds in the integer value. The fraction of seconds
                     *   will be discarded (for example, if the actual value is 2.5,
                     *   this method returns 2)</member>
        <member name="M:biz.ritter.javapix.xml.datatype.Duration.getTimeInMillis(biz.ritter.javapi.util.Calendar)">
                     * <p>Returns the length of the duration in milli-seconds.</p>
                     *
                     * <p>If the seconds field carries more digits than milli-second order,
                     * those will be simply discarded (or in other words, rounded to zero.)
                     * For example, for any Calendar value <code>x</code>,</p>
                     * <pre>
                     * <code>new Duration("PT10.00099S").getTimeInMills(x) == 10000</code>.
                     * <code>new Duration("-PT10.00099S").getTimeInMills(x) == -10000</code>.
                     * </pre>
                     *
                     * <p />
                     * Note that this method uses the {@link #addTo(Calendar)} method,
                     * which may work incorrectly with <code>Duration</code> objects with
                     * very large values in its fields. See the {@link #addTo(Calendar)}
                     * method for details.
                     *
                     * @param startInstant
                     *      The length of a month/year varies. The <code>startInstant</code> is
                     *      used to disambiguate this variance. Specifically, this method
                     *      returns the difference between <code>startInstant</code> and
                     *      <code>startInstant+duration</code>
                     *
                     * @return milliseconds between <code>startInstant</code> and
                     *   <code>startInstant</code> plus this <code>Duration</code>
                     *
                     * @throws NullPointerException if <code>startInstant</code> parameter
                     * is null.
                     *</member>
        <member name="M:biz.ritter.javapix.xml.datatype.Duration.getTimeInMillis(biz.ritter.javapi.util.Date)">
                     * <p>Returns the length of the duration in milli-seconds.</p>
                     *
                     * <p>If the seconds field carries more digits than milli-second order,
                     * those will be simply discarded (or in other words, rounded to zero.)
                     * For example, for any <code>Date</code> value <code>x</code>,</p>
                     * <pre>
                     * <code>new Duration("PT10.00099S").getTimeInMills(x) == 10000</code>.
                     * <code>new Duration("-PT10.00099S").getTimeInMills(x) == -10000</code>.
                     * </pre>
                     *
                     * <p />
                     * Note that this method uses the {@link #addTo(Date)} method,
                     * which may work incorrectly with <code>Duration</code> objects with
                     * very large values in its fields. See the {@link #addTo(Date)}
                     * method for details.
                     *
                     * @param startInstant
                     *      The length of a month/year varies. The <code>startInstant</code> is
                     *      used to disambiguate this variance. Specifically, this method
                     *      returns the difference between <code>startInstant</code> and
                     *      <code>startInstant+duration</code>.
                     *
                     * @throws NullPointerException
                     *      If the startInstant parameter is null.
                     *
                     * @return milliseconds between <code>startInstant</code> and
                     *   <code>startInstant</code> plus this <code>Duration</code>
                     *
                     * @see #getTimeInMillis(Calendar)</member>
        <member name="M:biz.ritter.javapix.xml.datatype.Duration.getField(biz.ritter.javapix.xml.datatype.DatatypeConstants.Field)">
                     * Gets the value of a field.
                     *
                     * Fields of a duration object may contain arbitrary large value.
                     * Therefore this method is designed to return a {@link Number} object.
                     *
                     * In case of YEARS, MONTHS, DAYS, HOURS, and MINUTES, the returned
                     * number will be a non-negative integer. In case of seconds,
                     * the returned number may be a non-negative decimal value.
                     *
                     * @param field
                     *      one of the six Field constants (YEARS,MONTHS,DAYS,HOURS,
                     *      MINUTES, or SECONDS.)
                     * @return
                     *      If the specified field is present, this method returns
                     *      a non-null non-negative {@link Number} object that
                     *      represents its value. If it is not present, return null.
                     *      For YEARS, MONTHS, DAYS, HOURS, and MINUTES, this method
                     *      returns a {@link java.math.BigInteger} object. For SECONDS, this
                     *      method returns a {@link java.math.BigDecimal}.
                     *
                     * @throws NullPointerException If the <code>field</code> is <code>null</code>.</member>
        <member name="M:biz.ritter.javapix.xml.datatype.Duration.isSet(biz.ritter.javapix.xml.datatype.DatatypeConstants.Field)">
                     * Checks if a field is set.
                     *
                     * A field of a duration object may or may not be present.
                     * This method can be used to test if a field is present.
                     *
                     * @param field
                     *      one of the six Field constants (YEARS,MONTHS,DAYS,HOURS,
                     *      MINUTES, or SECONDS.)
                     * @return
                     *      true if the field is present. false if not.
                     *
                     * @throws NullPointerException
                     *      If the field parameter is null.</member>
        <member name="M:biz.ritter.javapix.xml.datatype.Duration.add(biz.ritter.javapix.xml.datatype.Duration)">
                     * <p>Computes a new duration whose value is <code>this+rhs</code>.</p>
                     *
                     * <p>For example,</p>
                     * <pre>
                     * "1 day" + "-3 days" = "-2 days"
                     * "1 year" + "1 day" = "1 year and 1 day"
                     * "-(1 hour,50 minutes)" + "-20 minutes" = "-(1 hours,70 minutes)"
                     * "15 hours" + "-3 days" = "-(2 days,9 hours)"
                     * "1 year" + "-1 day" = IllegalStateException
                     * </pre>
                     *
                     * <p>Since there's no way to meaningfully subtract 1 day from 1 month,
                     * there are cases where the operation fails in
                     * {@link IllegalStateException}.</p>
                     *
                     * <p>
                     * Formally, the computation is defined as follows.</p>
                     * <p>
                     * Firstly, we can assume that two <code>Duration</code>s to be added
                     * are both positive without losing generality (i.e.,
                     * <code>(-X)+Y=Y-X</code>, <code>X+(-Y)=X-Y</code>,
                     * <code>(-X)+(-Y)=-(X+Y)</code>)
                     *
                     * <p />
                     * Addition of two positive <code>Duration</code>s are simply defined as
                     * field by field addition where missing fields are treated as 0.
                     * <p />
                     * A field of the resulting <code>Duration</code> will be unset if and
                     * only if respective fields of two input <code>Duration</code>s are unset.
                     * <p />
                     * Note that <code>lhs.add(rhs)</code> will be always successful if
                     * <code>lhs.signum()*rhs.signum()!=-1</code> or both of them are
                     * normalized.</p>
                     *
                     * @param rhs <code>Duration</code> to add to this <code>Duration</code>
                     *
                     * @return
                     *      non-null valid Duration object.
                     *
                     * @throws NullPointerException
                     *      If the rhs parameter is null.
                     * @throws IllegalStateException
                     *      If two durations cannot be meaningfully added. For
                     *      example, adding negative one day to one month causes
                     *      this exception.
                     *
                     *
                     * @see #subtract(Duration)</member>
        <member name="M:biz.ritter.javapix.xml.datatype.Duration.addTo(biz.ritter.javapi.util.Calendar)">
                     * Adds this duration to a {@link Calendar} object.
                     *
                     * <p>
                     * Calls {@link java.util.Calendar#add(int,int)} in the
                     * order of YEARS, MONTHS, DAYS, HOURS, MINUTES, SECONDS, and MILLISECONDS
                     * if those fields are present. Because the {@link Calendar} class
                     * uses int to hold values, there are cases where this method
                     * won't work correctly (for example if values of fields
                     * exceed the range of int.)
                     * </p>
                     *
                     * <p>
                     * Also, since this duration class is a Gregorian duration, this
                     * method will not work correctly if the given {@link Calendar}
                     * object is based on some other calendar systems.
                     * </p>
                     *
                     * <p>
                     * Any fractional parts of this <code>Duration</code> object
                     * beyond milliseconds will be simply ignored. For example, if
                     * this duration is "P1.23456S", then 1 is added to SECONDS,
                     * 234 is added to MILLISECONDS, and the rest will be unused.
                     * </p>
                     *
                     * <p />
                     * Note that because {@link Calendar#add(int, int)} is using
                     * <tt>int</tt>, <code>Duration</code> with values beyond the
                     * range of <tt>int</tt> in its fields
                     * will cause overflow/underflow to the given {@link Calendar}.
                     * {@link XMLGregorianCalendar#add(Duration)} provides the same
                     * basic operation as this method while avoiding
                     * the overflow/underflow issues.
                     *
                     * @param calendar
                     *      A calendar object whose value will be modified.
                     * @throws NullPointerException
                     *      if the calendar parameter is null.</member>
        <member name="M:biz.ritter.javapix.xml.datatype.Duration.addTo(biz.ritter.javapi.util.Date)">
                     * Adds this duration to a {@link Date} object.
                     *
                     * <p />
                     * The given date is first converted into
                     * a {@link java.util.GregorianCalendar}, then the duration
                     * is added exactly like the {@link #addTo(Calendar)} method.
                     *
                     * <p />
                     * The updated time instant is then converted back into a
                     * {@link Date} object and used to update the given {@link Date} object.
                     *
                     * <p />
                     * This somewhat redundant computation is necessary to unambiguously
                     * determine the duration of months and years.
                     *
                     * @param date
                     *      A date object whose value will be modified.
                     * @throws NullPointerException
                     *      if the date parameter is null.</member>
        <member name="M:biz.ritter.javapix.xml.datatype.Duration.subtract(biz.ritter.javapix.xml.datatype.Duration)">
                     * <p>Computes a new duration whose value is <code>this-rhs</code>.</p>
                     *
                     * <p>For example:</p>
                     * <pre>
                     * "1 day" - "-3 days" = "4 days"
                     * "1 year" - "1 day" = IllegalStateException
                     * "-(1 hour,50 minutes)" - "-20 minutes" = "-(1hours,30 minutes)"
                     * "15 hours" - "-3 days" = "3 days and 15 hours"
                     * "1 year" - "-1 day" = "1 year and 1 day"
                     * </pre>
                     *
                     * <p>Since there's no way to meaningfully subtract 1 day from 1 month,
                     * there are cases where the operation fails in {@link IllegalStateException}.</p>
                     *
                     * <p>Formally the computation is defined as follows.
                     * First, we can assume that two <code>Duration</code>s are both positive
                     * without losing generality.  (i.e.,
                     * <code>(-X)-Y=-(X+Y)</code>, <code>X-(-Y)=X+Y</code>,
                     * <code>(-X)-(-Y)=-(X-Y)</code>)</p>
                     *
                     * <p>Then two durations are subtracted field by field.
                     * If the sign of any non-zero field <tt>F</tt> is different from
                     * the sign of the most significant field,
                     * 1 (if <tt>F</tt> is negative) or -1 (otherwise)
                     * will be borrowed from the next bigger unit of <tt>F</tt>.</p>
                     *
                     * <p>This process is repeated until all the non-zero fields have
                     * the same sign.</p>
                     *
                     * <p>If a borrow occurs in the days field (in other words, if
                     * the computation needs to borrow 1 or -1 month to compensate
                     * days), then the computation fails by throwing an
                     * {@link IllegalStateException}.</p>
                     *
                     * @param rhs <code>Duration</code> to subtract from this <code>Duration</code>.
                     *
                     * @return New <code>Duration</code> created from subtracting <code>rhs</code> from this <code>Duration</code>.
                     *
                     * @throws IllegalStateException
                     *      If two durations cannot be meaningfully subtracted. For
                     *      example, subtracting one day from one month causes
                     *      this exception.
                     *
                     * @throws NullPointerException
                     *      If the rhs parameter is null.
                     *
                     * @see #add(Duration)</member>
        <member name="M:biz.ritter.javapix.xml.datatype.Duration.multiply(System.Int32)">
                     * <p>Computes a new duration whose value is <code>factor</code> times
                     * longer than the value of this duration.</p>
                     *
                     * <p>This method is provided for the convenience.
                     * It is functionally equivalent to the following code:</p>
                     * <pre>
                     * multiply(new BigDecimal(String.valueOf(factor)))
                     * </pre>
                     *
                     * @param factor Factor times longer of new <code>Duration</code> to create.
                     *
                     * @return New <code>Duration</code> that is <code>factor</code>times longer than this <code>Duration</code>.
                     *
                     * @see #multiply(BigDecimal)</member>
        <member name="M:biz.ritter.javapix.xml.datatype.Duration.multiply(biz.ritter.javapi.math.BigDecimal)">
                     * Computes a new duration whose value is <code>factor</code> times
                     * longer than the value of this duration.
                     *
                     * <p />
                     * For example,
                     * <pre>
                     * "P1M" (1 month) * "12" = "P12M" (12 months)
                     * "PT1M" (1 min) * "0.3" = "PT18S" (18 seconds)
                     * "P1M" (1 month) * "1.5" = IllegalStateException
                     * </pre>
                     *
                     * <p />
                     * Since the <code>Duration</code> class is immutable, this method
                     * doesn't change the value of this object. It simply computes
                     * a new Duration object and returns it.
                     *
                     * <p>
                     * The operation will be performed field by field with the precision
                     * of {@link BigDecimal}. Since all the fields except seconds are
                     * restricted to hold integers,
                     * any fraction produced by the computation will be
                     * carried down toward the next lower unit. For example,
                     * if you multiply "P1D" (1 day) with "0.5", then it will be 0.5 day,
                     * which will be carried down to "PT12H" (12 hours).
                     * When fractions of month cannot be meaningfully carried down
                     * to days, or year to months, this will cause an
                     * {@link IllegalStateException} to be thrown.
                     * For example if you multiple one month by 0.5.</p>
                     *
                     * <p />
                     * To avoid {@link IllegalStateException}, use
                     * the {@link #normalizeWith(Calendar)} method to remove the years
                     * and months fields.
                     *
                     * @param factor to multiply by
                     *
                     * @return
                     *      returns a non-null valid <code>Duration</code> object
                     *
                     * @throws IllegalStateException if operation produces fraction in
                     * the months field.
                     *
                     * @throws NullPointerException if the <code>factor</code> parameter is
                     * <code>null</code>.
                     *</member>
        <member name="M:biz.ritter.javapix.xml.datatype.Duration.negate">
                     * Returns a new <code>Duration</code> object whose
                     * value is <code>-this</code>.
                     *
                     * <p />
                     * Since the <code>Duration</code> class is immutable, this method
                     * doesn't change the value of this object. It simply computes
                     * a new Duration object and returns it.
                     *
                     * @return
                     *      always return a non-null valid <code>Duration</code> object.</member>
        <member name="M:biz.ritter.javapix.xml.datatype.Duration.normalizeWith(biz.ritter.javapi.util.Calendar)">
                     * <p>Converts the years and months fields into the days field
                     * by using a specific time instant as the reference point.</p>
                     *
                     * <p>For example, duration of one month normalizes to 31 days
                     * given the start time instance "July 8th 2003, 17:40:32".</p>
                     *
                     * <p>Formally, the computation is done as follows:</p>
                     * <ol>
                     *  <li>the given Calendar object is cloned</li>
                     *  <li>the years, months and days fields will be added to the {@link Calendar} object
                     *      by using the {@link Calendar#add(int,int)} method</li>
                     *  <li>the difference between the two Calendars in computed in milliseconds and converted to days,
                     *     if a remainder occurs due to Daylight Savings Time, it is discarded</li>
                     *  <li>the computed days, along with the hours, minutes and seconds
                     *      fields of this duration object is used to construct a new
                     *      Duration object.</li>
                     * </ol>
                     *
                     * <p>Note that since the Calendar class uses <code>int</code> to
                     * hold the value of year and month, this method may produce
                     * an unexpected result if this duration object holds
                     * a very large value in the years or months fields.</p>
                     *
                     * @param startTimeInstant <code>Calendar</code> reference point.
                     *
                     * @return <code>Duration</code> of years and months of this <code>Duration</code> as days.
                     *
                     * @throws NullPointerException If the startTimeInstant parameter is null.</member>
        <member name="M:biz.ritter.javapix.xml.datatype.Duration.compare(biz.ritter.javapix.xml.datatype.Duration)">
                     * <p>Partial order relation comparison with this <code>Duration</code> instance.</p>
                     *
                     * <p>Comparison result must be in accordance with
                     * <a href="http://www.w3.org/TR/xmlschema-2/#duration-order">W3C XML Schema 1.0 Part 2, Section 3.2.7.6.2,
                     * <i>Order relation on duration</i></a>.</p>
                     *
                     * <p>Return:</p>
                     * <ul>
                     *   <li>{@link DatatypeConstants#LESSER} if this <code>Duration</code> is shorter than <code>duration</code> parameter</li>
                     *   <li>{@link DatatypeConstants#EQUAL} if this <code>Duration</code> is equal to <code>duration</code> parameter</li>
                     *   <li>{@link DatatypeConstants#GREATER} if this <code>Duration</code> is longer than <code>duration</code> parameter</li>
                     *   <li>{@link DatatypeConstants#INDETERMINATE} if a conclusive partial order relation cannot be determined</li>
                     * </ul>
                     *
                     * @param duration to compare
                     *
                     * @return the relationship between <code>this</code><code>Duration</code>and <code>duration</code> parameter as
                     *   {@link DatatypeConstants#LESSER}, {@link DatatypeConstants#EQUAL}, {@link DatatypeConstants#GREATER}
                     *   or {@link DatatypeConstants#INDETERMINATE}.
                     *
                     * @throws UnsupportedOperationException If the underlying implementation
                     *   cannot reasonably process the request, e.g. W3C XML Schema allows for
                     *   arbitrarily large/small/precise values, the request may be beyond the
                     *   implementations capability.
                     * @throws NullPointerException if <code>duration</code> is <code>null</code>.
                     *
                     * @see #isShorterThan(Duration)
                     * @see #isLongerThan(Duration)</member>
        <member name="M:biz.ritter.javapix.xml.datatype.Duration.isLongerThan(biz.ritter.javapix.xml.datatype.Duration)">
                     * <p>Checks if this duration object is strictly longer than
                     * another <code>Duration</code> object.</p>
                     *
                     * <p>Duration X is "longer" than Y if and only if X&gt;Y
                     * as defined in the section 3.2.6.2 of the XML Schema 1.0
                     * specification.</p>
                     *
                     * <p>For example, "P1D" (one day) &gt; "PT12H" (12 hours) and
                     * "P2Y" (two years) &gt; "P23M" (23 months).</p>
                     *
                     * @param duration <code>Duration</code> to test this <code>Duration</code> against.
                     *
                     * @throws UnsupportedOperationException If the underlying implementation
                     *   cannot reasonably process the request, e.g. W3C XML Schema allows for
                     *   arbitrarily large/small/precise values, the request may be beyond the
                     *   implementations capability.
                     * @throws NullPointerException If <code>duration</code> is null.
                     *
                     * @return
                     *      true if the duration represented by this object
                     *      is longer than the given duration. false otherwise.
                     *
                     * @see #isShorterThan(Duration)
                     * @see #compare(Duration duration)</member>
        <member name="M:biz.ritter.javapix.xml.datatype.Duration.isShorterThan(biz.ritter.javapix.xml.datatype.Duration)">
                     * <p>Checks if this duration object is strictly shorter than
                     * another <code>Duration</code> object.</p>
                     *
                     * @param duration <code>Duration</code> to test this <code>Duration</code> against.
                     *
                     * @return <code>true</code> if <code>duration</code> parameter is shorter than this <code>Duration</code>,
                     *   else <code>false</code>.
                     *
                     * @throws UnsupportedOperationException If the underlying implementation
                     *   cannot reasonably process the request, e.g. W3C XML Schema allows for
                     *   arbitrarily large/small/precise values, the request may be beyond the
                     *   implementations capability.
                     * @throws NullPointerException if <code>duration</code> is null.
                     *
                     * @see #isLongerThan(Duration duration)
                     * @see #compare(Duration duration)</member>
        <member name="M:biz.ritter.javapix.xml.datatype.Duration.Equals(System.Object)">
                     * <p>Checks if this duration object has the same duration
                     * as another <code>Duration</code> object.</p>
                     *
                     * <p>For example, "P1D" (1 day) is equal to "PT24H" (24 hours).</p>
                     *
                     * <p>Duration X is equal to Y if and only if time instant
                     * t+X and t+Y are the same for all the test time instants
                     * specified in the section 3.2.6.2 of the XML Schema 1.0
                     * specification.</p>
                     *
                     * <p>Note that there are cases where two <code>Duration</code>s are
                     * "incomparable" to each other, like one month and 30 days.
                     * For example,</p>
                     * <pre>
                     * !new Duration("P1M").isShorterThan(new Duration("P30D"))
                     * !new Duration("P1M").isLongerThan(new Duration("P30D"))
                     * !new Duration("P1M").equals(new Duration("P30D"))
                     * </pre>
                     *
                     * @param duration
                     *      A non-null valid <code>Duration</code> object.
                     *
                     * @return
                     *      <code>true</code> if this duration is the same length as
                     *         <code>duration</code>.
                     *      <code>false</code> if <code>duration</code> is not a
                     *         <code>Duration</code> object
                     *         or its length is different from this duration.
                     *
                     * @throws UnsupportedOperationException If the underlying implementation
                     *   cannot reasonably process the request, e.g. W3C XML Schema allows for
                     *   arbitrarily large/small/precise values, the request may be beyond the
                     *   implementations capability.
                     * @throws NullPointerException if parameter is null.
                     *
                     * @see #compare(Duration duration)</member>
        <member name="M:biz.ritter.javapix.xml.datatype.Duration.ToString">
                     * <p>Returns a <code>String</code> representation of this <code>Duration</code><code>Object</code>.</p>
                     *
                     * <p>The result is formatted according to the XML Schema 1.0 spec and can be always parsed back later into the
                     * equivalent <code>Duration</code><code>Object</code> by {@link DatatypeFactory#newDuration(String  lexicalRepresentation)}.</p>
                     *
                     * <p>Formally, the following holds for any <code>Duration</code>
                     * <code>Object</code> x:</p>
                     * <pre>
                     * new Duration(x.toString()).equals(x)
                     * </pre>
                     *
                     * @return A non-<code>null</code> valid <code>String</code> representation of this <code>Duration</code>.</member>
        <member name="M:biz.ritter.javapix.xml.datatype.Duration.toString(biz.ritter.javapi.math.BigDecimal)">
                     * <p>Turns {@link BigDecimal} to a string representation.</p>
                     *
                     * <p>Due to a behavior change in the {@link BigDecimal#toString()}
                     * method in JDK1.5, this had to be implemented here.</p>
                     *
                     * @param bd <code>BigDecimal</code> to format as a <code>String</code>
                     *
                     * @return  <code>String</code> representation of <code>BigDecimal</code></member>
        <member name="M:biz.ritter.javapix.xml.datatype.Duration.getCalendarTimeInMillis(biz.ritter.javapi.util.Calendar)">
                     * <p>Calls the {@link Calendar#getTimeInMillis} method.
                     * Prior to JDK1.4, this method was protected and therefore
                     * cannot be invoked directly.</p>
                     *
                     * <p>TODO: In future, this should be replaced by <code>cal.getTimeInMillis()</code>.</p>
                     *
                     * @param cal <code>Calendar</code> to get time in milliseconds.
                     *
                     * @return Milliseconds of <code>cal</code>.</member>
        <member name="T:biz.ritter.javapix.xml.datatype.XMLGregorianCalendar">
                 * <p>Representation for W3C XML Schema 1.0 date/time datatypes.
                 * Specifically, these date/time datatypes are
                 * <a href="#DATETIME"><code>dateTime</code></a>,
                 * <a href="#TIME"><code>time</code></a>,
                 * <a href="#DATE"><code>date</code></a>,
                 * <a href="#GYEARMONTH"><code>gYearMonth</code></a>,
                 * <a href="#GMONTHDAY"><code>gMonthDay</code></a>,
                 * <a href="#GYEAR"><code>gYear</code></a>
                 * <a href="#GMONTH"><code>gMonth</code></a> and
                 * <a href="#GDAY"><code>gDay</code></a> defined in the XML Namespace
                 * <code>"http://www.w3.org/2001/XMLSchema"</code>.
                 * These datatypes are normatively defined in
                 * <a href="http://www.w3.org/TR/xmlschema-2/#dateTime">W3C XML Schema 1.0 Part 2, Section 3.2.7-14</a>.</p>
                 *
                 * <p>The table below defines the mapping between XML Schema 1.0
                 * date/time datatype fields and this class' fields. It also summarizes
                 * the value constraints for the date and time fields defined in
                 * <a href="http://www.w3.org/TR/xmlschema-2/#isoformats">W3C XML Schema 1.0 Part 2, Appendix D,
                 * <i>ISO 8601 Date and Time Formats</i></a>.</p>
                 *
                 * <a name="datetimefieldsmapping" />
                 * <table border="2" rules="all" cellpadding="2">
                 *   <thead>
                 *     <tr>
                 *       <th align="center" colspan="3">
                 *         Date/Time Datatype Field Mapping Between XML Schema 1.0 and Java Representation
                 *       </th>
                 *     </tr>
                 *   </thead>
                 *   <tbody>
                 *     <tr>
                 *       <th>XML Schema 1.0<br />
                 *           datatype<br />
                 *            field</th>
                 *       <th>Related<br />XMLGregorianCalendar<br />Accessor(s)</th>
                 *       <th>Value Range</th>
                 *     </tr>
                 *     <a name="datetimefield-year" />
                 *     <tr>
                 *       <td> year </td>
                 *       <td> {@link #getYear()} + {@link #getEon()} or<br />
                 *            {@link #getEonAndYear}
                 *       </td>
                 *       <td><code>getYear()</code> is a value between -(10^9-1) to (10^9)-1
                 *            or {@link DatatypeConstants#FIELD_UNDEFINED}.<br />
                 *            {@link #getEon()} is high order year value in billion of years.<br />
                 *            <code>getEon()</code> has values greater than or equal to (10^9) or less than or equal to -(10^9).
                 *            A value of null indicates field is undefined.<br />
                 *            Given that <a href="http://www.w3.org/2001/05/xmlschema-errata#e2-63">XML Schema 1.0 errata</a> states that the year zero
                 *            will be a valid lexical value in a future version of XML Schema,
                 *            this class allows the year field to be set to zero. Otherwise,
                 *            the year field value is handled exactly as described
                 *            in the errata and [ISO-8601-1988]. Note that W3C XML Schema 1.0
                 *            validation does not allow for the year field to have a value of zero.
                 *            </td>
                 *     </tr>
                 *     <a name="datetimefield-month" />
                 *     <tr>
                 *       <td> month </td>
                 *       <td> {@link #getMonth()} </td>
                 *       <td> 1 to 12 or {@link DatatypeConstants#FIELD_UNDEFINED} </td>
                 *     </tr>
                 *     <a name="datetimefield-day" />
                 *     <tr>
                 *       <td> day </td>
                 *       <td> {@link #getDay()} </td>
                 *       <td> Independent of month, max range is 1 to 31 or {@link DatatypeConstants#FIELD_UNDEFINED}.<br />
                 *            The normative value constraint stated relative to month
                 *            field's value is in <a href="http://www.w3.org/TR/xmlschema-2/#isoformats">W3C XML Schema 1.0 Part 2, Appendix D</a>.
                 *       </td>
                 *     </tr>
                 *     <tr id="datetimefield-hour">
                 *       <td>hour</td>
                 *       <td>{@link #getHour()}</td>
                 *       <td>
                 *         0 to 24 or {@link DatatypeConstants#FIELD_UNDEFINED}.
                 *         For a value of 24, the minute and second field must be zero per
                 *         <a href="http://www.w3.org/2001/05/xmlschema-errata#e2-45">XML Schema Errata</a>.
                 *       </td>
                 *     </tr>
                 *     <a name="datetimefield-minute" />
                 *     <tr>
                 *       <td> minute </td>
                 *       <td> {@link #getMinute()} </td>
                 *       <td> 0 to 59 or {@link DatatypeConstants#FIELD_UNDEFINED} </td>
                 *     </tr>
                 *     <a name="datetimefield-second" />
                 *     <tr>
                 *       <td>second</td>
                 *       <td>
                 *         {@link #getSecond()} + {@link #getMillisecond()}/1000 or<br />
                 *         {@link #getSecond()} + {@link #getFractionalSecond()}
                 *       </td>
                 *       <td>
                 *         {@link #getSecond()} from 0 to 60 or {@link DatatypeConstants#FIELD_UNDEFINED}.<br />
                 *         <i>(Note: 60 only allowable for leap second.)</i><br />
                 *         {@link #getFractionalSecond()} allows for infinite precision over the range from 0.0 to 1.0 when
                 *         the {@link #getSecond()} is defined.<br />
                 *         <code>FractionalSecond</code> is optional and has a value of <code>null</code> when it is undefined.<br />
                 *            {@link #getMillisecond()} is the convenience
                 *            millisecond precision of value of {@link #getFractionalSecond()}.
                 *       </td>
                 *     </tr>
                 *     <tr id="datetimefield-timezone">
                 *       <td> timezone </td>
                 *       <td> {@link #getTimezone()} </td>
                 *       <td> Number of minutes or {@link DatatypeConstants#FIELD_UNDEFINED}.
                 *         Value range from -14 hours (-14 * 60 minutes) to 14 hours (14 * 60 minutes).
                 *       </td>
                 *     </tr>
                 *   </tbody>
                 *  </table>
                 *
                 * <p>All maximum value space constraints listed for the fields in the table
                 * above are checked by factory methods, @{link DatatypeFactory},
                 * setter methods and parse methods of
                 * this class. <code>IllegalArgumentException</code> is thrown when a
                 * parameter's value is outside the value constraint for the field or
                 * if the composite
                 * values constitute an invalid XMLGregorianCalendar instance (for example, if
                 * the 31st of June is specified).
                 * </p>
                 *
                 * <p>The following operations are defined for this class:
                 * <ul>
                 *   <li>accessors/mutators for independent date/time fields</li>
                 *   <li>conversion between this class and W3C XML Schema 1.0 lexical representation,
                 *     {@link #toString()}, {@link DatatypeFactory#newXMLGregorianCalendar(String lexicalRepresentation)}</li>
                 *   <li>conversion between this class and {@link GregorianCalendar},
                 *     {@link #toGregorianCalendar(java.util.TimeZone timezone, java.util.Locale aLocale, XMLGregorianCalendar defaults)},
                 *     {@link DatatypeFactory}</li>
                 *   <li>partial order relation comparator method, {@link #compare(XMLGregorianCalendar xmlGregorianCalendar)}</li>
                 *   <li>{@link #equals(Object)} defined relative to {@link #compare(XMLGregorianCalendar xmlGregorianCalendar)}.</li>
                 *   <li>addition operation with {@link Duration}
                 *      instance as defined in <a href="http://www.w3.org/TR/xmlschema-2/#adding-durations-to-dateTimes">
                 *      W3C XML Schema 1.0 Part 2, Appendix E, <i>Adding durations to dateTimes</i></a>.
                 *   </li>
                 * </ul>
                 * </p>
                 *
                 * @author <a href="mailto:Joseph.Fialli@Sun.com">Joseph Fialli</a>
                 * @author <a href="mailto:Kohsuke.Kawaguchi@Sun.com">Kohsuke Kawaguchi</a>
                 * @author <a href="mailto:Jeff.Suttor@Sun.com">Jeff Suttor</a>
                 * @version $Revision: 446598 $, $Date: 2006-09-15 08:55:40 -0400 (Fri, 15 Sep 2006) $
                 * @see Duration
                 * @see DatatypeFactory
                 * @since 1.5</member>
        <member name="M:biz.ritter.javapix.xml.datatype.XMLGregorianCalendar.clear">
                     * <p>Unset all fields to undefined.</p>
                     *
                     * <p>Set all int fields to {@link DatatypeConstants#FIELD_UNDEFINED} and reference fields
                     * to null.</p></member>
        <member name="M:biz.ritter.javapix.xml.datatype.XMLGregorianCalendar.reset">
                     * <p>Reset this <code>XMLGregorianCalendar</code> to its original values.</p>
                     *
                     * <p><code>XMLGregorianCalendar</code> is reset to the same values as when it was created with
                     * {@link DatatypeFactory#newXMLGregorianCalendar()},
                     * {@link DatatypeFactory#newXMLGregorianCalendar(String lexicalRepresentation)},
                     * {@link DatatypeFactory#newXMLGregorianCalendar(
                     *   BigInteger year,
                     *   int month,
                     *   int day,
                     *   int hour,
                     *   int minute,
                     *   int second,
                     *   BigDecimal fractionalSecond,
                     *   int timezone)},
                     * {@link DatatypeFactory#newXMLGregorianCalendar(
                     *   int year,
                     *   int month,
                     *   int day,
                     *   int hour,
                     *   int minute,
                     *   int second,
                     *   int millisecond,
                     *   int timezone)},
                     * {@link DatatypeFactory#newXMLGregorianCalendar(GregorianCalendar cal)},
                     * {@link DatatypeFactory#newXMLGregorianCalendarDate(
                     *   int year,
                     *   int month,
                     *   int day,
                     *   int timezone)},
                     * {@link DatatypeFactory#newXMLGregorianCalendarTime(
                     *   int hours,
                     *   int minutes,
                     *   int seconds,
                     *   int timezone)},
                     * {@link DatatypeFactory#newXMLGregorianCalendarTime(
                     *   int hours,
                     *   int minutes,
                     *   int seconds,
                     *   BigDecimal fractionalSecond,
                     *   int timezone)} or
                     * {@link DatatypeFactory#newXMLGregorianCalendarTime(
                     *   int hours,
                     *   int minutes,
                     *   int seconds,
                     *   int milliseconds,
                     *   int timezone)}.
                     * </p>
                     *
                     * <p><code>reset()</code> is designed to allow the reuse of existing <code>XMLGregorianCalendar</code>s
                     * thus saving resources associated with the creation of new <code>XMLGregorianCalendar</code>s.</p></member>
        <member name="M:biz.ritter.javapix.xml.datatype.XMLGregorianCalendar.setYear(biz.ritter.javapi.math.BigInteger)">
                     * <p>Set low and high order component of XSD <code>dateTime</code> year field.</p>
                     *
                     * <p>Unset this field by invoking the setter with a parameter value of <code>null</code>.</p>
                     *
                     * @param year value constraints summarized in <a href="#datetimefield-year">year field of date/time field mapping table</a>.
                     *
                     * @throws IllegalArgumentException if <code>year</code> parameter is
                     * outside value constraints for the field as specified in
                     * <a href="#datetimefieldmapping">date/time field mapping table</a>.</member>
        <member name="M:biz.ritter.javapix.xml.datatype.XMLGregorianCalendar.setYear(System.Int32)">
                     * <p>Set year of XSD <code>dateTime</code> year field.</p>
                     *
                     * <p>Unset this field by invoking the setter with a parameter value of
                     * {@link DatatypeConstants#FIELD_UNDEFINED}.</p>
                     *
                     * <p>Note: if the absolute value of the <code>year</code> parameter
                     * is less than 10^9, the eon component of the XSD year field is set to
                     * <code>null</code> by this method.</p>
                     *
                     * @param year value constraints are summarized in <a href="#datetimefield-year">year field of date/time field mapping table</a>.
                     *   If year is {@link DatatypeConstants#FIELD_UNDEFINED}, then eon is set to <code>null</code>.</member>
        <member name="M:biz.ritter.javapix.xml.datatype.XMLGregorianCalendar.setMonth(System.Int32)">
                     * <p>Set month.</p>
                     *
                     * <p>Unset this field by invoking the setter with a parameter value of {@link DatatypeConstants#FIELD_UNDEFINED}.</p>
                     *
                     * @param month value constraints summarized in <a href="#datetimefield-month">month field of date/time field mapping table</a>.
                     *
                     * @throws IllegalArgumentException if <code>month</code> parameter is
                     * outside value constraints for the field as specified in
                     * <a href="#datetimefieldmapping">date/time field mapping table</a>.</member>
        <member name="M:biz.ritter.javapix.xml.datatype.XMLGregorianCalendar.setDay(System.Int32)">
                     * <p>Set days in month.</p>
                     *
                     * <p>Unset this field by invoking the setter with a parameter value of {@link DatatypeConstants#FIELD_UNDEFINED}.</p>
                     *
                     * @param day value constraints summarized in <a href="#datetimefield-day">day field of date/time field mapping table</a>.
                     *
                     * @throws IllegalArgumentException if <code>day</code> parameter is
                     * outside value constraints for the field as specified in
                     * <a href="#datetimefieldmapping">date/time field mapping table</a>.</member>
        <member name="M:biz.ritter.javapix.xml.datatype.XMLGregorianCalendar.setTimezone(System.Int32)">
                     * <p>Set the number of minutes in the timezone offset.</p>
                     *
                     * <p>Unset this field by invoking the setter with a parameter value of {@link DatatypeConstants#FIELD_UNDEFINED}.</p>
                     *
                     * @param offset value constraints summarized in <a href="#datetimefield-timezone">
                     *   timezone field of date/time field mapping table</a>.
                     *
                     * @throws IllegalArgumentException if <code>offset</code> parameter is
                     * outside value constraints for the field as specified in
                     * <a href="#datetimefieldmapping">date/time field mapping table</a>.</member>
        <member name="M:biz.ritter.javapix.xml.datatype.XMLGregorianCalendar.setTime(System.Int32,System.Int32,System.Int32)">
                     * <p>Set time as one unit.</p>
                     *
                     * @param hour value constraints are summarized in
                     * <a href="#datetimefield-hour">hour field of date/time field mapping table</a>.
                     * @param minute value constraints are summarized in
                     * <a href="#datetimefield-minute">minute field of date/time field mapping table</a>.
                     * @param second value constraints are summarized in
                     * <a href="#datetimefield-second">second field of date/time field mapping table</a>.
                     *
                     * @see #setTime(int, int, int, BigDecimal)
                     *
                     * @throws IllegalArgumentException if any parameter is
                     * outside value constraints for the field as specified in
                     * <a href="#datetimefieldmapping">date/time field mapping table</a>.</member>
        <member name="M:biz.ritter.javapix.xml.datatype.XMLGregorianCalendar.setHour(System.Int32)">
                     * <p>Set hours.</p>
                     *
                     * <p>Unset this field by invoking the setter with a parameter value of {@link DatatypeConstants#FIELD_UNDEFINED}.</p>
                     *
                     * @param hour value constraints summarized in <a href="#datetimefield-hour">hour field of date/time field mapping table</a>.
                     *
                     * @throws IllegalArgumentException if <code>hour</code> parameter is outside value constraints for the field as specified in
                     *   <a href="#datetimefieldmapping">date/time field mapping table</a>.</member>
        <member name="M:biz.ritter.javapix.xml.datatype.XMLGregorianCalendar.setMinute(System.Int32)">
                     * <p>Set minutes.</p>
                     *
                     * <p>Unset this field by invoking the setter with a parameter value of {@link DatatypeConstants#FIELD_UNDEFINED}.</p>
                     *
                     * @param minute value constraints summarized in <a href="#datetimefield-minute">minute field of date/time field mapping table</a>.
                     *
                     * @throws IllegalArgumentException if <code>minute</code> parameter is outside value constraints for the field as specified in
                     *   <a href="#datetimefieldmapping">date/time field mapping table</a>.</member>
        <member name="M:biz.ritter.javapix.xml.datatype.XMLGregorianCalendar.setSecond(System.Int32)">
                     * <p>Set seconds.</p>
                     *
                     * <p>Unset this field by invoking the setter with a parameter value of {@link DatatypeConstants#FIELD_UNDEFINED}.</p>
                     *
                     * @param second value constraints summarized in <a href="#datetimefield-second">second field of date/time field mapping table</a>.
                     *
                     * @throws IllegalArgumentException if <code>second</code> parameter is outside value constraints for the field as specified in
                     *   <a href="#datetimefieldmapping">date/time field mapping table</a>.</member>
        <member name="M:biz.ritter.javapix.xml.datatype.XMLGregorianCalendar.setMillisecond(System.Int32)">
                     * <p>Set milliseconds.</p>
                     *
                     * <p>Unset this field by invoking the setter with a parameter value of {@link DatatypeConstants#FIELD_UNDEFINED}.</p>
                     *
                     * @param millisecond value constraints summarized in
                     *   <a href="#datetimefield-millisecond">millisecond field of date/time field mapping table</a>.
                     *
                     * @throws IllegalArgumentException if <code>millisecond</code> parameter is outside value constraints for the field as specified
                     *   in <a href="#datetimefieldmapping">date/time field mapping table</a>.</member>
        <member name="M:biz.ritter.javapix.xml.datatype.XMLGregorianCalendar.setFractionalSecond(biz.ritter.javapi.math.BigDecimal)">
                     * <p>Set fractional seconds.</p>
                     *
                     * <p>Unset this field by invoking the setter with a parameter value of <code>null</code>.</p>
                     *
                     * @param fractional value constraints summarized in
                     *   <a href="#datetimefield-fractional">fractional field of date/time field mapping table</a>.
                     *
                     * @throws IllegalArgumentException if <code>fractional</code> parameter is outside value constraints for the field as specified
                     *   in <a href="#datetimefieldmapping">date/time field mapping table</a>.</member>
        <member name="M:biz.ritter.javapix.xml.datatype.XMLGregorianCalendar.setTime(System.Int32,System.Int32,System.Int32,biz.ritter.javapi.math.BigDecimal)">
                     * <p>Set time as one unit, including the optional infinite precision
                     * fractional seconds.</p>
                     *
                     * @param hour value constraints are summarized in
                     * <a href="#datetimefield-hour">hour field of date/time field mapping table</a>.
                     * @param minute value constraints are summarized in
                     * <a href="#datetimefield-minute">minute field of date/time field mapping table</a>.
                     * @param second value constraints are summarized in
                     * <a href="#datetimefield-second">second field of date/time field mapping table</a>.
                     * @param fractional value of <code>null</code> indicates this optional
                     *   field is not set.
                     *
                     * @throws IllegalArgumentException if any parameter is
                     * outside value constraints for the field as specified in
                     * <a href="#datetimefieldmapping">date/time field mapping table</a>.</member>
        <member name="M:biz.ritter.javapix.xml.datatype.XMLGregorianCalendar.setTime(System.Int32,System.Int32,System.Int32,System.Int32)">
                     * <p>Set time as one unit, including optional milliseconds.</p>
                     *
                     * @param hour value constraints are summarized in
                     * <a href="#datetimefield-hour">hour field of date/time field mapping table</a>.
                     * @param minute value constraints are summarized in
                     * <a href="#datetimefield-minute">minute field of date/time field mapping table</a>.
                     * @param second value constraints are summarized in
                     * <a href="#datetimefield-second">second field of date/time field mapping table</a>.
                     * @param millisecond value of {@link DatatypeConstants#FIELD_UNDEFINED} indicates this
                     *                    optional field is not set.
                     *
                     * @throws IllegalArgumentException if any parameter is
                     * outside value constraints for the field as specified in
                     * <a href="#datetimefieldmapping">date/time field mapping table</a>.</member>
        <member name="M:biz.ritter.javapix.xml.datatype.XMLGregorianCalendar.getEon">
                     * <p>Return high order component for XML Schema 1.0 dateTime datatype field for
                     * <code>year</code>.
                     * <code>null</code> if this optional part of the year field is not defined.</p>
                     *
                     * <p>Value constraints for this value are summarized in
                     * <a href="#datetimefield-year">year field of date/time field mapping table</a>.</p>
                     * @return eon of this <code>XMLGregorianCalendar</code>. The value
                     * returned is an integer multiple of 10^9.
                     *
                     * @see #getYear()
                     * @see #getEonAndYear()</member>
        <member name="M:biz.ritter.javapix.xml.datatype.XMLGregorianCalendar.getYear">
                     * <p>Return low order component for XML Schema 1.0 dateTime datatype field for
                     * <code>year</code> or {@link DatatypeConstants#FIELD_UNDEFINED}.</p>
                     *
                     * <p>Value constraints for this value are summarized in
                     * <a href="#datetimefield-year">year field of date/time field mapping table</a>.</p>
                     *
                     * @return year  of this <code>XMLGregorianCalendar</code>.
                     *
                     * @see #getEon()
                     * @see #getEonAndYear()</member>
        <member name="M:biz.ritter.javapix.xml.datatype.XMLGregorianCalendar.getEonAndYear">
                     * <p>Return XML Schema 1.0 dateTime datatype field for
                     * <code>year</code>.</p>
                     *
                     * <p>Value constraints for this value are summarized in
                     * <a href="#datetimefield-year">year field of date/time field mapping table</a>.</p>
                     *
                     * @return sum of <code>eon</code> and <code>BigInteger.valueOf(year)</code>
                     * when both fields are defined. When only <code>year</code> is defined,
                     * return it. When both <code>eon</code> and <code>year</code> are not
                     * defined, return <code>null</code>.
                     *
                     * @see #getEon()
                     * @see #getYear()</member>
        <member name="M:biz.ritter.javapix.xml.datatype.XMLGregorianCalendar.getMonth">
                     * <p>Return number of month or {@link DatatypeConstants#FIELD_UNDEFINED}.</p>
                     *
                     * <p>Value constraints for this value are summarized in
                     * <a href="#datetimefield-month">month field of date/time field mapping table</a>.</p>
                     *
                     * @return year  of this <code>XMLGregorianCalendar</code>.
                     *</member>
        <member name="M:biz.ritter.javapix.xml.datatype.XMLGregorianCalendar.getDay">
                     * Return day in month or {@link DatatypeConstants#FIELD_UNDEFINED}.<p />
                     *
                     * <p>Value constraints for this value are summarized in
                     * <a href="#datetimefield-day">day field of date/time field mapping table</a>.</p>
                     *
                     * @see #setDay(int)</member>
        <member name="M:biz.ritter.javapix.xml.datatype.XMLGregorianCalendar.getTimezone">
                     * Return timezone offset in minutes or
                     * {@link DatatypeConstants#FIELD_UNDEFINED} if this optional field is not defined.
                     *
                     * <p>Value constraints for this value are summarized in
                     * <a href="#datetimefield-timezone">timezone field of date/time field mapping table</a>.</p>
                     *
                     * @see #setTimezone(int)</member>
        <member name="M:biz.ritter.javapix.xml.datatype.XMLGregorianCalendar.getHour">
                     * Return hours or {@link DatatypeConstants#FIELD_UNDEFINED}.
                     * Returns {@link DatatypeConstants#FIELD_UNDEFINED} if this field is not defined.
                     *
                     * <p>Value constraints for this value are summarized in
                     * <a href="#datetimefield-hour">hour field of date/time field mapping table</a>.</p>
                     * @see #setTime(int, int, int)</member>
        <member name="M:biz.ritter.javapix.xml.datatype.XMLGregorianCalendar.getMinute">
                     * Return minutes or {@link DatatypeConstants#FIELD_UNDEFINED}.<p />
                     * Returns {@link DatatypeConstants#FIELD_UNDEFINED} if this field is not defined.
                     *
                     * <p>Value constraints for this value are summarized in
                     * <a href="#datetimefield-minute">minute field of date/time field mapping table</a>.</p>
                     * @see #setTime(int, int, int)</member>
        <member name="M:biz.ritter.javapix.xml.datatype.XMLGregorianCalendar.getSecond">
                     * <p>Return seconds or {@link DatatypeConstants#FIELD_UNDEFINED}.</p>
                     *
                     * <p>Returns {@link DatatypeConstants#FIELD_UNDEFINED} if this field is not defined.
                     * When this field is not defined, the optional xs:dateTime
                     * fractional seconds field, represented by
                     * {@link #getFractionalSecond()} and {@link #getMillisecond()},
                     * must not be defined.</p>
                     *
                     * <p>Value constraints for this value are summarized in
                     * <a href="#datetimefield-second">second field of date/time field mapping table</a>.</p>
                     *
                     * @return Second  of this <code>XMLGregorianCalendar</code>.
                     *
                     * @see #getFractionalSecond()
                     * @see #getMillisecond()
                     * @see #setTime(int, int, int)</member>
        <member name="M:biz.ritter.javapix.xml.datatype.XMLGregorianCalendar.getMillisecond">
                     * <p>Return millisecond precision of {@link #getFractionalSecond()}.</p>
                     *
                     * <p>This method represents a convenience accessor to infinite
                     * precision fractional second value returned by
                     * {@link #getFractionalSecond()}. The returned value is the rounded
                     * down to milliseconds value of
                     * {@link #getFractionalSecond()}. When {@link #getFractionalSecond()}
                     * returns <code>null</code>, this method must return
                     * {@link DatatypeConstants#FIELD_UNDEFINED}.</p>
                     *
                     * <p>Value constraints for this value are summarized in
                     * <a href="#datetimefield-second">second field of date/time field mapping table</a>.</p>
                     *
                     * @return Millisecond  of this <code>XMLGregorianCalendar</code>.
                     *
                     * @see #getFractionalSecond()
                     * @see #setTime(int, int, int)</member>
        <member name="M:biz.ritter.javapix.xml.datatype.XMLGregorianCalendar.getFractionalSecond">
                     * <p>Return fractional seconds.</p>
                     *
                     * <p><code>null</code> is returned when this optional field is not defined.</p>
                     *
                     * <p>Value constraints are detailed in
                     * <a href="#datetimefield-second">second field of date/time field mapping table</a>.</p>
                     *
                     * <p>This optional field can only have a defined value when the
                     * xs:dateTime second field, represented by {@link #getSecond()},
                     * does not return {@link DatatypeConstants#FIELD_UNDEFINED}.</p>
                     *
                     * @return fractional seconds  of this <code>XMLGregorianCalendar</code>.
                     *
                     * @see #getSecond()
                     * @see #setTime(int, int, int, BigDecimal)</member>
        <member name="M:biz.ritter.javapix.xml.datatype.XMLGregorianCalendar.compare(biz.ritter.javapix.xml.datatype.XMLGregorianCalendar)">
                     * <p>Compare two instances of W3C XML Schema 1.0 date/time datatypes
                     * according to partial order relation defined in
                     * <a href="http://www.w3.org/TR/xmlschema-2/#dateTime-order">W3C XML Schema 1.0 Part 2, Section 3.2.7.3,
                     * <i>Order relation on dateTime</i></a>.</p>
                     *
                     * <p><code>xsd:dateTime</code> datatype field mapping to accessors of
                     * this class are defined in
                     * <a href="#datetimefieldmapping">date/time field mapping table</a>.</p>
                     *
                     * @param xmlGregorianCalendar Instance of <code>XMLGregorianCalendar</code> to compare
                     *
                     * @return The relationship between <code>this</code><code>XMLGregorianCalendar</code> and
                     *   the specified <code>xmlGregorianCalendar</code> as
                     *   {@link DatatypeConstants#LESSER},
                     *   {@link DatatypeConstants#EQUAL},
                     *   {@link DatatypeConstants#GREATER} or
                     *   {@link DatatypeConstants#INDETERMINATE}.
                     *
                     * @throws NullPointerException if <code>xmlGregorianCalendar</code> is null.</member>
        <member name="M:biz.ritter.javapix.xml.datatype.XMLGregorianCalendar.normalize">
                     * <p>Normalize this instance to UTC.</p>
                     *
                     * <p>2000-03-04T23:00:00+03:00 normalizes to 2000-03-04T20:00:00Z</p>
                     * <p>Implements W3C XML Schema Part 2, Section 3.2.7.3 (A).</p>
                     *
                     * @return <code>this</code><code>XMLGregorianCalendar</code> normalized to UTC.</member>
        <member name="M:biz.ritter.javapix.xml.datatype.XMLGregorianCalendar.Equals(System.Object)">
                     * <p>Indicates whether parameter <code>obj</code> is "equal to" this one.</p>
                     *
                     * @param obj to compare.
                     *
                     * @return <code>true</code> when <code>obj</code> is an instance of <code>XMLGregorianCalendar</code>
                     *   and  {@link #compare(XMLGregorianCalendar obj)} returns {@link DatatypeConstants#EQUAL}, otherwise <code>false</code>.
                     *
                     * @throws NullPointerException If <code>obj</code> is <code>null</code>.</member>
        <member name="M:biz.ritter.javapix.xml.datatype.XMLGregorianCalendar.GetHashCode">
                     * <p>Returns a hash code consistent with the definition of the equals method.</p>
                     *
                     * @return hash code of this object.</member>
        <member name="M:biz.ritter.javapix.xml.datatype.XMLGregorianCalendar.toXMLFormat">
                     * <p>Return the lexical representation of <code>this</code> instance.
                     * The format is specified in
                     * <a href="http://www.w3.org/TR/xmlschema-2/#dateTime-order">XML Schema 1.0 Part 2, Section 3.2.[7-14].1,
                     * <i>Lexical Representation</i>".</a></p>
                     *
                     * <p>Specific target lexical representation format is determined by
                     * {@link #getXMLSchemaType()}.</p>
                     *
                     * @return XML, as <code>String</code>, representation of this <code>XMLGregorianCalendar</code>
                     *
                     * @throws IllegalStateException if the combination of set fields
                     *    does not match one of the eight defined XML Schema builtin date/time datatypes.</member>
        <member name="M:biz.ritter.javapix.xml.datatype.XMLGregorianCalendar.getXMLSchemaType">
                     * <p>Return the name of the XML Schema date/time type that this instance
                     * maps to. Type is computed based on fields that are set.</p>
                     *
                     * <table border="2" rules="all" cellpadding="2">
                     *   <thead>
                     *     <tr>
                     *       <th align="center" colspan="7">
                     *         Required fields for XML Schema 1.0 Date/Time Datatypes.<br />
                     *         <i>(timezone is optional for all date/time datatypes)</i>
                     *       </th>
                     *     </tr>
                     *   </thead>
                     *   <tbody>
                     *     <tr>
                     *       <td>Datatype</td>
                     *       <td>year</td>
                     *       <td>month</td>
                     *       <td>day</td>
                     *       <td>hour</td>
                     *       <td>minute</td>
                     *       <td>second</td>
                     *     </tr>
                     *     <tr>
                     *       <td>{@link DatatypeConstants#DATETIME}</td>
                     *       <td>X</td>
                     *       <td>X</td>
                     *       <td>X</td>
                     *       <td>X</td>
                     *       <td>X</td>
                     *       <td>X</td>
                     *     </tr>
                     *     <tr>
                     *       <td>{@link DatatypeConstants#DATE}</td>
                     *       <td>X</td>
                     *       <td>X</td>
                     *       <td>X</td>
                     *       <td></td>
                     *       <td></td>
                     *       <td></td>
                     *     </tr>
                     *     <tr>
                     *       <td>{@link DatatypeConstants#TIME}</td>
                     *       <td></td>
                     *       <td></td>
                     *       <td></td>
                     *       <td>X</td>
                     *       <td>X</td>
                     *       <td>X</td>
                     *     </tr>
                     *     <tr>
                     *       <td>{@link DatatypeConstants#GYEARMONTH}</td>
                     *       <td>X</td>
                     *       <td>X</td>
                     *       <td></td>
                     *       <td></td>
                     *       <td></td>
                     *       <td></td>
                     *     </tr>
                     *     <tr>
                     *       <td>{@link DatatypeConstants#GMONTHDAY}</td>
                     *       <td></td>
                     *       <td>X</td>
                     *       <td>X</td>
                     *       <td></td>
                     *       <td></td>
                     *       <td></td>
                     *     </tr>
                     *     <tr>
                     *       <td>{@link DatatypeConstants#GYEAR}</td>
                     *       <td>X</td>
                     *       <td></td>
                     *       <td></td>
                     *       <td></td>
                     *       <td></td>
                     *       <td></td>
                     *     </tr>
                     *     <tr>
                     *       <td>{@link DatatypeConstants#GMONTH}</td>
                     *       <td></td>
                     *       <td>X</td>
                     *       <td></td>
                     *       <td></td>
                     *       <td></td>
                     *       <td></td>
                     *     </tr>
                     *     <tr>
                     *       <td>{@link DatatypeConstants#GDAY}</td>
                     *       <td></td>
                     *       <td></td>
                     *       <td>X</td>
                     *       <td></td>
                     *       <td></td>
                     *       <td></td>
                     *     </tr>
                     *   </tbody>
                     * </table>
                     *
                     * @throws java.lang.IllegalStateException if the combination of set fields
                     *    does not match one of the eight defined XML Schema builtin
                     *    date/time datatypes.
                     * @return One of the following class constants:
                     *   {@link DatatypeConstants#DATETIME},
                     *   {@link DatatypeConstants#TIME},
                     *   {@link DatatypeConstants#DATE},
                     *   {@link DatatypeConstants#GYEARMONTH},
                     *   {@link DatatypeConstants#GMONTHDAY},
                     *   {@link DatatypeConstants#GYEAR},
                     *   {@link DatatypeConstants#GMONTH} or
                     *   {@link DatatypeConstants#GDAY}.</member>
        <member name="M:biz.ritter.javapix.xml.datatype.XMLGregorianCalendar.ToString">
                     * <p>Returns a <code>String</code> representation of this <code>XMLGregorianCalendar</code><code>Object</code>.</p>
                     *
                     * <p>The result is a lexical representation generated by {@link #toXMLFormat()}.</p>
                     *
                     * @return A non-<code>null</code> valid <code>String</code> representation of this <code>XMLGregorianCalendar</code>.
                     *
                     * @throws IllegalStateException if the combination of set fields
                     *    does not match one of the eight defined XML Schema builtin date/time datatypes.
                     *
                     * @see #toXMLFormat()</member>
        <member name="M:biz.ritter.javapix.xml.datatype.XMLGregorianCalendar.isValid">
                     * Validate instance by <code>getXMLSchemaType()</code> constraints.
                     * @return true if data values are valid.</member>
        <member name="M:biz.ritter.javapix.xml.datatype.XMLGregorianCalendar.add(biz.ritter.javapix.xml.datatype.Duration)">
                     * <p>Add <code>duration</code> to this instance.</p>
                     *
                     * <p>The computation is specified in
                     * <a href="http://www.w3.org/TR/xmlschema-2/#adding-durations-to-dateTimes">XML Schema 1.0 Part 2, Appendix E,
                     * <i>Adding durations to dateTimes</i>&gt;</a>.
                     * <a href="#datetimefieldsmapping">date/time field mapping table</a>
                     * defines the mapping from XML Schema 1.0 <code>dateTime</code> fields
                     * to this class' representation of those fields.</p>
                     *
                     * @param duration Duration to add to this <code>XMLGregorianCalendar</code>.
                     *
                     * @throws NullPointerException  when <code>duration</code> parameter is <code>null</code>.</member>
        <member name="M:biz.ritter.javapix.xml.datatype.XMLGregorianCalendar.toGregorianCalendar">
                     * <p>Convert this <code>XMLGregorianCalendar</code> to a {@link GregorianCalendar}.</p>
                     *
                     * <p>When <code>this</code> instance has an undefined field, this
                     * conversion relies on the <code>java.util.GregorianCalendar</code> default
                     * for its corresponding field. A notable difference between
                     * XML Schema 1.0 date/time datatypes and <code>java.util.GregorianCalendar</code>
                     * is that Timezone value is optional for date/time datatypes and it is
                     * a required field for <code>java.util.GregorianCalendar</code>. See javadoc
                     * for <code>java.util.TimeZone.getDefault()</code> on how the default
                     * is determined. To explicitly specify the <code>TimeZone</code>
                     * instance, see
                     * {@link #toGregorianCalendar(TimeZone, Locale, XMLGregorianCalendar)}.</p>
                     *
                     * <table border="2" rules="all" cellpadding="2">
                     *   <thead>
                     *     <tr>
                     *       <th align="center" colspan="2">
                     *          Field by Field Conversion from this class to
                     *          <code>java.util.GregorianCalendar</code>
                     *       </th>
                     *     </tr>
                     *   </thead>
                     *   <tbody>
                     *     <tr>
                     *        <td><code>java.util.GregorianCalendar</code> field</td>
                     *        <td><code>javax.xml.datatype.XMLGregorianCalendar</code> field</td>
                     *     </tr>
                     *     <tr>
                     *       <td><code>ERA</code></td>
                     *       <td>{@link #getEonAndYear()}<code>.signum() &lt; 0 ? GregorianCalendar.BC : GregorianCalendar.AD</code></td>
                     *     </tr>
                     *     <tr>
                     *       <td><code>YEAR</code></td>
                     *       <td>{@link #getEonAndYear()}<code>.abs().intValue()</code><i>*</i></td>
                     *     </tr>
                     *     <tr>
                     *       <td><code>MONTH</code></td>
                     *       <td>{@link #getMonth()} - {@link DatatypeConstants#JANUARY} + {@link GregorianCalendar#JANUARY}</td>
                     *     </tr>
                     *     <tr>
                     *       <td><code>DAY_OF_MONTH</code></td>
                     *       <td>{@link #getDay()}</td>
                     *     </tr>
                     *     <tr>
                     *       <td><code>HOUR_OF_DAY</code></td>
                     *       <td>{@link #getHour()}</td>
                     *     </tr>
                     *     <tr>
                     *       <td><code>MINUTE</code></td>
                     *       <td>{@link #getMinute()}</td>
                     *     </tr>
                     *     <tr>
                     *       <td><code>SECOND</code></td>
                     *       <td>{@link #getSecond()}</td>
                     *     </tr>
                     *     <tr>
                     *       <td><code>MILLISECOND</code></td>
                     *       <td>get millisecond order from {@link #getFractionalSecond()}<i>*</i></td>
                     *     </tr>
                     *     <tr>
                     *       <td><code>GregorianCalendar.setTimeZone(TimeZone)</code></td>
                     *       <td>{@link #getTimezone()} formatted into Custom timezone id</td>
                     *     </tr>
                     *   </tbody>
                     * </table>
                     * <i>*</i> designates possible loss of precision during the conversion due
                     * to source datatype having higher precision than target datatype.
                     *
                     * <p>To ensure consistency in conversion implementations, the new
                     * <code>GregorianCalendar</code> should be instantiated in following
                     * manner.
                     * <ul>
                     *   <li>Using <code>timeZone</code> value as defined above, create a new
                     * <code>java.util.GregorianCalendar(timeZone,Locale.getDefault())</code>.
                     *   </li>
                     *   <li>Initialize all GregorianCalendar fields by calling {(@link GegorianCalendar#clear()}.</li>
                     *   <li>Obtain a pure Gregorian Calendar by invoking
                     *   <code>GregorianCalendar.setGregorianChange(
                     *   new Date(Long.MIN_VALUE))</code>.</li>
                     *   <li>Its fields ERA, YEAR, MONTH, DAY_OF_MONTH, HOUR_OF_DAY,
                     *       MINUTE, SECOND and MILLISECOND are set using the method
                     *       <code>Calendar.set(int,int)</code></li>
                     * </ul>
                     * </p>
                     *
                     * @see #toGregorianCalendar(java.util.TimeZone, java.util.Locale, XMLGregorianCalendar)</member>
        <member name="M:biz.ritter.javapix.xml.datatype.XMLGregorianCalendar.toGregorianCalendar(biz.ritter.javapi.util.TimeZone,biz.ritter.javapi.util.Locale,biz.ritter.javapix.xml.datatype.XMLGregorianCalendar)">
                     * <p />Convert this <code>XMLGregorianCalendar</code> along with provided parameters
                     * to a {@link GregorianCalendar} instance.
                     *
                     * <p /> Since XML Schema 1.0 date/time datetypes has no concept of
                     * timezone ids or daylight savings timezone ids, this conversion operation
                     * allows the user to explicitly specify one with
                     * <code>timezone</code> parameter.
                     *
                     * <p />To compute the return value's <code>TimeZone</code> field,
                     * <ul>
                     * <li>when parameter <code>timeZone</code> is non-null,
                     * it is the timezone field.</li>
                     * <li>else when <code>this.getTimezone() != FIELD_UNDEFINED</code>,
                     * create a <code>java.util.TimeZone</code> with a custom timezone id
                     * using the <code>this.getTimezone()</code>.</li>
                     * <li>else when <code>defaults.getTimezone() != FIELD_UNDEFINED</code>,
                     * create a <code>java.util.TimeZone</code> with a custom timezone id
                     * using <code>defaults.getTimezone()</code>.</li>
                     * <li>else use the <code>GregorianCalendar</code> default timezone value
                     * for the host is defined as specified by
                     * <code>java.util.TimeZone.getDefault()</code>.</li></ul>
                     *
                     * <p />To ensure consistency in conversion implementations, the new
                     * <code>GregorianCalendar</code> should be instantiated in following
                     * manner.
                     * <ul>
                     *   <li>Create a new <code>java.util.GregorianCalendar(TimeZone,
                     *       Locale)</code> with TimeZone set as specified above and the
                     *       <code>Locale</code> parameter.
                     *   </li>
                     *   <li>Initialize all GregorianCalendar fields by calling {@link GregorianCalendar#clear()}</li>
                     *   <li>Obtain a pure Gregorian Calendar by invoking
                     *   <code>GregorianCalendar.setGregorianChange(
                     *   new Date(Long.MIN_VALUE))</code>.</li>
                     *   <li>Its fields ERA, YEAR, MONTH, DAY_OF_MONTH, HOUR_OF_DAY,
                     *       MINUTE, SECOND and MILLISECOND are set using the method
                     *       <code>Calendar.set(int,int)</code></li>
                     * </ul>
                     *
                     * @param timezone provide Timezone. <code>null</code> is a legal value.
                     * @param aLocale  provide explicit Locale. Use default GregorianCalendar locale if
                     *                 value is <code>null</code>.
                     * @param defaults provide default field values to use when corresponding
                     *                 field for this instance is FIELD_UNDEFINED or null.
                     *                 If <code>defaults</code>is <code>null</code> or a field
                     *                 within the specified <code>defaults</code> is undefined,
                     *                 just use <code>java.util.GregorianCalendar</code> defaults.
                     * @return a java.util.GregorianCalendar conversion of this instance.</member>
        <member name="M:biz.ritter.javapix.xml.datatype.XMLGregorianCalendar.getTimeZone(System.Int32)">
                     * <p>Returns a <code>java.util.TimeZone</code> for this class.</p>
                     *
                     * <p>If timezone field is defined for this instance,
                     * returns TimeZone initialized with custom timezone id
                     * of zoneoffset. If timezone field is undefined,
                     * try the defaultZoneoffset that was passed in.
                     * If defaultZoneoffset is FIELD_UNDEFINED, return
                     * default timezone for this host.
                     * (Same default as java.util.GregorianCalendar).</p>
                     *
                     * @param defaultZoneoffset default zoneoffset if this zoneoffset is
                     * {@link DatatypeConstants#FIELD_UNDEFINED}.
                     *
                     * @return TimeZone for this.</member>
        <member name="M:biz.ritter.javapix.xml.datatype.XMLGregorianCalendar.clone">
                     * <p>Creates and returns a copy of this object.</p>
                     *
                     * @return copy of this <code>Object</code></member>
        <member name="T:biz.ritter.javapix.xml.namespacej.QName">
                 * &lt;p&gt;&lt;code&gt;QName&lt;/code&gt; represents a &lt;strong&gt;qualified name&lt;/strong&gt;
                 * as defined in the XML specifications: &lt;a
                 * href="http://www.w3.org/TR/xmlschema-2/#QName"&gt;XML Schema Part2:
                 * Datatypes specification&lt;/a&gt;, &lt;a
                 * href="http://www.w3.org/TR/REC-xml-names/#ns-qualnames"&gt;Namespaces
                 * in XML&lt;/a&gt;, &lt;a
                 * href="http://www.w3.org/XML/xml-names-19990114-errata"&gt;Namespaces
                 * in XML Errata&lt;/a&gt;.&lt;/p&gt;
                 *
                 * &lt;p&gt;The value of a &lt;code&gt;QName&lt;/code&gt; contains a &lt;strong&gt;Namespace
                 * URI&lt;/strong&gt;, &lt;strong&gt;local part&lt;/strong&gt; and
                 * &lt;strong&gt;prefix&lt;/strong&gt;.&lt;/p&gt;
                 *
                 * &lt;p&gt;The prefix is included in &lt;code&gt;QName&lt;/code&gt; to retain lexical
                 * information &lt;strong&gt;&lt;em&gt;when present&lt;/em&gt;&lt;/strong&gt; in an {@link
                 * javax.xml.transform.Source XML input source}. The prefix is
                 * &lt;strong&gt;&lt;em&gt;NOT&lt;/em&gt;&lt;/strong&gt; used in {@link #equals(Object)
                 * QName.equals(Object)} or to compute the {@link #hashCode()
                 * QName.hashCode()}.  Equality and the hash code are defined using
                 * &lt;strong&gt;&lt;em&gt;only&lt;/em&gt;&lt;/strong&gt; the Namespace URI and local part.&lt;/p&gt;
                 *
                 * &lt;p&gt;If not specified, the Namespace URI is set to {@link
                 * javax.xml.XMLConstants#NULL_NS_URI XMLConstants.NULL_NS_URI}.
                 * If not specified, the prefix is set to {@link
                 * javax.xml.XMLConstants#DEFAULT_NS_PREFIX
                 * XMLConstants.DEFAULT_NS_PREFIX}.&lt;/p&gt;
                 *
                 * &lt;p&gt;&lt;code&gt;QName&lt;/code&gt; is immutable.&lt;/p&gt;
                 *
                 * @author &lt;a href="mailto:Jeff.Suttor@Sun.com"&gt;Jeff Suttor&lt;/a&gt;
                 * @version $Revision: 446598 $, $Date: 2006-09-15 08:55:40 -0400 (Fri, 15 Sep 2006) $
                 * @see &lt;a href="http://www.w3.org/TR/xmlschema-2/#QName"&gt;XML Schema Part2: Datatypes specification&lt;/a&gt;
                 * @see &lt;a href="http://www.w3.org/TR/REC-xml-names/#ns-qualnames"&gt;Namespaces in XML&lt;/a&gt;
                 * @see &lt;a href="http://www.w3.org/XML/xml-names-19990114-errata"&gt;Namespaces in XML Errata&lt;/a&gt;
                 * @since 1.5</member>
        <member name="F:biz.ritter.javapix.xml.namespacej.QName.serialVersionUID">
                     * &lt;p&gt;Stream Unique Identifier.&lt;/p&gt;
                     *
                     * &lt;p&gt;To enable the compatibility &lt;code&gt;serialVersionUID&lt;/code&gt;
                     * set the System Property
                     * &lt;code&gt;org.apache.xml.namespace.QName.useCompatibleSerialVersionUID&lt;/code&gt;
                     * to a value of "1.0".&lt;/p&gt;</member>
        <member name="F:biz.ritter.javapix.xml.namespacej.QName.defaultSerialVersionUID">
                     * &lt;p&gt;The original default Stream Unique Identifier.&lt;/p&gt;</member>
        <member name="F:biz.ritter.javapix.xml.namespacej.QName.compatabilitySerialVersionUID">
                     * &lt;p&gt;The compatibility Stream Unique Identifier that was introduced
                     * with Java 5 SE SDK.&lt;/p&gt;</member>
        <member name="F:biz.ritter.javapix.xml.namespacej.QName.namespaceURI">
                     * &lt;p&gt;Namespace URI of this &lt;code&gt;QName&lt;/code&gt;.&lt;/p&gt;</member>
        <member name="F:biz.ritter.javapix.xml.namespacej.QName.localPart">
                     * &lt;p&gt;local part of this &lt;code&gt;QName&lt;/code&gt;.&lt;/p&gt;</member>
        <member name="F:biz.ritter.javapix.xml.namespacej.QName.prefix">
                     * &lt;p&gt;prefix of this &lt;code&gt;QName&lt;/code&gt;.&lt;/p&gt;</member>
        <member name="F:biz.ritter.javapix.xml.namespacej.QName.qNameAsString">
                     * &lt;p&gt;&lt;code&gt;String&lt;/code&gt; representation of this &lt;code&gt;QName&lt;/code&gt;.&lt;/p&gt;</member>
        <member name="M:biz.ritter.javapix.xml.namespacej.QName.#ctor(System.String,System.String)">
                     * &lt;p&gt;&lt;code&gt;QName&lt;/code&gt; constructor specifying the Namespace URI
                     * and local part.&lt;/p&gt;
                     *
                     * &lt;p&gt;If the Namespace URI is &lt;code&gt;null&lt;/code&gt;, it is set to
                     * {@link javax.xml.XMLConstants#NULL_NS_URI
                     * XMLConstants.NULL_NS_URI}.  This value represents no
                     * explicitly defined Namespace as defined by the &lt;a
                     * href="http://www.w3.org/TR/REC-xml-names/#ns-qualnames"&gt;Namespaces
                     * in XML&lt;/a&gt; specification.  This action preserves compatible
                     * behavior with QName 1.0.  Explicitly providing the {@link
                     * javax.xml.XMLConstants#NULL_NS_URI
                     * XMLConstants.NULL_NS_URI} value is the preferred coding
                     * style.&lt;/p&gt;
                     *
                     * &lt;p&gt;If the local part is &lt;code&gt;null&lt;/code&gt; an
                     * &lt;code&gt;IllegalArgumentException&lt;/code&gt; is thrown.
                     * A local part of "" is allowed to preserve
                     * compatible behavior with QName 1.0. &lt;/p&gt;
                     *
                     * &lt;p&gt;When using this constructor, the prefix is set to {@link
                     * javax.xml.XMLConstants#DEFAULT_NS_PREFIX
                     * XMLConstants.DEFAULT_NS_PREFIX}.&lt;/p&gt;
                     *
                     * &lt;p&gt;The Namespace URI is not validated as a
                     * &lt;a href="http://www.ietf.org/rfc/rfc2396.txt"&gt;URI reference&lt;/a&gt;.
                     * The local part is not validated as a
                     * &lt;a href="http://www.w3.org/TR/REC-xml-names/#NT-NCName"&gt;NCName&lt;/a&gt;
                     * as specified in &lt;a href="http://www.w3.org/TR/REC-xml-names/"&gt;Namespaces
                     * in XML&lt;/a&gt;.&lt;/p&gt;
                     *
                     * @param namespaceURI Namespace URI of the &lt;code&gt;QName&lt;/code&gt;
                     * @param localPart    local part of the &lt;code&gt;QName&lt;/code&gt;
                     *
                     * @see #QName(String namespaceURI, String localPart, String
                     * prefix) QName(String namespaceURI, String localPart, String
                     * prefix)</member>
        <member name="M:biz.ritter.javapix.xml.namespacej.QName.#ctor(System.String,System.String,System.String)">
                     * &lt;p&gt;&lt;code&gt;QName&lt;/code&gt; constructor specifying the Namespace URI,
                     * local part and prefix.&lt;/p&gt;
                     *
                     * &lt;p&gt;If the Namespace URI is &lt;code&gt;null&lt;/code&gt;, it is set to
                     * {@link javax.xml.XMLConstants#NULL_NS_URI
                     * XMLConstants.NULL_NS_URI}.  This value represents no
                     * explicitly defined Namespace as defined by the &lt;a
                     * href="http://www.w3.org/TR/REC-xml-names/#ns-qualnames"&gt;Namespaces
                     * in XML&lt;/a&gt; specification.  This action preserves compatible
                     * behavior with QName 1.0.  Explicitly providing the {@link
                     * javax.xml.XMLConstants#NULL_NS_URI
                     * XMLConstants.NULL_NS_URI} value is the preferred coding
                     * style.&lt;/p&gt;
                     *
                     * &lt;p&gt;If the local part is &lt;code&gt;null&lt;/code&gt; an
                     * &lt;code&gt;IllegalArgumentException&lt;/code&gt; is thrown.
                     * A local part of "" is allowed to preserve
                     * compatible behavior with QName 1.0. &lt;/p&gt;
                     *
                     * &lt;p&gt;If the prefix is &lt;code&gt;null&lt;/code&gt;, an
                     * &lt;code&gt;IllegalArgumentException&lt;/code&gt; is thrown.  Use {@link
                     * javax.xml.XMLConstants#DEFAULT_NS_PREFIX
                     * XMLConstants.DEFAULT_NS_PREFIX} to explicitly indicate that no
                     * prefix is present or the prefix is not relevant.&lt;/p&gt;
                     *
                     * &lt;p&gt;The Namespace URI is not validated as a
                     * &lt;a href="http://www.ietf.org/rfc/rfc2396.txt"&gt;URI reference&lt;/a&gt;.
                     * The local part and prefix are not validated as a
                     * &lt;a href="http://www.w3.org/TR/REC-xml-names/#NT-NCName"&gt;NCName&lt;/a&gt;
                     * as specified in &lt;a href="http://www.w3.org/TR/REC-xml-names/"&gt;Namespaces
                     * in XML&lt;/a&gt;.&lt;/p&gt;
                     *
                     * @param namespaceURI Namespace URI of the &lt;code&gt;QName&lt;/code&gt;
                     * @param localPart    local part of the &lt;code&gt;QName&lt;/code&gt;
                     * @param prefix       prefix of the &lt;code&gt;QName&lt;/code&gt;</member>
        <member name="M:biz.ritter.javapix.xml.namespacej.QName.#ctor(System.String)">
                     * &lt;p&gt;&lt;code&gt;QName&lt;/code&gt; constructor specifying the local part.&lt;/p&gt;
                     *
                     * &lt;p&gt;If the local part is &lt;code&gt;null&lt;/code&gt; an
                     * &lt;code&gt;IllegalArgumentException&lt;/code&gt; is thrown.
                     * A local part of "" is allowed to preserve
                     * compatible behavior with QName 1.0. &lt;/p&gt;
                     *
                     * &lt;p&gt;When using this constructor, the Namespace URI is set to
                     * {@link javax.xml.XMLConstants#NULL_NS_URI
                     * XMLConstants.NULL_NS_URI} and the prefix is set to {@link
                     * javax.xml.XMLConstants#DEFAULT_NS_PREFIX
                     * XMLConstants.DEFAULT_NS_PREFIX}.&lt;/p&gt;
                     *
                     * &lt;p&gt;&lt;em&gt;In an XML context, all Element and Attribute names exist
                     * in the context of a Namespace.  Making this explicit during the
                     * construction of a &lt;code&gt;QName&lt;/code&gt; helps prevent hard to
                     * diagnosis XML validity errors.  The constructors {@link
                     * #QName(String namespaceURI, String localPart) QName(String
                     * namespaceURI, String localPart)} and
                     * {@link #QName(String namespaceURI, String localPart, String prefix)}
                     * are preferred.&lt;/em&gt;&lt;/p&gt;
                     *
                     * &lt;p&gt;The local part is not validated as a
                     * &lt;a href="http://www.w3.org/TR/REC-xml-names/#NT-NCName"&gt;NCName&lt;/a&gt;
                     * as specified in &lt;a href="http://www.w3.org/TR/REC-xml-names/"&gt;Namespaces
                     * in XML&lt;/a&gt;.&lt;/p&gt;
                     *
                     * @param localPart local part of the &lt;code&gt;QName&lt;/code&gt;
                     * @see #QName(String namespaceURI, String localPart) QName(String
                     * namespaceURI, String localPart)
                     * @see #QName(String namespaceURI, String localPart, String
                     * prefix) QName(String namespaceURI, String localPart, String
                     * prefix)</member>
        <member name="M:biz.ritter.javapix.xml.namespacej.QName.getNamespaceURI">
                     * &lt;p&gt;Get the Namespace URI of this &lt;code&gt;QName&lt;/code&gt;.&lt;/p&gt;
                     *
                     * @return Namespace URI of this &lt;code&gt;QName&lt;/code&gt;</member>
        <member name="M:biz.ritter.javapix.xml.namespacej.QName.getLocalPart">
                     * &lt;p&gt;Get the local part of this &lt;code&gt;QName&lt;/code&gt;.&lt;/p&gt;
                     *
                     *  @return local part of this &lt;code&gt;QName&lt;/code&gt;</member>
        <member name="M:biz.ritter.javapix.xml.namespacej.QName.getPrefix">
                     * &lt;p&gt;Get the prefix of this &lt;code&gt;QName&lt;/code&gt;.&lt;/p&gt;
                     *
                     * &lt;p&gt;The prefix assigned to a &lt;code&gt;QName&lt;/code&gt; might
                     * &lt;strong&gt;&lt;em&gt;NOT&lt;/em&gt;&lt;/strong&gt; be valid in a different
                     * context. For example, a &lt;code&gt;QName&lt;/code&gt; may be assigned a
                     * prefix in the context of parsing a document but that prefix may
                     * be invalid in the context of a different document.&lt;/p&gt;
                     *
                     *  @return prefix of this &lt;code&gt;QName&lt;/code&gt;</member>
        <member name="M:biz.ritter.javapix.xml.namespacej.QName.Equals(System.Object)">
                     * &lt;p&gt;Test this &lt;code&gt;QName&lt;/code&gt; for equality with another
                     * &lt;code&gt;Object&lt;/code&gt;.&lt;/p&gt;
                     *
                     * &lt;p&gt;If the &lt;code&gt;Object&lt;/code&gt; to be tested is not a
                     * &lt;code&gt;QName&lt;/code&gt; or is &lt;code&gt;null&lt;/code&gt;, then this method
                     * returns &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
                     *
                     * &lt;p&gt;Two &lt;code&gt;QName&lt;/code&gt;s are considered equal if and only if
                     * both the Namespace URI and local part are equal. This method
                     * uses &lt;code&gt;String.equals()&lt;/code&gt; to check equality of the
                     * Namespace URI and local part. The prefix is
                     * &lt;strong&gt;&lt;em&gt;NOT&lt;/em&gt;&lt;/strong&gt; used to determine equality.&lt;/p&gt;
                     *
                     * &lt;p&gt;This method satisfies the general contract of {@link
                     * java.lang.Object#equals(Object) Object.equals(Object)}&lt;/p&gt;
                     *
                     * @param objectToTest the &lt;code&gt;Object&lt;/code&gt; to test for
                     * equality with this &lt;code&gt;QName&lt;/code&gt;
                     * @return &lt;code&gt;true&lt;/code&gt; if the given &lt;code&gt;Object&lt;/code&gt; is
                     * equal to this &lt;code&gt;QName&lt;/code&gt; else &lt;code&gt;false&lt;/code&gt;</member>
        <member name="M:biz.ritter.javapix.xml.namespacej.QName.GetHashCode">
                     * &lt;p&gt;Generate the hash code for this &lt;code&gt;QName&lt;/code&gt;.&lt;/p&gt;
                     *
                     * &lt;p&gt;The hash code is calculated using both the Namespace URI and
                     * the local part of the &lt;code&gt;QName&lt;/code&gt;.  The prefix is
                     * &lt;strong&gt;&lt;em&gt;NOT&lt;/em&gt;&lt;/strong&gt; used to calculate the hash
                     * code.&lt;/p&gt;
                     *
                     * &lt;p&gt;This method satisfies the general contract of {@link
                     * java.lang.Object#hashCode() Object.hashCode()}.&lt;/p&gt;
                     *
                     * @return hash code for this &lt;code&gt;QName&lt;/code&gt; &lt;code&gt;Object&lt;/code&gt;</member>
        <member name="M:biz.ritter.javapix.xml.namespacej.QName.ToString">
                     * &lt;p&gt;&lt;code&gt;String&lt;/code&gt; representation of this
                     * &lt;code&gt;QName&lt;/code&gt;.&lt;/p&gt;
                     *
                     * &lt;p&gt;The commonly accepted way of representing a &lt;code&gt;QName&lt;/code&gt;
                     * as a &lt;code&gt;String&lt;/code&gt; was &lt;a href="http://jclark.com/xml/xmlns.htm"&gt;defined&lt;/a&gt;
                     * by James Clark.  Although this is not a &lt;em&gt;standard&lt;/em&gt;
                     * specification, it is in common use,  e.g. {@link javax.xml.transform.Transformer#setParameter(String name, Object value)}.
                     * This implementation represents a &lt;code&gt;QName&lt;/code&gt; as:
                     * "{" + Namespace URI + "}" + local part.  If the Namespace URI
                     * &lt;code&gt;.equals(XMLConstants.NULL_NS_URI)&lt;/code&gt;, only the
                     * local part is returned.  An appropriate use of this method is
                     * for debugging or logging for human consumption.&lt;/p&gt;
                     *
                     * &lt;p&gt;Note the prefix value is &lt;strong&gt;&lt;em&gt;NOT&lt;/em&gt;&lt;/strong&gt;
                     * returned as part of the &lt;code&gt;String&lt;/code&gt; representation.&lt;/p&gt;
                     *
                     * &lt;p&gt;This method satisfies the general contract of {@link
                     * java.lang.Object#toString() Object.toString()}.&lt;/p&gt;
                     *
                     *  @return &lt;code&gt;String&lt;/code&gt; representation of this &lt;code&gt;QName&lt;/code&gt;</member>
        <member name="M:biz.ritter.javapix.xml.namespacej.QName.valueOf(System.String)">
                     * &lt;p&gt;&lt;code&gt;QName&lt;/code&gt; derived from parsing the formatted
                     * &lt;code&gt;String&lt;/code&gt;.&lt;/p&gt;
                     *
                     * &lt;p&gt;If the &lt;code&gt;String&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt; or does not conform to
                     * {@link #toString() QName.toString()} formatting, an
                     * &lt;code&gt;IllegalArgumentException&lt;/code&gt; is thrown.&lt;/p&gt;
                     *
                     * &lt;p&gt;&lt;em&gt;The &lt;code&gt;String&lt;/code&gt; &lt;strong&gt;MUST&lt;/strong&gt; be in the
                     * form returned by {@link #toString() QName.toString()}.&lt;/em&gt;&lt;/p&gt;
                     * &lt;p&gt;The commonly accepted way of representing a &lt;code&gt;QName&lt;/code&gt;
                     * as a &lt;code&gt;String&lt;/code&gt; was &lt;a href="http://jclark.com/xml/xmlns.htm"&gt;defined&lt;/a&gt;
                     * by James Clark.  Although this is not a &lt;em&gt;standard&lt;/em&gt;
                     * specification, it is in common use,  e.g. {@link javax.xml.transform.Transformer#setParameter(String name, Object value)}.
                     * This implementation parses a &lt;code&gt;String&lt;/code&gt; formatted
                     * as: "{" + Namespace URI + "}" + local part.  If the Namespace
                     * URI &lt;code&gt;.equals(XMLConstants.NULL_NS_URI)&lt;/code&gt;, only the
                     * local part should be provided.&lt;/p&gt;
                     *
                     * &lt;p&gt;The prefix value &lt;strong&gt;&lt;em&gt;CANNOT&lt;/em&gt;&lt;/strong&gt; be
                     * represented in the &lt;code&gt;String&lt;/code&gt; and will be set to
                     * {@link javax.xml.XMLConstants#DEFAULT_NS_PREFIX
                     * XMLConstants.DEFAULT_NS_PREFIX}.&lt;/p&gt;
                     *
                     * &lt;p&gt;This method does not do full validation of the resulting
                     * &lt;code&gt;QName&lt;/code&gt;.
                     * &lt;p&gt;The Namespace URI is not validated as a
                     * &lt;a href="http://www.ietf.org/rfc/rfc2396.txt"&gt;URI reference&lt;/a&gt;.
                     * The local part is not validated as a
                     * &lt;a href="http://www.w3.org/TR/REC-xml-names/#NT-NCName"&gt;NCName&lt;/a&gt;
                     * as specified in
                     * &lt;a href="http://www.w3.org/TR/REC-xml-names/"&gt;Namespaces in XML&lt;/a&gt;.&lt;/p&gt;
                     *
                     * @param qNameAsString &lt;code&gt;String&lt;/code&gt; representation
                     * of the &lt;code&gt;QName&lt;/code&gt;
                     * @return &lt;code&gt;QName&lt;/code&gt; corresponding to the given &lt;code&gt;String&lt;/code&gt;
                     * @see #toString() QName.toString()</member>
        <member name="T:biz.ritter.javapix.xml.transform.Result">
                 * <p>An object that implements this interface contains the information
                 * needed to build a transformation result tree.</p>
                 *
                 * @author <a href="Jeff.Suttor@Sun.com">Jeff Suttor</a></member>
        <member name="M:biz.ritter.javapix.xml.transform.Result.setSystemId(System.String)">
                     * Set the system identifier for this Result.
                     *
                     * <p>If the Result is not to be written to a file, the system identifier is optional.
                     * The application may still want to provide one, however, for use in error messages
                     * and warnings, or to resolve relative output identifiers.</p>
                     *
                     * @param systemId The system identifier as a URI string.</member>
        <member name="M:biz.ritter.javapix.xml.transform.Result.getSystemId">
                     * Get the system identifier that was set with setSystemId.
                     *
                     * @return The system identifier that was set with setSystemId,
                     * or null if setSystemId was not called.</member>
        <member name="F:biz.ritter.javapix.xml.transform.ResultConstants.PI_DISABLE_OUTPUT_ESCAPING">
                     * The name of the processing instruction that is sent if the
                     * result tree disables output escaping.
                     *
                     * <p>Normally, result tree serialization escapes &amp; and &lt; (and
                     * possibly other characters) when outputting text nodes.
                     * This ensures that the output is well-formed XML. However,
                     * it is sometimes convenient to be able to produce output that is
                     * almost, but not quite well-formed XML; for example,
                     * the output may include ill-formed sections that will
                     * be transformed into well-formed XML by a subsequent non-XML aware
                     * process. If a processing instruction is sent with this name,
                     * serialization should be output without any escaping. </p>
                     *
                     * <p>Result DOM trees may also have PI_DISABLE_OUTPUT_ESCAPING and
                     * PI_ENABLE_OUTPUT_ESCAPING inserted into the tree.</p>
                     *
                     * @see <a href="http://www.w3.org/TR/xslt#disable-output-escaping">disable-output-escaping in XSLT Specification</a></member>
        <member name="F:biz.ritter.javapix.xml.transform.ResultConstants.PI_ENABLE_OUTPUT_ESCAPING">
                     * The name of the processing instruction that is sent
                     * if the result tree enables output escaping at some point after having
                     * received a PI_DISABLE_OUTPUT_ESCAPING processing instruction.
                     *
                     * @see <a href="http://www.w3.org/TR/xslt#disable-output-escaping">disable-output-escaping in XSLT Specification</a></member>
        <member name="T:biz.ritter.javapix.xml.transform.Source">
                 * An object that implements this interface contains the information
                 * needed to act as source input (XML source or transformation instructions).</member>
        <member name="M:biz.ritter.javapix.xml.transform.Source.setSystemId(System.String)">
                     * Set the system identifier for this Source.
                     *
                     * <p>The system identifier is optional if the source does not
                     * get its data from a URL, but it may still be useful to provide one.
                     * The application can use a system identifier, for example, to resolve
                     * relative URIs and to include in error messages and warnings.</p>
                     *
                     * @param systemId The system identifier as a URL string.</member>
        <member name="M:biz.ritter.javapix.xml.transform.Source.getSystemId">
                     * Get the system identifier that was set with setSystemId.
                     *
                     * @return The system identifier that was set with setSystemId, or null
                     * if setSystemId was not called.</member>
        <member name="T:biz.ritter.javapix.xml.XMLConstants">
                 * Utility class to contain basic XML values as constants.
                 *
                 * @author <a href="mailto:Jeff.Suttor@Sun.com">Jeff Suttor</a>
                 * @version $Revision: 446598 $, $Date: 2006-09-15 08:55:40 -0400 (Fri, 15 Sep 2006) $
                 * @see <a href="http://www.w3.org/TR/xml11/">Extensible Markup Language (XML) 1.1</a>
                 * @see <a href="http://www.w3.org/TR/REC-xml">Extensible Markup Language (XML) 1.0 (Second Edition)</a>
                 * @see <a href="http://www.w3.org/XML/xml-V10-2e-errata">XML 1.0 Second Edition Specification Errata</a>
                 * @see <a href="http://www.w3.org/TR/xml-names11/">Namespaces in XML 1.1</a>
                 * @see <a href="http://www.w3.org/TR/REC-xml-names">Namespaces in XML</a>
                 * @see <a href="http://www.w3.org/XML/xml-names-19990114-errata">Namespaces in XML Errata</a>
                 * @see <a href="http://www.w3.org/TR/xmlschema-1/">XML Schema Part 1: Structures</a>
                 * @since 1.5
                 *</member>
        <member name="M:biz.ritter.javapix.xml.XMLConstants.#ctor">
                     * Private constructor to prevent instantiation.</member>
        <member name="F:biz.ritter.javapix.xml.XMLConstants.NULL_NS_URI">
                     * <p>Namespace URI to use to represent that there is no Namespace.</p>
                     *
                     * <p>Defined by the Namespace specification to be "".</p>
                     *
                     * @see <a href="http://www.w3.org/TR/REC-xml-names/#defaulting">
                     * Namespaces in XML, 5.2 Namespace Defaulting</a></member>
        <member name="F:biz.ritter.javapix.xml.XMLConstants.DEFAULT_NS_PREFIX">
                     * <p>Prefix to use to represent the default XML Namespace.</p>
                     *
                     * <p>Defined by the XML specification to be "".</p>
                     *
                     * @see <a href="http://www.w3.org/TR/REC-xml-names/#ns-qualnames">
                     * Namespaces in XML, 3. Qualified Names</a></member>
        <member name="F:biz.ritter.javapix.xml.XMLConstants.XML_NS_URI">
                     * <p>The official XML Namespace name URI.</p>
                     *
                     * <p>Defined by the XML specification to be
                     * "<code>http://www.w3.org/XML/1998/namespace</code>".</p>
                     *
                     * @see <a href="http://www.w3.org/TR/REC-xml-names/#ns-qualnames">
                     * Namespaces in XML, 3. Qualified Names</a></member>
        <member name="F:biz.ritter.javapix.xml.XMLConstants.XML_NS_PREFIX">
                     * <p>The official XML Namespace prefix.</p>
                     *
                     * <p>Defined by the XML specification to be "<code>xml</code>".</p>
                     *
                     * @see <a href="http://www.w3.org/TR/REC-xml-names/#ns-qualnames">
                     * Namespaces in XML, 3. Qualified Names</a></member>
        <member name="F:biz.ritter.javapix.xml.XMLConstants.XMLNS_ATTRIBUTE_NS_URI">
                     * <p>The official XML attribute used for specifying XML Namespace
                     * declarations, {@link #XMLNS_ATTRIBUTE
                     * XMLConstants.XMLNS_ATTRIBUTE}, Namespace name URI.</p>
                     *
                     * <p>Defined by the XML specification to be
                     * "<code>http://www.w3.org/2000/xmlns/</code>".</p>
                     *
                     * @see <a href="http://www.w3.org/TR/REC-xml-names/#ns-qualnames">
                     * Namespaces in XML, 3. Qualified Names</a>
                     * @see <a href="http://www.w3.org/XML/xml-names-19990114-errata/">
                     * Namespaces in XML Errata</a></member>
        <member name="F:biz.ritter.javapix.xml.XMLConstants.XMLNS_ATTRIBUTE">
                     * <p>The official XML attribute used for specifying XML Namespace
                     * declarations.</p>
                     *
                     * <p>It is <strong><em>NOT</em></strong> valid to use as a
                     * prefix.  Defined by the XML specification to be
                     * "<code>xmlns</code>".</p>
                     *
                     * @see <a href="http://www.w3.org/TR/REC-xml-names/#ns-qualnames">
                     * Namespaces in XML, 3. Qualified Names</a></member>
        <member name="F:biz.ritter.javapix.xml.XMLConstants.W3C_XML_SCHEMA_NS_URI">
                     * <p>W3C XML Schema Namespace URI.</p>
                     *
                     * <p>Defined to be "<code>http://www.w3.org/2001/XMLSchema</code>".</p>
                     *
                     * @see <a href="http://www.w3.org/TR/xmlschema-1/#Instance_Document_Constructions">
                     *  XML Schema Part 1:
                     *  Structures, 2.6 Schema-Related Markup in Documents Being Validated</a></member>
        <member name="F:biz.ritter.javapix.xml.XMLConstants.W3C_XML_SCHEMA_INSTANCE_NS_URI">
                     * <p>W3C XML Schema Instance Namespace URI.</p>
                     *
                     * <p>Defined to be "<code>http://www.w3.org/2001/XMLSchema-instance</code>".</p>
                     *
                     * @see <a href="http://www.w3.org/TR/xmlschema-1/#Instance_Document_Constructions">
                     *  XML Schema Part 1:
                     *  Structures, 2.6 Schema-Related Markup in Documents Being Validated</a></member>
        <member name="F:biz.ritter.javapix.xml.XMLConstants.W3C_XPATH_DATATYPE_NS_URI">
                     * <p>W3C XPath Datatype Namespace URI.</p>
                     *
                     * <p>Defined to be "<code>http://www.w3.org/2003/11/xpath-datatypes</code>".</p>
                     *
                     * @see <a href="http://www.w3.org/TR/xpath-datamodel">XQuery 1.0 and XPath 2.0 Data Model</a></member>
        <member name="F:biz.ritter.javapix.xml.XMLConstants.XML_DTD_NS_URI">
                     * <p>XML Document Type Declaration Namespace URI as an arbitrary value.</p>
                     *
                     * <p>Since not formally defined by any existing standard, arbitrarily define to be "<code>http://www.w3.org/TR/REC-xml</code>".</p></member>
        <member name="F:biz.ritter.javapix.xml.XMLConstants.RELAXNG_NS_URI">
                     * <p>RELAX NG Namespace URI.</p>
                     *
                     * <p>Defined to be "<code>http://relaxng.org/ns/structure/1.0</code>".</p>
                     *
                     * @see <a href="http://relaxng.org/spec-20011203.html">RELAX NG Specification</a></member>
        <member name="F:biz.ritter.javapix.xml.XMLConstants.FEATURE_SECURE_PROCESSING">
                     * <p>Feature for secure processing.</p>
                     *
                     * <ul>
                     *   <li>
                     *     <code>true</code> instructs the implementation to process XML securely.
                     *     This may set limits on XML constructs to avoid conditions such as denial of service attacks.
                     *   </li>
                     *   <li>
                     *     <code>false</code> instructs the implementation to process XML acording the letter of the XML specifications
                     *     ingoring security issues such as limits on XML constructs to avoid conditions such as denial of service attacks.
                     *   </li>
                     * </ul></member>
        <member name="T:biz.ritter.javapi.awt.color.CMMException">
                 * @author Oleg V. Khaschansky</member>
        <member name="T:biz.ritter.javapi.awt.color.ICC_Profile">
                 * @author Oleg V. Khaschansky</member>
        <member name="F:biz.ritter.javapi.awt.color.ICC_Profile.headerSize">
                     * Size of a profile header</member>
        <member name="F:biz.ritter.javapi.awt.color.ICC_Profile.headerMagicNumber">
                     * header magic number</member>
        <member name="F:biz.ritter.javapi.awt.color.ICC_Profile.profileHandle">
                     *  Handle to the current profile</member>
        <member name="F:biz.ritter.javapi.awt.color.ICC_Profile.handleStolen">
                     * If handle is used by another class
                     * this object is not responsible for closing profile</member>
        <member name="F:biz.ritter.javapi.awt.color.ICC_Profile.headerData">
                     * Cached header data</member>
        <member name="F:biz.ritter.javapi.awt.color.ICC_Profile.openedProfileObject">
                     * Serialization support</member>
        <member name="M:biz.ritter.javapi.awt.color.ICC_Profile.csFromSignature(System.Int32)">
                     * Converts ICC color space signature to the java predefined
                     * color space type
                     * @param signature
                     * @return</member>
        <member name="M:biz.ritter.javapi.awt.color.ICC_Profile.getIntFromHeader(System.Int32)">
                     * Reads integer from the profile header at the specified position
                     * @param idx - offset in bytes from the beginning of the header
                     * @return</member>
        <member name="T:biz.ritter.javapi.awt.color.ColorSpace">
             * @author Oleg V. Khaschansky</member>
        <member name="T:biz.ritter.javapi.awt.color.ICC_ColorSpace">
                 * @author Oleg V. Khaschansky</member>
        <member name="F:biz.ritter.javapi.awt.color.ICC_ColorSpace.MAX_XYZ">
                     * According to ICC specification (from http://www.color.org)
                     * "For the CIEXYZ encoding, each component (X, Y, and Z)
                     * is encoded as a u1Fixed15Number".
                     * This means that max value for this encoding is 1 + (32767/32768)</member>
        <member name="T:biz.ritter.javapi.awt.color.ICC_ProfileStub">
                 * @author Oleg V. Khaschansky</member>
        <member name="M:biz.ritter.javapi.awt.color.ICC_ProfileStub.writeReplace">
                     * Serializable implementation
                     *
                     * @throws ObjectStreamException</member>
        <member name="T:biz.ritter.javapi.awt.color.ProfileDataException">
                 * @author Oleg V. Khaschansky</member>
        <member name="F:biz.ritter.javapi.awt.Component.BOUNDS_NOMOVE">
            <summary>
            Means only size should be changed. (Basties note: excluded von Apache WTK NativeWindow Interface)
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.awt.Component.BOUNDS_NOSIZE">
            <summary>
            Means only position should be changed. (Basties note: excluded von Apache WTK NativeWindow Interface)
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.awt.Component.parent">
            <summary>
            The parent container, wich included this component.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.awt.Component.toolkit">
            <summary>
            The GUI toolkit
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.awt.Component.valid">
            <summary>
            Flag for (in)validate component.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.awt.Component.TOP_ALIGNMENT">
            <summary>
            Constant for component alignment
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.awt.Component.CENTER_ALIGNMENT">
            <summary>
            Constant for component alignment
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.awt.Component.BOTTOM_ALIGNMENT">
            <summary>
            Constant for component alignment
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.awt.Component.LEFT_ALIGNMENT">
            <summary>
            Constant for component alignment
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.awt.Component.RIGHT_ALIGNMENT">
            <summary>
            Constant for component alignment
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.awt.Component.x">
            <summary>
            Component x location
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.awt.Component.y">
            <summary>
            Component y location
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.awt.Component.width">
            <summary>
            Component width
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.awt.Component.height">
            <summary>
            Component height
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.awt.Component.setBounds(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
                     * Update the component bounds and post the appropriate events</member>
        <member name="M:biz.ritter.javapi.awt.Component.notifyInputMethod(biz.ritter.javapi.awt.Rectangle)">
                     * Calls InputContextImpl.notifyClientWindowChanged.</member>
        <member name="M:biz.ritter.javapi.awt.Component.getRealParent">
                     * Gets only parent of a child component, but not owner of a window.
                     *
                     * @return parent of child component, null if component is a top-level
                     *         (Window instance)</member>
        <member name="F:biz.ritter.javapi.awt.Dialog.delegateInstance">
            <summary>
            Containts the implementation class for an AWT Dialog.
            </summary>
        </member>
        <member name="T:biz.ritter.javapi.awt.eventj.ComponentEvent">
                 * @author Michael Danilov</member>
        <member name="T:biz.ritter.javapi.awt.eventj.WindowEvent">
                 * @author Michael Danilov</member>
        <member name="T:biz.ritter.javapi.awt.eventj.WindowFocusListener">
                 * @author Michael Danilov</member>
        <member name="T:biz.ritter.javapi.awt.eventj.WindowListener">
                 * @author Michael Danilov</member>
        <member name="T:biz.ritter.javapi.awt.font.FontRenderContext">
                 * @author Ilya S. Okomin</member>
        <member name="T:biz.ritter.javapi.awt.font.LineMetrics">
                 * @author Ilya S. Okomin</member>
        <member name="T:biz.ritter.javapi.awt.geom.CubicCurve2D">
             * @author Denis M. Kishenko</member>
        <member name="F:biz.ritter.javapi.awt.geom.CubicCurve2D.Iterator.c">
                     * The source CubicCurve2D object</member>
        <member name="F:biz.ritter.javapi.awt.geom.CubicCurve2D.Iterator.t">
                     * The path iterator transformation</member>
        <member name="F:biz.ritter.javapi.awt.geom.CubicCurve2D.Iterator.index">
                     * The current segmenet index</member>
        <member name="M:biz.ritter.javapi.awt.geom.CubicCurve2D.Iterator.#ctor(biz.ritter.javapi.awt.geom.CubicCurve2D,biz.ritter.javapi.awt.geom.AffineTransform)">
                     * Constructs a new CubicCurve2D.Iterator for given line and transformation
                     * @param c - the source CubicCurve2D object
                     * @param at - the AffineTransform object to apply rectangle path</member>
        <member name="T:biz.ritter.javapi.awt.geom.Dimension2D">
                 * @author Denis M. Kishenko</member>
        <member name="T:biz.ritter.javapi.awt.geom.FlatteningPathIterator">
             * @author Denis M. Kishenko</member>
        <member name="F:biz.ritter.javapi.awt.geom.FlatteningPathIterator.BUFFER_SIZE">
                 * The default points buffer size</member>
        <member name="F:biz.ritter.javapi.awt.geom.FlatteningPathIterator.BUFFER_LIMIT">
                 * The default curve subdivision limit</member>
        <member name="F:biz.ritter.javapi.awt.geom.FlatteningPathIterator.BUFFER_CAPACITY">
                 * The points buffer capacity</member>
        <member name="F:biz.ritter.javapi.awt.geom.FlatteningPathIterator.bufType">
                 * The type of current segment to be flat</member>
        <member name="F:biz.ritter.javapi.awt.geom.FlatteningPathIterator.bufLimit">
                 * The curve subdivision limit</member>
        <member name="F:biz.ritter.javapi.awt.geom.FlatteningPathIterator.bufSize">
                 * The current points buffer size</member>
        <member name="F:biz.ritter.javapi.awt.geom.FlatteningPathIterator.bufIndex">
                 * The inner cursor position in points buffer</member>
        <member name="F:biz.ritter.javapi.awt.geom.FlatteningPathIterator.bufSubdiv">
                 * The current subdivision count</member>
        <member name="F:biz.ritter.javapi.awt.geom.FlatteningPathIterator.buf">
                 * The points buffer</member>
        <member name="F:biz.ritter.javapi.awt.geom.FlatteningPathIterator.bufEmpty">
                 * The indicator of empty points buffer</member>
        <member name="F:biz.ritter.javapi.awt.geom.FlatteningPathIterator.p">
                 * The source PathIterator</member>
        <member name="F:biz.ritter.javapi.awt.geom.FlatteningPathIterator.flatness">
                 * The flatness of new path</member>
        <member name="F:biz.ritter.javapi.awt.geom.FlatteningPathIterator.flatness2">
                 * The square of flatness</member>
        <member name="F:biz.ritter.javapi.awt.geom.FlatteningPathIterator.px">
                 * The x coordinate of previous path segment</member>
        <member name="F:biz.ritter.javapi.awt.geom.FlatteningPathIterator.py">
                 * The y coordinate of previous path segment</member>
        <member name="F:biz.ritter.javapi.awt.geom.FlatteningPathIterator.coords">
                 * The tamporary buffer for getting points from PathIterator</member>
        <member name="M:biz.ritter.javapi.awt.geom.FlatteningPathIterator.evaluate">
                 * Calculates flat path points for current segment of the source shape.
                 *
                 * Line segment is flat by itself. Flatness of quad and cubic curves evaluated by getFlatnessSq() method.
                 * Curves subdivided until current flatness is bigger than user defined and subdivision limit isn't exhausted.
                 * Single source segment translated to series of buffer points. The less flatness the bigger serries.
                 * Every currentSegment() call extract one point from the buffer. When series completed evaluate() takes next source shape segment.</member>
        <member name="T:biz.ritter.javapi.awt.geom.GeneralPath">
             * @author Denis M. Kishenko</member>
        <member name="F:biz.ritter.javapi.awt.geom.GeneralPath.BUFFER_SIZE">
                 * The buffers size</member>
        <member name="F:biz.ritter.javapi.awt.geom.GeneralPath.BUFFER_CAPACITY">
                 * The buffers capacity</member>
        <member name="F:biz.ritter.javapi.awt.geom.GeneralPath.types">
                 * The point's types buffer</member>
        <member name="F:biz.ritter.javapi.awt.geom.GeneralPath.points">
                 * The points buffer</member>
        <member name="F:biz.ritter.javapi.awt.geom.GeneralPath.typeSize">
                 * The point's type buffer size</member>
        <member name="F:biz.ritter.javapi.awt.geom.GeneralPath.pointSize">
                 * The points buffer size</member>
        <member name="F:biz.ritter.javapi.awt.geom.GeneralPath.rule">
                 * The path rule</member>
        <member name="F:biz.ritter.javapi.awt.geom.GeneralPath.pointShift">
                 * The space amount in points buffer for different segmenet's types</member>
        <member name="F:biz.ritter.javapi.awt.geom.GeneralPath.Iterator.typeIndex">
                     * The current cursor position in types buffer</member>
        <member name="F:biz.ritter.javapi.awt.geom.GeneralPath.Iterator.pointIndex">
                     * The current cursor position in points buffer</member>
        <member name="F:biz.ritter.javapi.awt.geom.GeneralPath.Iterator.p">
                     * The source GeneralPath object</member>
        <member name="F:biz.ritter.javapi.awt.geom.GeneralPath.Iterator.t">
                     * The path iterator transformation</member>
        <member name="M:biz.ritter.javapi.awt.geom.GeneralPath.Iterator.#ctor(biz.ritter.javapi.awt.geom.GeneralPath)">
                     * Constructs a new GeneralPath.Iterator for given general path
                     * @param path - the source GeneralPath object</member>
        <member name="M:biz.ritter.javapi.awt.geom.GeneralPath.Iterator.#ctor(biz.ritter.javapi.awt.geom.GeneralPath,biz.ritter.javapi.awt.geom.AffineTransform)">
                     * Constructs a new GeneralPath.Iterator for given general path and transformation
                     * @param path - the source GeneralPath object
                     * @param at - the AffineTransform object to apply rectangle path</member>
        <member name="M:biz.ritter.javapi.awt.geom.GeneralPath.checkBuf(System.Int32,System.Boolean)">
                 * Checks points and types buffer size to add pointCount points. If necessary realloc buffers to enlarge size.
                 * @param pointCount - the point count to be added in buffer</member>
        <member name="M:biz.ritter.javapi.awt.geom.GeneralPath.isInside(System.Int32)">
                 * Checks cross count according to path rule to define is it point inside shape or not.
                 * @param cross - the point cross count
                 * @return true if point is inside path, or false otherwise</member>
        <member name="T:biz.ritter.javapi.awt.geom.IllegalPathStateException">
                 * @author Denis M. Kishenko</member>
        <member name="T:biz.ritter.javapi.awt.geom.Line2D">
             * @author Denis M. Kishenko</member>
        <member name="F:biz.ritter.javapi.awt.geom.Line2D.Iterator.x1">
                     * The x coordinate of the start line point</member>
        <member name="F:biz.ritter.javapi.awt.geom.Line2D.Iterator.y1">
                     * The y coordinate of the start line point</member>
        <member name="F:biz.ritter.javapi.awt.geom.Line2D.Iterator.x2">
                     * The x coordinate of the end line point</member>
        <member name="F:biz.ritter.javapi.awt.geom.Line2D.Iterator.y2">
                     * The y coordinate of the end line point</member>
        <member name="F:biz.ritter.javapi.awt.geom.Line2D.Iterator.t">
                     * The path iterator transformation</member>
        <member name="F:biz.ritter.javapi.awt.geom.Line2D.Iterator.index">
                     * The current segmenet index</member>
        <member name="M:biz.ritter.javapi.awt.geom.Line2D.Iterator.#ctor(biz.ritter.javapi.awt.geom.Line2D,biz.ritter.javapi.awt.geom.AffineTransform)">
                     * Constructs a new Line2D.Iterator for given line and transformation
                     * @param l - the source Line2D object
                     * @param at - the AffineTransform object to apply rectangle path</member>
        <member name="T:biz.ritter.javapi.awt.geom.NoninvertibleTransformException">
                 * @author Denis M. Kishenko</member>
        <member name="T:biz.ritter.javapi.awt.geom.QuadCurve2D">
             * @author Denis M. Kishenko</member>
        <member name="F:biz.ritter.javapi.awt.geom.QuadCurve2D.Iterator.c">
                     * The source QuadCurve2D object</member>
        <member name="F:biz.ritter.javapi.awt.geom.QuadCurve2D.Iterator.t">
                     * The path iterator transformation</member>
        <member name="F:biz.ritter.javapi.awt.geom.QuadCurve2D.Iterator.index">
                     * The current segmenet index</member>
        <member name="M:biz.ritter.javapi.awt.geom.QuadCurve2D.Iterator.#ctor(biz.ritter.javapi.awt.geom.QuadCurve2D,biz.ritter.javapi.awt.geom.AffineTransform)">
                     * Constructs a new QuadCurve2D.Iterator for given line and transformation
                     * @param q - the source QuadCurve2D object
                     * @param at - the AffineTransform object to apply rectangle path</member>
        <member name="T:biz.ritter.javapi.awt.geom.RectangularShape">
             * @author Denis M. Kishenko</member>
        <member name="T:biz.ritter.javapi.awt.image.ColorModel">
                 * @author Igor V. Stolyarov</member>
        <member name="T:biz.ritter.javapi.awt.image.ComponentSampleModel">
                 * @author Igor V. Stolyarov</member>
        <member name="T:biz.ritter.javapi.awt.image.DataBuffer">
             * @author Igor V. Stolyarov</member>
        <member name="T:biz.ritter.javapi.awt.image.DataBufferByte">
                 * @author Igor V. Stolyarov</member>
        <member name="T:biz.ritter.javapi.awt.image.DataBufferDouble">
             * @author Igor V. Stolyarov</member>
        <member name="T:biz.ritter.javapi.awt.image.DataBufferFloat">
                 * @author Igor V. Stolyarov</member>
        <member name="T:biz.ritter.javapi.awt.image.DataBufferInt">
                 * @author Igor V. Stolyarov</member>
        <member name="T:biz.ritter.javapi.awt.image.DataBufferShort">
                 * @author Igor V. Stolyarov</member>
        <member name="T:biz.ritter.javapi.awt.image.DataBufferUShort">
             * @author Igor V. Stolyarov</member>
        <member name="T:biz.ritter.javapi.awt.image.DirectColorModel">
                 * @author Igor V. Stolyarov</member>
        <member name="M:biz.ritter.javapi.awt.image.DirectColorModel.initLUTs">
                     * Initialization of Lookup tables</member>
        <member name="F:biz.ritter.javapi.awt.image.DirectColorModel.is_sRGB">
            <summary>
            ColorModel has sRGB ColorSpace
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.awt.image.DirectColorModel.is_LINEAR_RGB">
            <summary>
            Color Model has Linear RGB Color Space
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.awt.image.MultiPixelPackedSampleModel.setSample(System.Int32,System.Int32,System.Object,biz.ritter.javapi.awt.image.DataBuffer,System.Int32,System.Int32)">
                     * This method is used by other methods of this class. The behaviour of
                     * this method depends on the method which has been invoke this one. The
                     * argument methodId is used to choose valid behaviour in a particular case.
                     * If methodId is equal to 1 it means that this method has been invoked by
                     * the setDataElements() method, 2 - means setPixel(), and setSample() in
                     * any other cases.</member>
        <member name="T:biz.ritter.javapi.awt.image.PixelInterleavedSampleModel">
                 * @author Igor V. Stolyarov</member>
        <member name="T:biz.ritter.javapi.awt.image.Raster">
             * @author Igor V. Stolyarov</member>
        <member name="T:biz.ritter.javapi.awt.image.RasterFormatException">
             * @author Igor V. Stolyarov</member>
        <member name="T:biz.ritter.javapi.awt.image.SampleModel">
                 * @author Igor V. Stolyarov</member>
        <member name="T:biz.ritter.javapi.awt.image.SinglePixelPackedSampleModel">
                 * @author Igor V. Stolyarov</member>
        <member name="T:biz.ritter.javapi.awt.image.WritableRaster">
                 * @author Igor V. Stolyarov</member>
        <member name="T:biz.ritter.javapi.awt.image.PackedColorModel">
                 * @author Igor V. Stolyarov</member>
        <member name="T:biz.ritter.javapi.awt.Color">
                 * @author Oleg V. Khaschansky</member>
        <member name="F:biz.ritter.javapi.awt.Color.value">
                     * integer RGB value</member>
        <member name="T:biz.ritter.javapi.awt.Dimension">
                 * @author Denis M. Kishenko</member>
        <member name="T:biz.ritter.javapi.awt.AWTError">
                 * @author Michael Danilov</member>
        <member name="T:biz.ritter.javapi.awt.AWTEvent">
                 * @author Dmitry A. Durnev, Michael Danilov</member>
        <member name="T:biz.ritter.javapi.awt.Event">
                 * @author Dmitry A. Durnev</member>
        <member name="T:biz.ritter.javapi.awt.eventj.ActionEvent">
                 * @author Michael Danilov</member>
        <member name="T:biz.ritter.javapi.awt.eventj.ActionListener">
                 * @author Michael Danilov</member>
        <member name="F:biz.ritter.javapi.awt.Frame.delegateInstance">
            <summary>
            Containts the implementation class for an AWT Frame.
            </summary>
        </member>
        <member name="T:biz.ritter.javapi.awt.ItemSelectable">
                 * @author Michael Danilov</member>
        <member name="T:biz.ritter.javapi.awt.Insets">
                 * @author Dmitry A. Durnev</member>
        <member name="T:biz.ritter.javapi.awt.LayoutManager">
                 * @author Michael Danilov</member>
        <member name="T:biz.ritter.javapi.awt.LayoutManager2">
                 * @author Michael Danilov</member>
        <member name="T:biz.ritter.javapi.awt.Paint">
                 * Paint</member>
        <member name="T:biz.ritter.javapi.awt.PaintContext">
                 * PaintContext
                 * @author Alexey A. Petrenko</member>
        <member name="M:biz.ritter.javapi.awt.peer.DialogPeer.setTitle(System.String)">
            <summary>
            Set the title of frame
            </summary>
            <param name="newTitle">title</param>
        </member>
        <member name="M:biz.ritter.javapi.awt.peer.WindowPeer.setVisible(System.Boolean)">
            <summary>
            Display or hides this frame and contained child GUI element.
            </summary>
            <param name="showMe">true if to display, false if to hide</param>
        </member>
        <member name="M:biz.ritter.javapi.awt.peer.WindowPeer.show">
            <summary>
            Show the window - obsoleted by setVisisble()
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.awt.peer.WindowPeer.getHeight">
            <summary>
            Return the window height in pixel
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:biz.ritter.javapi.awt.peer.WindowPeer.getWidth">
            <summary>
            Return the window width in pixel
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:biz.ritter.javapi.awt.peer.WindowPeer.getX">
            <summary>
            Return the window x location
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:biz.ritter.javapi.awt.peer.WindowPeer.getY">
            <summary>
            Return the window y location
            </summary>
            <returns>
            </returns>
        </member>
        <member name="T:biz.ritter.javapi.awt.Point">
                 * @author Denis M. Kishenko</member>
        <member name="T:biz.ritter.javapi.awt.Rectangle">
                 * @author Denis M. Kishenko</member>
        <member name="T:biz.ritter.javapi.awt.RenderingHints">
             * RenderingHints
             * @author Alexey A. Petrenko</member>
        <member name="T:biz.ritter.javapi.awt.RenderingHints.Key">
                 * Key</member>
        <member name="T:biz.ritter.javapi.awt.RenderingHints.KeyImpl">
                 * Private implementation of Key class</member>
        <member name="T:biz.ritter.javapi.awt.RenderingHints.KeyValue">
                 * Private class KeyValue is used as value for Key class instance.</member>
        <member name="T:biz.ritter.javapi.awt.Shape">
                 * Shape
                 * @author Alexey A. Petrenko</member>
        <member name="M:biz.ritter.javapi.awt.Toolkit.createFrame(biz.ritter.javapi.awt.Frame)">
            <summary>
            Create a Frame.
            </summary>
            <param name="target">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:biz.ritter.javapi.awt.Toolkit.createDialog(biz.ritter.javapi.awt.Dialog)">
            <summary>
            Create a Dialog.
            </summary>
            <param name="target">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:biz.ritter.javapi.awt.Toolkit.createWindow(biz.ritter.javapi.awt.Window)">
            <summary>
            Create a Window.
            </summary>
            <param name="target">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:biz.ritter.javapi.awt.Toolkit.getDefaultToolkit">
            <summary>
            Gets the default toolkit.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:biz.ritter.javapi.awt.Toolkit.lockAWT">
            <summary>
            Method for Apache Harmony compatiblity
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.awt.Toolkit.unlockAWT">
            <summary>
            Method for Apache Harmony compatiblity
            </summary>
        </member>
        <member name="T:biz.ritter.javapi.awt.geom.AffineTransform">
                 * @author Denis M. Kishenko</member>
        <member name="F:biz.ritter.javapi.awt.geom.AffineTransform.TYPE_UNKNOWN">
                     * The <code>TYPE_UNKNOWN</code> is an initial type value</member>
        <member name="F:biz.ritter.javapi.awt.geom.AffineTransform.ZERO">
                     * The min value equivalent to zero. If absolute value less then ZERO it considered as zero.</member>
        <member name="F:biz.ritter.javapi.awt.geom.AffineTransform.m00">
                     * The values of transformation matrix</member>
        <member name="F:biz.ritter.javapi.awt.geom.AffineTransform.type">
                     * The transformation <code>type</code></member>
        <member name="M:biz.ritter.javapi.awt.geom.AffineTransform.multiply(biz.ritter.javapi.awt.geom.AffineTransform,biz.ritter.javapi.awt.geom.AffineTransform)">
                     * Multiply matrix of two AffineTransform objects
                     * @param t1 - the AffineTransform object is a multiplicand
                     * @param t2 - the AffineTransform object is a multiplier
                     * @return an AffineTransform object that is a result of t1 multiplied by matrix t2.</member>
        <member name="M:biz.ritter.javapi.awt.geom.AffineTransform.writeObject(biz.ritter.javapi.io.ObjectOutputStream)">
                     * Write AffineTrasform object to the output steam.
                     * @param stream - the output stream
                     * @throws IOException - if there are I/O errors while writing to the output strem</member>
        <member name="M:biz.ritter.javapi.awt.geom.AffineTransform.readObject(biz.ritter.javapi.io.ObjectInputStream)">
                     * Read AffineTransform object from the input stream
                     * @param stream - the input steam
                     * @throws IOException - if there are I/O errors while reading from the input strem
                     * @throws ClassNotFoundException - if class could not be found</member>
        <member name="T:biz.ritter.javapi.awt.geom.PathIterator">
                 * @author Denis M. Kishenko</member>
        <member name="T:biz.ritter.javapi.awt.geom.Point2D">
             * @author Denis M. Kishenko</member>
        <member name="F:biz.ritter.javapi.awt.geom.Rectangle2D.Iterator.x">
                         * The x coordinate of left-upper rectangle corner</member>
        <member name="F:biz.ritter.javapi.awt.geom.Rectangle2D.Iterator.y">
                         * The y coordinate of left-upper rectangle corner</member>
        <member name="F:biz.ritter.javapi.awt.geom.Rectangle2D.Iterator.width">
                         * The width of rectangle</member>
        <member name="F:biz.ritter.javapi.awt.geom.Rectangle2D.Iterator.height">
                         * The height of rectangle</member>
        <member name="F:biz.ritter.javapi.awt.geom.Rectangle2D.Iterator.t">
                         * The path iterator transformation</member>
        <member name="F:biz.ritter.javapi.awt.geom.Rectangle2D.Iterator.index">
                         * The current segmenet index</member>
        <member name="M:biz.ritter.javapi.awt.geom.Rectangle2D.Iterator.#ctor(biz.ritter.javapi.awt.geom.Rectangle2D,biz.ritter.javapi.awt.geom.AffineTransform)">
                         * Constructs a new Rectangle2D.Iterator for given rectangle and transformation
                         * @param r - the source Rectangle2D object
                         * @param at - the AffineTransform object to apply rectangle path</member>
        <member name="T:biz.ritter.javapi.awt.Transparency">
                 * @author Pavel Dolgov</member>
        <member name="F:biz.ritter.javapi.awt.Window.delegateInstance">
            <summary>
            Containts the implementation class for an AWT Dialog.
            </summary>
        </member>
        <member name="T:biz.ritter.javapi.beans.IndexedPropertyChangeEvent">
                 * A type of {@link PropertyChangeEvent} that indicates that an indexed property
                 * has changed.
                 *
                 * @since 1.5</member>
        <member name="M:biz.ritter.javapi.beans.IndexedPropertyChangeEvent.#ctor(System.Object,System.String,System.Object,System.Object,System.Int32)">
                     * Creates a new property changed event with an indication of the property
                     * index.
                     *
                     * @param source
                     *            the changed bean.
                     * @param propertyName
                     *            the changed property, or <code>null</code> to indicate an
                     *            unspecified set of the properties have changed.
                     * @param oldValue
                     *            the previous value of the property, or <code>null</code> if
                     *            the <code>propertyName</code> is <code>null</code> or the
                     *            previous value is unknown.
                     * @param newValue
                     *            the new value of the property, or <code>null</code> if the
                     *            <code>propertyName</code> is <code>null</code> or the new
                     *            value is unknown..
                     * @param index
                     *            the index of the property.</member>
        <member name="M:biz.ritter.javapi.beans.IndexedPropertyChangeEvent.getIndex">
                     * Answer the index of the property that was changed in this event.
                     *
                     * @return The property element index.</member>
        <member name="M:biz.ritter.javapi.beans.VetoableChangeListener.vetoableChange(biz.ritter.javapi.beans.PropertyChangeEvent)">
            <summary>
            Method tells a vetoable change on property is coming.
            </summary>
            <param name="e">
            </param>
        </member>
        <member name="M:biz.ritter.javapi.beans.Visibility.avoidingGui">
            <summary>
            Bean avoiding GUI
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:biz.ritter.javapi.beans.Visibility.dontUseGui">
            <summary>
            Hey Bean, do not use GUI!
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.beans.Visibility.needsGui">
            <summary>
            This Bean need a GUI.
            </summary>
            <returns>GUI needed?</returns>
        </member>
        <member name="M:biz.ritter.javapi.beans.Visibility.okToUseGui">
            <summary>
            Bean can use a GUI.
            </summary>
        </member>
        <member name="T:biz.ritter.javapi.io.BufferedWriter">
                 * Wraps an existing {@link Writer} and <em>buffers</em> the output. Expensive
                 * interaction with the underlying reader is minimized, since most (smaller)
                 * requests can be satisfied by accessing the buffer alone. The drawback is that
                 * some extra space is required to hold the buffer and that copying takes place
                 * when filling that buffer, but this is usually outweighed by the performance
                 * benefits.
                 *
                 * <p />A typical application pattern for the class looks like this:<p />
                 *
                 * <pre>
                 * BufferedWriter buf = new BufferedWriter(new FileWriter("file.java"));
                 * </pre>
                 *
                 * @see BufferedReader</member>
        <member name="M:biz.ritter.javapi.io.BufferedWriter.#ctor(biz.ritter.javapi.io.Writer)">
                     * Constructs a new {@code BufferedWriter} with {@code outj} as the writer
                     * for which to buffer write operations. The buffer size is set to the
                     * default value of 8 KB.
                     *
                     * @param outj
                     *            the writer for which character writing is buffered.</member>
        <member name="M:biz.ritter.javapi.io.BufferedWriter.#ctor(biz.ritter.javapi.io.Writer,System.Int32)">
                     * Constructs a new {@code BufferedWriter} with {@code outj} as the writer
                     * for which to buffer write operations. The buffer size is set to {@code
                     * size}.
                     *
                     * @param outj
                     *            the writer for which character writing is buffered.
                     * @param size
                     *            the size of the buffer in bytes.
                     * @throws IllegalArgumentException
                     *             if {@code size &lt;= 0}.</member>
        <member name="M:biz.ritter.javapi.io.BufferedWriter.close">
                     * Closes this writer. The contents of the buffer are flushed, the target
                     * writer is closed, and the buffer is released. Only the first invocation
                     * of close has any effect.
                     *
                     * @throws IOException
                     *             if an error occurs while closing this writer.</member>
        <member name="M:biz.ritter.javapi.io.BufferedWriter.flush">
                     * Flushes this writer. The contents of the buffer are committed to the
                     * target writer and it is then flushed.
                     *
                     * @throws IOException
                     *             if an error occurs while flushing this writer.</member>
        <member name="M:biz.ritter.javapi.io.BufferedWriter.flushInternal">
                     * Flushes the internal buffer.</member>
        <member name="M:biz.ritter.javapi.io.BufferedWriter.isClosed">
                     * Indicates whether this writer is closed.
                     *
                     * @return {@code true} if this writer is closed, {@code false} otherwise.</member>
        <member name="M:biz.ritter.javapi.io.BufferedWriter.newLine">
                     * Writes a newline to this writer. A newline is determined by the System
                     * property "line.separator". The target writer may or may not be flushed
                     * when a newline is written.
                     *
                     * @throws IOException
                     *             if an error occurs attempting to write to this writer.</member>
        <member name="M:biz.ritter.javapi.io.BufferedWriter.write(System.Char[],System.Int32,System.Int32)">
                     * Writes {@code count} characters starting at {@code offset} in
                     * {@code cbuf} to this writer. If {@code count} is greater than this
                     * writer's buffer, then the buffer is flushed and the characters are
                     * written directly to the target writer.
                     *
                     * @param cbuf
                     *            the array containing characters to write.
                     * @param offset
                     *            the start position in {@code cbuf} for retrieving characters.
                     * @param count
                     *            the maximum number of characters to write.
                     * @throws IndexOutOfBoundsException
                     *             if {@code offset &lt; 0} or {@code count &lt; 0}, or if
                     *             {@code offset + count} is greater than the size of
                     *             {@code cbuf}.
                     * @throws IOException
                     *             if this writer is closed or another I/O error occurs.</member>
        <member name="M:biz.ritter.javapi.io.BufferedWriter.write(System.Int32)">
                     * Writes the character {@code oneChar} to this writer. If the buffer
                     * gets full by writing this character, this writer is flushed. Only the
                     * lower two bytes of the integer {@code oneChar} are written.
                     *
                     * @param oneChar
                     *            the character to write.
                     * @throws IOException
                     *             if this writer is closed or another I/O error occurs.</member>
        <member name="M:biz.ritter.javapi.io.BufferedWriter.write(System.String,System.Int32,System.Int32)">
                     * Writes {@code count} characters starting at {@code offset} in {@code str}
                     * to this writer. If {@code count} is greater than this writer's buffer,
                     * then this writer is flushed and the remaining characters are written
                     * directly to the target writer. If count is negative no characters are
                     * written to the buffer. This differs from the behavior of the superclass.
                     *
                     * @param str
                     *            the non-null String containing characters to write.
                     * @param offset
                     *            the start position in {@code str} for retrieving characters.
                     * @param count
                     *            maximum number of characters to write.
                     * @throws IOException
                     *             if this writer has already been closed or another I/O error
                     *             occurs.
                     * @throws IndexOutOfBoundsException
                     *             if {@code offset &lt; 0} or {@code offset + count} is greater
                     *             than the length of {@code str}.</member>
        <member name="T:biz.ritter.javapi.io.FileNotFoundException">
                 * Thrown when a file specified by a program cannot be found.</member>
        <member name="M:biz.ritter.javapi.io.FileNotFoundException.#ctor">
                     * Constructs a new {@code FileNotFoundException} with its stack trace
                     * filled in.</member>
        <member name="M:biz.ritter.javapi.io.FileNotFoundException.#ctor(System.String)">
                     * Constructs a new {@code FileNotFoundException} with its stack trace and
                     * detail message filled in.
                     *
                     * @param detailMessage
                     *            the detail message for this exception.</member>
        <member name="T:biz.ritter.javapi.io.FileReader">
                 * A specialized {@link Reader} that reads from a file in the file system.
                 * All read requests made by calling methods in this class are directly
                 * forwarded to the equivalent function of the underlying operating system.
                 * Since this may induce some performance penalty, in particular if many small
                 * read requests are made, a FileReader is often wrapped by a
                 * BufferedReader.
                 *
                 * @see BufferedReader
                 * @see FileWriter</member>
        <member name="M:biz.ritter.javapi.io.FileReader.#ctor(biz.ritter.javapi.io.File)">
                     * Constructs a new FileReader on the given {@code file}.
                     *
                     * @param file
                     *            a File to be opened for reading characters from.
                     * @throws FileNotFoundException
                     *             if {@code file} does not exist.</member>
        <member name="M:biz.ritter.javapi.io.FileReader.#ctor(System.String)">
                     * Construct a new FileReader on the given file named {@code filename}.
                     *
                     * @param filename
                     *            an absolute or relative path specifying the file to open.
                     * @throws FileNotFoundException
                     *             if there is no file named {@code filename}.</member>
        <member name="T:biz.ritter.javapi.io.FileWriter">
                 * A specialized {@link Writer} that writes to a file in the file system.
                 * All write requests made by calling methods in this class are directly
                 * forwarded to the equivalent function of the underlying operating system.
                 * Since this may induce some performance penalty, in particular if many small
                 * write requests are made, a FileWriter is often wrapped by a
                 * BufferedWriter.
                 *
                 * @see BufferedWriter
                 * @see FileReader</member>
        <member name="M:biz.ritter.javapi.io.FileWriter.#ctor(biz.ritter.javapi.io.File)">
                     * Creates a FileWriter using the File {@code file}.
                     *
                     * @param file
                     *            the non-null File to write bytes to.
                     * @throws IOException
                     *             if {@code file} cannot be opened for writing.</member>
        <member name="M:biz.ritter.javapi.io.FileWriter.#ctor(biz.ritter.javapi.io.File,System.Boolean)">
                     * Creates a FileWriter using the File {@code file}. The parameter
                     * {@code append} determines whether or not the file is opened and appended
                     * to or just opened and overwritten.
                     *
                     * @param file
                     *            the non-null File to write bytes to.
                     * @param append
                     *            indicates whether or not to append to an existing file.
                     * @throws IOException
                     *             if the {@code file} cannot be opened for writing.</member>
        <member name="M:biz.ritter.javapi.io.FileWriter.#ctor(System.String)">
                     * Creates a FileWriter using the platform dependent {@code filename}.
                     *
                     * @param filename
                     *            the non-null name of the file to write bytes to.
                     * @throws IOException
                     *             if the file cannot be opened for writing.</member>
        <member name="M:biz.ritter.javapi.io.FileWriter.#ctor(System.String,System.Boolean)">
                     * Creates a FileWriter using the platform dependent {@code filename}. The
                     * parameter {@code append} determines whether or not the file is opened and
                     * appended to or just opened and overwritten.
                     *
                     * @param filename
                     *            the non-null name of the file to write bytes to.
                     * @param append
                     *            indicates whether or not to append to an existing file.
                     * @throws IOException
                     *             if the {@code file} cannot be opened for writing.</member>
        <member name="T:biz.ritter.javapi.io.PipedInputStream">
                 * Receives information from a communications pipe. When two threads want to
                 * pass data back and forth, one creates a piped output stream and the other one
                 * creates a piped input stream.
                 *
                 * @see PipedOutputStream</member>
        <member name="F:biz.ritter.javapi.io.PipedInputStream.buffer">
                     * The circular buffer through which data is passed.</member>
        <member name="F:biz.ritter.javapi.io.PipedInputStream.inJ">
                     * The index in {@code buffer} where the next byte will be written.</member>
        <member name="F:biz.ritter.javapi.io.PipedInputStream.outJ">
                     * The index in {@code buffer} where the next byte will be read.</member>
        <member name="F:biz.ritter.javapi.io.PipedInputStream.PIPE_SIZE">
                     * The size of the default pipe in bytes.</member>
        <member name="F:biz.ritter.javapi.io.PipedInputStream.isConnected">
                     * Indicates if this pipe is connected.</member>
        <member name="M:biz.ritter.javapi.io.PipedInputStream.#ctor">
                     * Constructs a new unconnected {@code PipedInputStream}. The resulting
                     * stream must be connected to a {@link PipedOutputStream} before data may
                     * be read from it.</member>
        <member name="M:biz.ritter.javapi.io.PipedInputStream.#ctor(biz.ritter.javapi.io.PipedOutputStream)">
                     * Constructs a new {@code PipedInputStream} connected to the
                     * {@link PipedOutputStream} {@code out}. Any data written to the output
                     * stream can be read from the this input stream.
                     *
                     * @param out
                     *            the piped output stream to connect to.
                     * @throws IOException
                     *             if this stream or {@code out} are already connected.</member>
        <member name="M:biz.ritter.javapi.io.PipedInputStream.#ctor(biz.ritter.javapi.io.PipedOutputStream,System.Int32)">
                     * Constructs a new PipedInputStream connected to the PipedOutputStream
                     * <code>out</code> and uses the specified buffer size. Any data written
                     * to the output stream can be read from this input stream.
                     *
                     * @param out
                     *            the PipedOutputStream to connect to.
                     * @param pipeSize
                     *            the size of the buffer.
                     * @throws IOException
                     *             if an I/O error occurs.
                     * @throws IllegalArgumentException
                     *             if pipeSize is less than or equal to zero.
                     * @since 1.6</member>
        <member name="M:biz.ritter.javapi.io.PipedInputStream.#ctor(System.Int32)">
                     * Constructs a new unconnected PipedInputStream and uses the specified
                     * buffer size. The resulting Stream must be connected to a
                     * PipedOutputStream before data may be read from it.
                     *
                     * @param pipeSize
                     *            the size of the buffer.
                     * @throws IllegalArgumentException
                     *             if pipeSize is less than or equal to zero.
                     * @since 1.6</member>
        <member name="M:biz.ritter.javapi.io.PipedInputStream.available">
                     * Returns the number of bytes that are available before this stream will
                     * block. This implementation returns the number of bytes written to this
                     * pipe that have not been read yet.
                     *
                     * @return the number of bytes available before blocking.
                     * @throws IOException
                     *             if an error occurs in this stream.</member>
        <member name="M:biz.ritter.javapi.io.PipedInputStream.close">
                     * Closes this stream. This implementation releases the buffer used for the
                     * pipe and notifies all threads waiting to read or write.
                     *
                     * @throws IOException
                     *             if an error occurs while closing this stream.</member>
        <member name="M:biz.ritter.javapi.io.PipedInputStream.connect(biz.ritter.javapi.io.PipedOutputStream)">
                     * Connects this {@code PipedInputStream} to a {@link PipedOutputStream}.
                     * Any data written to the output stream becomes readable in this input
                     * stream.
                     *
                     * @param src
                     *            the source output stream.
                     * @throws IOException
                     *             if either stream is already connected.</member>
        <member name="M:biz.ritter.javapi.io.PipedInputStream.read">
                     * Reads a single byte from this stream and returns it as an integer in the
                     * range from 0 to 255. Returns -1 if the end of this stream has been
                     * reached. If there is no data in the pipe, this method blocks until data
                     * is available, the end of the stream is detected or an exception is
                     * thrown.
                     * <p />
                     * Separate threads should be used to read from a {@code PipedInputStream}
                     * and to write to the connected {@link PipedOutputStream}. If the same
                     * thread is used, a deadlock may occur.
                     *
                     * @return the byte read or -1 if the end of the source stream has been
                     *         reached.
                     * @throws IOException
                     *             if this stream is closed or not connected to an output
                     *             stream, or if the thread writing to the connected output
                     *             stream is no longer alive.</member>
        <member name="M:biz.ritter.javapi.io.PipedInputStream.read(System.Byte[],System.Int32,System.Int32)">
                     * Reads at most {@code count} bytes from this stream and stores them in the
                     * byte array {@code bytes} starting at {@code offset}. Blocks until at
                     * least one byte has been read, the end of the stream is detected or an
                     * exception is thrown.
                     * <p />
                     * Separate threads should be used to read from a {@code PipedInputStream}
                     * and to write to the connected {@link PipedOutputStream}. If the same
                     * thread is used, a deadlock may occur.
                     *
                     * @param bytes
                     *            the array in which to store the bytes read.
                     * @param offset
                     *            the initial position in {@code bytes} to store the bytes
                     *            read from this stream.
                     * @param count
                     *            the maximum number of bytes to store in {@code bytes}.
                     * @return the number of bytes actually read or -1 if the end of the stream
                     *         has been reached.
                     * @throws IndexOutOfBoundsException
                     *             if {@code offset &lt; 0} or {@code count &lt; 0}, or if {@code
                     *             offset + count} is greater than the size of {@code bytes}.
                     * @throws InterruptedIOException
                     *             if the thread reading from this stream is interrupted.
                     * @throws IOException
                     *             if this stream is closed or not connected to an output
                     *             stream, or if the thread writing to the connected output
                     *             stream is no longer alive.
                     * @throws NullPointerException
                     *             if {@code bytes} is {@code null}.</member>
        <member name="M:biz.ritter.javapi.io.PipedInputStream.receive(System.Int32)">
                     * Receives a byte and stores it in this stream's {@code buffer}. This
                     * method is called by {@link PipedOutputStream#write(int)}. The least
                     * significant byte of the integer {@code oneByte} is stored at index
                     * {@code in} in the {@code buffer}.
                     * <p />
                     * This method blocks as long as {@code buffer} is full.
                     *
                     * @param oneByte
                     *            the byte to store in this pipe.
                     * @throws InterruptedIOException
                     *             if the {@code buffer} is full and the thread that has called
                     *             this method is interrupted.
                     * @throws IOException
                     *             if this stream is closed or the thread that has last read
                     *             from this stream is no longer alive.</member>
        <member name="T:biz.ritter.javapi.io.PipedOutputStream">
                 * Places information on a communications pipe. When two threads want to pass
                 * data back and forth, one creates a piped output stream and the other one
                 * creates a piped input stream.
                 *
                 * @see PipedInputStream</member>
        <member name="F:biz.ritter.javapi.io.PipedOutputStream.dest">
                     * The destination PipedInputStream</member>
        <member name="M:biz.ritter.javapi.io.PipedOutputStream.#ctor">
                     * Constructs a new unconnected {@code PipedOutputStream}. The resulting
                     * stream must be connected to a {@link PipedInputStream} before data can be
                     * written to it.</member>
        <member name="M:biz.ritter.javapi.io.PipedOutputStream.#ctor(biz.ritter.javapi.io.PipedInputStream)">
                     * Constructs a new {@code PipedOutputStream} connected to the
                     * {@link PipedInputStream} {@code dest}. Any data written to this stream
                     * can be read from the target stream.
                     *
                     * @param dest
                     *            the piped input stream to connect to.
                     * @throws IOException
                     *             if this stream or {@code dest} are already connected.</member>
        <member name="M:biz.ritter.javapi.io.PipedOutputStream.close">
                     * Closes this stream. If this stream is connected to an input stream, the
                     * input stream is closed and the pipe is disconnected.
                     *
                     * @throws IOException
                     *             if an error occurs while closing this stream.</member>
        <member name="M:biz.ritter.javapi.io.PipedOutputStream.connect(biz.ritter.javapi.io.PipedInputStream)">
                     * Connects this stream to a {@link PipedInputStream}. Any data written to
                     * this output stream becomes readable in the input stream.
                     *
                     * @param stream
                     *            the destination input stream.
                     * @throws IOException
                     *             if either stream is already connected.</member>
        <member name="M:biz.ritter.javapi.io.PipedOutputStream.flush">
                     * Notifies the readers of this {@link PipedInputStream} that bytes can be
                     * read. This method does nothing if this stream is not connected.
                     *
                     * @throws IOException
                     *             if an I/O error occurs while flushing this stream.</member>
        <member name="M:biz.ritter.javapi.io.PipedOutputStream.write(System.Byte[],System.Int32,System.Int32)">
                     * Writes {@code count} bytes from the byte array {@code buffer} starting at
                     * {@code offset} to this stream. The written data can then be read from the
                     * connected input stream.
                     * <p />
                     * Separate threads should be used to write to a {@code PipedOutputStream}
                     * and to read from the connected {@link PipedInputStream}. If the same
                     * thread is used, a deadlock may occur.
                     *
                     * @param buffer
                     *            the buffer to write.
                     * @param offset
                     *            the index of the first byte in {@code buffer} to write.
                     * @param count
                     *            the number of bytes from {@code buffer} to write to this
                     *            stream.
                     * @throws IndexOutOfBoundsException
                     *             if {@code offset &lt; 0} or {@code count &lt; 0}, or if {@code
                     *             offset + count} is bigger than the length of {@code buffer}.
                     * @throws InterruptedIOException
                     *             if the pipe is full and the current thread is interrupted
                     *             waiting for space to write data. This case is not currently
                     *             handled correctly.
                     * @throws IOException
                     *             if this stream is not connected, if the target stream is
                     *             closed or if the thread reading from the target stream is no
                     *             longer alive. This case is currently not handled correctly.</member>
        <member name="M:biz.ritter.javapi.io.PipedOutputStream.write(System.Int32)">
                     * Writes a single byte to this stream. Only the least significant byte of
                     * the integer {@code oneByte} is written. The written byte can then be read
                     * from the connected input stream.
                     * <p />
                     * Separate threads should be used to write to a {@code PipedOutputStream}
                     * and to read from the connected {@link PipedInputStream}. If the same
                     * thread is used, a deadlock may occur.
                     *
                     * @param oneByte
                     *            the byte to write.
                     * @throws InterruptedIOException
                     *             if the pipe is full and the current thread is interrupted
                     *             waiting for space to write data. This case is not currently
                     *             handled correctly.
                     * @throws IOException
                     *             if this stream is not connected, if the target stream is
                     *             closed or if the thread reading from the target stream is no
                     *             longer alive. This case is currently not handled correctly.</member>
        <member name="T:biz.ritter.javapi.io.PrintStream">
                 * Wraps an existing {@link OutputStream} and provides convenience methods for
                 * writing common data types in a human readable format. This is not to be
                 * confused with DataOutputStream which is used for encoding common data types
                 * so that they can be read back in. No {@code IOException} is thrown by this
                 * class. Instead, callers should use {@link #checkError()} to see if a problem
                 * has occurred in this stream.</member>
        <member name="F:biz.ritter.javapi.io.PrintStream.ioError">
                     * indicates whether or not this PrintStream has incurred an error.</member>
        <member name="F:biz.ritter.javapi.io.PrintStream.autoflush">
                     * indicates whether or not this PrintStream should flush its contents after
                     * printing a new line.</member>
        <member name="M:biz.ritter.javapi.io.PrintStream.#ctor(biz.ritter.javapi.io.OutputStream)">
                     * Constructs a new {@code PrintStream} with {@code out} as its target
                     * stream. By default, the new print stream does not automatically flush its
                     * contents to the target stream when a newline is encountered.
                     *
                     * @param out
                     *            the target output stream.
                     * @throws NullPointerException
                     *             if {@code out} is {@code null}.</member>
        <member name="M:biz.ritter.javapi.io.PrintStream.#ctor(biz.ritter.javapi.io.OutputStream,System.Boolean)">
                     * Constructs a new {@code PrintStream} with {@code out} as its target
                     * stream. The parameter {@code autoflush} determines if the print stream
                     * automatically flushes its contents to the target stream when a newline is
                     * encountered.
                     *
                     * @param out
                     *            the target output stream.
                     * @param autoflush
                     *            indicates whether to flush contents upon encountering a
                     *            newline sequence.
                     * @throws NullPointerException
                     *             if {@code out} is {@code null}.</member>
        <member name="M:biz.ritter.javapi.io.PrintStream.#ctor(biz.ritter.javapi.io.OutputStream,System.Boolean,System.String)">
                     * Constructs a new {@code PrintStream} with {@code out} as its target
                     * stream and using the character encoding {@code enc} while writing. The
                     * parameter {@code autoflush} determines if the print stream automatically
                     * flushes its contents to the target stream when a newline is encountered.
                     *
                     * @param out
                     *            the target output stream.
                     * @param autoflush
                     *            indicates whether or not to flush contents upon encountering a
                     *            newline sequence.
                     * @param enc
                     *            the non-null string describing the desired character encoding.
                     * @throws NullPointerException
                     *             if {@code out} or {@code enc} are {@code null}.
                     * @throws UnsupportedEncodingException
                     *             if the encoding specified by {@code enc} is not supported.</member>
        <member name="M:biz.ritter.javapi.io.PrintStream.#ctor(biz.ritter.javapi.io.File)">
                     * Constructs a new {@code PrintStream} with {@code file} as its target. The
                     * virtual machine's default character set is used for character encoding.
                     *
                     * @param file
                     *            the target file. If the file already exists, its contents are
                     *            removed, otherwise a new file is created.
                     * @throws FileNotFoundException
                     *             if an error occurs while opening or creating the target file.
                     * @throws SecurityException
                     *             if a security manager exists and it denies writing to the
                     *             target file.</member>
        <member name="M:biz.ritter.javapi.io.PrintStream.#ctor(biz.ritter.javapi.io.File,System.String)">
                     * Constructs a new {@code PrintStream} with {@code file} as its target. The
                     * character set named {@code csn} is used for character encoding.
                     *
                     * @param file
                     *            the target file. If the file already exists, its contents are
                     *            removed, otherwise a new file is created.
                     * @param csn
                     *            the name of the character set used for character encoding.
                     * @throws FileNotFoundException
                     *             if an error occurs while opening or creating the target file.
                     * @throws NullPointerException
                     *             if {@code csn} is {@code null}.
                     * @throws SecurityException
                     *             if a security manager exists and it denies writing to the
                     *             target file.
                     * @throws UnsupportedEncodingException
                     *             if the encoding specified by {@code csn} is not supported.</member>
        <member name="M:biz.ritter.javapi.io.PrintStream.#ctor(System.String)">
                     * Constructs a new {@code PrintStream} with the file identified by
                     * {@code fileName} as its target. The virtual machine's default character
                     * set is used for character encoding.
                     *
                     * @param fileName
                     *            the target file's name. If the file already exists, its
                     *            contents are removed, otherwise a new file is created.
                     * @throws FileNotFoundException
                     *             if an error occurs while opening or creating the target file.
                     * @throws SecurityException
                     *             if a security manager exists and it denies writing to the
                     *             target file.</member>
        <member name="M:biz.ritter.javapi.io.PrintStream.#ctor(System.String,System.String)">
                     * Constructs a new {@code PrintStream} with the file identified by
                     * {@code fileName} as its target. The character set named {@code csn} is
                     * used for character encoding.
                     *
                     * @param fileName
                     *            the target file's name. If the file already exists, its
                     *            contents are removed, otherwise a new file is created.
                     * @param csn
                     *            the name of the character set used for character encoding.
                     * @throws FileNotFoundException
                     *             if an error occurs while opening or creating the target file.
                     * @throws NullPointerException
                     *             if {@code csn} is {@code null}.
                     * @throws SecurityException
                     *             if a security manager exists and it denies writing to the
                     *             target file.
                     * @throws UnsupportedEncodingException
                     *             if the encoding specified by {@code csn} is not supported.</member>
        <member name="M:biz.ritter.javapi.io.PrintStream.checkError">
                     * Flushes this stream and returns the value of the error flag.
                     *
                     * @return {@code true} if either an {@code IOException} has been thrown
                     *         previously or if {@code setError()} has been called;
                     *         {@code false} otherwise.
                     * @see #setError()</member>
        <member name="M:biz.ritter.javapi.io.PrintStream.clearError">
                     * Sets the error state of the stream to false.
                     *
                     * @since 1.6</member>
        <member name="M:biz.ritter.javapi.io.PrintStream.close">
                     * Closes this print stream. Flushes this stream and then closes the target
                     * stream. If an I/O error occurs, this stream's error state is set to
                     * {@code true}.</member>
        <member name="M:biz.ritter.javapi.io.PrintStream.flush">
                     * Ensures that all pending data is sent out to the target stream. It also
                     * flushes the target stream. If an I/O error occurs, this stream's error
                     * state is set to {@code true}.</member>
        <member name="M:biz.ritter.javapi.io.PrintStream.format(System.String,System.Object[])">
                     * Writes a string formatted by an intermediate {@code Formatter} to the
                     * target stream using the specified format string and arguments. For the
                     * locale, the default value of the current virtual machine instance is
                     * used.
                     *
                     * @param format
                     *            the format string used for {@link java.util.Formatter#format}.
                     * @param args
                     *            the list of arguments passed to the formatter. If there are
                     *            more arguments than required by the {@code format} string,
                     *            then the additional arguments are ignored.
                     * @return this stream.
                     * @throws IllegalFormatException
                     *             if the format string is illegal or incompatible with the
                     *             arguments, if there are not enough arguments or if any other
                     *             error regarding the format string or arguments is detected.
                     * @throws NullPointerException
                     *             if {@code format} is {@code null}.</member>
        <member name="M:biz.ritter.javapi.io.PrintStream.format(biz.ritter.javapi.util.Locale,System.String,System.Object[])">
                     * Writes a string formatted by an intermediate {@link Formatter} to this
                     * stream using the specified locale, format string and arguments.
                     *
                     * @param l
                     *            the locale used in the method. No localization will be applied
                     *            if {@code l} is {@code null}.
                     * @param format
                     *            the format string used for {@link java.util.Formatter#format}.
                     * @param args
                     *            the list of arguments passed to the formatter. If there are
                     *            more arguments than required by the {@code format} string,
                     *            then the additional arguments are ignored.
                     * @return this stream.
                     * @throws IllegalFormatException
                     *             if the format string is illegal or incompatible with the
                     *             arguments, if there are not enough arguments or if any other
                     *             error regarding the format string or arguments is detected.
                     * @throws NullPointerException
                     *             if {@code format} is {@code null}.</member>
        <member name="M:biz.ritter.javapi.io.PrintStream.printf(System.String,System.Object[])">
                     * Prints a formatted string. The behavior of this method is the same as
                     * this stream's {@code #format(String, Object...)} method. For the locale,
                     * the default value of the current virtual machine instance is used.
                     *
                     * @param format
                     *            the format string used for
                     *            {@link java.util.Formatter#format}.
                     * @param args
                     *            the list of arguments passed to the formatter. If there are
                     *            more arguments than required by the {@code format} string,
                     *            then the additional arguments are ignored.
                     * @return this stream.
                     * @throws IllegalFormatException
                     *             if the format string is illegal or incompatible with the
                     *             arguments, if there are not enough arguments or if any other
                     *             error regarding the format string or arguments is detected.
                     * @throws NullPointerException
                     *             if {@code format} is {@code null}.</member>
        <member name="M:biz.ritter.javapi.io.PrintStream.printf(biz.ritter.javapi.util.Locale,System.String,System.Object[])">
                     * Prints a formatted string. The behavior of this method is the same as
                     * this stream's {@code #format(Locale, String, Object...)} method.
                     *
                     * @param l
                     *            the locale used in the method. No localization will be applied
                     *            if {@code l} is {@code null}.
                     * @param format
                     *            the format string used for {@link java.util.Formatter#format}.
                     * @param args
                     *            the list of arguments passed to the formatter. If there are
                     *            more arguments than required by the {@code format} string,
                     *            then the additional arguments are ignored.
                     * @return this stream.
                     * @throws IllegalFormatException
                     *             if the format string is illegal or incompatible with the
                     *             arguments, if there are not enough arguments or if any other
                     *             error regarding the format string or arguments is detected.
                     * @throws NullPointerException
                     *             if {@code format} is {@code null}.</member>
        <member name="M:biz.ritter.javapi.io.PrintStream.newline">
                     * Put the line separator String onto the print stream.</member>
        <member name="M:biz.ritter.javapi.io.PrintStream.print(System.Char[])">
                     * Prints the string representation of the specified character array
                     * to the target stream.
                     *
                     * @param charArray
                     *            the character array to print to the target stream.
                     * @see #print(String)</member>
        <member name="M:biz.ritter.javapi.io.PrintStream.print(System.Char)">
                     * Prints the string representation of the specified character to the target
                     * stream.
                     *
                     * @param ch
                     *            the character to print to the target stream.
                     * @see #print(String)</member>
        <member name="M:biz.ritter.javapi.io.PrintStream.print(System.Double)">
                     * Prints the string representation of the specified double to the target
                     * stream.
                     *
                     * @param dnum
                     *            the double value to print to the target stream.
                     * @see #print(String)</member>
        <member name="M:biz.ritter.javapi.io.PrintStream.print(System.Single)">
                     * Prints the string representation of the specified float to the target
                     * stream.
                     *
                     * @param fnum
                     *            the float value to print to the target stream.
                     * @see #print(String)</member>
        <member name="M:biz.ritter.javapi.io.PrintStream.print(System.Int32)">
                     * Prints the string representation of the specified integer to the target
                     * stream.
                     *
                     * @param inum
                     *            the integer value to print to the target stream.
                     * @see #print(String)</member>
        <member name="M:biz.ritter.javapi.io.PrintStream.print(System.Int64)">
                     * Prints the string representation of the specified long to the target
                     * stream.
                     *
                     * @param lnum
                     *            the long value to print to the target stream.
                     * @see #print(String)</member>
        <member name="M:biz.ritter.javapi.io.PrintStream.print(System.Object)">
                     * Prints the string representation of the specified object to the target
                     * stream.
                     *
                     * @param obj
                     *            the object to print to the target stream.
                     * @see #print(String)</member>
        <member name="M:biz.ritter.javapi.io.PrintStream.print(System.String)">
                     * Prints a string to the target stream. The string is converted to an array
                     * of bytes using the encoding chosen during the construction of this
                     * stream. The bytes are then written to the target stream with
                     * {@code write(int)}.
                     * <p />
                     * If an I/O error occurs, this stream's error state is set to {@code true}.
                     *
                     * @param str
                     *            the string to print to the target stream.
                     * @see #write(int)</member>
        <member name="M:biz.ritter.javapi.io.PrintStream.print(System.Boolean)">
                     * Prints the string representation of the specified boolean to the target
                     * stream.
                     *
                     * @param bool
                     *            the boolean value to print the target stream.
                     * @see #print(String)</member>
        <member name="M:biz.ritter.javapi.io.PrintStream.println">
                     * Prints the string representation of the system property
                     * {@code "line.separator"} to the target stream.</member>
        <member name="M:biz.ritter.javapi.io.PrintStream.println(System.Char[])">
                     * Prints the string representation of the specified character array
                     * followed by the system property {@code "line.separator"} to the target
                     * stream.
                     *
                     * @param charArray
                     *            the character array to print to the target stream.
                     * @see #print(String)</member>
        <member name="M:biz.ritter.javapi.io.PrintStream.println(System.Char)">
                     * Prints the string representation of the specified character followed by
                     * the system property {@code "line.separator"} to the target stream.
                     *
                     * @param ch
                     *            the character to print to the target stream.
                     * @see #print(String)</member>
        <member name="M:biz.ritter.javapi.io.PrintStream.println(System.Double)">
                     * Prints the string representation of the specified double followed by the
                     * system property {@code "line.separator"} to the target stream.
                     *
                     * @param dnum
                     *            the double value to print to the target stream.
                     * @see #print(String)</member>
        <member name="M:biz.ritter.javapi.io.PrintStream.println(System.Single)">
                     * Prints the string representation of the specified float followed by the
                     * system property {@code "line.separator"} to the target stream.
                     *
                     * @param fnum
                     *            the float value to print to the target stream.
                     * @see #print(String)</member>
        <member name="M:biz.ritter.javapi.io.PrintStream.println(System.Int32)">
                      * Prints the string representation of the specified integer followed by the
                      * system property {@code "line.separator"} to the target stream.
                      *
                      * @param inum
                      *            the integer value to print to the target stream.
                      * @see #print(String)</member>
        <member name="M:biz.ritter.javapi.io.PrintStream.println(System.Int64)">
                     * Prints the string representation of the specified long followed by the
                     * system property {@code "line.separator"} to the target stream.
                     *
                     * @param lnum
                     *            the long value to print to the target stream.
                     * @see #print(String)</member>
        <member name="M:biz.ritter.javapi.io.PrintStream.println(System.Object)">
                     * Prints the string representation of the specified object followed by the
                     * system property {@code "line.separator"} to the target stream.
                     *
                     * @param obj
                     *            the object to print to the target stream.
                     * @see #print(String)</member>
        <member name="M:biz.ritter.javapi.io.PrintStream.println(System.String)">
                     * Prints a string followed by the system property {@code "line.separator"}
                     * to the target stream. The string is converted to an array of bytes using
                     * the encoding chosen during the construction of this stream. The bytes are
                     * then written to the target stream with {@code write(int)}.
                     * <p />
                     * If an I/O error occurs, this stream's error state is set to {@code true}.
                     *
                     * @param str
                     *            the string to print to the target stream.
                     * @see #write(int)</member>
        <member name="M:biz.ritter.javapi.io.PrintStream.println(System.Boolean)">
                     * Prints the string representation of the specified boolean followed by the
                     * system property {@code "line.separator"} to the target stream.
                     *
                     * @param bool
                     *            the boolean value to print to the target stream.
                     * @see #print(String)</member>
        <member name="M:biz.ritter.javapi.io.PrintStream.setError">
                     * Sets the error flag of this print stream to {@code true}.</member>
        <member name="M:biz.ritter.javapi.io.PrintStream.write(System.Byte[],System.Int32,System.Int32)">
                     * Writes {@code count} bytes from {@code buffer} starting at {@code offset}
                     * to the target stream. If autoflush is set, this stream gets flushed after
                     * writing the buffer.
                     * <p />
                     * This stream's error flag is set to {@code true} if this stream is closed
                     * or an I/O error occurs.
                     *
                     * @param buffer
                     *            the buffer to be written.
                     * @param offset
                     *            the index of the first byte in {@code buffer} to write.
                     * @param length
                     *            the number of bytes in {@code buffer} to write.
                     * @throws IndexOutOfBoundsException
                     *             if {@code offset &lt; 0} or {@code count &lt; 0}, or if {@code
                     *             offset + count} is bigger than the length of {@code buffer}.
                     * @see #flush()</member>
        <member name="M:biz.ritter.javapi.io.PrintStream.write(System.Int32)">
                     * Writes one byte to the target stream. Only the least significant byte of
                     * the integer {@code oneByte} is written. This stream is flushed if
                     * {@code oneByte} is equal to the character {@code '\n'} and this stream is
                     * set to autoflush.
                     * <p />
                     * This stream's error flag is set to {@code true} if it is closed or an I/O
                     * error occurs.
                     *
                     * @param oneByte
                     *            the byte to be written</member>
        <member name="M:biz.ritter.javapi.io.PrintStream.append(System.Char)">
                     * Appends the character {@code c} to the target stream. This method works
                     * the same way as {@link #print(char)}.
                     *
                     * @param c
                     *            the character to append to the target stream.
                     * @return this stream.</member>
        <member name="M:biz.ritter.javapi.io.PrintStream.append(biz.ritter.javapi.lang.CharSequence)">
                     * Appends the character sequence {@code csq} to the target stream. This
                     * method works the same way as {@code PrintStream.print(csq.toString())}.
                     * If {@code csq} is {@code null}, then the string "null" is written to the
                     * target stream.
                     *
                     * @param csq
                     *            the character sequence appended to the target stream.
                     * @return this stream.</member>
        <member name="M:biz.ritter.javapi.io.PrintStream.append(biz.ritter.javapi.lang.CharSequence,System.Int32,System.Int32)">
                     * Appends a subsequence of the character sequence {@code csq} to the target
                     * stream. This method works the same way as {@code
                     * PrintStream.print(csq.subsequence(start, end).toString())}. If {@code
                     * csq} is {@code null}, then the specified subsequence of the string "null"
                     * will be written to the target stream.
                     *
                     * @param csq
                     *            the character sequence appended to the target stream.
                     * @param start
                     *            the index of the first char in the character sequence appended
                     *            to the target stream.
                     * @param end
                     *            the index of the character following the last character of the
                     *            subsequence appended to the target stream.
                     * @return this stream.
                     * @throws IndexOutOfBoundsException
                     *             if {@code start &gt; end}, {@code start &lt; 0}, {@code end &lt; 0} or
                     *             either {@code start} or {@code end} are greater or equal than
                     *             the length of {@code csq}.</member>
        <member name="M:biz.ritter.javapi.lang.ClassLoader.getResourceAsStream(System.String)">
            <summary>
            Creates an InputStream for given resource. Resources are define as path with slash separator /.
            Returns null if no resource found.
            </summary>
            <param name="name">
            </param>
            <returns>InputSteam or null</returns>
        </member>
        <member name="M:biz.ritter.javapi.lang.ClassLoader.findResource(System.String)">
            <summary>
            Find the resource with given name
            </summary>
            <param name="name">
            </param>
            <returns>
            </returns>
        </member>
        <member name="T:biz.ritter.javapi.lang.OutOfMemoryError">
            <summary>
            Only for API compatibility - DO NOT USE THIS CLASS with C#
            <para>catch ever System.OutOfMemoryException</para></summary>
        </member>
        <member name="M:biz.ritter.javapi.lang.OutOfMemoryError.#ctor">
            <summary>
            Only for API compatibility - DO NOT USE THIS CLASS with C#
            <para>catch ever System.OutOfMemoryException</para></summary>
        </member>
        <member name="M:biz.ritter.javapi.lang.OutOfMemoryError.#ctor(System.String)">
            <summary>
            Only for API compatibility - DO NOT USE THIS CLASS with C#
            <para>catch ever System.OutOfMemoryException</para></summary>
        </member>
        <member name="T:biz.ritter.javapi.lang.reflect.Array">
            <summary>
            Reflection type for working with arrays.
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.lang.reflect.Array.getLength(System.Object)">
            <summary>
            Compute the length of first dimension from given array
            </summary>
            <param name="array">array</param>
            <returns>size of first dimension</returns>
            <exception cref="T:biz.ritter.javapi.lang.IllegalArgumentException">Throw an java.lang.IllegalArgumentException if given object is not an array.</exception>
            <exception cref="T:biz.ritter.javapi.lang.NullPointerException">Throw an java.lang.NullPointerException if given object is not an array.</exception>
        </member>
        <member name="M:biz.ritter.javapi.lang.reflect.Array.get(System.Object,System.Int32)">
            <summary>
            Get the object stored on given offset in array
            </summary>
            <param name="array">array</param>
            <param name="offset">zero based index</param>
            <returns>Object on index</returns>
            <exception cref="T:biz.ritter.javapi.lang.IllegalArgumentException">Throw an java.lang.IllegalArgumentException if given object is not an array.</exception>
            <exception cref="T:biz.ritter.javapi.lang.NullPointerException">Throw an java.lang.NullPointerException if given object is not an array.</exception>
        </member>
        <member name="M:biz.ritter.javapi.lang.reflect.Array.set(System.Object,System.Int32,System.Object)">
            <summary>
            Set the object stored on given offset in array
            </summary>
            <param name="array">array</param>
            <param name="offset">zero based index</param>
            <returns>Object on index</returns>
            <exception cref="T:biz.ritter.javapi.lang.IllegalArgumentException">Throw an java.lang.IllegalArgumentException if given object is not an array.</exception>
            <exception cref="T:biz.ritter.javapi.lang.NullPointerException">Throw an java.lang.NullPointerException if given object is not an array.</exception>
            <exception cref="T:biz.ritter.javapi.lang.ArrayIndexOutOfBoundsException">Throw an java.lang.ArrayIndexOutOfBoundsException if given index is lesser zero, equals length of array or greater length of array.</exception>
        </member>
        <member name="M:biz.ritter.javapi.lang.reflect.Array.newInstance(System.Type,System.Int32)">
            <summary>
            Create new Array of type with giving length
            </summary>
            <param name="type">type / classe</param>
            <param name="length">size of array</param>
            <returns>
            </returns>
        </member>
        <member name="M:biz.ritter.javapi.lang.reflect.Array.newInstance(biz.ritter.javapi.lang.Class,System.Int32)">
            <summary>
            Create new Array of type with giving length
            </summary>
            <param name="clazz">type / classe</param>
            <param name="length">size of array</param>
            <returns>
            </returns>
        </member>
        <member name="M:biz.ritter.javapi.lang.reflect.Array.cast(System.Object)">
            <summary>
            Cast the given object to System.Array instance.
            </summary>
            <param name="array">the object</param>
            <returns>A System.Array instance of given object</returns>
            <exception cref="T:biz.ritter.javapi.lang.IllegalArgumentException">Throw an java.lang.IllegalArgumentException if given object is not an array.</exception>
            <exception cref="T:biz.ritter.javapi.lang.NullPointerException">Throw an java.lang.NullPointerException if given object is not an array.</exception>
        </member>
        <member name="F:biz.ritter.javapi.lang.reflect.Constructor.delegateInstance">
            <summary>
            .net reflection type to delegate methods
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.lang.reflect.Constructor.#ctor(System.Reflection.ConstructorInfo)">
            <summary>
            Creates a new constructor instance with .net reflection type.
            </summary>
            <param name="ci">
            </param>
        </member>
        <member name="M:biz.ritter.javapi.lang.reflect.Constructor.newInstance(System.Object[])">
            <summary>
            Create a new instance by calling representing constructor with given arguments.
            </summary>
            <param name="args">
            </param>
            <returns>
            </returns>
        </member>
        <member name="T:biz.ritter.javapi.lang.reflect.InvocationTargetException">
                 * This class provides a wrapper for an exception thrown by a {@code Method} or
                 * {@code Constructor} invocation.
                 *
                 * @see Method#invoke
                 * @see Constructor#newInstance</member>
        <member name="M:biz.ritter.javapi.lang.reflect.InvocationTargetException.#ctor">
                     * Constructs a new {@code InvocationTargetException} instance with a
                     * {@code null} cause / target exception.</member>
        <member name="M:biz.ritter.javapi.lang.reflect.InvocationTargetException.#ctor(biz.ritter.javapi.lang.Throwable)">
                     * Constructs a new {@code InvocationTargetException} instance with its
                     * cause / target exception filled in.
                     *
                     * @param exception
                     *            the exception which occurred while running the Method or
                     *            Constructor</member>
        <member name="M:biz.ritter.javapi.lang.reflect.InvocationTargetException.#ctor(biz.ritter.javapi.lang.Throwable,System.String)">
                     * Constructs a new {@code InvocationTargetException} instance with its
                     * cause / target exception and message filled in.
                     *
                     * @param detailMessage
                     *            the detail message for the exception
                     * @param exception
                     *            the exception which occurred while running the Method or
                     *            Constructor</member>
        <member name="M:biz.ritter.javapi.lang.reflect.InvocationTargetException.#ctor(System.Reflection.TargetInvocationException)">
            <summary>
            In addition, .net TargetInvocationException is repacked
            </summary>
            <param name="tie">
            </param>
        </member>
        <member name="M:biz.ritter.javapi.lang.reflect.InvocationTargetException.getTargetException">
                     * Returns the target exception, which may be {@code null}.
                     *
                     * @return the target exception</member>
        <member name="M:biz.ritter.javapi.lang.reflect.InvocationTargetException.getCause">
                     * Returns the cause of this exception, which may be {@code null}.
                     *
                     * @return the cause of this exception</member>
        <member name="T:biz.ritter.javapi.lang.reflect.Modifier">
                 * This class provides static methods to decode class and member modifiers.
                 *
                 * @see Class#getModifiers()
                 * @see Member#getModifiers()</member>
        <member name="F:biz.ritter.javapi.lang.reflect.Modifier.PUBLIC">
                     * The {@code int} value representing the {@code public}
                     * modifier.</member>
        <member name="F:biz.ritter.javapi.lang.reflect.Modifier.PRIVATE">
                     * The {@code int} value representing the {@code private}
                     * modifier.</member>
        <member name="F:biz.ritter.javapi.lang.reflect.Modifier.PROTECTED">
                     * The {@code int} value representing the {@code protected}
                     * modifier.</member>
        <member name="F:biz.ritter.javapi.lang.reflect.Modifier.STATIC">
                     * The {@code int} value representing the {@code static} modifier.</member>
        <member name="F:biz.ritter.javapi.lang.reflect.Modifier.FINAL">
                     * The {@code int} value representing the {@code readonly} modifier.</member>
        <member name="F:biz.ritter.javapi.lang.reflect.Modifier.SYNCHRONIZED">
                     * The {@code int} value representing the {@code synchronized}
                     * modifier.</member>
        <member name="F:biz.ritter.javapi.lang.reflect.Modifier.VOLATILE">
                     * The {@code int} value representing the {@code volatile}
                     * modifier.</member>
        <member name="F:biz.ritter.javapi.lang.reflect.Modifier.TRANSIENT">
                     * The {@code int} value representing the {@code transient}
                     * modifier.</member>
        <member name="F:biz.ritter.javapi.lang.reflect.Modifier.NATIVE">
                     * The {@code int} value representing the {@code native} modifier.</member>
        <member name="F:biz.ritter.javapi.lang.reflect.Modifier.INTERFACE">
                     * The {@code int} value representing the {@code interface}
                     * modifier.</member>
        <member name="F:biz.ritter.javapi.lang.reflect.Modifier.ABSTRACT">
                     * The {@code int} value representing the {@code abstract}
                     * modifier.</member>
        <member name="F:biz.ritter.javapi.lang.reflect.Modifier.STRICT">
                     * The {@code int} value representing the {@code strict} modifier.</member>
        <member name="M:biz.ritter.javapi.lang.reflect.Modifier.#ctor">
                     * Constructs a new {@code Modifier} instance.</member>
        <member name="M:biz.ritter.javapi.lang.reflect.Modifier.isAbstract(System.Int32)">
                     * Indicates whether or not the specified modifiers contain the {@code
                     * abstract} modifier.
                     *
                     * @param modifiers
                     *            the modifiers to test
                     * @return {@code true} if the specified modifiers contain the {@code
                     *         abstract} modifier, {@code false} otherwise</member>
        <member name="M:biz.ritter.javapi.lang.reflect.Modifier.isFinal(System.Int32)">
                     * Indicates whether or not the specified modifiers contain the {@code
                     * readonly} modifier.
                     *
                     * @param modifiers
                     *            the modifiers to test
                     * @return {@code true} if the specified modifiers contain the {@code
                     *         readonly} modifier, {@code false} otherwise</member>
        <member name="M:biz.ritter.javapi.lang.reflect.Modifier.isInterface(System.Int32)">
                     * Indicates whether or not the specified modifiers contain the {@code
                     * interface} modifier.
                     *
                     * @param modifiers
                     *            the modifiers to test
                     * @return {@code true} if the specified modifiers contain the {@code
                     *         interface} modifier, {@code false} otherwise</member>
        <member name="M:biz.ritter.javapi.lang.reflect.Modifier.isNative(System.Int32)">
                     * Indicates whether or not the specified modifiers contain the {@code
                     * native} modifier.
                     *
                     * @param modifiers
                     *            the modifiers to test
                     * @return {@code true} if the specified modifiers contain the {@code
                     *         native} modifier, {@code false} otherwise</member>
        <member name="M:biz.ritter.javapi.lang.reflect.Modifier.isPrivate(System.Int32)">
                     * Indicates whether or not the specified modifiers contain the {@code
                     * private} modifier.
                     *
                     * @param modifiers
                     *            the modifiers to test
                     * @return {@code true} if the specified modifiers contain the {@code
                     *         private} modifier, {@code false} otherwise</member>
        <member name="M:biz.ritter.javapi.lang.reflect.Modifier.isProtected(System.Int32)">
                     * Indicates whether or not the specified modifiers contain the {@code
                     * protected} modifier.
                     *
                     * @param modifiers
                     *            the modifiers to test
                     * @return {@code true} if the specified modifiers contain the {@code
                     *         protected} modifier, {@code false} otherwise</member>
        <member name="M:biz.ritter.javapi.lang.reflect.Modifier.isPublic(System.Int32)">
                     * Indicates whether or not the specified modifiers contain the {@code
                     * public} modifier.
                     *
                     * @param modifiers
                     *            the modifiers to test
                     * @return {@code true} if the specified modifiers contain the {@code
                     *         public} modifier, {@code false} otherwise</member>
        <member name="M:biz.ritter.javapi.lang.reflect.Modifier.isStatic(System.Int32)">
                     * Indicates whether or not the specified modifiers contain the {@code
                     * static} modifier.
                     *
                     * @param modifiers
                     *            the modifiers to test
                     * @return {@code true} if the specified modifiers contain the {@code
                     *         static} modifier, {@code false} otherwise</member>
        <member name="M:biz.ritter.javapi.lang.reflect.Modifier.isStrict(System.Int32)">
                     * Indicates whether or not the specified modifiers contain the {@code
                     * strict} modifier.
                     *
                     * @param modifiers
                     *            the modifiers to test
                     * @return {@code true} if the specified modifiers contain the {@code
                     *         strict} modifier, {@code false} otherwise</member>
        <member name="M:biz.ritter.javapi.lang.reflect.Modifier.isSynchronized(System.Int32)">
                     * Indicates whether or not the specified modifiers contain the {@code
                     * synchronized} modifier.
                     *
                     * @param modifiers
                     *            the modifiers to test
                     * @return {@code true} if the specified modifiers contain the {@code
                     *         synchronized} modifier, {@code false} otherwise</member>
        <member name="M:biz.ritter.javapi.lang.reflect.Modifier.isTransient(System.Int32)">
                     * Indicates whether or not the specified modifiers contain the {@code
                     * transient} modifier.
                     *
                     * @param modifiers
                     *            the modifiers to test
                     * @return {@code true} if the specified modifiers contain the {@code
                     *         transient} modifier, {@code false} otherwise</member>
        <member name="M:biz.ritter.javapi.lang.reflect.Modifier.isVolatile(System.Int32)">
                     * Indicates whether or not the specified modifiers contain the {@code
                     * volatile} modifier.
                     *
                     * @param modifiers
                     *            the modifiers to test
                     * @return {@code true} if the specified modifiers contain the {@code
                     *         volatile} modifier, {@code false} otherwise</member>
        <member name="M:biz.ritter.javapi.lang.reflect.Modifier.toString(System.Int32)">
                     * Returns a string containing the string representation of all modifiers
                     * present in the specified modifiers. Modifiers appear in the order
                     * specified by the Java Language Specification:
                     *
                     * {@code public private protected abstract static readonly transient volatile native synchronized interface strict}
                     *
                     * @param modifiers
                     *            the modifiers to print
                     * @return a printable representation of the modifiers</member>
        <member name="T:biz.ritter.javapi.lang.ThreadLocal`1">
                 * Implements a thread-local storage, that is, a variable for which each thread
                 * has its own value. All threads share the same {@code ThreadLocal} object,
                 * but each sees a different value when accessing it, and changes made by one
                 * thread do not affect the other threads. The implementation supports
                 * {@code null} values.
                 *
                 * @see java.lang.Thread</member>
        <member name="M:biz.ritter.javapi.lang.ThreadLocal`1.#ctor">
                     * Creates a new thread-local variable.</member>
        <member name="M:biz.ritter.javapi.lang.ThreadLocal`1.get">
                     * Returns the value of this variable for the current thread. If an entry
                     * doesn't yet exist for this variable on this thread, this method will
                     * create an entry, populating the value with the result of
                     * {@link #initialValue()}.
                     *
                     * @return the current value of the variable for the calling thread.</member>
        <member name="M:biz.ritter.javapi.lang.ThreadLocal`1.initialValue">
                     * Provides the initial value of this variable for the current thread.
                     * The default implementation returns {@code null}.
                     *
                     * @return the initial value of the variable.</member>
        <member name="M:biz.ritter.javapi.lang.ThreadLocal`1.set(`0)">
                     * Sets the value of this variable for the current thread. If set to
                     * {@code null}, the value will be set to null and the underlying entry will
                     * still be present.
                     *
                     * @param value the new value of the variable for the caller thread.</member>
        <member name="M:biz.ritter.javapi.lang.ThreadLocal`1.remove">
                     * Removes the entry for this variable in the current thread. If this call
                     * is followed by a {@link #get()} before a {@link #set},
                     * {@code #get()} will call {@link #initialValue()} and create a new
                     * entry with the resulting value.
                     *
                     * @since 1.5</member>
        <member name="M:biz.ritter.javapi.lang.reflect.AccessibleObject.setAccessible(System.Boolean)">
                     * Attempts to set the value of the accessible flag. Setting this flag to
                     * false will enable access checks, setting to true will disable them. If
                     * there is a security manager, checkPermission is called with a
                     * ReflectPermission("suppressAccessChecks").
                     *
                     * @param flag the new value for the accessible flag
                     * @see ReflectPermission
                     * @throws SecurityException if the request is denied</member>
        <member name="T:biz.ritter.javapi.lang.RuntimePermission">
                 * Represents the permission to execute a runtime-related function. There is no
                 * action list associated with a {@code RuntimePermission}; the user either has
                 * the permission or he doesn't.</member>
        <member name="F:biz.ritter.javapi.lang.RuntimePermission.permissionToSetSecurityManager">
                     * Constants for runtime permissions used in this package.</member>
        <member name="M:biz.ritter.javapi.lang.RuntimePermission.#ctor(System.String)">
                     * Creates an instance of {@code RuntimePermission} with the specified name.
                     *
                     * @param permissionName
                     *            the name of the new permission.</member>
        <member name="M:biz.ritter.javapi.lang.RuntimePermission.#ctor(System.String,System.String)">
                     * Creates an instance of {@code RuntimePermission} with the specified name
                     * and action list. The action list is ignored.
                     *
                     * @param name
                     *            the name of the new permission.
                     * @param actions
                     *            ignored.</member>
        <member name="F:biz.ritter.javapi.lang.SecurityManager.inCheck">
                 * Flag to indicate whether a security check is in progress.
                 *
                 * @deprecated Use {@link #checkPermission}</member>
        <member name="M:biz.ritter.javapi.lang.SecurityManager.checkPermission(biz.ritter.javapi.security.Permission)">
                     * Checks whether the calling thread is allowed to access the resource being
                     * guarded by the specified permission object.
                     *
                     * @param permission
                     *            the permission to check.
                     * @throws SecurityException
                     *             if the requested {@code permission} is denied according to
                     *             the current security policy.</member>
        <member name="F:biz.ritter.javapi.lang.SystemJ.outJ">
            <see cref="F:biz.ritter.javapi.lang.SystemJ.outJ" />
        </member>
        <member name="T:biz.ritter.javapi.net.MalformedURLException">
                 * This exception is thrown when a program attempts to create an URL from an
                 * incorrect specification.
                 *
                 * @see URL</member>
        <member name="M:biz.ritter.javapi.net.MalformedURLException.#ctor">
                     * Constructs a new instance of this class with its walkback filled in.</member>
        <member name="M:biz.ritter.javapi.net.MalformedURLException.#ctor(System.String)">
                     * Constructs a new instance of this class with its walkback and message
                     * filled in.
                     *
                     * @param detailMessage
                     *            the detail message for this exception instance.</member>
        <member name="T:biz.ritter.javapi.net.NetPermission">
                 * This class represents permissions to configure the access to network
                 * resources.
                 * <p />
                 * There are three valid target names:
                 * <dl>
                 * <dt>setDefaultAuthenticator</dt>
                 * <dd>Allows the default authenticator to be set.</dd>
                 * <dt>requestPasswordAuthentication</dt>
                 * <dd>Allows the default authenticator to be retrieved.</dd>
                 * <dt>specifyStreamHandler</dt>
                 * <dd>Allows a stream (protocol) handler to be set when constructing an URL
                 * object</dd>
                 * </dl>
                 *
                 * @see java.security.BasicPermission
                 * @see SecurityManager</member>
        <member name="M:biz.ritter.javapi.net.NetPermission.#ctor(System.String)">
                     * Creates an instance of this class with the given name.
                     *
                     * @param name
                     *            the name of the new NetPermission instance.</member>
        <member name="M:biz.ritter.javapi.net.NetPermission.#ctor(System.String,System.String)">
                     * Creates an instance of this class with the given name and an action list.
                     * The action list is ignored and should be {@code null}.
                     *
                     * @param name
                     *            the name of the new {@code NetPermission} instance.
                     * @param actions
                     *            the ignored action string.</member>
        <member name="T:biz.ritter.javapi.net.UnknownHostException">
                 * Is thrown when a hostname can not be resolved.</member>
        <member name="M:biz.ritter.javapi.net.UnknownHostException.#ctor">
                     * Constructs a new {@code UnknownHostException} instance with its walkback
                     * filled in.</member>
        <member name="M:biz.ritter.javapi.net.UnknownHostException.#ctor(System.String)">
                     * Constructs a new {@code UnknownHostException} instance with its walkback
                     * and message filled in.
                     *
                     * @param detailMessage
                     *            the detail message for this exception.</member>
        <member name="M:biz.ritter.javapi.net.URLConnection.#ctor">
            <summary>
            No default constructor allowed
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.net.URLConnection.#ctor(biz.ritter.javapi.net.URL)">
            <summary>
            Create a new URLConnection instance with given URL
            </summary>
            <param name="url">
            </param>
        </member>
        <member name="M:biz.ritter.javapi.net.URLConnection.getContentType">
            <summary>
            Gets the MIME-type of the content specified by the response header field
            {@code content-type} or {@code null} if type is unknown.
            </summary>
            <returns>the value of the response header field {@code content-type}.</returns>
        </member>
        <member name="M:biz.ritter.javapi.net.URLConnection.getHeaderField(System.String)">
                     * Gets the value of the header field specified by {@code key} or {@code
                     * null} if there is no field with this name. The current implementation of
                     * this method returns always {@code null}.
                     *
                     * @param key
                     *            the name of the header field.
                     * @return the value of the header field.</member>
        <member name="T:biz.ritter.javapi.net.URLStreamHandler">
                 * The abstract class {@code URLStreamHandler} is the base for all classes which
                 * can handle the communication with a URL object over a particular protocol
                 * type.</member>
        <member name="M:biz.ritter.javapi.net.URLStreamHandler.openConnection(biz.ritter.javapi.net.URL)">
                     * Establishes a new connection to the resource specified by the URL {@code
                     * u}. Since different protocols also have unique ways of connecting, it
                     * must be overwritten by the subclass.
                     *
                     * @param u
                     *            the URL to the resource where a connection has to be opened.
                     * @return the opened URLConnection to the specified resource.
                     * @throws IOException
                     *             if an I/O error occurs during opening the connection.</member>
        <member name="M:biz.ritter.javapi.net.URLStreamHandler.openConnection(biz.ritter.javapi.net.URL,biz.ritter.javapi.net.Proxy)">
                     * Establishes a new connection to the resource specified by the URL {@code
                     * u} using the given {@code proxy}. Since different protocols also have
                     * unique ways of connecting, it must be overwritten by the subclass.
                     *
                     * @param u
                     *            the URL to the resource where a connection has to be opened.
                     * @param proxy
                     *            the proxy that is used to make the connection.
                     * @return the opened URLConnection to the specified resource.
                     * @throws IOException
                     *             if an I/O error occurs during opening the connection.
                     * @throws IllegalArgumentException
                     *             if any argument is {@code null} or the type of proxy is
                     *             wrong.
                     * @throws UnsupportedOperationException
                     *             if the protocol handler doesn't support this method.</member>
        <member name="M:biz.ritter.javapi.net.URLStreamHandler.parseURL(biz.ritter.javapi.net.URL,System.String,System.Int32,System.Int32)">
                     * Parses the clear text URL in {@code str} into a URL object. URL strings
                     * generally have the following format:
                     * <p />
                     * http://www.company.com/java/file1.java#reference
                     * <p />
                     * The string is parsed in HTTP format. If the protocol has a different URL
                     * format this method must be overridden.
                     *
                     * @param u
                     *            the URL to fill in the parsed clear text URL parts.
                     * @param str
                     *            the URL string that is to be parsed.
                     * @param start
                     *            the string position from where to begin parsing.
                     * @param end
                     *            the string position to stop parsing.
                     * @see #toExternalForm
                     * @see URL</member>
        <member name="M:biz.ritter.javapi.net.URLStreamHandler.setURL(biz.ritter.javapi.net.URL,System.String,System.String,System.Int32,System.String,System.String)">
                     * Sets the fields of the URL {@code u} to the values of the supplied
                     * arguments.
                     *
                     * @param u
                     *            the non-null URL object to be set.
                     * @param protocol
                     *            the protocol.
                     * @param host
                     *            the host name.
                     * @param port
                     *            the port number.
                     * @param file
                     *            the file component.
                     * @param ref
                     *            the reference.
                     * @deprecated use setURL(URL, String String, int, String, String, String,
                     *             String, String) instead.</member>
        <member name="M:biz.ritter.javapi.net.URLStreamHandler.setURL(biz.ritter.javapi.net.URL,System.String,System.String,System.Int32,System.String,System.String,System.String,System.String,System.String)">
                     * Sets the fields of the URL {@code u} to the values of the supplied
                     * arguments.
                     *
                     * @param u
                     *            the non-null URL object to be set.
                     * @param protocol
                     *            the protocol.
                     * @param host
                     *            the host name.
                     * @param port
                     *            the port number.
                     * @param authority
                     *            the authority.
                     * @param userInfo
                     *            the user info.
                     * @param file
                     *            the file component.
                     * @param query
                     *            the query.
                     * @param ref
                     *            the reference.</member>
        <member name="M:biz.ritter.javapi.net.URLStreamHandler.toExternalForm(biz.ritter.javapi.net.URL)">
                     * Returns the clear text representation of a given URL using HTTP format.
                     *
                     * @param url
                     *            the URL object to be converted.
                     * @return the clear text representation of the specified URL.
                     * @see #parseURL
                     * @see URL#toExternalForm()</member>
        <member name="M:biz.ritter.javapi.net.URLStreamHandler.equals(biz.ritter.javapi.net.URL,biz.ritter.javapi.net.URL)">
                     * Compares two URL objects whether they represent the same URL. Two URLs
                     * are equal if they have the same file, host, port, protocol, query, and
                     * reference components.
                     *
                     * @param url1
                     *            the first URL to compare.
                     * @param url2
                     *            the second URL to compare.
                     * @return {@code true} if the URLs are the same, {@code false} otherwise.
                     * @see #hashCode</member>
        <member name="M:biz.ritter.javapi.net.URLStreamHandler.getDefaultPort">
                     * Returns the default port of the protocol used by the handled URL. The
                     * current implementation returns always {@code -1}.
                     *
                     * @return the appropriate default port number of the protocol.</member>
        <member name="M:biz.ritter.javapi.net.URLStreamHandler.getHostAddress(biz.ritter.javapi.net.URL)">
                     * Returns the host address of the given URL.
                     *
                     * @param url
                     *            the URL object where to read the host address from.
                     * @return the host address of the specified URL.</member>
        <member name="M:biz.ritter.javapi.net.URLStreamHandler.hashCode(biz.ritter.javapi.net.URL)">
                     * Returns the hashcode value for the given URL object.
                     *
                     * @param url
                     *            the URL to determine the hashcode.
                     * @return the hashcode of the given URL.</member>
        <member name="M:biz.ritter.javapi.net.URLStreamHandler.hostsEqual(biz.ritter.javapi.net.URL,biz.ritter.javapi.net.URL)">
                     * Compares two URL objects whether they refer to the same host.
                     *
                     * @param url1
                     *            the first URL to be compared.
                     * @param url2
                     *            the second URL to be compared.
                     * @return {@code true} if both URLs refer to the same host, {@code false}
                     *         otherwise.</member>
        <member name="M:biz.ritter.javapi.net.URLStreamHandler.sameFile(biz.ritter.javapi.net.URL,biz.ritter.javapi.net.URL)">
                     * Compares two URL objects whether they refer to the same file. In the
                     * comparison included are the URL components protocol, host, port and file.
                     *
                     * @param url1
                     *            the first URL to be compared.
                     * @param url2
                     *            the second URL to be compared.
                     * @return {@code true} if both URLs refer to the same file, {@code false}
                     *         otherwise.</member>
        <member name="T:biz.ritter.javapi.net.URLStreamHandlerFactory">
            <summary>
            Defines a factory which creates an {@code URLStreamHandler} for a specified
            protocol. It is used by the class {@code URL}.
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.net.URLStreamHandlerFactory.createURLStreamHandler(System.String)">
                     * Creates a new {@code URLStreamHandler} instance for the given {@code
                     * protocol}.
                     *
                     * @param protocol
                     *            the protocol for which a handler is needed.
                     * @return the created handler.</member>
        <member name="M:biz.ritter.javapi.security.AccessController.doPrivileged``1(biz.ritter.javapi.security.PrivilegedAction{``0})">
                     * Performs the privileged action specified by <code>action</code>.
                     *
                     * When permission checks are made, if the permission has been granted by
                     * all frames below and including the one representing the call to this
                     * method, then the permission is granted. In otherwords, the check stops
                     * here.
                     *
                     * Any unchecked exception generated by this method will propagate up the
                     * chain.
                     *
                     * @param action
                     *            the action being performed
                     * @param T
                     *            the return type for the privileged action
                     * @return the result of evaluating the action
                     *
                     * @see #doPrivileged(PrivilegedAction)</member>
        <member name="T:biz.ritter.javapi.security.AllPermission">
                 * {@code AllPermission} represents the permission to perform any operation.
                 * Since its {@link #implies(Permission)} method always returns {@code true},
                 * granting this permission is equivalent to disabling security.</member>
        <member name="F:biz.ritter.javapi.security.AllPermission.serialVersionUID">
                     * @serial</member>
        <member name="M:biz.ritter.javapi.security.AllPermission.#ctor(System.String,System.String)">
                     * Constructs a new instance of {@code AllPermission}. The two argument
                     * version is provided for class {@code Policy} so that it has a consistent
                     * call pattern across all permissions. The name and action list are both
                     * ignored.
                     *
                     * @param name
                     *            ignored.
                     * @param actions
                     *            ignored.</member>
        <member name="M:biz.ritter.javapi.security.AllPermission.#ctor">
                     * Constructs a new instance of {@code AllPermission}.</member>
        <member name="M:biz.ritter.javapi.security.AllPermission.Equals(System.Object)">
                     * Compares the specified object with this {@code AllPermission} for
                     * equality and returns {@code true} if the specified object is equal,
                     * {@code false} otherwise. To be equal, the given object needs to be an
                     * instance of {@code AllPermission}.
                     *
                     * @param obj
                     *            object to be compared for equality with this {@code
                     *            AllPermission}.
                     * @return {@code true} if the specified object is equal to this {@code
                     *         AllPermission}, otherwise {@code false}.
                     * @see #hashCode</member>
        <member name="M:biz.ritter.javapi.security.AllPermission.GetHashCode">
                     * Returns the hash code value for this {@code AllPermission}. Returns the
                     * same hash code for {@code AllPermission}s that are equal to each other as
                     * required by the general contract of {@link Object#hashCode}.
                     *
                     * @return the hash code value for this {@code AllPermission}.
                     * @see Object#equals(Object)
                     * @see AllPermission#equals(Object)</member>
        <member name="M:biz.ritter.javapi.security.AllPermission.getActions">
                     * Returns the actions associated with this {@code AllPermission}. Since
                     * {@code AllPermission} objects allow all actions, this method returns
                     * always the string "&lt;all actions&gt;".
                     *
                     * @return the actions associated with this {@code AllPermission}.</member>
        <member name="M:biz.ritter.javapi.security.AllPermission.implies(biz.ritter.javapi.security.Permission)">
                     * Indicates whether the given permission is implied by this permission.
                     * {@code AllPermission} objects imply all other permissions.
                     *
                     * @return always {@code true}.
                     * @param permission
                     *            the permission to check.</member>
        <member name="M:biz.ritter.javapi.security.AllPermission.newPermissionCollection">
                     * Returns a new {@code PermissionCollection} for holding permissions of
                     * this class.
                     *
                     * @return a new {@code PermissionCollection}.</member>
        <member name="T:biz.ritter.javapi.security.AllPermissionCollection">
                 * Specific {@code PermissionCollection} for storing {@code AllPermission}s. All
                 * instances of {@code AllPermission} are equivalent, so it is enough to store a
                 * single added instance.
                 *
                 * @see AllPermission</member>
        <member name="M:biz.ritter.javapi.security.AllPermissionCollection.add(biz.ritter.javapi.security.Permission)">
                     * Adds an {@code AllPermission} to the collection.</member>
        <member name="M:biz.ritter.javapi.security.AllPermissionCollection.elements">
                     * Returns the enumeration of the collection.</member>
        <member name="T:biz.ritter.javapi.security.AllPermissionCollection.SingletonEnumeration`1">
                     * An auxiliary implementation for enumerating a single object.
                     *</member>
        <member name="M:biz.ritter.javapi.security.AllPermissionCollection.SingletonEnumeration`1.#ctor(`0)">
                         * Constructor taking the single element.
                         * @param single the element</member>
        <member name="M:biz.ritter.javapi.security.AllPermissionCollection.SingletonEnumeration`1.hasMoreElements">
                         * Returns true if the element is not enumerated yet.</member>
        <member name="M:biz.ritter.javapi.security.AllPermissionCollection.SingletonEnumeration`1.nextElement">
                         * Returns the element and clears internal reference to it.</member>
        <member name="M:biz.ritter.javapi.security.AllPermissionCollection.implies(biz.ritter.javapi.security.Permission)">
                     * Indicates whether the argument permission is implied by the receiver.
                     * {@code AllPermission} objects imply all other permissions.
                     *
                     * @return boolean {@code true} if the argument permission is implied by the
                     *         receiver, and {@code false} if it is not.
                     * @param permission
                     *            the permission to check.</member>
        <member name="T:biz.ritter.javapi.security.BasicPermission">
                 * {@code BasicPermission} is the common base class of all permissions which
                 * have a name but no action lists. A {@code BasicPermission} is granted or it
                 * is not.
                 * <p />
                 * Names of a BasicPermission follow the dot separated, hierarchical property
                 * naming convention. Asterisk '*' can be used as wildcards. Either by itself,
                 * matching anything, or at the end of the name, immediately preceded by a '.'.
                 * For example:
                 *
                 * <pre>
                 * java.io.*  grants all permissions under the java.io permission hierarchy
                 * *          grants all permissions
                 * </pre>
                 * <p />
                 * While this class ignores the action list in the
                 * {@link #BasicPermission(String, String)} constructor, subclasses may
                 * implement actions on top of this class.</member>
        <member name="M:biz.ritter.javapi.security.BasicPermission.#ctor(System.String)">
                     * Constructs a new instance of {@code BasicPermission} with the specified
                     * name.
                     *
                     * @param name
                     *            the name of the permission.
                     * @throws NullPointerException if {@code name} is {@code null}.
                     * @throws IllegalArgumentException if {@code name.length() == 0}.</member>
        <member name="M:biz.ritter.javapi.security.BasicPermission.#ctor(System.String,System.String)">
                     * Constructs a new instance of {@code BasicPermission} with the specified
                     * name. The {@code action} parameter is ignored.
                     *
                     * @param name
                     *            the name of the permission.
                     * @param action
                     *            is ignored.
                     * @throws NullPointerException
                     *             if {@code name} is {@code null}.
                     * @throws IllegalArgumentException
                     *             if {@code name.length() == 0}.</member>
        <member name="M:biz.ritter.javapi.security.BasicPermission.checkName(System.String)">
                     * Checks name parameter</member>
        <member name="M:biz.ritter.javapi.security.BasicPermission.Equals(System.Object)">
                     * Compares the specified object with this {@code BasicPermission} for
                     * equality. Returns {@code true} if the specified object has the same class
                     * and the two {@code Permissions}s have the same name.
                     * <p />
                     * The {@link #implies(Permission)} method should be used for making access
                     * control checks.
                     *
                     * @param obj
                     *            object to be compared for equality with this {@code
                     *            BasicPermission}.
                     * @return {@code true} if the specified object is equal to this {@code
                     *         BasicPermission}, otherwise {@code false}.</member>
        <member name="M:biz.ritter.javapi.security.BasicPermission.GetHashCode">
                     * Returns the hash code value for this {@code BasicPermission}. Returns the
                     * same hash code for {@code BasicPermission}s that are equal to each other
                     * as required by the general contract of {@link Object#hashCode}.
                     *
                     * @return the hash code value for this {@code BasicPermission}.
                     * @see Object#equals(Object)
                     * @see BasicPermission#equals(Object)</member>
        <member name="M:biz.ritter.javapi.security.BasicPermission.getActions">
                     * Returns the actions associated with this permission. Since {@code
                     * BasicPermission} instances have no actions, an empty string is returned.
                     *
                     * @return an empty string.</member>
        <member name="M:biz.ritter.javapi.security.BasicPermission.implies(biz.ritter.javapi.security.Permission)">
                     * Indicates whether the specified permission is implied by this permission.
                     *
                     * @param permission
                     *            the permission to check against this permission.
                     * @return {@code true} if the specified permission is implied by this
                     *         permission, {@code false} otherwise.</member>
        <member name="M:biz.ritter.javapi.security.BasicPermission.nameImplies(System.String,System.String)">
                     * Checks if {@code thisName} implies {@code thatName},
                     * accordingly to hierarchical property naming convention.
                     * It is assumed that names cannot be {@code null} or empty.</member>
        <member name="M:biz.ritter.javapi.security.BasicPermission.newPermissionCollection">
                     * Returns an empty {@link PermissionCollection} for holding permissions.
                     * <p />
                     * For {@code PermissionCollection} (and subclasses which do not override
                     * this method), the collection which is returned does <em>not</em> invoke
                     * the {@link #implies(Permission)} method of the permissions which are
                     * stored in it when checking if the collection implies a permission.
                     * Instead, it assumes that if the type of the permission is correct, and
                     * the name of the permission is correct, there is a match.
                     *
                     * @return an empty {@link PermissionCollection} for holding permissions.
                     * @see BasicPermissionCollection</member>
        <member name="M:biz.ritter.javapi.security.BasicPermission.readObject(biz.ritter.javapi.io.ObjectInputStream)">
                     * Checks name after default deserialization.</member>
        <member name="T:biz.ritter.javapi.security.BasicPermissionCollection">
             * Specific {@code PermissionCollection} for storing {@code BasicPermissions} of
             * arbitrary type.
             *
             * @see BasicPermission
             * @see PermissionCollection</member>
        <member name="M:biz.ritter.javapi.security.BasicPermissionCollection.add(biz.ritter.javapi.security.Permission)">
                 * Adds a permission to the collection. The first added permission must be a
                 * subclass of BasicPermission, next permissions must be of the same class
                 * as the first one.
                 *
                 * @see java.security.PermissionCollection#add(java.security.Permission)</member>
        <member name="M:biz.ritter.javapi.security.BasicPermissionCollection.elements">
                 * Returns enumeration of contained elements.</member>
        <member name="M:biz.ritter.javapi.security.BasicPermissionCollection.implies(biz.ritter.javapi.security.Permission)">
                 * Indicates whether the argument permission is implied by the receiver.
                 *
                 * @return boolean {@code true} if the argument permission is implied by the
                 *         receiver, and {@code false} if it is not.
                 * @param permission
                 *            the permission to check.
                 * @see Permission</member>
        <member name="M:biz.ritter.javapi.awt.peer.FramePeer.setTitle(System.String)">
            <summary>
            Set the title of frame
            </summary>
            <param name="newTitle">title</param>
        </member>
        <member name="M:biz.ritter.javapi.awt.peer.FramePeer.pack">
            <summary>
            Set window dimension to optimal size
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.awt.peer.FramePeer.setSize(System.Int32,System.Int32)">
            <summary>
            Set the new windows dimension
            </summary>
            <param name="width">width of window</param>
            <param name="height">height of window</param>
        </member>
        <member name="T:biz.ritter.javapi.beans.Introspector">
                 * The <code>Introspector</code> is a utility for developers to figure out
                 * which properties, events, and methods a JavaBean supports.
                 * <p>
                 * The <code>Introspector</code> class walks over the class/superclass chain
                 * of the target bean class. At each level it checks if there is a matching
                 * <code>BeanInfo</code> class which provides explicit information about the
                 * bean, and if so uses that explicit information. Otherwise it uses the low
                 * level reflection APIs to study the target class and uses design patterns to
                 * analyze its behaviour and then proceeds to continue the introspection with
                 * its baseclass.
                 * </p>
                 * <p>
                 * To look for the explicit information of a bean:
                 * </p>
                 * <ol>
                 * <li>The <code>Introspector</code> appends "BeanInfo" to the qualified name
                 * of the bean class, try to use the new class as the "BeanInfo" class. If the
                 * "BeanInfo" class exsits and returns non-null value when queried for explicit
                 * information, use the explicit information</li>
                 * <li>If the first step fails, the <code>Introspector</code> will extract a
                 * simple class name of the bean class by removing the package name from the
                 * qualified name of the bean class, append "BeanInfo" to it. And look for the
                 * simple class name in the packages defined in the "BeanInfo" search path (The
                 * default "BeanInfo" search path is <code>sun.beans.infos</code>). If it
                 * finds a "BeanInfo" class and the "BeanInfo" class returns non-null value when
                 * queried for explicit information, use the explicit information</li>
                 * </ol>
                 *</member>
        <member name="F:biz.ritter.javapi.beans.Introspector.IGNORE_ALL_BEANINFO">
                     * Constant values to indicate that the <code>Introspector</code> will
                     * ignore all <code>BeanInfo</code> class.</member>
        <member name="F:biz.ritter.javapi.beans.Introspector.IGNORE_IMMEDIATE_BEANINFO">
                     * Constant values to indicate that the <code>Introspector</code> will
                     * ignore the <code>BeanInfo</code> class of the current bean class.</member>
        <member name="F:biz.ritter.javapi.beans.Introspector.USE_ALL_BEANINFO">
                     * Constant values to indicate that the <code>Introspector</code> will use
                     * all <code>BeanInfo</code> class which have been found. This is the default one.</member>
        <member name="M:biz.ritter.javapi.beans.Introspector.decapitalize(System.String)">
                     * Decapitalizes a given string according to the rule:
                     * <ul>
                     * <li>If the first or only character is Upper Case, it is made Lower Case</li>
                     * <li>UNLESS the second character is also Upper Case, when the String is
                     * returned unchanged</li></ul>
                     *
                     * @param name -
                     *            the String to decapitalize
                     * @return the decapitalized version of the String</member>
        <member name="M:biz.ritter.javapi.beans.Introspector.flushCaches">
                     * Flushes all <code>BeanInfo</code> caches.
                     *</member>
        <member name="M:biz.ritter.javapi.beans.Introspector.flushFromCaches(biz.ritter.javapi.lang.Class)">
                     * Flushes the <code>BeanInfo</code> caches of the specified bean class
                     *
                     * @param clazz
                     *            the specified bean class</member>
        <member name="M:biz.ritter.javapi.beans.Introspector.getBeanInfo(biz.ritter.javapi.lang.Class)">
                     * Gets the <code>BeanInfo</code> object which contains the information of
                     * the properties, events and methods of the specified bean class.
                     *
                     * <p>
                     * The <code>Introspector</code> will cache the <code>BeanInfo</code>
                     * object. Subsequent calls to this method will be answered with the cached
                     * data.
                     * </p>
                     *
                     * @param beanClass
                     *            the specified bean class.
                     * @return the <code>BeanInfo</code> of the bean class.
                     * @throws IntrospectionException</member>
        <member name="M:biz.ritter.javapi.beans.Introspector.getBeanInfo(biz.ritter.javapi.lang.Class,biz.ritter.javapi.lang.Class)">
                     * Gets the <code>BeanInfo</code> object which contains the information of
                     * the properties, events and methods of the specified bean class. It will
                     * not introspect the "stopclass" and its super class.
                     *
                     * <p>
                     * The <code>Introspector</code> will cache the <code>BeanInfo</code>
                     * object. Subsequent calls to this method will be answered with the cached
                     * data.
                     * </p>
                     *
                     * @param beanClass
                     *            the specified beanClass.
                     * @param stopClass
                     *            the sopt class which should be super class of the bean class.
                     *            May be null.
                     * @return the <code>BeanInfo</code> of the bean class.
                     * @throws IntrospectionException</member>
        <member name="M:biz.ritter.javapi.beans.Introspector.getBeanInfo(biz.ritter.javapi.lang.Class,System.Int32)">
                     * Gets the <code>BeanInfo</code> object which contains the information of
                     * the properties, events and methods of the specified bean class.
                     * <ol>
                     * <li>If <code>flag==IGNORE_ALL_BEANINFO</code>, the
                     * <code>Introspector</code> will ignore all <code>BeanInfo</code>
                     * class.</li>
                     * <li>If <code>flag==IGNORE_IMMEDIATE_BEANINFO</code>, the
                     * <code>Introspector</code> will ignore the <code>BeanInfo</code> class
                     * of the current bean class.</li>
                     * <li>If <code>flag==USE_ALL_BEANINFO</code>, the
                     * <code>Introspector</code> will use all <code>BeanInfo</code> class
                     * which have been found.</li>
                     * </ol>
                     * <p>
                     * The <code>Introspector</code> will cache the <code>BeanInfo</code>
                     * object. Subsequent calls to this method will be answered with the cached
                     * data.
                     * </p>
                     *
                     * @param beanClass
                     *            the specified bean class.
                     * @param flags
                     *            the flag to control the usage of the explicit
                     *            <code>BeanInfo</code> class.
                     * @return the <code>BeanInfo</code> of the bean class.
                     * @throws IntrospectionException</member>
        <member name="M:biz.ritter.javapi.beans.Introspector.getBeanInfoSearchPath">
                     * Gets an array of search packages.
                     *
                     * @return an array of search packages.</member>
        <member name="M:biz.ritter.javapi.beans.BeanDescriptor.#ctor(biz.ritter.javapi.lang.Class,biz.ritter.javapi.lang.Class)">
                     * <p>
                     * Constructs an instance with the bean's {@link Class} and a customizer
                     * {@link Class}. The descriptor's {@link #getName()} is set as the
                     * unqualified name of the <code>beanClass</code>.
                     * </p>
                     *
                     * @param beanClass
                     *            The bean's Class.
                     * @param customizerClass
                     *            The bean's customizer Class.</member>
        <member name="M:biz.ritter.javapi.beans.BeanDescriptor.#ctor(biz.ritter.javapi.lang.Class)">
                     * <p>
                     * Constructs an instance with the bean's {@link Class}. The descriptor's
                     * {@link #getName()} is set as the unqualified name of the
                     * <code>beanClass</code>.
                     * </p>
                     *
                     * @param beanClass
                     *            The bean's Class.</member>
        <member name="M:biz.ritter.javapi.beans.BeanDescriptor.getCustomizerClass">
                     * <p>
                     * Gets the bean's customizer {@link Class}/
                     * </p>
                     *
                     * @return A {@link Class} instance or <code>null</code>.</member>
        <member name="M:biz.ritter.javapi.beans.BeanDescriptor.getBeanClass">
                     * <p>
                     * Gets the bean's {@link Class}.
                     * </p>
                     *
                     * @return A {@link Class} instance.</member>
        <member name="M:biz.ritter.javapi.beans.BeanDescriptor.getShortClassName(biz.ritter.javapi.lang.Class)">
                     * <p>
                     * Utility method for getting the unqualified name of a {@link Class}.
                     * </p>
                     *
                     * @param leguminaClass
                     *            The Class to get the name from.
                     * @return A String instance or <code>null</code>.</member>
        <member name="M:biz.ritter.javapi.beans.FeatureDescriptor.setName(System.String)">
                     * <p>
                     * Sets the name.
                     * </p>
                     *
                     * @param name
                     *            The name to set.</member>
        <member name="M:biz.ritter.javapi.beans.FeatureDescriptor.getName">
                     * <p>
                     * Gets the name.
                     * </p>
                     *
                     * @return The name.</member>
        <member name="T:biz.ritter.javapi.io.LineNumberReader">
                 * Wraps an existing {@link Reader} and counts the line terminators encountered
                 * while reading the data. The line number starts at 0 and is incremented any
                 * time {@code '\r'}, {@code '\n'} or {@code "\r\n"} is read. The class has an
                 * internal buffer for its data. The size of the buffer defaults to 8 KB.</member>
        <member name="M:biz.ritter.javapi.io.LineNumberReader.#ctor(biz.ritter.javapi.io.Reader)">
                     * Constructs a new LineNumberReader on the Reader {@code in}. The internal
                     * buffer gets the default size (8 KB).
                     *
                     * @param in
                     *            the Reader that is buffered.</member>
        <member name="M:biz.ritter.javapi.io.LineNumberReader.#ctor(biz.ritter.javapi.io.Reader,System.Int32)">
                     * Constructs a new LineNumberReader on the Reader {@code in}. The size of
                     * the internal buffer is specified by the parameter {@code size}.
                     *
                     * @param in
                     *            the Reader that is buffered.
                     * @param size
                     *            the size of the buffer to allocate.
                     * @throws IllegalArgumentException
                     *             if {@code size &lt;= 0}.</member>
        <member name="M:biz.ritter.javapi.io.LineNumberReader.getLineNumber">
                     * Returns the current line number for this reader. Numbering starts at 0.
                     *
                     * @return the current line number.</member>
        <member name="M:biz.ritter.javapi.io.LineNumberReader.mark(System.Int32)">
                     * Sets a mark position in this reader. The parameter {@code readlimit}
                     * indicates how many characters can be read before the mark is invalidated.
                     * Sending {@code reset()} will reposition this reader back to the marked
                     * position, provided that {@code readlimit} has not been surpassed. The
                     * line number associated with this marked position is also stored so that
                     * it can be restored when {@code reset()} is called.
                     *
                     * @param readlimit
                     *            the number of characters that can be read from this stream
                     *            before the mark is invalidated.
                     * @throws IOException
                     *             if an error occurs while setting the mark in this reader.
                     * @see #markSupported()
                     * @see #reset()</member>
        <member name="M:biz.ritter.javapi.io.LineNumberReader.read">
                     * Reads a single character from the source reader and returns it as an
                     * integer with the two higher-order bytes set to 0. Returns -1 if the end
                     * of the source reader has been reached.
                     * <p>
                     * The line number count is incremented if a line terminator is encountered.
                     * Recognized line terminator sequences are {@code '\r'}, {@code '\n'} and
                     * {@code "\r\n"}. Line terminator sequences are always translated into
                     * {@code '\n'}.
                     *</p>
                     * @return the character read or -1 if the end of the source reader has been
                     *         reached.
                     * @throws IOException
                     *             if the reader is closed or another IOException occurs.</member>
        <member name="M:biz.ritter.javapi.io.LineNumberReader.read(System.Char[],System.Int32,System.Int32)">
                     * Reads at most {@code count} characters from the source reader and stores
                     * them in the character array {@code buffer} starting at {@code offset}.
                     * Returns the number of characters actually read or -1 if no characters
                     * have been read and the end of this reader has been reached.
                     * <p>
                     * The line number count is incremented if a line terminator is encountered.
                     * Recognized line terminator sequences are {@code '\r'}, {@code '\n'} and
                     * {@code "\r\n"}.
                     *</p>
                     * @param buffer
                     *            the array in which to store the characters read.
                     * @param offset
                     *            the initial position in {@code buffer} to store the characters
                     *            read from this reader.
                     * @param count
                     *            the maximum number of characters to store in {@code buffer}.
                     * @return the number of characters actually read or -1 if the end of the
                     *         source reader has been reached while reading.
                     * @throws IOException
                     *             if this reader is closed or another IOException occurs.</member>
        <member name="M:biz.ritter.javapi.io.LineNumberReader.readLine">
                     * Returns the next line of text available from this reader. A line is
                     * represented by 0 or more characters followed by {@code '\r'},
                     * {@code '\n'}, {@code "\r\n"} or the end of the stream. The returned
                     * string does not include the newline sequence.
                     *
                     * @return the contents of the line or {@code null} if no characters have
                     *         been read before the end of the stream has been reached.
                     * @throws IOException
                     *             if this reader is closed or another IOException occurs.</member>
        <member name="M:biz.ritter.javapi.io.LineNumberReader.reset">
                     * Resets this reader to the last marked location. It also resets the line
                     * count to what is was when this reader was marked. This implementation
                     * resets the source reader.
                     *
                     * @throws IOException
                     *             if this reader is already closed, no mark has been set or the
                     *             mark is no longer valid because more than {@code readlimit}
                     *             bytes have been read since setting the mark.
                     * @see #mark(int)
                     * @see #markSupported()</member>
        <member name="M:biz.ritter.javapi.io.LineNumberReader.setLineNumber(System.Int32)">
                     * Sets the line number of this reader to the specified {@code lineNumber}.
                     * Note that this may have side effects on the line number associated with
                     * the last marked position.
                     *
                     * @param lineNumber
                     *            the new line number value.
                     * @see #mark(int)
                     * @see #reset()</member>
        <member name="M:biz.ritter.javapi.io.LineNumberReader.skip(System.Int64)">
                     * Skips {@code count} number of characters in this reader. Subsequent
                     * {@code read()}'s will not return these characters unless {@code reset()}
                     * is used. This implementation skips {@code count} number of characters in
                     * the source reader and increments the line number count whenever line
                     * terminator sequences are skipped.
                     *
                     * @param count
                     *            the number of characters to skip.
                     * @return the number of characters actually skipped.
                     * @throws IllegalArgumentException
                     *             if {@code count &lt; 0}.
                     * @throws IOException
                     *             if this reader is closed or another IOException occurs.
                     * @see #mark(int)
                     * @see #read()
                     * @see #reset()</member>
        <member name="T:biz.ritter.javapi.io.StringWriter">
                 * A specialized {@link Writer} that writes characters to a {@code StringBuffer}
                 * in a sequential manner, appending them in the process. The result can later
                 * be queried using the {@link #StringWriter(int)} or {@link #toString()}
                 * methods.
                 *
                 * @see StringReader</member>
        <member name="M:biz.ritter.javapi.io.StringWriter.#ctor">
                     * Constructs a new {@code StringWriter} which has a {@link StringBuffer}
                     * allocated with the default size of 16 characters. The {@code
                     * StringBuffer} is also the {@code lock} used to synchronize access to this
                     * writer.</member>
        <member name="M:biz.ritter.javapi.io.StringWriter.#ctor(System.Int32)">
                     * Constructs a new {@code StringWriter} which has a {@link StringBuffer}
                     * allocated with a size of {@code initialSize} characters. The {@code
                     * StringBuffer} is also the {@code lock} used to synchronize access to this
                     * writer.
                     *
                     * @param initialSize
                     *            the intial size of the target string buffer.</member>
        <member name="M:biz.ritter.javapi.io.StringWriter.close">
                     * Calling this method has no effect. In contrast to most {@code Writer} subclasses,
                     * the other methods in {@code StringWriter} do not throw an {@code IOException} if
                     * {@code close()} has been called.
                     *
                     * @throws IOException
                     *             if an error occurs while closing this writer.</member>
        <member name="M:biz.ritter.javapi.io.StringWriter.flush">
                     * Calling this method has no effect.</member>
        <member name="M:biz.ritter.javapi.io.StringWriter.getBuffer">
                     * Gets a reference to this writer's internal {@link StringBuffer}. Any
                     * changes made to the returned buffer are reflected in this writer.
                     *
                     * @return a reference to this writer's internal {@code StringBuffer}.</member>
        <member name="M:biz.ritter.javapi.io.StringWriter.ToString">
                     * Gets a copy of the contents of this writer as a string.
                     *
                     * @return this writer's contents as a string.</member>
        <member name="M:biz.ritter.javapi.io.StringWriter.write(System.Char[],System.Int32,System.Int32)">
                     * Writes {@code count} characters starting at {@code offset} in {@code buf}
                     * to this writer's {@code StringBuffer}.
                     *
                     * @param cbuf
                     *            the non-null character array to write.
                     * @param offset
                     *            the index of the first character in {@code cbuf} to write.
                     * @param count
                     *            the maximum number of characters to write.
                     * @throws IndexOutOfBoundsException
                     *             if {@code offset &lt; 0} or {@code count &lt; 0}, or if {@code
                     *             offset + count} is greater than the size of {@code buf}.</member>
        <member name="M:biz.ritter.javapi.io.StringWriter.write(System.Int32)">
                     * Writes one character to this writer's {@code StringBuffer}. Only the two
                     * least significant bytes of the integer {@code oneChar} are written.
                     *
                     * @param oneChar
                     *            the character to write to this writer's {@code StringBuffer}.</member>
        <member name="M:biz.ritter.javapi.io.StringWriter.write(System.String)">
                     * Writes the characters from the specified string to this writer's {@code
                     * StringBuffer}.
                     *
                     * @param str
                     *            the non-null string containing the characters to write.</member>
        <member name="M:biz.ritter.javapi.io.StringWriter.write(System.String,System.Int32,System.Int32)">
                     * Writes {@code count} characters from {@code str} starting at {@code
                     * offset} to this writer's {@code StringBuffer}.
                     *
                     * @param str
                     *            the non-null string containing the characters to write.
                     * @param offset
                     *            the index of the first character in {@code str} to write.
                     * @param count
                     *            the number of characters from {@code str} to write.
                     * @throws StringIndexOutOfBoundsException
                     *             if {@code offset &lt; 0} or {@code count &lt; 0}, or if {@code
                     *             offset + count} is greater than the length of {@code str}.</member>
        <member name="M:biz.ritter.javapi.io.StringWriter.append(System.Char)">
                     * Appends the character {@code c} to this writer's {@code StringBuffer}.
                     * This method works the same way as {@link #write(int)}.
                     *
                     * @param c
                     *            the character to append to the target stream.
                     * @return this writer.</member>
        <member name="M:biz.ritter.javapi.io.StringWriter.append(biz.ritter.javapi.lang.CharSequence)">
                     * Appends the character sequence {@code csq} to this writer's {@code
                     * StringBuffer}. This method works the same way as {@code
                     * StringWriter.write(csq.toString())}. If {@code csq} is {@code null}, then
                     * the string "null" is written to the target stream.
                     *
                     * @param csq
                     *            the character sequence appended to the target.
                     * @return this writer.</member>
        <member name="M:biz.ritter.javapi.io.StringWriter.append(biz.ritter.javapi.lang.CharSequence,System.Int32,System.Int32)">
                     * Appends a subsequence of the character sequence {@code csq} to this
                     * writer's {@code StringBuffer}. This method works the same way as {@code
                     * StringWriter.writer(csq.subsequence(start, end).toString())}. If {@code
                     * csq} is {@code null}, then the specified subsequence of the string "null"
                     * will be written to the target.
                     *
                     * @param csq
                     *            the character sequence appended to the target.
                     * @param start
                     *            the index of the first char in the character sequence appended
                     *            to the target.
                     * @param end
                     *            the index of the character following the last character of the
                     *            subsequence appended to the target.
                     * @return this writer.
                     * @throws IndexOutOfBoundsException
                     *             if {@code start &gt; end}, {@code start &lt; 0}, {@code end &lt; 0} or
                     *             either {@code start} or {@code end} are greater or equal than
                     *             the length of {@code csq}.</member>
        <member name="T:biz.ritter.javapi.lang.Byte">
                 * The wrapper for the primitive type {@code byte}.
                 *
                 * @since 1.1</member>
        <member name="F:biz.ritter.javapi.lang.Byte.TYPE">
                     * The {@link Class} object that represents the primitive type {@code byte}.</member>
        <member name="F:biz.ritter.javapi.lang.Byte.value">
                     * The value which the receiver represents.</member>
        <member name="F:biz.ritter.javapi.lang.Byte.MAX_VALUE">
                     * The maximum {@code Byte} value, 2<sup>7</sup>-1.</member>
        <member name="F:biz.ritter.javapi.lang.Byte.MIN_VALUE">
                     * The minimum {@code Byte} value, -2<sup>7</sup>.</member>
        <member name="F:biz.ritter.javapi.lang.Byte.SIZE">
                     * The number of bits needed to represent a {@code Byte} value in two's
                     * complement form.
                     *
                     * @since 1.5</member>
        <member name="F:biz.ritter.javapi.lang.Byte.CACHE">
                     * A cache of instances used by {@link #valueOf(byte)} and auto-boxing.</member>
        <member name="M:biz.ritter.javapi.lang.Byte.#ctor(System.Byte)">
                     * Constructs a new {@code Byte} with the specified primitive byte value.
                     *
                     * @param value
                     *            the primitive byte value to store in the new instance.</member>
        <member name="M:biz.ritter.javapi.lang.Byte.#ctor(System.SByte)">
            <summary>
            In addition, set the signed byte value.
            </summary>
            <param name="value">
            </param>
        </member>
        <member name="M:biz.ritter.javapi.lang.Byte.#ctor(System.String)">
                     * Constructs a new {@code Byte} from the specified string.
                     *
                     * @param string
                     *            the string representation of a single byte value.
                     * @throws NumberFormatException
                     *             if {@code string} can not be decoded into a byte value.
                     * @see #parseByte(String)</member>
        <member name="M:biz.ritter.javapi.lang.Byte.byteValue">
                     * Gets the primitive value of this byte.
                     *
                     * @return this object's primitive value.</member>
        <member name="M:biz.ritter.javapi.lang.Byte.sbyteValue">
            <summary>
            In addition, returns thesigned byte value.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:biz.ritter.javapi.lang.Byte.compareTo(biz.ritter.javapi.lang.Byte)">
                     * Compares this object to the specified byte object to determine their
                     * relative order.
                     *
                     * @param object
                     *            the byte object to compare this object to.
                     * @return a negative value if the value of this byte is less than the value
                     *         of {@code object}; 0 if the value of this byte and the value of
                     *         {@code object} are equal; a positive value if the value of this
                     *         byte is greater than the value of {@code object}.
                     * @see java.lang.Comparable
                     * @since 1.2</member>
        <member name="M:biz.ritter.javapi.lang.Byte.decode(System.String)">
                     * Parses the specified string and returns a {@code Byte} instance if the
                     * string can be decoded into a single byte value. The string may be an
                     * optional minus sign "-" followed by a hexadecimal ("0x..." or "#..."),
                     * octal ("0..."), or decimal ("...") representation of a byte.
                     *
                     * @param string
                     *            a string representation of a single byte value.
                     * @return a {@code Byte} containing the value represented by {@code string}.
                     * @throws NumberFormatException
                     *             if {@code string} can not be parsed as a byte value.</member>
        <member name="M:biz.ritter.javapi.lang.Byte.Equals(System.Object)">
                     * Compares this object with the specified object and indicates if they are
                     * equal. In order to be equal, {@code object} must be an instance of
                     * {@code Byte} and have the same byte value as this object.
                     *
                     * @param object
                     *            the object to compare this byte with.
                     * @return {@code true} if the specified object is equal to this
                     *         {@code Byte}; {@code false} otherwise.</member>
        <member name="M:biz.ritter.javapi.lang.Byte.parseByte(System.String)">
                     * Parses the specified string as a signed decimal byte value. The ASCII
                     * character \u002d ('-') is recognized as the minus sign.
                     *
                     * @param string
                     *            the string representation of a single byte value.
                     * @return the primitive byte value represented by {@code string}.
                     * @throws NumberFormatException
                     *             if {@code string} is {@code null}, has a length of zero or
                     *             can not be parsed as a byte value.</member>
        <member name="M:biz.ritter.javapi.lang.Byte.parseByte(System.String,System.Int32)">
                     * Parses the specified string as a signed byte value using the specified
                     * radix. The ASCII character \u002d ('-') is recognized as the minus sign.
                     *
                     * @param string
                     *            the string representation of a single byte value.
                     * @param radix
                     *            the radix to use when parsing.
                     * @return the primitive byte value represented by {@code string} using
                     *         {@code radix}.
                     * @throws NumberFormatException
                     *             if {@code string} is {@code null} or has a length of zero,
                     *             {@code radix &lt; Character.MIN_RADIX},
                     *             {@code radix &gt; Character.MAX_RADIX}, or if {@code string}
                     *             can not be parsed as a byte value.</member>
        <member name="M:biz.ritter.javapi.lang.Byte.toString(System.Byte)">
                     * Returns a string containing a concise, human-readable description of the
                     * specified byte value.
                     *
                     * @param value
                     *            the byte to convert to a string.
                     * @return a printable representation of {@code value}.</member>
        <member name="M:biz.ritter.javapi.lang.Byte.valueOf(System.String)">
                     * Parses the specified string as a signed decimal byte value.
                     *
                     * @param string
                     *            the string representation of a single byte value.
                     * @return a {@code Byte} instance containing the byte value represented by
                     *         {@code string}.
                     * @throws NumberFormatException
                     *             if {@code string} is {@code null}, has a length of zero or
                     *             can not be parsed as a byte value.
                     * @see #parseByte(String)</member>
        <member name="M:biz.ritter.javapi.lang.Byte.valueOf(System.String,System.Int32)">
                     * Parses the specified string as a signed byte value using the specified
                     * radix.
                     *
                     * @param string
                     *            the string representation of a single byte value.
                     * @param radix
                     *            the radix to use when parsing.
                     * @return a {@code Byte} instance containing the byte value represented by
                     *         {@code string} using {@code radix}.
                     * @throws NumberFormatException
                     *             if {@code string} is {@code null} or has a length of zero,
                     *             {@code radix &lt; Character.MIN_RADIX},
                     *             {@code radix &gt; Character.MAX_RADIX}, or if {@code string}
                     *             can not be parsed as a byte value.
                     * @see #parseByte(String, int)</member>
        <member name="M:biz.ritter.javapi.lang.Byte.valueOf(System.Byte)">
                     * Returns a {@code Byte} instance for the specified byte value.
                     * <p />
                     * If it is not necessary to get a new {@code Byte} instance, it is
                     * recommended to use this method instead of the constructor, since it
                     * maintains a cache of instances which may result in better performance.
                     *
                     * @param b
                     *            the byte value to store in the instance.
                     * @return a {@code Byte} instance containing {@code b}.
                     * @since 1.5</member>
        <member name="M:biz.ritter.javapi.lang.Byte.op_Implicit(biz.ritter.javapi.lang.Byte)~System.Byte">
            <summary>
            Implicit convert java.lang.Byte to .net byte type
            </summary>
            <param name="b">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:biz.ritter.javapi.lang.Class.getMethod(System.String,biz.ritter.javapi.lang.Class[])">
            <summary>
            Return the method
            </summary>
            <param name="name">
            </param>
            <param name="paramTypes">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:biz.ritter.javapi.lang.Class.getMethod(System.String,System.Type[])">
            <summary>
            In addition, a method is provided to implement some nearlier at .net framework.
            </summary>
            <param name="name">
            </param>
            <param name="paramTypes">
            </param>
            <returns>
            </returns>
            <exception cref="T:biz.ritter.javapi.lang.NoSuchMethodException">
            </exception>
        </member>
        <member name="M:biz.ritter.javapi.lang.Class.getConstructor(biz.ritter.javapi.lang.Class[])">
            <summary>
            Return the constructor
            </summary>
            <param name="paramTypes">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:biz.ritter.javapi.lang.Class.getDelegateInstance">
            <summary>
            This helper method returns the underlying .net type.
            </summary>
            <returns>The type that wrapped.</returns>
        </member>
        <member name="M:biz.ritter.javapi.lang.Class.getName">
            <summary>
            Return the name
            </summary>
            <returns>class name</returns>
        </member>
        <member name="M:biz.ritter.javapi.lang.Class.getDeclaredMethods">
            <summary>
            Get all declared Method of this type.
            </summary>
            <returns>method array</returns>
        </member>
        <member name="M:biz.ritter.javapi.lang.Class.getSuperclass">
            <summary>
            Return the class from which the current class directly inherit.
            </summary>
            <returns>super class</returns>
        </member>
        <member name="M:biz.ritter.javapi.lang.Class.isInstance(System.Object)">
            <summary>
            Check given object is instance of class type.
            </summary>
            <param name="obj">object</param>
            <returns>true if obj is type</returns>
        </member>
        <member name="M:biz.ritter.javapi.lang.Class.newInstance">
            <summary>
            Create a new instance by calling default constructor
            </summary>
            <returns>instance of type</returns>
        </member>
        <member name="M:biz.ritter.javapi.lang.Class.forName(System.String)">
            <summary>
            Search the system for given class and return this.
            </summary>
            <param name="className">see System.Type.AssemblyQualifedName</param>
            <returns>
            </returns>
        </member>
        <member name="M:biz.ritter.javapi.lang.Class.forName(System.String,System.Boolean,biz.ritter.javapi.lang.ClassLoader)">
            <summary>
            Search the system for given class and return this.
            </summary>
            <param name="className">see System.Type.AssemblyQualifedName</param>
            <param name="cl">ClassLoader - ignored</param>
            <param name="initialize">ignored - ever like true</param>
            <returns>
            </returns>
        </member>
        <member name="M:biz.ritter.javapi.lang.Class.getClassLoader">
            <summary>
            Returns the systen class loader
            </summary>
            <returns>
            </returns>
        </member>
        <member name="T:biz.ritter.javapi.lang.NoSuchMethodException">
                 * Thrown when the virtual machine notices that a program tries to reference,
                 * on a class or object, a method that does not exist.</member>
        <member name="M:biz.ritter.javapi.lang.NoSuchMethodException.#ctor">
                     * Constructs a new {@code NoSuchMethodException} that includes the current
                     * stack trace.</member>
        <member name="M:biz.ritter.javapi.lang.NoSuchMethodException.#ctor(System.String)">
                      * Constructs a new {@code NoSuchMethodException} with the current stack
                      * trace and the specified detail message.
                      *
                      * @param detailMessage
                      *            the detail message for this exception.</member>
        <member name="T:biz.ritter.javapi.lang.Short">
                 * The wrapper for the primitive type {@code short}.
                 *
                 * @see java.lang.Number
                 * @since 1.1</member>
        <member name="F:biz.ritter.javapi.lang.Short.TYPE">
                     * The {@link Class} object that represents the primitive type {@code
                     * short}.</member>
        <member name="F:biz.ritter.javapi.lang.Short.value">
                     * The value which the receiver represents.</member>
        <member name="F:biz.ritter.javapi.lang.Short.MAX_VALUE">
                     * Constant for the maximum {@code short} value, 2<sup>15</sup>-1.</member>
        <member name="F:biz.ritter.javapi.lang.Short.MIN_VALUE">
                     * Constant for the minimum {@code short} value, -2<sup>15</sup>.</member>
        <member name="F:biz.ritter.javapi.lang.Short.SIZE">
                     * Constant for the number of bits needed to represent a {@code short} in
                     * two's complement form.
                     *
                     * @since 1.5</member>
        <member name="M:biz.ritter.javapi.lang.Short.#ctor(System.String)">
                     * Constructs a new {@code Short} from the specified string.
                     *
                     * @param string
                     *            the string representation of a short value.
                     * @throws NumberFormatException
                     *             if {@code string} can not be decoded into a short value.
                     * @see #parseShort(String)</member>
        <member name="M:biz.ritter.javapi.lang.Short.#ctor(System.Int16)">
                     * Constructs a new {@code Short} with the specified primitive short value.
                     *
                     * @param value
                     *            the primitive short value to store in the new instance.</member>
        <member name="M:biz.ritter.javapi.lang.Short.compareTo(biz.ritter.javapi.lang.Short)">
                     * Compares this object to the specified short object to determine their
                     * relative order.
                     *
                     * @param object
                     *            the short object to compare this object to.
                     * @return a negative value if the value of this short is less than the
                     *         value of {@code object}; 0 if the value of this short and the
                     *         value of {@code object} are equal; a positive value if the value
                     *         of this short is greater than the value of {@code object}.
                     * @throws NullPointerException
                     *             if {@code object} is null.
                     * @see java.lang.Comparable
                     * @since 1.2</member>
        <member name="M:biz.ritter.javapi.lang.Short.decode(System.String)">
                     * Parses the specified string and returns a {@code Short} instance if the
                     * string can be decoded into a short value. The string may be an optional
                     * minus sign "-" followed by a hexadecimal ("0x..." or "#..."), octal
                     * ("0..."), or decimal ("...") representation of a short.
                     *
                     * @param string
                     *            a string representation of a short value.
                     * @return a {@code Short} containing the value represented by
                     *         {@code string}.
                     * @throws NumberFormatException
                     *             if {@code string} can not be parsed as a short value.</member>
        <member name="M:biz.ritter.javapi.lang.Short.Equals(System.Object)">
                     * Compares this instance with the specified object and indicates if they
                     * are equal. In order to be equal, {@code object} must be an instance of
                     * {@code Short} and have the same short value as this object.
                     *
                     * @param object
                     *            the object to compare this short with.
                     * @return {@code true} if the specified object is equal to this
                     *         {@code Short}; {@code false} otherwise.</member>
        <member name="M:biz.ritter.javapi.lang.Short.parseShort(System.String)">
                     * Parses the specified string as a signed decimal short value. The ASCII
                     * character \u002d ('-') is recognized as the minus sign.
                     *
                     * @param string
                     *            the string representation of a short value.
                     * @return the primitive short value represented by {@code string}.
                     * @throws NumberFormatException
                     *             if {@code string} is {@code null}, has a length of zero or
                     *             can not be parsed as a short value.</member>
        <member name="M:biz.ritter.javapi.lang.Short.parseShort(System.String,System.Int32)">
                     * Parses the specified string as a signed short value using the specified
                     * radix. The ASCII character \u002d ('-') is recognized as the minus sign.
                     *
                     * @param string
                     *            the string representation of a short value.
                     * @param radix
                     *            the radix to use when parsing.
                     * @return the primitive short value represented by {@code string} using
                     *         {@code radix}.
                     * @throws NumberFormatException
                     *             if {@code string} is {@code null} or has a length of zero,
                     *             {@code radix &lt; Character.MIN_RADIX},
                     *             {@code radix &gt; Character.MAX_RADIX}, or if {@code string}
                     *             can not be parsed as a short value.</member>
        <member name="M:biz.ritter.javapi.lang.Short.shortValue">
                     * Gets the primitive value of this short.
                     *
                     * @return this object's primitive value.</member>
        <member name="M:biz.ritter.javapi.lang.Short.toString(System.Int16)">
                     * Returns a string containing a concise, human-readable description of the
                     * specified short value with radix 10.
                     *
                     * @param value
                     *             the short to convert to a string.
                     * @return a printable representation of {@code value}.</member>
        <member name="M:biz.ritter.javapi.lang.Short.valueOf(System.String)">
                     * Parses the specified string as a signed decimal short value.
                     *
                     * @param string
                     *            the string representation of a short value.
                     * @return a {@code Short} instance containing the short value represented
                     *         by {@code string}.
                     * @throws NumberFormatException
                     *             if {@code string} is {@code null}, has a length of zero or
                     *             can not be parsed as a short value.
                     * @see #parseShort(String)</member>
        <member name="M:biz.ritter.javapi.lang.Short.valueOf(System.String,System.Int32)">
                     * Parses the specified string as a signed short value using the specified
                     * radix.
                     *
                     * @param string
                     *            the string representation of a short value.
                     * @param radix
                     *            the radix to use when parsing.
                     * @return a {@code Short} instance containing the short value represented
                     *         by {@code string} using {@code radix}.
                     * @throws NumberFormatException
                     *             if {@code string} is {@code null} or has a length of zero,
                     *             {@code radix &lt; Character.MIN_RADIX},
                     *             {@code radix &gt; Character.MAX_RADIX}, or if {@code string}
                     *             can not be parsed as a short value.
                     * @see #parseShort(String, int)</member>
        <member name="M:biz.ritter.javapi.lang.Short.reverseBytes(System.Int16)">
                     * Reverses the bytes of the specified short.
                     *
                     * @param s
                     *            the short value for which to reverse bytes.
                     * @return the reversed value.
                     * @since 1.5</member>
        <member name="M:biz.ritter.javapi.lang.Short.valueOf(System.Int16)">
                     * Returns a {@code Short} instance for the specified short value.
                     * <p />
                     * If it is not necessary to get a new {@code Short} instance, it is
                     * recommended to use this method instead of the constructor, since it
                     * maintains a cache of instances which may result in better performance.
                     *
                     * @param s
                     *            the short value to store in the instance.
                     * @return a {@code Short} instance containing {@code s}.
                     * @since 1.5</member>
        <member name="M:biz.ritter.javapi.lang.Short.op_Implicit(biz.ritter.javapi.lang.Short)~System.Int16">
            <summary>
            Implicit convert java.lang.Double to .net double type
            </summary>
            <param name="s">
            </param>
            <returns>
            </returns>
        </member>
        <member name="F:biz.ritter.javapi.lang.Short.IAC_SHORT_valueOfCache.CACHE">
                         * A cache of instances used by {@link Short#valueOf(short)} and auto-boxing.</member>
        <member name="T:biz.ritter.javapi.lang.StackTraceElement">
                 * A representation of a single stack frame. Arrays of {@code StackTraceElement}
                 * are stored in {@link Throwable} objects to represent the whole state of the
                 * call stack at the time a {@code Throwable} gets thrown.
                 *
                 * @see Throwable#getStackTrace()
                 * @since 1.4</member>
        <member name="M:biz.ritter.javapi.lang.StackTraceElement.#ctor(System.String,System.String,System.String,System.Int32)">
                     * Constructs a new {@code StackTraceElement} for a specified execution
                     * point.
                     *
                     * @param cls
                     *            the fully qualified name of the class where execution is at.
                     * @param method
                     *            the name of the method where execution is at.
                     * @param file
                     *            The name of the file where execution is at or {@code null}.
                     * @param line
                     *            the line of the file where execution is at, a negative number
                     *            if unknown or {@code -2} if the execution is in a native
                     *            method.
                     * @throws NullPointerException
                     *             if {@code cls} or {@code method} is {@code null}.
                     * @since 1.5</member>
        <member name="M:biz.ritter.javapi.lang.StackTraceElement.#ctor">
                     * <p>
                     * Private, nullary constructor for VM use only.
                     * </p></member>
        <member name="M:biz.ritter.javapi.lang.StackTraceElement.Equals(System.Object)">
                     * Compares this instance with the specified object and indicates if they
                     * are equal. In order to be equal, the following conditions must be
                     * fulfilled:
                     * <ul>
                     * <li>{@code obj} must be a stack trace element,</li>
                     * <li>the method names of this stack trace element and of {@code obj} must
                     * not be {@code null},</li>
                     * <li>the class, method and file names as well as the line number of this
                     * stack trace element and of {@code obj} must be equal.</li>
                     * </ul>
                     *
                     * @param obj
                     *            the object to compare this instance with.
                     * @return {@code true} if the specified object is equal to this
                     *         {@code StackTraceElement}; {@code false} otherwise.
                     * @see #hashCode</member>
        <member name="M:biz.ritter.javapi.lang.StackTraceElement.getClassName">
                     * Returns the fully qualified name of the class belonging to this
                     * {@code StackTraceElement}.
                     *
                     * @return the fully qualified type name of the class</member>
        <member name="M:biz.ritter.javapi.lang.StackTraceElement.getFileName">
                     * Returns the name of the Java source file containing class belonging to
                     * this {@code StackTraceElement}.
                     *
                     * @return the name of the file, or {@code null} if this information is not
                     *         available.</member>
        <member name="M:biz.ritter.javapi.lang.StackTraceElement.getLineNumber">
                     * Returns the line number in the source for the class belonging to this
                     * {@code StackTraceElement}.
                     *
                     * @return the line number, or a negative number if this information is not
                     *         available.</member>
        <member name="M:biz.ritter.javapi.lang.StackTraceElement.getMethodName">
                     * Returns the name of the method belonging to this {@code
                     * StackTraceElement}.
                     *
                     * @return the name of the method, or "&lt;unknown method&gt;" if this information
                     *         is not available.</member>
        <member name="M:biz.ritter.javapi.lang.StackTraceElement.isNativeMethod">
                     * Indicates if the method name returned by {@link #getMethodName()} is
                     * implemented as a native method.
                     *
                     * @return {@code true} if the method in which this stack trace element is
                     *         executing is a native method; {@code false} otherwise.</member>
        <member name="T:biz.ritter.javapi.lang.Void">
                 * Placeholder class for the Java keyword {@code void}.
                 *
                 * @since 1.1</member>
        <member name="F:biz.ritter.javapi.lang.Void.TYPE">
                     * The {@link Class} object that represents the primitive type {@code void}.</member>
        <member name="T:biz.ritter.javapi.security.DigestException">
                 *{@code DigestException} is a general message digest exception.</member>
        <member name="M:biz.ritter.javapi.security.DigestException.#ctor(System.String)">
                     * Constructs a new instance of {@code DigestException} with the
                     * given message.
                     *
                     * @param msg
                     *            the detail message for this exception.</member>
        <member name="M:biz.ritter.javapi.security.DigestException.#ctor">
                     * Constructs a new instance of {@code DigestException}.</member>
        <member name="M:biz.ritter.javapi.security.DigestException.#ctor(System.String,biz.ritter.javapi.lang.Throwable)">
                     * Constructs a new instance of {@code DigestException} with the
                     * given message and the cause.
                     *
                     * @param message
                     *            the detail message for this exception.
                     * @param cause
                     *            the exception which is the cause for this exception.</member>
        <member name="M:biz.ritter.javapi.security.DigestException.#ctor(biz.ritter.javapi.lang.Throwable)">
                     * Constructs a new instance of {@code DigestException} with the
                     * cause.
                     *
                     * @param cause
                     *            the exception which is the cause for this exception.</member>
        <member name="T:biz.ritter.javapi.security.GeneralSecurityException">
                 * {@code GeneralSecurityException} is a general security exception and the
                 * baseclass for all security specific exceptions.</member>
        <member name="M:biz.ritter.javapi.security.GeneralSecurityException.#ctor(System.String)">
                     * Constructs a new instance of {@code GeneralSecurityException} with the
                     * given message.
                     *
                     * @param msg
                     *            the detail message for this exception.</member>
        <member name="M:biz.ritter.javapi.security.GeneralSecurityException.#ctor">
                     * Constructs a new instance of {@code GeneralSecurityException}.</member>
        <member name="M:biz.ritter.javapi.security.GeneralSecurityException.#ctor(System.String,biz.ritter.javapi.lang.Throwable)">
                     * Constructs a new instance of {@code GeneralSecurityException} with the
                     * given message and the cause.
                     *
                     * @param message
                     *            the detail message for this exception.
                     * @param cause
                     *            the exception which is the cause for this exception.</member>
        <member name="M:biz.ritter.javapi.security.GeneralSecurityException.#ctor(biz.ritter.javapi.lang.Throwable)">
                     * Constructs a new instance of {@code GeneralSecurityException} with the
                     * cause.
                     *
                     * @param cause
                     *            the exception which is the cause for this exception.</member>
        <member name="T:biz.ritter.javapi.security.Guard">
                 * {@code Guard} implementors protect access to other objects.</member>
        <member name="M:biz.ritter.javapi.security.Guard.checkGuard(System.Object)">
                     * Checks whether access to the specified {@code Object} should be granted.
                     * This method returns silently if access is granted, otherwise a {@code
                     * SecurityException} is thrown.
                     *
                     * @param object
                     *            the object to be protected by this {@code Guard}.
                     * @throws SecurityException
                     *             if access is not granted.</member>
        <member name="T:biz.ritter.javapi.security.InvalidParameterException">
                 * {@code InvalidParameterException} indicates exceptional conditions, caused by
                 * invalid parameters.</member>
        <member name="M:biz.ritter.javapi.security.InvalidParameterException.#ctor(System.String)">
                     * Constructs a new instance of {@code InvalidParameterException} with the
                     * given message.
                     *
                     * @param msg
                     *            the detail message for this exception.</member>
        <member name="M:biz.ritter.javapi.security.InvalidParameterException.#ctor">
                     * Constructs a new instance of {@code InvalidParameterException}.</member>
        <member name="T:biz.ritter.javapi.security.MessageDigest">
                 * {@code MessageDigest} is an engine class which is capable of generating one
                 * way hash values for arbitrary input, utilizing the algorithm it was
                 * initialized with.
                 *
                 * @see MessageDigestSpi</member>
        <member name="M:biz.ritter.javapi.security.MessageDigest.#ctor(System.String)">
                     * Constructs a new instance of {@code MessageDigest} with the name of
                     * the algorithm to use.
                     *
                     * @param algorithm
                     *            the name of algorithm to use</member>
        <member name="M:biz.ritter.javapi.security.MessageDigest.getInstance(System.String)">
                     * Returns a new instance of {@code MessageDigest} that utilizes the
                     * specified algorithm.
                     *
                     * @param algorithm
                     *            the name of the algorithm to use
                     * @return a new instance of {@code MessageDigest} that utilizes the
                     *         specified algorithm
                     * @throws NoSuchAlgorithmException
                     *             if the specified algorithm is not available
                     * @throws NullPointerException
                     *             if {@code algorithm} is {@code null}</member>
        <member name="M:biz.ritter.javapi.security.MessageDigest.getInstance(System.String,System.String)">
                     * Returns a new instance of {@code MessageDigest} that utilizes the
                     * specified algorithm from the specified provider.
                     *
                     * @param algorithm
                     *            the name of the algorithm to use
                     * @param provider
                     *            the name of the provider
                     * @return a new instance of {@code MessageDigest} that utilizes the
                     *         specified algorithm from the specified provider
                     * @throws NoSuchAlgorithmException
                     *             if the specified algorithm is not available
                     * @throws NoSuchProviderException
                     *             if the specified provider is not available
                     * @throws NullPointerException
                     *             if {@code algorithm} is {@code null}</member>
        <member name="M:biz.ritter.javapi.security.MessageDigest.getInstance(System.String,biz.ritter.javapi.security.Provider)">
                     * Returns a new instance of {@code MessageDigest} that utilizes the
                     * specified algorithm from the specified provider.
                     *
                     * @param algorithm
                     *            the name of the algorithm to use
                     * @param provider
                     *            the provider
                     * @return a new instance of {@code MessageDigest} that utilizes the
                     *         specified algorithm from the specified provider
                     * @throws NoSuchAlgorithmException
                     *             if the specified algorithm is not available
                     * @throws NullPointerException
                     *             if {@code algorithm} is {@code null}</member>
        <member name="M:biz.ritter.javapi.security.MessageDigest.reset">
                     * Puts this {@code MessageDigest} back in an initial state, such that it is
                     * ready to compute a one way hash value.</member>
        <member name="M:biz.ritter.javapi.security.MessageDigest.update(System.Byte)">
                     * Updates this {@code MessageDigest} using the given {@code byte}.
                     *
                     * @param arg0
                     *            the {@code byte} to update this {@code MessageDigest} with
                     * @see #reset()</member>
        <member name="M:biz.ritter.javapi.security.MessageDigest.update(System.Byte[],System.Int32,System.Int32)">
                     * Updates this {@code MessageDigest} using the given {@code byte[]}.
                     *
                     * @param input
                     *            the {@code byte} array
                     * @param offset
                     *            the index of the first byte in {@code input} to update from
                     * @param len
                     *            the number of bytes in {@code input} to update from
                     * @throws IllegalArgumentException
                     *             if {@code offset} or {@code len} are not valid in respect to
                     *             {@code input}</member>
        <member name="M:biz.ritter.javapi.security.MessageDigest.update(System.Byte[])">
                     * Updates this {@code MessageDigest} using the given {@code byte[]}.
                     *
                     * @param input
                     *            the {@code byte} array
                     * @throws NullPointerException
                     *             if {@code input} is {@code null}</member>
        <member name="M:biz.ritter.javapi.security.MessageDigest.digest">
                     * Computes and returns the final hash value for this {@link MessageDigest}.
                     * After the digest is computed the receiver is reset.
                     *
                     * @return the computed one way hash value
                     * @see #reset</member>
        <member name="M:biz.ritter.javapi.security.MessageDigest.digest(System.Byte[],System.Int32,System.Int32)">
                     * Computes and stores the final hash value for this {@link MessageDigest}.
                     * After the digest is computed the receiver is reset.
                     *
                     * @param buf
                     *            the buffer to store the result
                     * @param offset
                     *            the index of the first byte in {@code buf} to store
                     * @param len
                     *            the number of bytes allocated for the digest
                     * @return the number of bytes written to {@code buf}
                     * @throws DigestException
                     *             if an error occures
                     * @throws IllegalArgumentException
                     *             if {@code offset} or {@code len} are not valid in respect to
                     *             {@code buf}
                     * @see #reset()</member>
        <member name="M:biz.ritter.javapi.security.MessageDigest.digest(System.Byte[])">
                     * Performs the final update and then computes and returns the final hash
                     * value for this {@link MessageDigest}. After the digest is computed the
                     * receiver is reset.
                     *
                     * @param input
                     *            the {@code byte} array
                     * @return the computed one way hash value
                     * @see #reset()</member>
        <member name="M:biz.ritter.javapi.security.MessageDigest.ToString">
                     * Returns a string containing a concise, human-readable description of this
                     * {@code MessageDigest} including the name of its algorithm.
                     *
                     * @return a printable representation for this {@code MessageDigest}</member>
        <member name="M:biz.ritter.javapi.security.MessageDigest.isEqual(System.Byte[],System.Byte[])">
                     * Indicates whether to digest are equal by performing a simply
                     * byte-per-byte compare of the two digests.
                     *
                     * @param digesta
                     *            the first digest to be compared
                     * @param digestb
                     *            the second digest to be compared
                     * @return {@code true} if the two hashes are equal, {@code false} otherwise</member>
        <member name="M:biz.ritter.javapi.security.MessageDigest.getAlgorithm">
                     * Returns the name of the algorithm of this {@code MessageDigest}.
                     *
                     * @return the name of the algorithm of this {@code MessageDigest}</member>
        <member name="M:biz.ritter.javapi.security.MessageDigest.getProvider">
                     * Returns the provider associated with this {@code MessageDigest}.
                     *
                     * @return the provider associated with this {@code MessageDigest}</member>
        <member name="M:biz.ritter.javapi.security.MessageDigest.getDigestLength">
                     * Returns the engine digest length in bytes. If the implementation does not
                     * implement this function or is not an instance of {@code Cloneable},
                     * {@code 0} is returned.
                     *
                     * @return the digest length in bytes, or {@code 0}</member>
        <member name="M:biz.ritter.javapi.security.MessageDigest.update(biz.ritter.javapi.nio.ByteBuffer)">
                     * Updates this {@code MessageDigest} using the given {@code input}.
                     *
                     * @param input
                     *            the {@code ByteBuffer}</member>
        <member name="T:biz.ritter.javapi.security.MessageDigest.MessageDigestImpl">
                     *
                     * The internal MessageDigest implementation
                     *</member>
        <member name="T:biz.ritter.javapi.security.MessageDigestSpi">
                 * {@code MessageDigestSpi} is the Service Provider Interface (SPI) definition
                 * for {@link MessageDigest}. Examples of digest algorithms are MD5 and SHA. A
                 * digest is a secure one way hash function for a stream of bytes. It acts like
                 * a fingerprint for a stream of bytes.
                 *
                 * @see MessageDigest</member>
        <member name="M:biz.ritter.javapi.security.MessageDigestSpi.engineGetDigestLength">
                     * Returns the engine digest length in bytes. If the implementation does not
                     * implement this function {@code 0} is returned.
                     *
                     * @return the digest length in bytes, or {@code 0}.</member>
        <member name="M:biz.ritter.javapi.security.MessageDigestSpi.engineUpdate(System.Byte)">
                     * Updates this {@code MessageDigestSpi} using the given {@code byte}.
                     *
                     * @param input
                     *            the {@code byte} to update this {@code MessageDigestSpi} with.
                     * @see #engineReset()</member>
        <member name="M:biz.ritter.javapi.security.MessageDigestSpi.engineUpdate(System.Byte[],System.Int32,System.Int32)">
                     * Updates this {@code MessageDigestSpi} using the given {@code byte[]}.
                     *
                     * @param input
                     *            the {@code byte} array.
                     * @param offset
                     *            the index of the first byte in {@code input} to update from.
                     * @param len
                     *            the number of bytes in {@code input} to update from.
                     * @throws IllegalArgumentException
                     *             if {@code offset} or {@code len} are not valid in respect to
                     *             {@code input}.</member>
        <member name="M:biz.ritter.javapi.security.MessageDigestSpi.engineUpdate(biz.ritter.javapi.nio.ByteBuffer)">
                     * Updates this {@code MessageDigestSpi} using the given {@code input}.
                     *
                     * @param input
                     *            the {@code ByteBuffer}.</member>
        <member name="M:biz.ritter.javapi.security.MessageDigestSpi.engineDigest">
                     * Computes and returns the final hash value for this
                     * {@link MessageDigestSpi}. After the digest is computed the receiver is
                     * reset.
                     *
                     * @return the computed one way hash value.
                     * @see #engineReset()</member>
        <member name="M:biz.ritter.javapi.security.MessageDigestSpi.engineDigest(System.Byte[],System.Int32,System.Int32)">
                     * Computes and stores the final hash value for this
                     * {@link MessageDigestSpi}. After the digest is computed the receiver is
                     * reset.
                     *
                     * @param buf
                     *            the buffer to store the result in.
                     * @param offset
                     *            the index of the first byte in {@code buf} to store in.
                     * @param len
                     *            the number of bytes allocated for the digest.
                     * @return the number of bytes written to {@code buf}.
                     * @throws DigestException
                     *             if an error occures.
                     * @throws IllegalArgumentException
                     *             if {@code offset} or {@code len} are not valid in respect to
                     *             {@code buf}.
                     * @see #engineReset()</member>
        <member name="M:biz.ritter.javapi.security.MessageDigestSpi.engineReset">
                     * Puts this {@code MessageDigestSpi} back in an initial state, such that it
                     * is ready to compute a one way hash value.</member>
        <member name="T:biz.ritter.javapi.security.NoSuchAlgorithmException">
                 * {@code NoSuchAlgorithmException} indicates that a requested algorithm could
                 * not be found.</member>
        <member name="M:biz.ritter.javapi.security.NoSuchAlgorithmException.#ctor(System.String)">
                     * Constructs a new instance of {@code NoSuchAlgorithmException} with the
                     * given message.
                     *
                     * @param msg
                     *            the detail message for this exception.</member>
        <member name="M:biz.ritter.javapi.security.NoSuchAlgorithmException.#ctor">
                     * Constructs a new instance of {@code NoSuchAlgorithmException}.</member>
        <member name="M:biz.ritter.javapi.security.NoSuchAlgorithmException.#ctor(System.String,biz.ritter.javapi.lang.Throwable)">
                     * Constructs a new instance of {@code NoSuchAlgorithmException} with the
                     * given message and the cause.
                     *
                     * @param message
                     *            the detail message for this exception.
                     * @param cause
                     *            the exception which is the cause for this exception.</member>
        <member name="M:biz.ritter.javapi.security.NoSuchAlgorithmException.#ctor(biz.ritter.javapi.lang.Throwable)">
                     * Constructs a new instance of {@code NoSuchAlgorithmException} with the
                     * cause.
                     *
                     * @param cause
                     *            the exception which is the cause for this exception.</member>
        <member name="T:biz.ritter.javapi.security.NoSuchProviderException">
                 * {@code NoSuchProviderException} indicates that a requested security provider
                 * could not be found.</member>
        <member name="M:biz.ritter.javapi.security.NoSuchProviderException.#ctor(System.String)">
                     * Constructs a new instance of {@code NoSuchProviderException} with the
                     * given message.
                     *
                     * @param msg
                     *            the detail message for this exception.</member>
        <member name="M:biz.ritter.javapi.security.NoSuchProviderException.#ctor">
                     * Constructs a new instance of {@code NoSuchProviderException}.</member>
        <member name="T:biz.ritter.javapi.security.Permission">
                 * {@code Permission} is the common base class of all permissions that
                 * participate in the access control security framework around
                 * {@link AccessController} and {@link AccessControlContext}. A permission
                 * constitutes of a name and associated actions.</member>
        <member name="M:biz.ritter.javapi.security.Permission.getActions">
                     * Returns a comma separated string identifying the actions associated with
                     * this permission. The returned actions are in canonical form. For example:
                     *
                     * <pre>
                     * sp0 = new SocketPermission("www.example.com", "connect,resolve")
                     * sp1 = new SocketPermission("www.example.com", "resolve,connect")
                     * sp0.getActions().equals(sp1.getActions()) //yields true
                     * </pre>
                     *
                     * Both permissions return "connect,resolve" (in that order) if {@code
                     * #getActions()} is invoked. Returns an empty String, if no actions are
                     * associated with this permission.
                     *
                     * @return the actions associated with this permission or an empty string if
                     *         no actions are associated with this permission.</member>
        <member name="M:biz.ritter.javapi.security.Permission.implies(biz.ritter.javapi.security.Permission)">
                     * Indicates whether the specified permission is implied by this permission.
                     * The {@link AccessController} uses this method to check whether permission
                     * protected access is allowed with the present policy.
                     *
                     * @param permission
                     *            the permission to check against this permission.
                     * @return {@code true} if the specified permission is implied by this
                     *         permission, {@code false} otherwise.</member>
        <member name="M:biz.ritter.javapi.security.Permission.#ctor(System.String)">
                     * Constructs a new instance of {@code Permission} with its name.
                     *
                     * @param name
                     *            the name of the permission.</member>
        <member name="M:biz.ritter.javapi.security.Permission.getName">
                     * Returns the name of this permission.
                     *
                     * @return the name of this permission.</member>
        <member name="M:biz.ritter.javapi.security.Permission.checkGuard(System.Object)">
                     * Invokes {@link SecurityManager#checkPermission(Permission)} with this
                     * permission as its argument. This method implements the {@link Guard}
                     * interface.
                     *
                     * @param obj
                     *            as specified in {@link Guard#checkGuard(Object)} but ignored
                     *            in this implementation.
                     * @throws SecurityException
                     *             if this permission is not granted.
                     * @see Guard
                     * @see SecurityManager#checkPermission(Permission)</member>
        <member name="M:biz.ritter.javapi.security.Permission.newPermissionCollection">
                     * Returns a specific {@link PermissionCollection} container for permissions
                     * of this type. Returns {@code null} if any permission collection can be
                     * used.
                     * <p />
                     * Subclasses may override this method to return an appropriate collection
                     * for the specific permissions they implement.
                     *
                     * @return an empty {@link PermissionCollection} or {@code null} if any
                     *         permission collection can be used.</member>
        <member name="M:biz.ritter.javapi.security.Permission.ToString">
                     * Returns a string containing a concise, human-readable description of the
                     * this {@code Permission} including its name and its actions.
                     *
                     * @return a printable representation for this {@code Permission}.</member>
        <member name="T:biz.ritter.javapi.security.PermissionCollection">
                 * {@code PermissionCollection} is the common base class for all collections
                 * that provide a convenient method for determining whether or not a given
                 * permission is implied by any of the permissions present in this collection.
                 * <p />
                 * A {@code PermissionCollection} is typically created by using the
                 * {@link Permission#newPermissionCollection()} factory method. If the mentioned
                 * method returns {@code null}, then a {@code PermissionCollection} of any type
                 * can be used. If a collection is returned, it must be used for holding several
                 * permissions of the particular type.
                 * <p />
                 * Subclasses must be implemented thread save.</member>
        <member name="M:biz.ritter.javapi.security.PermissionCollection.add(biz.ritter.javapi.security.Permission)">
                     * Adds the specified {@code Permission} to this collection.
                     *
                     * @param permission
                     *            the {@code Permission} to add.
                     * @throws IllegalStateException
                     *             if the collection is read only.</member>
        <member name="M:biz.ritter.javapi.security.PermissionCollection.elements">
                     * Returns an enumeration over all {@link Permission}s encapsulated by this
                     * {@code PermissionCollection}.
                     *
                     * @return an enumeration over all {@link Permission}s.</member>
        <member name="M:biz.ritter.javapi.security.PermissionCollection.implies(biz.ritter.javapi.security.Permission)">
                     * Indicates whether the specified permission is implied by this {@code
                     * PermissionCollection}.
                     *
                     * @param permission
                     *            the permission to check.
                     * @return {@code true} if the given permission is implied by the
                     *         permissions in this collection, {@code false} otherwise.</member>
        <member name="M:biz.ritter.javapi.security.PermissionCollection.isReadOnly">
                     * Indicates whether new permissions can be added to this {@code
                     * PermissionCollection}.
                     *
                     * @return {@code true} if the receiver is read only, {@code false} if new
                     *         elements can still be added to this {@code PermissionCollection}.</member>
        <member name="M:biz.ritter.javapi.security.PermissionCollection.setReadOnly">
                     * Marks this {@code PermissionCollection} as read only, so that no new
                     * permissions can be added to it.</member>
        <member name="M:biz.ritter.javapi.security.PermissionCollection.ToString">
                     * Returns a string containing a concise, human-readable description of this
                     * {@code PermissionCollection}.
                     *
                     * @return a printable representation for this {@code PermissionCollection}.</member>
        <member name="T:biz.ritter.javapi.security.PermissionsHash">
                 * A default {@code PermissionCollection} implementation that uses a hashtable.
                 * Each hashtable entry stores a Permission object as both the key and the
                 * value.
                 * <p />
                 * This {@code PermissionCollection} is intended for storing "neutral"
                 * permissions which do not require special collection.</member>
        <member name="M:biz.ritter.javapi.security.PermissionsHash.add(biz.ritter.javapi.security.Permission)">
                     * Adds the argument to the collection.
                     *
                     * @param permission
                     *            the permission to add to the collection.</member>
        <member name="M:biz.ritter.javapi.security.PermissionsHash.elements">
                     * Returns an enumeration of the permissions in the receiver.
                     *
                     * @return Enumeration the permissions in the receiver.</member>
        <member name="M:biz.ritter.javapi.security.PermissionsHash.implies(biz.ritter.javapi.security.Permission)">
                     * Indicates whether the argument permission is implied by the permissions
                     * contained in the receiver.
                     *
                     * @return boolean <code>true</code> if the argument permission is implied
                     *         by the permissions in the receiver, and <code>false</code> if
                     *         it is not.
                     * @param permission
                     *            java.security.Permission the permission to check</member>
        <member name="T:biz.ritter.javapi.security.Permissions">
             * {@code Permissions} represents a {@code PermissionCollection} where the
             * contained permissions can be of different types. The permissions are
             * organized in their appropriate {@code PermissionCollection} obtained by
             * {@link Permission#newPermissionCollection()}. For permissions which do not
             * provide a dedicated {@code PermissionCollection}, a default permission
             * collection, based on a hash table, will be used.</member>
        <member name="M:biz.ritter.javapi.security.Permissions.add(biz.ritter.javapi.security.Permission)">
                 * Adds the given {@code Permission} to this heterogeneous {@code
                 * PermissionCollection}. The {@code permission} is stored in its
                 * appropriate {@code PermissionCollection}.
                 *
                 * @param permission
                 *            the {@code Permission} to be added.
                 * @throws SecurityException
                 *             if this collection's {@link #isReadOnly()} method returns
                 *             {@code true}.
                 * @throws NullPointerException
                 *             if {@code permission} is {@code null}.</member>
        <member name="T:biz.ritter.javapi.security.Permissions.MetaEnumeration">
                 * An auxiliary implementation for enumerating individual permissions from a
                 * collection of PermissionCollections.
                 *</member>
        <member name="M:biz.ritter.javapi.security.Permissions.MetaEnumeration.#ctor(biz.ritter.javapi.util.Iterator{biz.ritter.javapi.security.PermissionCollection})">
                     * Initiates this enumeration.
                     *
                     * @param outer an iterator over external collection of
                     *        PermissionCollections</member>
        <member name="M:biz.ritter.javapi.security.Permissions.MetaEnumeration.hasMoreElements">
                     * Indicates if there are more elements to enumerate.</member>
        <member name="M:biz.ritter.javapi.security.Permissions.MetaEnumeration.nextElement">
                     * Returns next element.</member>
        <member name="T:biz.ritter.javapi.security.Policy">
             * {@code Policy} is the common super type of classes which represent a system
             * security policy. The {@code Policy} specifies which permissions apply to
             * which code sources.
             * <p />
             * The system policy can be changed by setting the {@code 'policy.provider'}
             * property in the file named {@code JAVA_HOME/lib/security/java.security} to
             * the fully qualified class name of the desired {@code Policy}.
             * <p />
             * Only one instance of a {@code Policy} is active at any time.</member>
        <member name="M:biz.ritter.javapi.security.Policy.getInstance(System.String,biz.ritter.javapi.security.Policy.Parameters)">
                 * Answers a Policy object with the specified type and the specified
                 * parameter.
                 *
                 * Traverses the list of registered security providers, beginning with the
                 * most preferred Provider. A new Policy object encapsulating the PolicySpi
                 * implementation from the first Provider that supports the specified type
                 * is returned.
                 *
                 * Note that the list of registered providers may be retrieved via the
                 * Security.getProviders() method.
                 *
                 * @param type -
                 *            the specified Policy type. See Appendix A in the Java
                 *            Cryptography Architecture API Specification &amp; Reference for a
                 *            list of standard Policy types.
                 * @param paramsJ -
                 *            parameters for the Policy, which may be null.
                 * @return the new Policy object.
                 * @throws NoSuchAlgorithmException -
                 *             if no Provider supports a PolicySpi implementation for the
                 *             specified type.
                 * @throws SecurityException -
                 *             if the caller does not have permission to get a Policy
                 *             instance for the specified type.
                 * @throws NullPointerException -
                 *             if the specified type is null.
                 * @throws IllegalArgumentException -
                 *             if the specified parameters' type are not allowed by the
                 *             PolicySpi implementation from the selected Provider.
                 *
                 * @since 1.6</member>
        <member name="M:biz.ritter.javapi.security.Policy.getInstance(System.String,biz.ritter.javapi.security.Policy.Parameters,System.String)">
                 * Answers a Policy object of the specified type.
                 *
                 * A new Policy object encapsulating the PolicySpi implementation from the
                 * specified provider is returned. The specified provider must be registered
                 * in the provider list via the Security.getProviders() method, otherwise
                 * NoSuchProviderException will be thrown.
                 *
                 * @param type -
                 *            the specified Policy type. So far in Java 6, only 'JavaPolicy'
                 *            supported.
                 * @param paramsJ -
                 *            the Policy.Parameter object, which may be null.
                 * @param provider -
                 *            the provider.
                 * @return the new Policy object.
                 *
                 * @throws NoSuchProviderException -
                 *             if the specified provider is not registered in the security
                 *             provider list.
                 * @throws NoSuchAlgorithmException -
                 *             if the specified provider does not support a PolicySpi
                 *             implementation for the specified type.
                 * @throws SecurityException -
                 *             if the caller does not have permission to get a Policy
                 *             instance for the specified type.
                 * @throws NullPointerException -
                 *             if the specified type is null.
                 * @throws IllegalArgumentException -
                 *             if the specified Provider is null, or if the specified
                 *             parameters' type are not allowed by the PolicySpi
                 *             implementation from the specified Provider.
                 *
                 * @since 1.6</member>
        <member name="M:biz.ritter.javapi.security.Policy.getInstance(System.String,biz.ritter.javapi.security.Policy.Parameters,biz.ritter.javapi.security.Provider)">
                 * Answers a Policy object of the specified type.
                 *
                 * A new Policy object encapsulating the PolicySpi implementation from the
                 * specified Provider object is returned. Note that the specified Provider
                 * object does not have to be registered in the provider list.
                 *
                 * @param type -
                 *            the specified Policy type. So far in Java 6, only 'JavaPolicy'
                 *            supported.
                 * @param paramsJ -
                 *            the Policy.Parameter object, which may be null.
                 * @param provider -
                 *            the Policy service Provider.
                 * @return the new Policy object.
                 *
                 * @throws NoSuchAlgorithmException -
                 *             if the specified Provider does not support a PolicySpi
                 *             implementation for the specified type.
                 * @throws IllegalArgumentException -
                 *             if the specified Provider is null, or if the specified
                 *             parameters' type are not allowed by the PolicySpi
                 *             implementation from the specified Provider.
                 * @throws NullPointerException -
                 *             if the specified type is null.
                 * @throws SecurityException -
                 *             if the caller does not have permission to get a Policy
                 *             instance for the specified type.
                 * @since 1.6</member>
        <member name="M:biz.ritter.javapi.security.Policy.getParameters">
                 * Answers Policy parameters.
                 *
                 * This method will only answer non-null parameters if it was obtained via a
                 * call to Policy.getInstance. Otherwise this method returns null.
                 *
                 * @return Policy parameters, or null.
                 *
                 * @since 1.6</member>
        <member name="M:biz.ritter.javapi.security.Policy.getProvider">
                 * Answers the Provider of this Policy.
                 *
                 * This method will only answer non-null Provider if it was obtained via a
                 * call to Policy.getInstance. Otherwise this method returns null.
                 *
                 * @return the Provider of this Policy, or null.
                 *
                 * @since 1.6</member>
        <member name="M:biz.ritter.javapi.security.Policy.getType">
                 * Answers the type of this Policy.
                 *
                 * This method will only answer non-null type if it was obtained via a call
                 * to Policy.getInstance. Otherwise this method returns null.
                 *
                 * @return the type of this Policy, or null.
                 *
                 * @since 1.6</member>
        <member name="T:biz.ritter.javapi.security.Policy.UNSUPPORTED_EMPTY_COLLECTION_IMPL">
                 * A read-only empty PermissionCollection instance.
                 *
                 * @since 1.6</member>
        <member name="T:biz.ritter.javapi.security.Policy.Parameters">
                 * A marker interface for Policy parameters.
                 *
                 * @since 1.6</member>
        <member name="M:biz.ritter.javapi.security.Policy.getPermissions(biz.ritter.javapi.security.CodeSource)">
                 * Returns a {@code PermissionCollection} describing what permissions are
                 * allowed for the specified {@code CodeSource} based on the current
                 * security policy.
                 * <p />
                 * Note that this method is not called for classes which are in the system
                 * domain (i.e. system classes). System classes are always given
                 * full permissions (i.e. AllPermission). This can not be changed by
                 * installing a new policy.
                 *
                 * @param cs
                 *            the {@code CodeSource} to compute the permissions for.
                 * @return the permissions that are granted to the specified {@code
                 *         CodeSource}.</member>
        <member name="M:biz.ritter.javapi.security.Policy.refresh">
                 * Reloads the policy configuration for this {@code Policy} instance.</member>
        <member name="M:biz.ritter.javapi.security.Policy.getPermissions(biz.ritter.javapi.security.ProtectionDomain)">
                 * Returns a {@code PermissionCollection} describing what permissions are
                 * allowed for the specified {@code ProtectionDomain} (more specifically,
                 * its {@code CodeSource}) based on the current security policy.
                 * <p />
                 * Note that this method is not called for classes which are in the
                 * system domain (i.e. system classes). System classes are always
                 * given full permissions (i.e. AllPermission). This can not be changed by
                 * installing a new policy.
                 *
                 * @param domain
                 *            the {@code ProtectionDomain} to compute the permissions for.
                 * @return the permissions that are granted to the specified {@code
                 *         CodeSource}.</member>
        <member name="M:biz.ritter.javapi.security.Policy.implies(biz.ritter.javapi.security.ProtectionDomain,biz.ritter.javapi.security.Permission)">
                 * Indicates whether the specified {@code Permission} is implied by the
                 * {@code PermissionCollection} of the specified {@code ProtectionDomain}.
                 *
                 * @param domain
                 *            the {@code ProtectionDomain} for which the permission should
                 *            be granted.
                 * @param permission
                 *            the {@code Permission} for which authorization is to be
                 *            verified.
                 * @return {@code true} if the {@code Permission} is implied by the {@code
                 *         ProtectionDomain}, {@code false} otherwise.</member>
        <member name="M:biz.ritter.javapi.security.Policy.getPolicy">
                 * Returns the current system security policy. If no policy has been
                 * instantiated then this is done using the security property {@code
                 * "policy.provider"}.
                 * <p />
                 * If a {@code SecurityManager} is installed, code calling this method needs
                 * the {@code SecurityPermission} {@code getPolicy} to be granted, otherwise
                 * a {@code SecurityException} will be thrown.
                 *
                 * @return the current system security policy.
                 * @throws SecurityException
                 *             if a {@code SecurityManager} is installed and the caller does
                 *             not have permission to invoke this method.</member>
        <member name="M:biz.ritter.javapi.security.Policy.isSet">
                 * Returns {@code true} if system policy provider is instantiated.</member>
        <member name="M:biz.ritter.javapi.security.Policy.getAccessiblePolicy">
                 * Shortcut accessor for friendly classes, to skip security checks.
                 * If active policy was set to <code>null</code>, loads default provider,
                 * so this method never returns <code>null</code>. <br />
                 * This method is lock with setPolicy()</member>
        <member name="M:biz.ritter.javapi.security.Policy.setPolicy(biz.ritter.javapi.security.Policy)">
                 * Sets the system wide policy.
                 * <p />
                 * If a {@code SecurityManager} is installed, code calling this method needs
                 * the {@code SecurityPermission} {@code setPolicy} to be granted, otherwise
                 * a {@code SecurityException} will be thrown.
                 *
                 * @param policy
                 *            the {@code Policy} to set.
                 * @throws SecurityException
                 *             if a {@code SecurityManager} is installed and the caller does
                 *             not have permission to invoke this method.</member>
        <member name="T:biz.ritter.javapi.security.PolicySpi">
                 * Represents the Service Provider Interface (SPI) for java.security.Policy
                 * class.
                 *
                 * If there is any class that wants to provide a Policy implementation, all
                 * abstract methods in this SPI should be implemented.
                 *
                 * The detailed implementations should offer a public constructor, in which a
                 * Policy.Paramters implementation acts as an input parameter.If the
                 * Policy.Paramters input cannot by understood by the constructor, an
                 * IllegalArgumentException will be thrown.
                 *
                 * @since 1.6</member>
        <member name="M:biz.ritter.javapi.security.PolicySpi.engineImplies(biz.ritter.javapi.security.ProtectionDomain,biz.ritter.javapi.security.Permission)">
                     * Answers if the policy has granted a Permission to a
                     * ProtectionDomain.
                     *
                     * @param domain -
                     *            the domain to check.
                     * @param permission -
                     *            check whether this permission is granted to the specified
                     *            domain.
                     * @return - true if the permission is granted to the domain.
                     *</member>
        <member name="M:biz.ritter.javapi.security.PolicySpi.engineRefresh">
                     * Refreshes/reloads the policy configuration. The behavior of this method
                     * depends on the implementation. For example, calling refresh on a
                     * file-based policy will cause the file to be re-read.
                     *
                     * The default implementation of this method does nothing. This method
                     * should be overridden if a refresh operation is supported by the policy
                     * implementation.
                     *</member>
        <member name="M:biz.ritter.javapi.security.PolicySpi.engineGetPermissions(biz.ritter.javapi.security.CodeSource)">
                     * Answers a PermissionCollection object containing the set of permissions
                     * granted to the specified CodeSource.
                     *
                     * The default implementation of this method returns
                     * Policy.UNSUPPORTED_EMPTY_COLLECTION object. This method can be overridden
                     * if the policy implementation can return a set of permissions granted to a
                     * CodeSource.
                     *
                     * @param codesource -
                     *            the CodeSource to which the returned PermissionCollection has
                     *            been granted.
                     * @return a set of permissions granted to the specified CodeSource. If this
                     *         operation is supported, the returned set of permissions must be a
                     *         new mutable instance and it must support heterogeneous Permission
                     *         types. If this operation is not supported,
                     *         Policy.UNSUPPORTED_EMPTY_COLLECTION is returned.</member>
        <member name="M:biz.ritter.javapi.security.PolicySpi.engineGetPermissions(biz.ritter.javapi.security.ProtectionDomain)">
                     * Answers a PermissionCollection object containing the set of permissions
                     * granted to the specified ProtectionDomain.
                     *
                     * The default implementation of this method returns
                     * Policy.UNSUPPORTED_EMPTY_COLLECTION object. This method can be overridden
                     * if the policy implementation can return a set of permissions granted to a
                     * ProtectionDomain.
                     *
                     * @param domain -
                     *            the ProtectionDomain to which the returned
                     *            PermissionCollection has been granted.
                     * @return a set of permissions granted to the specified ProtectionDomain.
                     *         If this operation is supported, the returned set of permissions
                     *         must be a new mutable instance and it must support heterogeneous
                     *         Permission types. If this operation is not supported,
                     *         Policy.UNSUPPORTED_EMPTY_COLLECTION is returned.</member>
        <member name="T:biz.ritter.javapi.security.PrivilegedAction`1">
                 * {@code PrivilegedAction} represents an action that can be executed privileged
                 * regarding access control. Instances of {@code PrivilegedAction} can be
                 * executed on {@code AccessController.doPrivileged()}.
                 *
                 * @see AccessController
                 * @see AccessController#doPrivileged(PrivilegedAction)
                 * @see AccessController#doPrivileged(PrivilegedAction, AccessControlContext)
                 * @see PrivilegedExceptionAction</member>
        <member name="M:biz.ritter.javapi.security.PrivilegedAction`1.run">
                     * Returns the result of running the action.
                     *
                     * @return the result of running the action.</member>
        <member name="M:biz.ritter.javapi.security.Provider.getService(System.String,System.String)">
                     * Returns the service with the specified {@code type} implementing the
                     * specified {@code algorithm}, or {@code null} if no such implementation
                     * exists.
                     * <p />
                     * If two services match the requested type and algorithm, the one added
                     * with the {@link #putService(Service)} is returned (as opposed to the one
                     * added via {@link #put(Object, Object)}.
                     *
                     * @param type
                     *            the type of the service (for example {@code KeyPairGenerator})
                     * @param algorithm
                     *            the algorithm name (case insensitive)
                     * @return the requested service, or {@code null} if no such implementation
                     *         exists</member>
        <member name="M:biz.ritter.javapi.security.Provider.implementsAlg(System.String,System.String,System.String,System.String)">
                     * Returns true if this provider implements the given algorithm. Caller
                     * must specify the cryptographic service and specify constraints via the
                     * attribute name and value.
                     *
                     * @param serv
                     *            Crypto service.
                     * @param alg
                     *            Algorithm or type.
                     * @param attribute
                     *            The attribute name or {@code null}.
                     * @param val
                     *            The attribute value.
                     * @return</member>
        <member name="M:biz.ritter.javapi.security.Provider.getService(System.String)">
                     * Get the service of the specified type
                     *</member>
        <member name="M:biz.ritter.javapi.security.Provider.getServices">
                     * Returns an unmodifiable {@code Set} of all services registered by this
                     * provider.
                     *
                     * @return an unmodifiable {@code Set} of all services registered by this
                     *         provider</member>
        <member name="M:biz.ritter.javapi.security.Provider.setProviderNumber(System.Int32)">
                     *
                     * Set the provider preference order number.
                     *
                     * @param n</member>
        <member name="M:biz.ritter.javapi.security.Provider.getProviderNumber">
                     *
                     * Get the provider preference order number.
                     *
                     * @return</member>
        <member name="M:biz.ritter.javapi.security.Provider.getName">
                     * Returns the name of this provider.
                     *
                     * @return the name of this provider.</member>
        <member name="T:biz.ritter.javapi.security.Provider.Service">
                     * {@code Service} represents a service in the Java Security infrastructure.
                     * Each service describes its type, the algorithm it implements, to which
                     * provider it belongs and other properties.</member>
        <member name="M:biz.ritter.javapi.security.Provider.Service.#ctor(biz.ritter.javapi.security.Provider,System.String,System.String,System.String,biz.ritter.javapi.util.List{System.String},biz.ritter.javapi.util.Map{System.String,System.String})">
                         * Constructs a new instance of {@code Service} with the given
                         * attributes.
                         *
                         * @param provider
                         *            the provider to which this service belongs.
                         * @param type
                         *            the type of this service (for example {@code
                         *            KeyPairGenerator}).
                         * @param algorithm
                         *            the algorithm this service implements.
                         * @param className
                         *            the name of the class implementing this service.
                         * @param aliases
                         *            {@code List} of aliases for the algorithm name, or {@code
                         *            null} if the implemented algorithm has no aliases.
                         * @param attributes
                         *            {@code Map} of additional attributes, or {@code null} if
                         *            this {@code Service} has no attributed.
                         * @throws NullPointerException
                         *             if {@code provider, type, algorithm} or {@code className}
                         *             is {@code null}.</member>
        <member name="M:biz.ritter.javapi.security.Provider.Service.getType">
                         * Returns the type of this {@code Service}. For example {@code
                         * KeyPairGenerator}.
                         *
                         * @return the type of this {@code Service}.</member>
        <member name="M:biz.ritter.javapi.security.Provider.Service.getAlgorithm">
                         * Returns the name of the algorithm implemented by this {@code
                         * Service}.
                         *
                         * @return the name of the algorithm implemented by this {@code
                         *         Service}.</member>
        <member name="M:biz.ritter.javapi.security.Provider.Service.getProvider">
                         * Returns the {@code Provider} this {@code Service} belongs to.
                         *
                         * @return the {@code Provider} this {@code Service} belongs to.</member>
        <member name="M:biz.ritter.javapi.security.Provider.Service.getClassName">
                         * Returns the name of the class implementing this {@code Service}.
                         *
                         * @return the name of the class implementing this {@code Service}.</member>
        <member name="M:biz.ritter.javapi.security.Provider.Service.getAttribute(System.String)">
                         * Returns the value of the attribute with the specified {@code name}.
                         *
                         * @param name
                         *            the name of the attribute.
                         * @return the value of the attribute, or {@code null} if no attribute
                         *         with the given name is set.
                         * @throws NullPointerException
                         *             if {@code name} is {@code null}.</member>
        <member name="M:biz.ritter.javapi.security.Provider.Service.newInstance(System.Object)">
                         * Creates and returns a new instance of the implementation described by
                         * this {@code Service}.
                         *
                         * @param constructorParameter
                         *            the parameter that is used by the constructor, or {@code
                         *            null} if the implementation does not declare a constructor
                         *            parameter.
                         * @return a new instance of the implementation described by this
                         *         {@code Service}.
                         * @throws NoSuchAlgorithmException
                         *             if the instance could not be constructed.
                         * @throws InvalidParameterException
                         *             if the implementation does not support the specified
                         *             {@code constructorParameter}.</member>
        <member name="M:biz.ritter.javapi.security.Provider.Service.supportsParameter(System.Object)">
                         * Indicates whether this {@code Service} supports the specified
                         * constructor parameter.
                         *
                         * @param parameter
                         *            the parameter to test.
                         * @return {@code true} if this {@code Service} supports the specified
                         *         constructor parameter, {@code false} otherwise.</member>
        <member name="M:biz.ritter.javapi.security.Provider.Service.ToString">
                         * Returns a string containing a concise, human-readable description of
                         * this {@code Service}.
                         *
                         * @return a printable representation for this {@code Service}.</member>
        <member name="T:biz.ritter.javapi.security.Security">
                 * {@code Security} is the central class in the Java Security API. It manages
                 * the list of security {@code Provider} that have been installed into this
                 * runtime environment.</member>
        <member name="M:biz.ritter.javapi.security.Security.#ctor">
                     * This class can't be instantiated.</member>
        <member name="M:biz.ritter.javapi.security.Security.getAlgorithmProperty(System.String,System.String)">
                     * Returns value for the specified algorithm with the specified name.
                     *
                     * @param algName
                     *            the name of the algorithm.
                     * @param propName
                     *            the name of the property.
                     * @return value of the property.
                     * @deprecated Use {@link AlgorithmParameters} and {@link KeyFactory}
                     *             instead.</member>
        <member name="M:biz.ritter.javapi.security.Security.insertProviderAt(biz.ritter.javapi.security.Provider,System.Int32)">
                     * Insert the given {@code Provider} at the specified {@code position}. The
                     * positions define the preference order in which providers are searched for
                     * requested algorithms.
                     * <p />
                     * If a {@code SecurityManager} is installed, code calling this method needs
                     * the {@code SecurityPermission} {@code insertProvider.NAME} (where NAME is
                     * the provider name) to be granted, otherwise a {@code SecurityException}
                     * will be thrown.
                     *
                     * @param provider
                     *            the provider to insert.
                     * @param position
                     *            the position (starting from 1).
                     * @return the actual position or {@code -1} if the given {@code provider}
                     *         was already in the list. The actual position may be different
                     *         from the desired position.
                     * @throws SecurityException
                     *             if a {@code SecurityManager} is installed and the caller does
                     *             not have permission to invoke this method.</member>
        <member name="M:biz.ritter.javapi.security.Security.addProvider(biz.ritter.javapi.security.Provider)">
                     * Adds the given {@code provider} to the collection of providers at the
                     * next available position.
                     * <p />
                     * If a {@code SecurityManager} is installed, code calling this method needs
                     * the {@code SecurityPermission} {@code insertProvider.NAME} (where NAME is
                     * the provider name) to be granted, otherwise a {@code SecurityException}
                     * will be thrown.
                     *
                     * @param provider
                     *            the provider to be added.
                     * @return the actual position or {@code -1} if the given {@code provider}
                     *         was already in the list.
                     * @throws SecurityException
                     *             if a {@code SecurityManager} is installed and the caller does
                     *             not have permission to invoke this method.</member>
        <member name="M:biz.ritter.javapi.security.Security.removeProvider(System.String)">
                     * Removes the {@code Provider} with the specified name form the collection
                     * of providers. If the the {@code Provider} with the specified name is
                     * removed, all provider at a greater position are shifted down one
                     * position.
                     * <p />
                     * Returns silently if {@code name} is {@code null} or no provider with the
                     * specified name is installed.
                     * <p />
                     * If a {@code SecurityManager} is installed, code calling this method needs
                     * the {@code SecurityPermission} {@code removeProvider.NAME} (where NAME is
                     * the provider name) to be granted, otherwise a {@code SecurityException}
                     * will be thrown.
                     *
                     * @param name
                     *            the name of the provider to remove.
                     * @throws SecurityException
                     *             if a {@code SecurityManager} is installed and the caller does
                     *             not have permission to invoke this method.</member>
        <member name="M:biz.ritter.javapi.security.Security.getProviders">
                     * Returns an array containing all installed providers. The providers are
                     * ordered according their preference order.
                     *
                     * @return an array containing all installed providers.</member>
        <member name="M:biz.ritter.javapi.security.Security.getProvider(System.String)">
                     * Returns the {@code Provider} with the specified name. Returns {@code
                     * null} if name is {@code null} or no provider with the specified name is
                     * installed.
                     *
                     * @param name
                     *            the name of the requested provider.
                     * @return the provider with the specified name, maybe {@code null}.</member>
        <member name="M:biz.ritter.javapi.security.Security.getProviders(System.String)">
                     * Returns the array of providers which meet the user supplied string
                     * filter. The specified filter must be supplied in one of two formats:
                     * <nl>
                     * <li> CRYPTO_SERVICE_NAME.ALGORITHM_OR_TYPE</li>
                     * <p />
                     * (for example: "MessageDigest.SHA")
                     * <li> CRYPTO_SERVICE_NAME.ALGORITHM_OR_TYPE</li>
                     * ATTR_NAME:ATTR_VALUE
                     * <p />
                     * (for example: "Signature.MD2withRSA KeySize:512")
                     * </nl>
                     *
                     * @param filter
                     *            case-insensitive filter.
                     * @return the providers which meet the user supplied string filter {@code
                     *         filter}. A {@code null} value signifies that none of the
                     *         installed providers meets the filter specification.
                     * @throws InvalidParameterException
                     *             if an unusable filter is supplied.
                     * @throws NullPointerException
                     *             if {@code filter} is {@code null}.</member>
        <member name="M:biz.ritter.javapi.security.Security.getProviders(biz.ritter.javapi.util.Map{System.String,System.String})">
                     * Returns the array of providers which meet the user supplied set of
                     * filters. The filter must be supplied in one of two formats:
                     * <nl>
                     * <li> CRYPTO_SERVICE_NAME.ALGORITHM_OR_TYPE</li>
                     * <p />
                     * for example: "MessageDigest.SHA" The value associated with the key must
                     * be an empty string. <li> CRYPTO_SERVICE_NAME.ALGORITHM_OR_TYPE</li>
                     * ATTR_NAME:ATTR_VALUE
                     * <p />
                     * for example: "Signature.MD2withRSA KeySize:512" where "KeySize:512" is
                     * the value of the filter map entry.
                     * </nl>
                     *
                     * @param filter
                     *            case-insensitive filter.
                     * @return the providers which meet the user supplied string filter {@code
                     *         filter}. A {@code null} value signifies that none of the
                     *         installed providers meets the filter specification.
                     * @throws InvalidParameterException
                     *             if an unusable filter is supplied.
                     * @throws NullPointerException
                     *             if {@code filter} is {@code null}.</member>
        <member name="M:biz.ritter.javapi.security.Security.getProperty(System.String)">
                     * Returns the value of the security property named by the argument.
                     * <p />
                     * If a {@code SecurityManager} is installed, code calling this method needs
                     * the {@code SecurityPermission} {@code getProperty.KEY} (where KEY is the
                     * specified {@code key}) to be granted, otherwise a {@code
                     * SecurityException} will be thrown.
                     *
                     * @param key
                     *            the name of the requested security property.
                     * @return the value of the security property.
                     * @throws SecurityException
                     *             if a {@code SecurityManager} is installed and the caller does
                     *             not have permission to invoke this method.</member>
        <member name="M:biz.ritter.javapi.security.Security.setProperty(System.String,System.String)">
                     * Sets the value of the specified security property.
                     * <p />
                     * If a {@code SecurityManager} is installed, code calling this method needs
                     * the {@code SecurityPermission} {@code setProperty.KEY} (where KEY is the
                     * specified {@code key}) to be granted, otherwise a {@code
                     * SecurityException} will be thrown.
                     *
                     * @param key
                     *            the name of the security property.
                     * @param datnum
                     *            the value of the security property.
                     * @throws SecurityException
                     *             if a {@code SecurityManager} is installed and the caller does
                     *             not have permission to invoke this method.</member>
        <member name="M:biz.ritter.javapi.security.Security.getAlgorithms(System.String)">
                     * Returns a {@code Set} of all registered algorithms for the specified
                     * cryptographic service. {@code "Signature"}, {@code "Cipher"} and {@code
                     * "KeyStore"} are examples for such kind of services.
                     *
                     * @param serviceName
                     *            the case-insensitive name of the service.
                     * @return a {@code Set} of all registered algorithms for the specified
                     *         cryptographic service, or an empty {@code Set} if {@code
                     *         serviceName} is {@code null} or if no registered provider
                     *         provides the requested service.</member>
        <member name="M:biz.ritter.javapi.security.Security.renumProviders">
                     *
                     * Update sequence numbers of all providers.
                     *</member>
        <member name="T:biz.ritter.javapi.security.SecurityPermission">
                 * {@code SecurityPermission} objects guard access to the mechanisms which
                 * implement security. Security permissions have names, but not actions.</member>
        <member name="M:biz.ritter.javapi.security.SecurityPermission.#ctor(System.String)">
                     * Constructs a new instance of {@code SecurityPermission} with the given
                     * name.
                     *
                     * @param name
                     *            the name of the permission.</member>
        <member name="M:biz.ritter.javapi.security.SecurityPermission.#ctor(System.String,System.String)">
                     * Constructs a new instance of {@code SecurityPermission} with the given
                     * {@code name} and {@code action} list. The action list is ignored - it is
                     * existing for compatibility reasons only.
                     *
                     * @param name
                     *            the name of the permission.
                     * @param action
                     *            ignored.</member>
        <member name="T:biz.ritter.javapi.security.UnresolvedPermission">
             * An {@code UnresolvedPermission} represents a {@code Permission} whose type
             * should be resolved lazy and not during initialization time of the {@code
             * Policy}. {@code UnresolvedPermission}s contain all information to be replaced
             * by a concrete typed {@code Permission} right before the access checks are
             * performed.</member>
        <member name="M:biz.ritter.javapi.security.UnresolvedPermission.#ctor(System.String,System.String,System.String,biz.ritter.javapi.security.Certificate[])">
                 * Constructs a new instance of {@code UnresolvedPermission}. The supplied
                 * parameters are used when this instance is resolved to the concrete
                 * {@code Permission}.
                 *
                 * @param type
                 *            the fully qualified class name of the permission this class is
                 *            resolved to.
                 * @param name
                 *            the name of the permission this class is resolved to, maybe
                 *            {@code null}.
                 * @param actions
                 *            the actions of the permission this class is resolved to, maybe
                 *            {@code null}.
                 * @param certs
                 *            the certificates of the permission this class is resolved to,
                 *            maybe {@code null}.
                 * @throws NullPointerException
                 *             if type is {@code null}.</member>
        <member name="M:biz.ritter.javapi.security.UnresolvedPermission.Equals(System.Object)">
                 * Compares the specified object with this {@code UnresolvedPermission} for
                 * equality and returns {@code true} if the specified object is equal,
                 * {@code false} otherwise. To be equal, the specified object needs to be an
                 * instance of {@code UnresolvedPermission}, the two {@code
                 * UnresolvedPermission}s must refer to the same type and must have the same
                 * name, the same actions and certificates.
                 *
                 * @param obj
                 *            object to be compared for equality with this {@code
                 *            UnresolvedPermission}.
                 * @return {@code true} if the specified object is equal to this {@code
                 *         UnresolvedPermission}, otherwise {@code false}.</member>
        <member name="M:biz.ritter.javapi.security.UnresolvedPermission.equalsCertificates(biz.ritter.javapi.security.Certificate[],biz.ritter.javapi.security.Certificate[])">
                 * check whether given array of certificates are equivalent</member>
        <member name="M:biz.ritter.javapi.security.UnresolvedPermission.GetHashCode">
                 * Returns the hash code value for this {@code UnresolvedPermission}.
                 * Returns the same hash code for {@code UnresolvedPermission}s that are
                 * equal to each other as required by the general contract of
                 * {@link Object#hashCode}.
                 *
                 * @return the hash code value for this {@code UnresolvedPermission}.
                 * @see Object#equals(Object)
                 * @see UnresolvedPermission#equals(Object)</member>
        <member name="M:biz.ritter.javapi.security.UnresolvedPermission.getActions">
                 * Returns an empty string since there are no actions allowed for {@code
                 * UnresolvedPermission}. The actions, specified in the constructor, are
                 * used when the concrete permission is resolved and created.
                 *
                 * @return an empty string, indicating that there are no actions.</member>
        <member name="M:biz.ritter.javapi.security.UnresolvedPermission.getUnresolvedName">
                 * Returns the name of the permission this {@code UnresolvedPermission} is
                 * resolved to.
                 *
                 * @return the name of the permission this {@code UnresolvedPermission} is
                 *         resolved to.</member>
        <member name="M:biz.ritter.javapi.security.UnresolvedPermission.getUnresolvedActions">
                 * Returns the actions of the permission this {@code UnresolvedPermission}
                 * is resolved to.
                 *
                 * @return the actions of the permission this {@code UnresolvedPermission}
                 *         is resolved to.</member>
        <member name="M:biz.ritter.javapi.security.UnresolvedPermission.getUnresolvedType">
                 * Returns the fully qualified class name of the permission this {@code
                 * UnresolvedPermission} is resolved to.
                 *
                 * @return the fully qualified class name of the permission this {@code
                 *         UnresolvedPermission} is resolved to.</member>
        <member name="M:biz.ritter.javapi.security.UnresolvedPermission.getUnresolvedCerts">
                 * Returns the certificates of the permission this {@code
                 * UnresolvedPermission} is resolved to.
                 *
                 * @return the certificates of the permission this {@code
                 *         UnresolvedPermission} is resolved to.</member>
        <member name="M:biz.ritter.javapi.security.UnresolvedPermission.implies(biz.ritter.javapi.security.Permission)">
                 * Indicates whether the specified permission is implied by this {@code
                 * UnresolvedPermission}. {@code UnresolvedPermission} objects imply nothing
                 * since nothing is known about them yet.
                 * <p />
                 * Before actual implication checking, this method tries to resolve
                 * UnresolvedPermissions (if any) against the passed instance. Successfully
                 * resolved permissions (if any) are taken into account during further
                 * processing.
                 *
                 * @param permission
                 *            the permission to check.
                 * @return always {@code false}</member>
        <member name="M:biz.ritter.javapi.security.UnresolvedPermission.ToString">
                 * Returns a string containing a concise, human-readable description of this
                 * {@code UnresolvedPermission} including its target name and its target
                 * actions.
                 *
                 * @return a printable representation for this {@code UnresolvedPermission}.</member>
        <member name="M:biz.ritter.javapi.security.UnresolvedPermission.newPermissionCollection">
                 * Returns a new {@code PermissionCollection} for holding {@code
                 * UnresolvedPermission} objects.
                 *
                 * @return a new PermissionCollection for holding {@code
                 *         UnresolvedPermission} objects.</member>
        <member name="M:biz.ritter.javapi.security.UnresolvedPermission.resolve(biz.ritter.javapi.lang.Class)">
                 * Tries to resolve this permission into the specified class.
                 * <p />
                 * It is assumed that the class has a proper name (as returned by {@code
                 * getName()} of this unresolved permission), so no check is performed to
                 * verify this. However, the class must have all required certificates (as
                 * per {@code getUnresolvedCerts()}) among the passed collection of signers.
                 * If it does, a zero, one, and/or two-argument constructor is tried to
                 * instantiate a new permission, which is then returned.
                 * <p />
                 * If an appropriate constructor is not available or the class is improperly
                 * signed, {@code null} is returned.
                 *
                 * @param targetType
                 *            - a target class instance, must not be {@code null}
                 * @return resolved permission or null</member>
        <member name="T:biz.ritter.javapi.security.UnresolvedPermissionCollection">
                 * {@code UnresolvedPermissionCollection} represents a specific {@code
                 * PermissionCollection} for storing {@link UnresolvedPermission} instances.
                 * Contained elements are grouped by their target type.</member>
        <member name="M:biz.ritter.javapi.security.UnresolvedPermissionCollection.add(biz.ritter.javapi.security.Permission)">
                     * Adds an unresolved permission to this {@code
                     * UnresolvedPermissionCollection}.
                     *
                     * @param permission
                     *            the permission to be added.
                     * @throws SecurityException
                     *             if this collection is read only.
                     * @throws IllegalArgumentException
                     *             if {@code permission} is {@code null} or not an {@code
                     *             UnresolvedPermission}.</member>
        <member name="M:biz.ritter.javapi.security.UnresolvedPermissionCollection.implies(biz.ritter.javapi.security.Permission)">
                     * Always returns {@code false}.
                     *
                     * @return always {@code false}
                     * @see UnresolvedPermission#implies(Permission).</member>
        <member name="M:biz.ritter.javapi.security.UnresolvedPermissionCollection.hasUnresolved(biz.ritter.javapi.security.Permission)">
                     * Returns true if this collection contains unresolved permissions
                     * with the same classname as argument permission.</member>
        <member name="M:biz.ritter.javapi.security.UnresolvedPermissionCollection.resolveCollection(biz.ritter.javapi.security.Permission,biz.ritter.javapi.security.PermissionCollection)">
                     * Resolves all permissions of the same class as the specified target
                     * permission and adds them to the specified collection. If passed
                     * collection is {@code null} and some unresolved permissions were resolved,
                     * an appropriate new collection is instantiated and used. All resolved
                     * permissions are removed from this unresolved collection, and collection
                     * with resolved ones is returned.
                     *
                     * @param target
                     *            a kind of permissions to be resolved.
                     * @param holder
                     *            an existing collection for storing resolved permissions.
                     * @return a collection containing resolved permissions (if any found)</member>
        <member name="T:biz.ritter.javapi.io.NotActiveException">
                 * Signals that a serialization-related method has been invoked in the wrong
                 * place. Some methods in {@code ObjectInputStream} and {@code
                 * ObjectOutputStream} can only be called from a nested call to readObject() or
                 * writeObject(). Any attempt to call them from another context will cause a
                 * {@code NotActiveException} to be thrown. The list of methods that are
                 * protected this way is:
                 * <ul>
                 * <li>{@link ObjectInputStream#defaultReadObject()}</li>
                 * <li>{@link ObjectInputStream#registerValidation(ObjectInputValidation, int)}</li>
                 * <li>{@link ObjectOutputStream#defaultWriteObject()}</li>
                 * </ul></member>
        <member name="M:biz.ritter.javapi.io.NotActiveException.#ctor">
                     * Constructs a new {@code NotActiveException} with its stack trace filled
                     * in.</member>
        <member name="M:biz.ritter.javapi.io.NotActiveException.#ctor(System.String)">
                     * Constructs a new {@code NotActiveException} with its stack trace and
                     * detail message filled in.
                     *
                     * @param detailMessage
                     *            the detail message for this exception.</member>
        <member name="T:biz.ritter.javapi.io.NotSerializableException">
                 * Signals that an object that is not serializable has been passed into the
                 * {@code ObjectOutput.writeObject()} method. This can happen if the object
                 * does not implement {@code Serializable} or {@code Externalizable}, or if it
                 * is serializable but it overrides {@code writeObject(ObjectOutputStream)} and
                 * explicitly prevents serialization by throwing this type of exception.
                 *
                 * @see ObjectOutput#writeObject(Object)
                 * @see ObjectOutputStream#writeObject(Object)</member>
        <member name="M:biz.ritter.javapi.io.NotSerializableException.#ctor">
                     * Constructs a new {@code NotSerializableException} with its stack trace
                     * filled in.</member>
        <member name="M:biz.ritter.javapi.io.NotSerializableException.#ctor(System.String)">
                     * Constructs a new {@link NotSerializableException} with its stack trace
                     * and detail message filled in.
                     *
                     * @param detailMessage
                     *            the detail message for this exception.</member>
        <member name="T:biz.ritter.javapi.lang.Package">
            <summary>
            The package - like the namespace
            </summary>
        </member>
        <member name="T:biz.ritter.javapi.sql.Array">
                 * A Java representation of the SQL {@code ARRAY} type.</member>
        <member name="M:biz.ritter.javapi.sql.Array.getArray">
                     * Retrieves the contents of the SQL {@code ARRAY} value as a Java array
                     * object.
                     *
                     * @return A Java array containing the elements of this Array
                     * @throws SQLException
                     *             if there is a database error.</member>
        <member name="M:biz.ritter.javapi.sql.Array.getArray(System.Int64,System.Int32)">
                     * Returns part of the SQL {@code ARRAY} associated with this array,
                     * starting at a particular {@code index} and comprising up to {@code count}
                     * successive elements of the SQL array.
                     *
                     * @param index
                     *            the start position in the array where the values are
                     *            retrieved.
                     * @param count
                     *            the number of elements to retrieve.
                     * @return A Java array containing the desired set of elements from this Array
                     * @throws SQLException
                     *             if there is a database error.</member>
        <member name="M:biz.ritter.javapi.sql.Array.getArray(System.Int64,System.Int32,biz.ritter.javapi.util.Map{System.String,biz.ritter.javapi.lang.Class})">
                     * Returns part of the SQL {@code ARRAY} associated with this array,
                     * starting at a particular {@code index} and comprising up to {@code count}
                     * successive elements of the SQL array.
                     *
                     * @param index
                     *            the start position in the array where the values are
                     *            retrieved.
                     * @param count
                     *            the number of elements to retrieve.
                     * @param map
                     *            the map defining the correspondence between SQL type names
                     *            and Java types.
                     * @return A Java array containing the desired set of elements from this Array
                     * @throws SQLException
                     *             if there is a database error.</member>
        <member name="M:biz.ritter.javapi.sql.Array.getArray(biz.ritter.javapi.util.Map{System.String,biz.ritter.javapi.lang.Class})">
                     * Returns the data from the underlying SQL {@code ARRAY} as a Java array.
                     *
                     * @param map
                     *            the map defining the correspondence between SQL type names
                     *            and Java types.
                     * @return A Java array containing the elements of this array
                     * @throws SQLException
                     *             if there is a database error.</member>
        <member name="M:biz.ritter.javapi.sql.Array.getBaseType">
                     * Returns the JDBC type of the entries in this array's underlying
                     * SQL array.
                     *
                     * @return An integer constant from the {@code java.sql.Types} class
                     * @throws SQLException
                     *             if there is a database error.</member>
        <member name="M:biz.ritter.javapi.sql.Array.getBaseTypeName">
                     * Returns the SQL type name of the entries in this array's underlying
                     * SQL array.
                     *
                     * @return The database specific name or a fully-qualified SQL type name.
                     * @throws SQLException
                     *              if there is a database error.</member>
        <member name="M:biz.ritter.javapi.sql.Array.getResultSet">
                     * Returns a ResultSet object which holds the entries of the SQL {@code
                     * ARRAY} associated with this array.
                     *
                     * @return the elements of the array as a {@code ResultSet}.
                     * @throws SQLException
                     *             if there is a database error.</member>
        <member name="M:biz.ritter.javapi.sql.Array.getResultSet(System.Int64,System.Int32)">
                     * Returns a {@code ResultSet} object that holds the entries of a subarray,
                     * beginning at a particular index and comprising up to {@code count}
                     * successive entries.
                     *
                     * @param index
                     *            the start position in the array where the values are
                     *            retrieved.
                     * @param count
                     *            the number of elements to retrieve.
                     * @return the elements of the array as a {@code ResultSet}.
                     * @throws SQLException
                     *             if there is a database error.</member>
        <member name="M:biz.ritter.javapi.sql.Array.getResultSet(System.Int64,System.Int32,biz.ritter.javapi.util.Map{System.String,biz.ritter.javapi.lang.Class})">
                     * Returns a {@code ResultSet} object that holds the entries of a subarray,
                     * beginning at a particular index and comprising up to {@code count}
                     * successive entries.
                     *
                     * @param index
                     *            the start position in the array where the values are
                     *            retrieved.
                     * @param count
                     *            the number of elements to retrieve.
                     * @param map
                     *            the map defining the correspondence between SQL type names
                     *            and Java types.
                     * @return the {@code ResultSet} the array's custom type values. if a
                     *         database error has occurred.
                     * @throws SQLException
                     *             if there is a database error.</member>
        <member name="M:biz.ritter.javapi.sql.Array.getResultSet(biz.ritter.javapi.util.Map{System.String,biz.ritter.javapi.lang.Class})">
                     * Returns a {@code ResultSet} object which holds the entries of the SQL
                     * {@code ARRAY} associated with this array.
                     *
                     * @param map
                     *            the map defining the correspondence between SQL type names
                     *            and Java types.
                     * @return the array as a {@code ResultSet}.
                     * @throws SQLException
                     *             if there is a database error.</member>
        <member name="M:biz.ritter.javapi.sql.Array.free">
                     * TODO Javadoc
                     *
                     * @throws SQLException</member>
        <member name="T:biz.ritter.javapi.sql.Blob">
                 * A Java interface representing the SQL {@code BLOB} type.
                 * <p />
                 * An SQL {@code BLOB} type stores a large array of binary data (bytes) as the
                 * value in a column of a database.
                 * <p />
                 * The {@code java.sql.Blob} interface provides methods for setting and
                 * retrieving data in the {@code Blob}, for querying {@code Blob} data length,
                 * and for searching for data within the {@code Blob}.</member>
        <member name="M:biz.ritter.javapi.sql.Blob.getBinaryStream">
                     * Retrieves this {@code Blob} object as a binary stream.
                     *
                     * @return a binary {@code InputStream} giving access to the {@code Blob}
                     *         data.
                     * @throws SQLException
                     *             if an error occurs accessing the {@code Blob}.</member>
        <member name="M:biz.ritter.javapi.sql.Blob.getBytes(System.Int64,System.Int32)">
                     * Gets a portion of the value of this {@code Blob} as an array of bytes.
                     *
                     * @param pos
                     *            the position of the first byte in the {@code Blob} to get,
                     *            where the first byte in the {@code Blob} has position 1.
                     * @param length
                     *            the number of bytes to get.
                     * @return a byte array containing the data from the {@code Blob}, starting
                     *         at {@code pos} and is up to {@code length} bytes long.
                     * @throws SQLException
                     *             if an error occurs accessing the {@code Blob}.</member>
        <member name="M:biz.ritter.javapi.sql.Blob.length">
                     * Gets the number of bytes in this {@code Blob} object.
                     *
                     * @return a {@code long} value with the length of the {@code Blob} in
                     *         bytes.
                     * @throws SQLException
                     *             if an error occurs accessing the {@code Blob}.</member>
        <member name="M:biz.ritter.javapi.sql.Blob.position(biz.ritter.javapi.sql.Blob,System.Int64)">
                     * Search for the position in this {@code Blob} at which a specified pattern
                     * begins, starting at a specified position within the {@code Blob}.
                     *
                     * @param pattern
                     *            a {@code Blob} containing the pattern of data to search for in
                     *            this {@code Blob}.
                     * @param start
                     *            the position within this {@code Blob} to start the search,
                     *            where the first position in the {@code Blob} is {@code 1}.
                     * @return a {@code long} value with the position at which the pattern
                     *         begins. Returns {@code -1} if the pattern is not found in this
                     *         {@code Blob}.
                     * @throws SQLException
                     *             if an error occurs accessing the {@code Blob}.</member>
        <member name="M:biz.ritter.javapi.sql.Blob.position(System.Byte[],System.Int64)">
                     * Search for the position in this {@code Blob} at which the specified
                     * pattern begins, starting at a specified position within the {@code Blob}.
                     *
                     * @param pattern
                     *            a byte array containing the pattern of data to search for in
                     *            this {@code Blob}.
                     * @param start
                     *            the position within this {@code Blob} to start the search,
                     *            where the first position in the {@code Blob} is {@code 1}.
                     * @return a {@code long} value with the position at which the pattern
                     *         begins. Returns {@code -1} if the pattern is not found in this
                     *         {@code Blob}.
                     * @throws SQLException
                     *             if an error occurs accessing the {@code Blob}.</member>
        <member name="M:biz.ritter.javapi.sql.Blob.setBinaryStream(System.Int64)">
                     * Gets a stream that can be used to write binary data to this {@code Blob}.
                     *
                     * @param pos
                     *            the position within this {@code Blob} at which to start
                     *            writing, where the first position in the {@code Blob} is
                     *            {@code 1}.
                     * @return a binary {@code InputStream} which can be used to write data into
                     *         the {@code Blob} starting at the specified position.
                     * @throws SQLException
                     *             if an error occurs accessing the {@code Blob}.</member>
        <member name="M:biz.ritter.javapi.sql.Blob.setBytes(System.Int64,System.Byte[])">
                     * Writes a specified array of bytes to this {@code Blob} object, starting
                     * at a specified position. Returns the number of bytes written.
                     *
                     * @param pos
                     *            the position within this {@code Blob} at which to start
                     *            writing, where the first position in the {@code Blob} is
                     *            {@code 1}.
                     * @param theBytes
                     *            an array of bytes to write into the {@code Blob}.
                     * @return an integer containing the number of bytes written to the {@code
                     *         Blob}.
                     * @throws SQLException
                     *             if an error occurs accessing the {@code Blob}.</member>
        <member name="M:biz.ritter.javapi.sql.Blob.setBytes(System.Int64,System.Byte[],System.Int32,System.Int32)">
                     * Writes a portion of a specified byte array to this {@code Blob}. Returns
                     * the number of bytes written.
                     *
                     * @param pos
                     *            the position within this {@code Blob} at which to start
                     *            writing, where the first position in the {@code Blob} is
                     *            {@code 1}.
                     * @param theBytes
                     *            an array of bytes to write into the {@code Blob}.
                     * @param offset
                     *            the offset into the byte array from which to start writing
                     *            data - the first byte in the array has offset {@code 0}.
                     * @param len
                     *            the length of data to write in number of bytes.
                     * @return an integer containing the number of bytes written to the {@code
                     *         Blob}.
                     * @throws SQLException
                     *             if an error occurs accessing the {@code Blob}.</member>
        <member name="M:biz.ritter.javapi.sql.Blob.truncate(System.Int64)">
                     * Truncate the value of this {@code Blob} object to a specified length in
                     * bytes.
                     *
                     * @param len
                     *            the length of data in bytes after which this {@code Blob}
                     *            is to be truncated.
                     * @throws SQLException
                     *             if an error occurs accessing the {@code Blob}.</member>
        <member name="M:biz.ritter.javapi.sql.Blob.free">
                     * TODO Javadoc
                     *
                     * @throws SQLException</member>
        <member name="M:biz.ritter.javapi.sql.Blob.getBinaryStream(System.Int64,System.Int64)">
                     * TODO Javadoc
                     *
                     * @throws SQLException</member>
        <member name="T:biz.ritter.javapi.sql.CallableStatement">
                 * An interface used to call <i>Stored Procedures</i>.
                 * <p />
                 * The JDBC API provides an SQL escape syntax allowing <i>Stored Procedures</i>
                 * to be called in a standard way for all databases. The JDBC escape syntax has
                 * two forms. One form includes a result parameter. The second form does not
                 * include a result parameter. Where the result parameter is used, it must be
                 * declared as an {@code OUT} parameter. Other parameters can be declared as
                 * {@code IN}, {@code OUT}, or {@code INOUT}. Parameters are referenced either by
                 * name or by a numerical index starting at 1.
                 * <p />
                 * The correct syntax is:
                 * <dd>
                 * <dl>
                 * { ?= call &lt;procedurename&gt; [( [parameter1,parameter2,...] )] }
                 * </dl>
                 * <dl>
                 * { call &lt;procedurename&gt; [( [parameter1,parameter2,...] )] }
                 * </dl>
                 * </dd>
                 * {@code IN} parameters are set before calling the procedure,
                 * using the setter methods which are inherited from {@code PreparedStatement}.
                 * For {@code OUT} parameters, their type must be registered before executing
                 * the stored procedure. The values are retrieved using the getter methods
                 * defined in the {@code CallableStatement} interface.
                 * <p />
                 * {@code CallableStatement}s can return one or more {@code ResultSets}. In the
                 * event that multiple {@code ResultSets} are returned, they are accessed using
                 * the methods inherited from the {@code Statement} interface.</member>
        <member name="M:biz.ritter.javapi.sql.CallableStatement.getArray(System.Int32)">
                     * Gets the value of a specified JDBC {@code ARRAY} parameter as a
                     * {@code java.sql.Array}.
                     *
                     * @param parameterIndex
                     *            the parameter index, where the first parameter has
                     *            index 1.
                     * @return a {@code java.sql.Array} containing the parameter value.
                     * @throws SQLException
                     *             if a database error occurs.</member>
        <member name="M:biz.ritter.javapi.sql.CallableStatement.getArray(System.String)">
                     * Gets the value of a specified JDBC {@code ARRAY} parameter as a {@code
                     * java.sql.Array}.
                     *
                     * @param parameterName
                     *            the desired parameter's name.
                     * @return a {@code java.sql.Array} containing the parameter's value.
                     * @throws SQLException
                     *             if there is a problem accessing the database.</member>
        <member name="M:biz.ritter.javapi.sql.CallableStatement.getBigDecimal(System.Int32)">
                     * Returns a new {@link BigDecimal} representation of the JDBC {@code
                     * NUMERIC} parameter specified by the input index.
                     *
                     * @param parameterIndex
                     *            the parameter number index where the first parameter has index
                     *            1.
                     * @return a {@code java.math.BigDecimal} representing the value of the
                     *         specified parameter. The value {@code null} is returned if
                     *         the parameter in question is an SQL {@code NULL}.
                     * @throws SQLException
                     *             if a database error occurs.</member>
        <member name="M:biz.ritter.javapi.sql.CallableStatement.getBigDecimal(System.Int32,System.Int32)">
                     * Returns a new {@link BigDecimal} representation of the JDBC {@code
                     * NUMERIC} parameter specified by the input index. The number of digits
                     * after the decimal point is specified by {@code scale}.
                     *
                     * @param parameterIndex
                     *            the parameter number index, where the first parameter has
                     *            index 1.
                     * @param scale
                     *            the number of digits after the decimal point to get.
                     * @return a {@code java.math.BigDecimal} representing the value of the
                     *         specified parameter. The value {@code null} is returned if
                     *         the parameter in question is an SQL {@code NULL}.
                     * @throws SQLException
                     *             if a database error occurs.
                     * @deprecated Use {@link #getBigDecimal(int)} or
                     *             {@link #getBigDecimal(String)}</member>
        <member name="M:biz.ritter.javapi.sql.CallableStatement.getBigDecimal(System.String)">
                     * Returns a new {@link BigDecimal} representation of the JDBC {@code
                     * NUMERIC} parameter specified by the input name.
                     *
                     * @param parameterName
                     *            the desired parameter's name.
                     * @return a {@code java.math.BigDecimal} representing the value of the
                     *         specified parameter. The value {@code null} is returned if
                     *         the parameter in question is an SQL {@code NULL}.
                     * @throws SQLException
                     *             if a database error occurs.</member>
        <member name="M:biz.ritter.javapi.sql.CallableStatement.getBlob(System.Int32)">
                     * Gets the value of a specified JDBC {@code BLOB} parameter as a {@code
                     * java.sql.Blob}.
                     *
                     * @param parameterIndex
                     *            the parameter number index, where the first parameter has
                     *            index 1.
                     * @return a {@code java.sql.Blob} representing the value of the
                     *         specified parameter. The value {@code null} is returned if
                     *         the parameter in question is an SQL {@code NULL}.
                     * @throws SQLException
                     *             if a database error occurs.</member>
        <member name="M:biz.ritter.javapi.sql.CallableStatement.getBlob(System.String)">
                     * Gets the value of a specified JDBC {@code BLOB} parameter as a {@code
                     * java.sql.Blob}.
                     *
                     * @param parameterName
                     *            the desired parameter's name.
                     * @return a {@code java.sql.Blob} representing the value of the
                     *         specified parameter. The value {@code null} is returned if
                     *         the parameter in question is an SQL {@code NULL}.
                     * @throws SQLException
                     *             if a database error occurs.</member>
        <member name="M:biz.ritter.javapi.sql.CallableStatement.getBoolean(System.Int32)">
                     * Gets the value of a specified JDBC {@code BIT} parameter as a boolean.
                     *
                     * @param parameterIndex
                     *            the parameter number index, where the first parameter has
                     *            index 1.
                     * @return a {@code boolean} representing the parameter value. {@code false}
                     *            is returned if the value is SQL {@code NULL}.
                     * @throws SQLException
                     *             if a database error occurs.</member>
        <member name="M:biz.ritter.javapi.sql.CallableStatement.getBoolean(System.String)">
                     * Gets the value of a specified JDBC {@code BIT} parameter as a {@code
                     * boolean}.
                     *
                     * @param parameterName
                     *            the desired parameter's name.
                     * @return a {@code boolean} representation of the value of the parameter.
                     *         {@code false} is returned if the SQL value is {@code NULL}.
                     * @throws SQLException
                     *             if a database error occurs.</member>
        <member name="M:biz.ritter.javapi.sql.CallableStatement.getByte(System.Int32)">
                     * Gets the value of a specified JDBC {@code TINYINT} parameter as a {@code
                     * byte}.
                     *
                     * @param parameterIndex
                     *            the parameter number index, where the first parameter has
                     *            index 1.
                     * @return a {@code byte} representation of the value of the parameter.
                     *            {@code 0} is returned if the value is SQL {@code NULL}.
                     * @throws SQLException
                     *             if a database error occurs.</member>
        <member name="M:biz.ritter.javapi.sql.CallableStatement.getByte(System.String)">
                     * Gets the value of a specified JDBC {@code TINYINT} parameter as a Java
                     * {@code byte}.
                     *
                     * @param parameterName
                     *            the desired parameter's name.
                     * @return a {@code byte} representation of the value of the parameter.
                     *         {@code 0} is returned if the SQL value is {@code NULL}.
                     * @throws SQLException
                     *             if a database error occurs.</member>
        <member name="M:biz.ritter.javapi.sql.CallableStatement.getBytes(System.Int32)">
                     * Returns a byte array representation of the indexed JDBC {@code BINARY} or
                     * {@code VARBINARY} parameter.
                     *
                     * @param parameterIndex
                     *            the parameter number index, where the first parameter has
                     *            index 1.
                     * @return an array of bytes giving the value of the parameter. {@code null}
                     *         is returned if the value is SQL {@code NULL}.
                     * @throws SQLException
                     *             if a database error occurs.</member>
        <member name="M:biz.ritter.javapi.sql.CallableStatement.getBytes(System.String)">
                     * Returns a byte array representation of the named JDBC {@code BINARY} or
                     * {@code VARBINARY} parameter.
                     *
                     * @param parameterName
                     *            the name of the parameter.
                     * @return an array of bytes giving the value of the parameter. {@code null}
                     *         is returned if the value is SQL {@code NULL}.
                     * @throws SQLException
                     *             if a database error occurs.</member>
        <member name="M:biz.ritter.javapi.sql.CallableStatement.getClob(System.Int32)">
                     * Gets the value of a specified JDBC {@code CLOB} parameter as a {@code
                     * java.sql.Clob}.
                     *
                     * @param parameterIndex
                     *            the parameter number index, where the first parameter has
                     *            index 1.
                     * @return a {@code java.sql.Clob} representing the value of the
                     *            parameter. {@code null} is returned if the value is SQL
                     *            {@code NULL}.
                     * @throws SQLException
                     *             if a database error occurs.
                     * @see Clob</member>
        <member name="M:biz.ritter.javapi.sql.CallableStatement.getClob(System.String)">
                     * Gets the value of a specified JDBC {@code CLOB} parameter as a {@code
                     * java.sql.Clob}.
                     *
                     * @param parameterName
                     *            the name of the parameter.
                     * @return a {@code java.sql.Clob} with the value of the parameter. {@code
                     *         null} is returned if the value is SQL {@code NULL}.
                     * @throws SQLException
                     *             if a database error occurs.
                     * @see Clob</member>
        <member name="M:biz.ritter.javapi.sql.CallableStatement.getDate(System.Int32)">
                     * Gets the value of the specified JDBC {@code DATE} parameter as a {@code
                     * java.sql.Date}.
                     *
                     * @param parameterIndex
                     *            the parameter number index, where the first parameter has
                     *            index 1.
                     * @return the {@code java.sql.Date} representing the parameter's value.
                     *         {@code null} is returned if the value is SQL {@code NULL}.
                     * @throws SQLException
                     *             if a database error occurs.
                     * @see Date</member>
        <member name="M:biz.ritter.javapi.sql.CallableStatement.getDate(System.Int32,biz.ritter.javapi.util.Calendar)">
                     * Gets the value of the specified JDBC {@code DATE} parameter as a {@code
                     * java.sql.Date}, using the specified {@code Calendar} to construct the date.
                     * <p />
                     * The JDBC driver uses the calendar to create the Date using a particular
                     * timezone and locale. The default behavior of the driver is to use the Java
                     * virtual machine default settings.
                     *
                     * @param parameterIndex
                     *            the parameter number index, where the first parameter has
                     *            index 1.
                     * @param cal
                     *            the {@code Calendar} to use to construct the date
                     * @return the {@code java.sql.Date} giving the parameter's value. {@code null}
                     *         is returned if the value is SQL {@code NULL}.
                     * @throws SQLException
                     *             if a database error occurs.
                     * @see Date</member>
        <member name="M:biz.ritter.javapi.sql.CallableStatement.getDate(System.String)">
                     * Gets the value of the specified JDBC {@code DATE} parameter as a {@code
                     * java.sql.Date}.
                     *
                     * @param parameterName
                     *            the name of the desired parameter.
                     * @return the {@code java.sql.Date} giving the parameter's value. {@code null}
                     *         is returned if the value is SQL {@code NULL}.
                     * @throws SQLException
                     *             if a database error occurs.
                     * @see Date</member>
        <member name="M:biz.ritter.javapi.sql.CallableStatement.getDate(System.String,biz.ritter.javapi.util.Calendar)">
                     * Gets the value of the specified JDBC {@code DATE} parameter as a {@code
                     * java.sql.Date}, using the specified {@code Calendar} to construct the date.
                     * <p />
                     * The JDBC driver uses the calendar to create the date using a particular
                     * timezone and locale. The default behavior of the driver is to use the Java
                     * virtual machine default settings.
                     *
                     * @param parameterName
                     *            the name of the desired parameter.
                     * @param cal
                     *            used for creating the returned {@code Date}.
                     * @return the {@code java.sql.Date} giving the parameter's value. {@code null}
                     *         is returned if the value is SQL {@code NULL}.
                     * @throws SQLException
                     *             if a database error occurs.
                     * @see Date</member>
        <member name="M:biz.ritter.javapi.sql.CallableStatement.getDouble(System.Int32)">
                     * Gets the value of the specified JDBC {@code DOUBLE} parameter as a
                     * {@code double}.
                     *
                     * @param parameterIndex
                     *            the parameter number index, where the first parameter has
                     *            index 1.
                     * @return the parameter's value as a {@code double}. {@code 0.0}
                     *         is returned if the value is SQL {@code NULL}.
                     * @throws SQLException
                     *             if a database error occurs.</member>
        <member name="M:biz.ritter.javapi.sql.CallableStatement.getDouble(System.String)">
                     * Gets the value of the specified JDBC {@code DOUBLE} parameter as a
                     * {@code double}.
                     *
                     * @param parameterName
                     *            the name of the desired parameter.
                     * @return the parameter's value as a {@code double}. {@code 0.0}
                     *         is returned if the value is SQL {@code NULL}.
                     * @throws SQLException
                     *             if there is a problem accessing the database.</member>
        <member name="M:biz.ritter.javapi.sql.CallableStatement.getFloat(System.Int32)">
                     * Gets the value of the specified JDBC {@code FLOAT} parameter as a {@code
                     * float}.
                     *
                     * @param parameterIndex
                     *            the parameter number index, where the first parameter has
                     *            index 1.
                     * @return the parameter's value as a {@code float}. {@code 0.0}
                     *         is returned if the value is SQL {@code NULL}.
                     * @throws SQLException
                     *             if a database error occurs.</member>
        <member name="M:biz.ritter.javapi.sql.CallableStatement.getFloat(System.String)">
                     * Gets the value of the specified JDBC {@code FLOAT} parameter as a Java
                     * {@code float}.
                     *
                     * @param parameterName
                     *            the name of the desired parameter.
                     * @return the parameter's value as a {@code float}. {@code 0.0}
                     *         is returned if the value is SQL {@code NULL}.
                     * @throws SQLException
                     *             if there is a problem accessing the database.</member>
        <member name="M:biz.ritter.javapi.sql.CallableStatement.getInt(System.Int32)">
                     * Gets the value of the specified JDBC {@code INTEGER} parameter as an
                     * {@code int}.
                     *
                     * @param parameterIndex
                     *            the parameter number index, where the first parameter has
                     *            index 1.
                     * @return the {@code int} giving the parameter's value. {@code 0}
                     *         is returned if the value is SQL {@code NULL}.
                     * @throws SQLException
                     *             if a database error occurs.</member>
        <member name="M:biz.ritter.javapi.sql.CallableStatement.getInt(System.String)">
                     * Gets the value of the specified JDBC {@code INTEGER} parameter as an
                     * {@code int}.
                     *
                     * @param parameterName
                     *            the name of the desired parameter.
                     * @return the {@code int} giving the parameter's value. {@code 0}
                     *         is returned if the value is SQL {@code NULL}.
                     * @throws SQLException
                     *             if a database error occurs.</member>
        <member name="M:biz.ritter.javapi.sql.CallableStatement.getLong(System.Int32)">
                     * Gets the value of the specified JDBC {@code BIGINT} parameter as a
                     * {@code long}.
                     *
                     * @param parameterIndex
                     *            the parameter number index, where the first parameter has
                     *            index 1.
                     * @return the {@code long} giving the parameter's value. {@code 0}
                     *         is returned if the value is SQL {@code NULL}.
                     * @throws SQLException
                     *             if a database error occurs.</member>
        <member name="M:biz.ritter.javapi.sql.CallableStatement.getLong(System.String)">
                     * Gets the value of the specified JDBC {@code BIGINT} parameter as a
                     * {@code long}.
                     *
                     * @param parameterName
                     *            the name of the desired parameter.
                     * @return the {@code long} giving the parameter's value. {@code 0}
                     *         is returned if the value is SQL {@code NULL}.
                     * @throws SQLException
                     *             if a database error occurs.</member>
        <member name="M:biz.ritter.javapi.sql.CallableStatement.getObject(System.Int32)">
                     * Gets the value of the specified parameter as a Java {@code Object}.
                     * <p />
                     * The object type returned is the JDBC type registered for the parameter
                     * with a {@code registerOutParameter} call. If a parameter was registered
                     * as a {@code java.sql.Types.OTHER} then it may hold abstract types that
                     * are particular to the connected database.
                     *
                     * @param parameterIndex
                     *            the parameter number index, where the first parameter has
                     *            index 1.
                     * @return an Object holding the value of the parameter.
                     * @throws SQLException
                     *             if a database error occurs.</member>
        <member name="M:biz.ritter.javapi.sql.CallableStatement.getObject(System.Int32,biz.ritter.javapi.util.Map{System.String,biz.ritter.javapi.lang.Class})">
                     * Gets the value of the specified parameter as an {@code Object}. The
                     * {@code Map} gives the correspondence between SQL types and Java classes.
                     *
                     * @param parameterIndex
                     *            the parameter number index, where the first parameter has
                     *            index 1.
                     * @param map
                     *            the {@code Map} giving the correspondence between SQL
                     *            types and Java classes.
                     * @return an Object holding the value of the parameter.
                     * @throws SQLException
                     *             if a database error occurs.</member>
        <member name="M:biz.ritter.javapi.sql.CallableStatement.getObject(System.String)">
                     * Gets the value of the specified parameter as an {@code Object}.
                     * <p />
                     * The object type returned is the JDBC type that was registered for
                     * the parameter by an earlier call to {@link #registerOutParameter}.
                     * If a parameter was registered as a {@code java.sql.Types.OTHER}
                     * then it may hold abstract types that are particular to the
                     * connected database.
                     *
                     * @param parameterName
                     *            the parameter name.
                     * @return the Java {@code Object} representation of the value of the
                     *         parameter.
                     * @throws SQLException
                     *             if there is a problem accessing the database.</member>
        <member name="M:biz.ritter.javapi.sql.CallableStatement.getObject(System.String,biz.ritter.javapi.util.Map{System.String,biz.ritter.javapi.lang.Class})">
                     * Gets the value of a specified parameter as an {@code Object}. The
                     * actual return type is determined by the {@code Map} parameter which
                     * gives the correspondence between SQL types and Java classes.
                     *
                     * @param parameterName
                     *            the parameter name.
                     * @param map
                     *            the {@code Map} of SQL types to their Java counterparts
                     * @return an {@code Object} holding the value of the parameter.
                     * @throws SQLException
                     *             if there is a problem accessing the database.</member>
        <member name="M:biz.ritter.javapi.sql.CallableStatement.getRef(System.Int32)">
                     * Gets the value of a specified SQL {@code REF(&lt;structured type&gt;)}
                     * parameter as a {@code java.sql.Ref}.
                     *
                     * @param parameterIndex
                     *            the parameter number index, where the first parameter has
                     *            index 1.
                     * @return a {@code java.sql.Ref} with the parameter value. {@code null}
                     *         is returned if the value is SQL {@code NULL}.
                     * @throws SQLException
                     *             if a database error occurs.</member>
        <member name="M:biz.ritter.javapi.sql.CallableStatement.getRef(System.String)">
                     * Gets the value of a specified SQL {@code REF(&lt;structured type&gt;)}
                     * parameter as a {@code java.sql.Ref}.
                     *
                     * @param parameterName
                     *            the desired parameter's name.
                     * @return the parameter's value in the form of a {@code
                     *         java.sql.Ref}. A {@code null} reference is returned if the
                     *         parameter's value is SQL {@code NULL}.
                     * @throws SQLException
                     *             if there is a problem accessing the database.
                     * @see Ref</member>
        <member name="M:biz.ritter.javapi.sql.CallableStatement.getShort(System.Int32)">
                     * Gets the value of a specified JDBC {@code SMALLINT} parameter as a
                     * {@code short}.
                     *
                     * @param parameterIndex
                     *            the parameter number index, where the first parameter has
                     *            index 1.
                     * @return the parameter's value as a {@code short}. 0 is returned
                     *         if the parameter's value is SQL {@code NULL}.
                     * @throws SQLException
                     *             if a database error occurs.</member>
        <member name="M:biz.ritter.javapi.sql.CallableStatement.getShort(System.String)">
                     * Gets the value of a specified JDBC {@code SMALLINT} parameter as a
                     * {@code short}.
                     *
                     * @param parameterName
                     *            the desired parameter's name.
                     * @return the parameter's value as a {@code short}. 0 is returned
                     *         if the parameter's value is SQL {@code NULL}.
                     * @throws SQLException
                     *             if there is a problem accessing the database.</member>
        <member name="M:biz.ritter.javapi.sql.CallableStatement.getString(System.Int32)">
                     * Returns the indexed parameter's value as a {@code String}. The
                     * parameter value must be one of the JDBC types {@code CHAR},
                     * {@code VARCHAR} or {@code LONGVARCHAR}.
                     * <p />
                     * The {@code String} corresponding to a {@code CHAR} of fixed length
                     * will be of identical length to the value in the database inclusive
                     * of padding characters.
                     *
                     * @param parameterIndex
                     *            the parameter number index, where the first parameter has
                     *            index 1.
                     * @return the parameter's value as a {@code String}. {@code null}
                     *         is returned if the value is SQL {@code NULL}.
                     * @throws SQLException
                     *             if there is a problem accessing the database.</member>
        <member name="M:biz.ritter.javapi.sql.CallableStatement.getString(System.String)">
                     * Returns the named parameter's value as a string. The parameter value must
                     * be one of the JDBC types {@code CHAR}, {@code VARCHAR} or {@code
                     * LONGVARCHAR}.
                     * <p />
                     * The string corresponding to a {@code CHAR} of fixed length will be of
                     * identical length to the value in the database inclusive of padding
                     * characters.
                     *
                     * @param parameterName
                     *            the desired parameter's name.
                     * @return the parameter's value as a {@code String}. {@code null}
                     *         is returned if the value is SQL {@code NULL}.
                     * @throws SQLException
                     *             if there is a problem accessing the database.</member>
        <member name="M:biz.ritter.javapi.sql.CallableStatement.getTime(System.Int32)">
                     * Gets the value of a specified JDBC {@code TIME} parameter as a {@code
                     * java.sql.Time}.
                     *
                     * @param parameterIndex
                     *            the parameter number index, where the first parameter has
                     *            index 1.
                     * @return the parameter's value as a {@code java.sql.Time}.
                     *         {@code null} is returned if the value is SQL {@code NULL}.
                     * @throws SQLException
                     *             if a database error occurs.
                     * @see Time</member>
        <member name="M:biz.ritter.javapi.sql.CallableStatement.getTime(System.Int32,biz.ritter.javapi.util.Calendar)">
                     * Gets the value of a specified JDBC {@code TIME} parameter as a {@code
                     * java.sql.Time}, using the supplied {@code Calendar} to construct the
                     * time. The JDBC driver uses the calendar to handle specific timezones
                     * and locales in order to determine {@code Time}.
                     *
                     * @param parameterIndex
                     *            the parameter number index, where the first parameter has
                     *            index 1.
                     * @param cal
                     *            the calendar to use in constructing {@code Time}.
                     * @return the parameter's value as a {@code java.sql.Time}.
                     *         {@code null} is returned if the value is SQL {@code NULL}.
                     * @throws SQLException
                     *             if a database error occurs.
                     * @see Time
                     * @see java.util.Calendar</member>
        <member name="M:biz.ritter.javapi.sql.CallableStatement.getTime(System.String)">
                     * Gets the value of a specified JDBC {@code TIME} parameter as a {@code
                     * java.sql.Time}.
                     *
                     * @param parameterName
                     *            the name of the desired parameter.
                     * @return a new {@code java.sql.Time} with the parameter's value. A {@code
                     *         null} reference is returned for an SQL value of {@code NULL}.
                     * @throws SQLException
                     *             if a database error occurs.
                     * @see Time</member>
        <member name="M:biz.ritter.javapi.sql.CallableStatement.getTime(System.String,biz.ritter.javapi.util.Calendar)">
                     * Gets the value of a specified JDBC {@code TIME} parameter as a {@code
                     * java.sql.Time}, using the supplied {@code Calendar} to construct
                     * the time. The JDBC driver uses the calendar to handle specific
                     * timezones and locales when creating {@code Time}.
                     *
                     * @param parameterName
                     *            the name of the desired parameter.
                     * @param cal
                     *            used for creating the returned {@code Time}
                     * @return a new {@code java.sql.Time} with the parameter's value. A {@code
                     *         null} reference is returned for an SQL value of {@code NULL}.
                     * @throws SQLException
                     *             if a database error occurs.
                     * @see Time
                     * @see java.util.Calendar</member>
        <member name="M:biz.ritter.javapi.sql.CallableStatement.getTimestamp(System.Int32)">
                     * Returns the indexed parameter's {@code TIMESTAMP} value as a {@code
                     * java.sql.Timestamp}.
                     *
                     * @param parameterIndex
                     *            the parameter number index, where the first parameter has
                     *            index 1
                     * @return the parameter's value as a {@code java.sql.Timestamp}. A
                     *         {@code null} reference is returned for an SQL value of {@code
                     *         NULL}.
                     * @throws SQLException
                     *             if a database error occurs.
                     * @see Timestamp</member>
        <member name="M:biz.ritter.javapi.sql.CallableStatement.getTimestamp(System.Int32,biz.ritter.javapi.util.Calendar)">
                     * Returns the indexed parameter's {@code TIMESTAMP} value as a {@code
                     * java.sql.Timestamp}. The JDBC driver uses the supplied {@code Calendar}
                     * to handle specific timezones and locales when creating the result.
                     *
                     * @param parameterIndex
                     *            the parameter number index, where the first parameter has
                     *            index 1
                     * @param cal
                     *            used for creating the returned {@code Timestamp}
                     * @return the parameter's value as a {@code java.sql.Timestamp}. A
                     *         {@code null} reference is returned for an SQL value of {@code
                     *         NULL}.
                     * @throws SQLException
                     *             if a database error occurs.
                     * @see Timestamp</member>
        <member name="M:biz.ritter.javapi.sql.CallableStatement.getTimestamp(System.String)">
                     * Returns the named parameter's {@code TIMESTAMP} value as a {@code
                     * java.sql.Timestamp}.
                     *
                     * @param parameterName
                     *            the name of the desired parameter.
                     * @return the parameter's value as a {@code java.sql.Timestamp}. A
                     *         {@code null} reference is returned for an SQL value of {@code
                     *         NULL}.
                     * @throws SQLException
                     *             if a database error occurs.
                     * @see Timestamp</member>
        <member name="M:biz.ritter.javapi.sql.CallableStatement.getTimestamp(System.String,biz.ritter.javapi.util.Calendar)">
                     * Returns the indexed parameter's {@code TIMESTAMP} value as a {@code
                     * java.sql.Timestamp}. The JDBC driver uses the supplied {@code Calendar}
                     * to handle specific timezones and locales when creating the result.
                     *
                     * @param parameterName
                     *            the name of the desired parameter.
                     * @param cal
                     *            used for creating the returned {@code Timestamp}
                     * @return the parameter's value as a {@code java.sql.Timestamp}. A
                     *         {@code null} reference is returned for an SQL value of {@code
                     *         NULL}.
                     * @throws SQLException
                     *             if a database error occurs.
                     * @see Timestamp</member>
        <member name="M:biz.ritter.javapi.sql.CallableStatement.getURL(System.Int32)">
                     * Gets the value of a specified JDBC {@code DATALINK} parameter as a
                     * {@code java.net.URL}.
                     *
                     * @param parameterIndex
                     *            the parameter number index, where the first parameter has
                     *            index 1.
                     * @return a {@code URL} giving the parameter's value. {@code null}
                     *         is returned if the value is SQL {@code NULL}.
                     * @throws SQLException
                     *             if a database error occurs.
                     * @see java.net.URL</member>
        <member name="M:biz.ritter.javapi.sql.CallableStatement.getURL(System.String)">
                     * Returns the named parameter's JDBC {@code DATALINK} value in a new Java
                     * {@code java.net.URL}.
                     *
                     * @param parameterName
                     *            the name of the desired parameter.
                     * @return a new {@code java.net.URL} encapsulating the parameter value. A
                     *         {@code null} reference is returned for an SQL value of {@code
                     *         NULL}.
                     * @throws SQLException
                     *             if a database error occurs.
                     * @see java.net.URL</member>
        <member name="M:biz.ritter.javapi.sql.CallableStatement.registerOutParameter(System.Int32,System.Int32)">
                     * Defines the type of a specified {@code OUT} parameter. All {@code OUT}
                     * parameters must have their type defined before a stored procedure is
                     * executed.
                     * <p />
                     * The type supplied in the {@code sqlType} parameter fixes the
                     * type that will be returned by the getter methods of
                     * {@code CallableStatement}.
                     * If a database specific type is expected for a parameter, the Type {@code
                     * java.sql.Types.OTHER} should be used. Note that there is another variant
                     * of this method for User Defined Types or a {@code REF} type.
                     *
                     * @param parameterIndex
                     *            the parameter number index, where the first parameter has
                     *            index 1
                     * @param sqlType
                     *            the JDBC type as defined by {@code java.sql.Types}. The JDBC
                     *            types {@code NUMERIC} and {@code DECIMAL} should be defined
                     *            using {@link #registerOutParameter(int, int, int)}.
                     * @throws SQLException
                     *             if a database error occurs.
                     * @see Types</member>
        <member name="M:biz.ritter.javapi.sql.CallableStatement.registerOutParameter(System.Int32,System.Int32,System.Int32)">
                     * Defines the Type of a specified {@code OUT} parameter. All {@code OUT}
                     * parameters must have their type defined before a stored procedure is
                     * executed. This version of the {@code registerOutParameter} method, which
                     * has a scale parameter, should be used for the JDBC types {@code NUMERIC}
                     * and {@code DECIMAL}, where there is a need to specify the number of
                     * digits expected after the decimal point.
                     * <p />
                     * The type supplied in the {@code sqlType} parameter fixes the
                     * type that will be returned by the getter methods of
                     * {@code CallableStatement}.
                     *
                     * @param parameterIndex
                     *            the parameter number index, where the first parameter has
                     *            index 1
                     * @param sqlType
                     *            the JDBC type as defined by {@code java.sql.Types}.
                     * @param scale
                     *            the number of digits after the decimal point. Must be greater
                     *            than or equal to 0.
                     * @throws SQLException
                     *             if a database error occurs.
                     * @see Types</member>
        <member name="M:biz.ritter.javapi.sql.CallableStatement.registerOutParameter(System.Int32,System.Int32,System.String)">
                     * Defines the Type of a specified {@code OUT} parameter. This variant
                     * of the method is designed for use with parameters that are
                     * <i>User Defined Types</i> (UDT) or a {@code REF} type, although it
                     * can be used for any type.
                     *
                     * @param paramIndex
                     *            the parameter number index, where the first parameter has
                     *            index 1.
                     * @param sqlType
                     *            a JDBC type expressed as a constant from {@link Types}.
                     * @param typeName
                     *            an SQL type name. For a {@code REF} type, this name should be
                     *            the fully qualified name of the referenced type.
                     * @throws SQLException
                     *             if a database error occurs.
                     * @see Ref</member>
        <member name="M:biz.ritter.javapi.sql.CallableStatement.registerOutParameter(System.String,System.Int32)">
                     * Defines the Type of a specified {@code OUT} parameter. All OUT parameters
                     * must have their Type defined before a stored procedure is executed.
                     * <p />
                     * The type supplied in the {@code sqlType} parameter fixes the
                     * type that will be returned by the getter methods of
                     * {@code CallableStatement}.
                     * If a database-specific type is expected for a parameter, the Type {@code
                     * java.sql.Types.OTHER} should be used. Note that there is another variant
                     * of this method for User Defined Types or a {@code REF} type.
                     *
                     * @param parameterName
                     *            the parameter name.
                     * @param sqlType
                     *            a JDBC type expressed as a constant from {@link Types}. Types
                     *            {@code NUMERIC} and {@code DECIMAL} should be defined using
                     *            the variant of this method that takes a {@code scale}
                     *            parameter.
                     * @throws SQLException
                     *             if a database error occurs.</member>
        <member name="M:biz.ritter.javapi.sql.CallableStatement.registerOutParameter(System.String,System.Int32,System.Int32)">
                     * Defines the Type of a specified {@code OUT} parameter. All {@code OUT}
                     * parameters must have their Type defined before a stored procedure is
                     * executed. This version of the {@code registerOutParameter} method, which
                     * has a scale parameter, should be used for the JDBC types {@code NUMERIC}
                     * and {@code DECIMAL}, where there is a need to specify the number of
                     * digits expected after the decimal point.
                     * <p />
                     * The type supplied in the {@code sqlType} parameter fixes the
                     * type that will be returned by the getter methods of
                     * {@code CallableStatement}.
                     *
                     * @param parameterName
                     *            the parameter name.
                     * @param sqlType
                     *            a JDBC type expressed as a constant from {@link Types}.
                     * @param scale
                     *            the number of digits after the decimal point. Must be greater
                     *            than or equal to 0.
                     * @throws SQLException
                     *             if a database error occurs.</member>
        <member name="M:biz.ritter.javapi.sql.CallableStatement.registerOutParameter(System.String,System.Int32,System.String)">
                     * Defines the Type of a specified {@code OUT} parameter. This variant of
                     * the method is designed for use with parameters that are <i>User Defined
                     * Types</i> (UDT) or a {@code REF} type, although it can be used for any
                     * type.
                     *
                     * @param parameterName
                     *            the parameter name
                     * @param sqlType
                     *            a JDBC type expressed as a constant from {@link Types}
                     * @param typeName
                     *            the fully qualified name of an SQL structured type. For a
                     *            {@code REF} type, this name should be the fully qualified name
                     *            of the referenced type.
                     * @throws SQLException
                     *             if a database error occurs.</member>
        <member name="M:biz.ritter.javapi.sql.CallableStatement.setAsciiStream(System.String,biz.ritter.javapi.io.InputStream,System.Int32)">
                     * Sets the value of a specified parameter to the content of a supplied
                     * {@code InputStream}, which has a specified number of bytes.
                     * <p />
                     * This is a good method for setting an SQL {@code LONGVARCHAR} parameter
                     * where the length of the data is large. Data is read from the {@code
                     * InputStream} until end-of-file is reached or the specified number of
                     * bytes is copied.
                     *
                     * @param parameterName
                     *            the parameter name
                     * @param theInputStream
                     *            the ASCII input stream carrying the data to update the
                     *            parameter with.
                     * @param length
                     *            the number of bytes in the {@code InputStream} to copy to the
                     *            parameter.
                     * @throws SQLException
                     *             if a database error occurs.</member>
        <member name="M:biz.ritter.javapi.sql.CallableStatement.setBigDecimal(System.String,biz.ritter.javapi.math.BigDecimal)">
                     * Sets the value of a specified parameter to a supplied {@code
                     * java.math.BigDecimal} value.
                     *
                     * @param parameterName
                     *            the name of the parameter.
                     * @param theBigDecimal
                     *            the {@code java.math.BigInteger} value to set.
                     * @throws SQLException
                     *             if a database error occurs.</member>
        <member name="M:biz.ritter.javapi.sql.CallableStatement.setBinaryStream(System.String,biz.ritter.javapi.io.InputStream,System.Int32)">
                     * Sets the value of a specified parameter to the content of a supplied
                     * binary {@code InputStream}, which has a specified number of bytes.
                     * <p />
                     * Use this method when a large amount of data needs to be set into a
                     * {@code LONGVARBINARY} parameter.
                     *
                     * @param parameterName
                     *            the name of the parameter.
                     * @param theInputStream
                     *            the binary {@code InputStream} carrying the data to update the
                     *            parameter.
                     * @param length
                     *            the number of bytes in the {@code InputStream} to copy to the
                     *            parameter.
                     * @throws SQLException
                     *             if a database error occurs.</member>
        <member name="M:biz.ritter.javapi.sql.CallableStatement.setBoolean(System.String,System.Boolean)">
                     * Sets the value of a specified parameter to a supplied {@code boolean}
                     * value.
                     *
                     * @param parameterName
                     *            the parameter name.
                     * @param theBoolean
                     *            the new value with which to update the parameter.
                     * @throws SQLException
                     *             if a database error occurs.</member>
        <member name="M:biz.ritter.javapi.sql.CallableStatement.setByte(System.String,System.Byte)">
                     * Sets the value of a specified parameter to a supplied {@code byte} value.
                     *
                     * @param parameterName
                     *            the parameter name.
                     * @param theByte
                     *            the new value with which to update the parameter.
                     * @throws SQLException
                     *             if a database error occurs.</member>
        <member name="M:biz.ritter.javapi.sql.CallableStatement.setBytes(System.String,System.Byte[])">
                     * Sets the value of a specified parameter to a supplied array of bytes. The
                     * array is mapped to {@code VARBINARY} or else {@code LONGVARBINARY} in the
                     * connected database.
                     *
                     * @param parameterName
                     *            the parameter name.
                     * @param theBytes
                     *            the new value with which to update the parameter.
                     * @throws SQLException
                     *             if a database error occurs.</member>
        <member name="M:biz.ritter.javapi.sql.CallableStatement.setCharacterStream(System.String,biz.ritter.javapi.io.Reader,System.Int32)">
                     * Sets the value of a specified parameter to the character content of a
                     * {@code Reader} object, with the specified length of character data.
                     *
                     * @param parameterName
                     *            the parameter name.
                     * @param reader
                     *            the new value with which to update the parameter.
                     * @param length
                     *            a count of the characters contained in {@code reader}.
                     * @throws SQLException
                     *             if a database error occurs.</member>
        <member name="M:biz.ritter.javapi.sql.CallableStatement.setDate(System.String,biz.ritter.javapi.sql.Date)">
                     * Sets the value of a specified parameter to a supplied {@code
                     * java.sql.Date} value.
                     *
                     * @param parameterName
                     *            the parameter name.
                     * @param theDate
                     *            the new value with which to update the parameter.
                     * @throws SQLException
                     *             if a database error occurs.</member>
        <member name="M:biz.ritter.javapi.sql.CallableStatement.setDate(System.String,biz.ritter.javapi.sql.Date,biz.ritter.javapi.util.Calendar)">
                     * Sets the value of a specified parameter to a supplied {@code
                     * java.sql.Date} value, using a supplied calendar to map the date. The
                     * calendar allows the application to control the timezone used to compute
                     * the SQL {@code DATE} in the database. In case that no calendar is
                     * supplied, the driver uses the default timezone of the Java virtual
                     * machine.
                     *
                     * @param parameterName
                     *            the parameter name.
                     * @param theDate
                     *            the new value with which to update the parameter.
                     * @param cal
                     *            a {@code Calendar} to use to construct the SQL {@code DATE}
                     *            value.
                     * @throws SQLException
                     *             if a database error occurs.
                     * @see java.util.Calendar
                     * @see Date</member>
        <member name="M:biz.ritter.javapi.sql.CallableStatement.setDouble(System.String,System.Double)">
                     * Sets the value of a specified parameter to a supplied {@code double}
                     * value.
                     *
                     * @param parameterName
                     *            the parameter name.
                     * @param theDouble
                     *            the new value with which to update the parameter.
                     * @throws SQLException
                     *             if a database error occurs.</member>
        <member name="M:biz.ritter.javapi.sql.CallableStatement.setFloat(System.String,System.Single)">
                     * Sets the value of a specified parameter to to a supplied {@code float}
                     * value.
                     *
                     * @param parameterName
                     *            the parameter name.
                     * @param theFloat
                     *            the new value with which to update the parameter.
                     * @throws SQLException
                     *             if a database error occurs.</member>
        <member name="M:biz.ritter.javapi.sql.CallableStatement.setInt(System.String,System.Int32)">
                     * Sets the value of a specified parameter to a supplied {@code int} value.
                     *
                     * @param parameterName
                     *            the parameter name.
                     * @param theInt
                     *            the new value with which to update the parameter.
                     * @throws SQLException
                     *             if a database error occurs.</member>
        <member name="M:biz.ritter.javapi.sql.CallableStatement.setLong(System.String,System.Int64)">
                     * Sets the value of a specified parameter to a supplied {@code long} value.
                     *
                     * @param parameterName
                     *            the parameter name.
                     * @param theLong
                     *            the new value with which to update the parameter.
                     * @throws SQLException
                     *             if a database error occurs.</member>
        <member name="M:biz.ritter.javapi.sql.CallableStatement.setNull(System.String,System.Int32)">
                     * Sets the value of a specified parameter to SQL {@code NULL}. Don't use
                     * this version of {@code setNull} for <i>User Defined Types</i> (UDT) or
                     * for {@code REF} type parameters.
                     *
                     * @param parameterName
                     *            the parameter name.
                     * @param sqlType
                     *            a JDBC type expressed as a constant from {@link Types}.
                     * @throws SQLException
                     *             if a database error occurs.</member>
        <member name="M:biz.ritter.javapi.sql.CallableStatement.setNull(System.String,System.Int32,System.String)">
                     * Sets the value of a specified parameter to be SQL {@code NULL} where the
                     * parameter type is either {@code REF} or user defined (e.g. {@code STRUCT}
                     * , {@code JAVA_OBJECT} etc).
                     * <p />
                     * For reasons of portability, the caller is expected to supply both the SQL
                     * type code and type name (which is just the parameter name if the type is
                     * user defined, referred to as a {@code UDT}, or the name of the referenced
                     * type in case of a {@code REF} type).
                     *
                     * @param parameterName
                     *            the parameter name.
                     * @param sqlType
                     *            a JDBC type expressed as a constant from {@link Types}.
                     * @param typeName
                     *            if the target parameter is a user defined type then this
                     *            should contain the full type name. The fully qualified name of
                     *            a {@code UDT} or {@code REF} type is ignored if the parameter
                     *            is not a {@code UDT}.
                     * @throws SQLException
                     *             if a database error occurs.
                     * @see Types</member>
        <member name="M:biz.ritter.javapi.sql.CallableStatement.setObject(System.String,System.Object)">
                     * Sets the value of a specified parameter using a supplied object. Prior to
                     * issuing this request to the connected database {@code theObject} is
                     * transformed to the corresponding SQL type according to the standard Java
                     * to SQL mapping rules.
                     * <p />
                     * If the object's class implements the interface {@code SQLData}, the JDBC
                     * driver calls {@code SQLData.writeSQL} to write it to the SQL data stream.
                     * If {@code theObject} implements any of the following interfaces then the
                     * driver is in charge of mapping the value to the appropriate SQL type.
                     * <ul><li>{@link Ref}</li>
                     * <li>{@link Struct}</li>
                     * <li>{@link Array}</li>
                     * <li>{@link Clob}</li>
                     * <li>{@link Blob}</li></ul>
                     *
                     * @param parameterName
                     *            the parameter name
                     * @param theObject
                     *            the new value with which to update the parameter
                     * @throws SQLException
                     *             if a database error occurs.
                     * @see SQLData</member>
        <member name="M:biz.ritter.javapi.sql.CallableStatement.setObject(System.String,System.Object,System.Int32)">
                     * Sets the value of a specified parameter using a supplied object.
                     * <p />
                     * The parameter {@code theObject} is converted to the given {@code
                     * targetSqlType} before it is sent to the database. If the object has a
                     * custom mapping (its class implements the interface {@code SQLData}), the
                     * JDBC driver calls the method {@code SQLData.writeSQL} to write it to the
                     * SQL data stream. If {@code theObject} is an instance of one of the
                     * following types
                     * <ul>
                     * <li>{@link Ref}</li>
                     * <li>{@link Struct}</li>
                     * <li>{@link Array}</li>
                     * <li>{@link Clob}</li>
                     * <li>{@link Blob}</li>
                     * </ul>
                     * then the driver is in charge of mapping the value to the appropriate
                     * SQL type and deliver it to the database.
                     *
                     * @param parameterName
                     *            the parameter name.
                     * @param theObject
                     *            the new value with which to update the parameter.
                     * @param targetSqlType
                     *            a JDBC type expressed as a constant from {@link Types}.
                     * @throws SQLException
                     *             if a database error occurs.
                     * @see SQLData</member>
        <member name="M:biz.ritter.javapi.sql.CallableStatement.setObject(System.String,System.Object,System.Int32,System.Int32)">
                     * Sets the value of a specified parameter using a supplied object.
                     * <p />
                     * The object is converted to the given {@code targetSqlType} before it is
                     * sent to the database. If the object has a custom mapping (its class
                     * implements the interface {@code SQLData}), the JDBC driver calls the
                     * method {@code SQLData.writeSQL} to write it to the SQL data stream. If
                     * {@code theObject} implements any of the following interfaces
                     * <ul>
                     * <li>{@link Ref}</li>
                     * <li>{@link Struct}</li>
                     * <li>{@link Array}</li>
                     * <li>{@link Clob}</li>
                     * <li>{@link Blob}</li>
                     * </ul>
                     * then the driver is charge of mapping the value to the appropriate
                     * SQL type.
                     *
                     * @param parameterName
                     *            the parameter name.
                     * @param theObject
                     *            the new value with which to update the parameter.
                     * @param targetSqlType
                     *            a JDBC type expressed as a constant from {@link Types}.
                     * @param scale
                     *            where applicable, the number of digits after the decimal.
                     *            point.
                     * @throws SQLException
                     *             if a database error occurs.
                     * @see SQLData</member>
        <member name="M:biz.ritter.javapi.sql.CallableStatement.setShort(System.String,System.Int16)">
                     * Sets the value of a specified parameter to a supplied {@code short}
                     * value.
                     *
                     * @param parameterName
                     *            the name of the parameter.
                     * @param theShort
                     *            a short value to update the parameter.
                     * @throws SQLException
                     *             if a database error occurs.</member>
        <member name="M:biz.ritter.javapi.sql.CallableStatement.setString(System.String,System.String)">
                     * Sets the value of a specified parameter to a supplied {@code String}.
                     *
                     * @param parameterName
                     *            the name of the parameter.
                     * @param theString
                     *            a {@code String} value to update the parameter.
                     * @throws SQLException
                     *             if a database error occurs.</member>
        <member name="M:biz.ritter.javapi.sql.CallableStatement.setTime(System.String,biz.ritter.javapi.sql.Time)">
                     * Sets the value of the parameter named {@code parameterName} to the value
                     * of the supplied {@code java.sql.Time}.
                     *
                     * @param parameterName
                     *            the parameter name.
                     * @param theTime
                     *            the new value with which to update the parameter.
                     * @throws SQLException
                     *             if a database error occurs.
                     * @see Time</member>
        <member name="M:biz.ritter.javapi.sql.CallableStatement.setTime(System.String,biz.ritter.javapi.sql.Time,biz.ritter.javapi.util.Calendar)">
                     * Sets the value of the parameter named {@code parameterName} to the value
                     * of the supplied {@code java.sql.Time} using the supplied calendar.
                     * <p />
                     * The driver uses the supplied {@code Calendar} to create the SQL
                     * {@code TIME} value, which allows it to use a custom timezone -
                     * otherwise the driver uses the default timezone of the Java
                     * virtual machine.
                     *
                     * @param parameterName
                     *            the parameter name.
                     * @param theTime
                     *            the new value with which to update the parameter.
                     * @param cal
                     *            used for creating the new SQL {@code TIME} value.
                     * @throws SQLException
                     *             if a database error occurs.
                     * @see Time</member>
        <member name="M:biz.ritter.javapi.sql.CallableStatement.setTimestamp(System.String,biz.ritter.javapi.sql.Timestamp)">
                     * Sets the value of a specified parameter to a supplied {@code
                     * java.sql.Timestamp} value.
                     *
                     * @param parameterName
                     *            the parameter name.
                     * @param theTimestamp
                     *            the new value with which to update the parameter.
                     * @throws SQLException
                     *             if a database error occurs.
                     * @see Timestamp</member>
        <member name="M:biz.ritter.javapi.sql.CallableStatement.setTimestamp(System.String,biz.ritter.javapi.sql.Timestamp,biz.ritter.javapi.util.Calendar)">
                     * Sets the value of a specified parameter to a supplied {@code
                     * java.sql.Timestamp} value, using the supplied calendar.
                     * <p />
                     * The driver uses the supplied calendar to create the SQL {@code TIMESTAMP}
                     * value, which allows it to use a custom timezone - otherwise the driver
                     * uses the default timezone of the Java virtual machine.
                     *
                     * @param parameterName
                     *            the parameter name.
                     * @param theTimestamp
                     *            the new value with which to update the parameter.
                     * @param cal
                     *            used for creating the new SQL {@code TIME} value.
                     * @throws SQLException
                     *             if a database error occurs.
                     * @see Timestamp
                     * @see java.util.Calendar</member>
        <member name="M:biz.ritter.javapi.sql.CallableStatement.setURL(System.String,biz.ritter.javapi.net.URL)">
                     * Sets the value of a specified parameter to the supplied {@code
                     * java.net.URL}.
                     *
                     * @param parameterName
                     *            the parameter name.
                     * @param theURL
                     *            the new value with which to update the parameter.
                     * @throws SQLException
                     *             if a database error occurs.
                     * @see java.net.URL</member>
        <member name="M:biz.ritter.javapi.sql.CallableStatement.wasNull">
                     * Gets whether the value of the last {@code OUT} parameter read was SQL
                     * {@code NULL}.
                     *
                     * @return true if the last parameter was SQL {@code NULL}, {@code false}
                     *         otherwise.
                     * @throws SQLException
                     *             if a database error occurs.</member>
        <member name="T:biz.ritter.javapi.sql.ClientInfoStatus">
                 * An enumeration to describe the reason why a property cannot be set by calling
                 * Connection.setClientInfo.
                 *
                 * @since 1.6</member>
        <member name="T:biz.ritter.javapi.sql.Clob">
                 * A Java interface mapping for the SQL CLOB type.
                 * <p />
                 * An SQL {@code CLOB} type stores a large array of characters as the value in a
                 * column of a database.
                 * <p />
                 * The {@code java.sql.Clob} interface provides methods for setting and
                 * retrieving data in the {@code Clob}, for querying {@code Clob} data length,
                 * for searching for data within the {@code Clob}.</member>
        <member name="M:biz.ritter.javapi.sql.Clob.getAsciiStream">
                     * Gets the value of this {@code Clob} object as an ASCII stream.
                     *
                     * @return an ASCII {@code InputStream} giving access to the
                     *            {@code Clob} data.
                     * @throws SQLException
                     *             if an error occurs accessing the {@code Clob}.</member>
        <member name="M:biz.ritter.javapi.sql.Clob.getCharacterStream">
                     * Gets the data of this {@code Clob} object in a {@code java.io.Reader}.
                     *
                     * @return a character stream Reader object giving access to the {@code
                     *         Clob} data.
                     * @throws SQLException
                     *             if an error occurs accessing the {@code Clob}.</member>
        <member name="M:biz.ritter.javapi.sql.Clob.getSubString(System.Int64,System.Int32)">
                     * Gets a copy of a specified substring in this {@code Clob}.
                     *
                     * @param pos
                     *            the index of the start of the substring in the {@code Clob}.
                     * @param length
                     *            the length of the data to retrieve.
                     * @return A string containing the requested data.
                     * @throws SQLException
                     *             if an error occurs accessing the {@code Clob}.</member>
        <member name="M:biz.ritter.javapi.sql.Clob.length">
                     * Retrieves the number of characters in this {@code Clob} object.
                     *
                     * @return a long value with the number of character in this {@code Clob}.
                     * @throws SQLException
                     *             if an error occurs accessing the {@code Clob}.</member>
        <member name="M:biz.ritter.javapi.sql.Clob.position(biz.ritter.javapi.sql.Clob,System.Int64)">
                     * Retrieves the character position at which a specified {@code Clob} object
                     * appears in this {@code Clob} object.
                     *
                     * @param searchstr
                     *            the specified {@code Clob} to search for.
                     * @param start
                     *            the position within this {@code Clob} to start the search
                     * @return a long value with the position at which the specified {@code
                     *         Clob} occurs within this {@code Clob}.
                     * @throws SQLException
                     *             if an error occurs accessing the {@code Clob}.</member>
        <member name="M:biz.ritter.javapi.sql.Clob.position(System.String,System.Int64)">
                     * Retrieves the character position at which a specified substring appears
                     * in this {@code Clob} object.
                     *
                     * @param searchstr
                     *            the string to search for.
                     * @param start
                     *            the position at which to start the search within this {@code
                     *            Clob}.
                     * @return a long value with the position at which the specified string
                     *         occurs within this {@code Clob}.
                     * @throws SQLException
                     *             if an error occurs accessing the {@code Clob}.</member>
        <member name="M:biz.ritter.javapi.sql.Clob.setAsciiStream(System.Int64)">
                     * Retrieves a stream which can be used to write Ascii characters to this
                     * {@code Clob} object, starting at specified position.
                     *
                     * @param pos
                     *            the position at which to start the writing.
                     * @return an OutputStream which can be used to write ASCII characters to
                     *         this {@code Clob}.
                     * @throws SQLException
                     *             if an error occurs accessing the {@code Clob}.</member>
        <member name="M:biz.ritter.javapi.sql.Clob.setCharacterStream(System.Int64)">
                     * Retrieves a stream which can be used to write a stream of unicode
                     * characters to this {@code Clob} object, at a specified position.
                     *
                     * @param pos
                     *            the position at which to start the writing.
                     * @return a Writer which can be used to write unicode characters to this
                     *         {@code Clob}.
                     * @throws SQLException
                     *             if an error occurs accessing the {@code Clob}.</member>
        <member name="M:biz.ritter.javapi.sql.Clob.setString(System.Int64,System.String)">
                     * Writes a given Java String to this {@code Clob} object at a specified
                     * position.
                     *
                     * @param pos
                     *            the position at which to start the writing.
                     * @param str
                     *            the string to write.
                     * @return the number of characters written.
                     * @throws SQLException
                     *             if an error occurs accessing the {@code Clob}.</member>
        <member name="M:biz.ritter.javapi.sql.Clob.setString(System.Int64,System.String,System.Int32,System.Int32)">
                     * Writes {@code len} characters of a string, starting at a specified
                     * character offset, to this {@code Clob}.
                     *
                     * @param pos
                     *            the position at which to start the writing.
                     * @param str
                     *            the String to write.
                     * @param offset
                     *            the offset within {@code str} to start writing from.
                     * @param len
                     *            the number of characters to write.
                     * @return the number of characters written.
                     * @throws SQLException
                     *             if an error occurs accessing the {@code Clob}.</member>
        <member name="M:biz.ritter.javapi.sql.Clob.truncate(System.Int64)">
                     * Truncates this {@code Clob} after the specified number of characters.
                     *
                     * @param len
                     *            the length in characters giving the place to
                     *            truncate this {@code Clob}.
                     * @throws SQLException
                     *             if an error occurs accessing the {@code Clob}.</member>
        <member name="M:biz.ritter.javapi.sql.Clob.free">
                     * TODO Javadoc
                     *
                     * @throws SQLException</member>
        <member name="T:biz.ritter.javapi.sql.Connection">
             * A connection represents a link from a Java application to a database. All SQL
             * statements and results are returned within the context of a connection.
             * Database statements that are executed within this context form a
             * database session which forms one or more closed transactions. Especially in
             * distributed applications, multiple concurrent connections may exist accessing
             * the same values of the database. which may lead to the following phenomena
             * (referred to as <i>transaction isolation levels</i>):
             * <ul>
             * <li><i>dirty reads</i>:<br>
             * reading values from table rows that are not committed.</br></li>
             * <li><i>non-repeatable reads</i>:<br>
             * reading table rows more than once in a transaction but getting back different
             * data because other transactions have altered the rows between the reads.</br></li>
             * <li><i>phantom reads</i>:<br>
             * retrieving additional "phantom" rows in the course of repeated table reads
             * because other transactions have inserted additional rows that satisfy an
             * SQL {@code WHERE} clause</br></li>
             * </ul></member>
        <member name="M:biz.ritter.javapi.sql.Connection.clearWarnings">
                 * Discards all warnings that may have arisen for this connection.
                 * Subsequent calls to {@link #getWarnings()} will return {@code null}
                 * up until a new warning condition occurs.
                 *
                 * @throws SQLException
                 *             if there is a problem accessing the database.</member>
        <member name="M:biz.ritter.javapi.sql.Connection.close">
                 * Causes the instant release of all database and driver connection
                 * resources associated with this object. Any subsequent invocations of this
                 * method have no effect.
                 * <p />
                 * It is strongly recommended that all connections are closed before they
                 * are dereferenced by the application ready for garbage collection.
                 * Although the {@code finalize} method of the connection closes the
                 * connection before garbage collection takes place, it is not advisable to
                 * leave the {@code close} operation to take place in this way. Mainly
                 * because undesired side-effects may appear.
                 *
                 * @throws SQLException
                 *             if there is a problem accessing the database.</member>
        <member name="M:biz.ritter.javapi.sql.Connection.commit">
                 * Commits all of the changes made since the last {@code commit} or
                 * {@code rollback} of the associated transaction. All locks in the database
                 * held by this connection are also relinquished. Calling this operation on
                 * connection objects in {@code auto-commit} mode leads to an error.
                 *
                 * @throws SQLException
                 *             if there is a problem accessing the database or if the target
                 *             connection instance is in auto-commit mode.</member>
        <member name="M:biz.ritter.javapi.sql.Connection.createStatement">
                 * Returns a new instance of {@code Statement} for issuing SQL commands to
                 * the remote database.
                 * <p />
                 * {@code ResultSets} generated by the returned statement will default to
                 * type {@code ResultSet.TYPE_FORWARD_ONLY} and concurrency level {@code
                 * ResultSet.CONCUR_READ_ONLY}.
                 *
                 * @return a {@code Statement} object with default settings.
                 * @throws SQLException
                 *             if there is a problem accessing the database.
                 * @see ResultSet</member>
        <member name="M:biz.ritter.javapi.sql.Connection.createStatement(System.Int32,System.Int32)">
                 * Returns a new instance of {@code Statement} whose associated {@code
                 * ResultSet}s have the characteristics specified in the type and
                 * concurrency arguments.
                 *
                 * @param resultSetType
                 *            one of the following type specifiers:
                 *            <ul>
                 *            <li>{@link ResultSet#TYPE_SCROLL_SENSITIVE} </li><li>
                 *            {@link ResultSet#TYPE_SCROLL_INSENSITIVE} </li><li>
                 *            {@link ResultSet#TYPE_FORWARD_ONLY}</li>
                 *            </ul>
                 * @param resultSetConcurrency
                 *            one of the following concurrency mode specifiers:
                 *            <ul>
                 *            <li>{@link ResultSet#CONCUR_UPDATABLE}</li><li>
                 *            {@link ResultSet#CONCUR_READ_ONLY}</li>
                 *            </ul>
                 * @return a new instance of {@code Statement} capable of manufacturing
                 *         {@code ResultSet}s that satisfy the specified {@code
                 *         resultSetType} and {@code resultSetConcurrency} values.
                 * @throws SQLException
                 *             if there is a problem accessing the database</member>
        <member name="M:biz.ritter.javapi.sql.Connection.createStatement(System.Int32,System.Int32,System.Int32)">
                 * Returns a new instance of {@code Statement} whose associated
                 * {@code ResultSet}s will have the characteristics specified in the
                 * type, concurrency and holdability arguments.
                 *
                 * @param resultSetType
                 *            one of the following type specifiers:
                 *            <ul>
                 *            <li>{@link ResultSet#TYPE_SCROLL_SENSITIVE}</li>
                 *            <li>{@link ResultSet#TYPE_SCROLL_INSENSITIVE}</li>
                 *            <li>{@link ResultSet#TYPE_FORWARD_ONLY}</li>
                 *            </ul>
                 * @param resultSetConcurrency
                 *            one of the following concurrency mode specifiers:
                 *            <ul>
                 *            <li>{@link ResultSet#CONCUR_UPDATABLE}</li>
                 *            <li>{@link ResultSet#CONCUR_READ_ONLY}</li>
                 *            </ul>
                 * @param resultSetHoldability
                 *            one of the following holdability mode specifiers:
                 *            <ul>
                 *            <li>{@link ResultSet#HOLD_CURSORS_OVER_COMMIT}</li>
                 *            <li>{@link ResultSet#CLOSE_CURSORS_AT_COMMIT}</li>
                 *            </ul>
                 * @return a new instance of {@code Statement} capable of
                 *         manufacturing {@code ResultSet}s that satisfy the
                 *         specified {@code resultSetType},
                 *         {@code resultSetConcurrency} and
                 *         {@code resultSetHoldability} values.
                 * @throws SQLException
                 *             if there is a problem accessing the database.</member>
        <member name="M:biz.ritter.javapi.sql.Connection.getAutoCommit">
                 * Returns a {@code boolean} indicating whether or not this connection is in
                 * the {@code auto-commit} operating mode.
                 *
                 * @return {@code true} if {@code auto-commit} is on, otherwise {@code
                 *         false}.
                 * @throws SQLException
                 *             if there is a problem accessing the database.</member>
        <member name="M:biz.ritter.javapi.sql.Connection.getCatalog">
                 * Gets this {@code Connection} object's current catalog name.
                 *
                 * @return the catalog name. {@code null} if there is no catalog
                 *         name.
                 * @throws SQLException
                 *             if there is a problem accessing the database.</member>
        <member name="M:biz.ritter.javapi.sql.Connection.getHoldability">
                 * Returns the holdability property that any {@code ResultSet} produced by
                 * this instance will have.
                 *
                 * @return one of the following holdability mode specifiers:
                 *         <ul>
                 *         <li>{@link ResultSet#HOLD_CURSORS_OVER_COMMIT}</li><li>
                 *         {@link ResultSet#CLOSE_CURSORS_AT_COMMIT}</li>
                 *         </ul>
                 * @throws SQLException
                 *             if there is a problem accessing the a database.</member>
        <member name="M:biz.ritter.javapi.sql.Connection.getMetaData">
                 * Gets the metadata about the database referenced by this connection. The
                 * returned {@code DatabaseMetaData} describes the database topography,
                 * available stored procedures, SQL syntax and so on.
                 *
                 * @return a {@code DatabaseMetaData} object containing the database
                 *         description.
                 * @throws SQLException
                 *             if there is a problem accessing the a database.</member>
        <member name="M:biz.ritter.javapi.sql.Connection.getTransactionIsolation">
                 * Returns the transaction isolation level for this connection.
                 *
                 * @return the transaction isolation value.
                 * @throws SQLException
                 *             if there is a problem accessing the database.
                 * @see #TRANSACTION_NONE
                 * @see #TRANSACTION_READ_COMMITTED
                 * @see #TRANSACTION_READ_UNCOMMITTED
                 * @see #TRANSACTION_REPEATABLE_READ
                 * @see #TRANSACTION_SERIALIZABLE</member>
        <member name="M:biz.ritter.javapi.sql.Connection.getTypeMap">
                 * Returns the type mapping associated with this {@code Connection} object.
                 * The type mapping must be set on the application level.
                 *
                 * @return the Type Map as a {@code java.util.Map}.
                 * @throws SQLException
                 *             if there is a problem accessing the database.</member>
        <member name="M:biz.ritter.javapi.sql.Connection.getWarnings">
                 * Gets the first instance of any {@code SQLWarning} objects that may have
                 * been created in the use of this connection. If at least one warning has
                 * occurred then this operation returns the first one reported. A {@code
                 * null} indicates that no warnings have occurred.
                 * <p />
                 * By invoking the {@link SQLWarning#getNextWarning()} method of the
                 * returned {@code SQLWarning} object it is possible to obtain all of
                 * this connection's warning objects.
                 *
                 * @return the first warning as an SQLWarning object (may be {@code null}).
                 * @throws SQLException
                 *             if there is a problem accessing the database or if the call
                 *             has been made on a connection which has been previously
                 *             closed.</member>
        <member name="M:biz.ritter.javapi.sql.Connection.isClosed">
                 * Returns a {@code boolean} indicating whether or not this connection is in
                 * the {@code closed} state. The {@code closed} state may be entered into as
                 * a consequence of a successful invocation of the {@link #close()} method
                 * or else if an error has occurred that prevents the connection from
                 * functioning normally.
                 *
                 * @return {@code true} if closed, otherwise {@code false}.
                 * @throws SQLException
                 *             if there is a problem accessing the database.</member>
        <member name="M:biz.ritter.javapi.sql.Connection.isReadOnly">
                 * Returns a {@code boolean} indicating whether or not this connection is
                 * currently in the {@code read-only} state.
                 *
                 * @return {@code true} if in read-only state, otherwise {@code false}.
                 * @throws SQLException
                 *             if there is a problem accessing the database.</member>
        <member name="M:biz.ritter.javapi.sql.Connection.nativeSQL(System.String)">
                 * Returns a string representation of the input SQL statement
                 * {@code sql} expressed in the underlying system's native SQL
                 * syntax.
                 *
                 * @param sql
                 *            the JDBC form of an SQL statement.
                 * @return the SQL statement in native database format.
                 * @throws SQLException
                 *             if there is a problem accessing the database</member>
        <member name="M:biz.ritter.javapi.sql.Connection.prepareCall(System.String)">
                 * Returns a new instance of {@code CallableStatement} that may be used for
                 * making stored procedure calls to the database.
                 *
                 * @param sql
                 *            the SQL statement that calls the stored function
                 * @return a new instance of {@code CallableStatement} representing the SQL
                 *         statement. {@code ResultSet}s emitted from this {@code
                 *         CallableStatement} will default to type
                 *         {@link ResultSet#TYPE_FORWARD_ONLY} and concurrency
                 *         {@link ResultSet#CONCUR_READ_ONLY}.
                 * @throws SQLException
                 *             if a problem occurs accessing the database.</member>
        <member name="M:biz.ritter.javapi.sql.Connection.prepareCall(System.String,System.Int32,System.Int32)">
                 * Returns a new instance of {@code CallableStatement} that may be used for
                 * making stored procedure calls to the database. {@code ResultSet}s emitted
                 * from this {@code CallableStatement} will satisfy the specified {@code
                 * resultSetType} and {@code resultSetConcurrency} values.
                 *
                 * @param sql
                 *            the SQL statement
                 * @param resultSetType
                 *            one of the following type specifiers:
                 *            <ul>
                 *            <li>{@link ResultSet#TYPE_SCROLL_SENSITIVE}</li>
                 *            <li>{@link ResultSet#TYPE_SCROLL_INSENSITIVE}</li>
                 *            <li>{@link ResultSet#TYPE_FORWARD_ONLY}</li>
                 *            </ul>
                 * @param resultSetConcurrency
                 *            one of the following concurrency mode specifiers:
                 *            <ul>
                 *            <li>{@link ResultSet#CONCUR_READ_ONLY}</li>
                 *            <li>{@link ResultSet#CONCUR_UPDATABLE}</li>
                 *            </ul>
                 * @return a new instance of {@code CallableStatement} representing the
                 *         precompiled SQL statement. {@code ResultSet}s emitted from this
                 *         {@code CallableStatement} will satisfy the specified {@code
                 *         resultSetType} and {@code resultSetConcurrency} values.
                 * @throws SQLException
                 *             if a problem occurs accessing the database</member>
        <member name="M:biz.ritter.javapi.sql.Connection.prepareCall(System.String,System.Int32,System.Int32,System.Int32)">
                 * Returns a new instance of {@code CallableStatement} that may be used for
                 * making stored procedure calls to the database. {@code ResultSet}s created
                 * from this {@code CallableStatement} will have characteristics determined
                 * by the specified type, concurrency and holdability arguments.
                 *
                 * @param sql
                 *            the SQL statement
                 * @param resultSetType
                 *            one of the following type specifiers:
                 *            <ul>
                 *            <li>{@link ResultSet#TYPE_SCROLL_SENSITIVE}</li>
                 *            <li>{@link ResultSet#TYPE_SCROLL_INSENSITIVE}</li>
                 *            <li>{@link ResultSet#TYPE_FORWARD_ONLY}</li>
                 *            </ul>
                 * @param resultSetConcurrency
                 *            one of the following concurrency mode specifiers:
                 *            <ul>
                 *            <li>{@link ResultSet#CONCUR_READ_ONLY}</li>
                 *            <li>{@link ResultSet#CONCUR_UPDATABLE}</li>
                 *            </ul>
                 * @param resultSetHoldability
                 *            one of the following holdability mode specifiers:
                 *            <ul>
                 *            <li>{@link ResultSet#HOLD_CURSORS_OVER_COMMIT}</li>
                 *            <li>{@link ResultSet#CLOSE_CURSORS_AT_COMMIT}</li>
                 *            </ul>
                 * @return a new instance of {@code CallableStatement} representing the
                 *         precompiled SQL statement. {@code ResultSet}s emitted from this
                 *         {@code CallableStatement} will satisfy the specified {@code
                 *         resultSetType}, {@code resultSetConcurrency} and {@code
                 *         resultSetHoldability} values.
                 * @throws SQLException
                 *             if a problem occurs accessing the database.</member>
        <member name="M:biz.ritter.javapi.sql.Connection.prepareStatement(System.String)">
                 * Returns a new instance of {@code PreparedStatement} that may be used any
                 * number of times to execute parameterized requests on the database server.
                 * <p />
                 * Subject to JDBC driver support, this operation will attempt to send the
                 * precompiled version of the statement to the database. If
                 * the driver does not support precompiled statements, the statement will
                 * not reach the database server until it is executed. This distinction
                 * determines the moment when {@code SQLException}s get raised.
                 * <p />
                 * By default, {@code ResultSet}s from the returned object will be
                 * {@link ResultSet#TYPE_FORWARD_ONLY} type with a
                 * {@link ResultSet#CONCUR_READ_ONLY} mode of concurrency.
                 *
                 * @param sql
                 *            the SQL statement.
                 * @return the {@code PreparedStatement} containing the supplied SQL
                 *         statement.
                 * @throws SQLException
                 *             if there is a problem accessing the database.</member>
        <member name="M:biz.ritter.javapi.sql.Connection.prepareStatement(System.String,System.Int32)">
                 * Creates a default {@code PreparedStatement} that can retrieve
                 * automatically generated keys. Parameter {@code autoGeneratedKeys} may be
                 * used to tell the driver whether such keys should be made accessible.
                 * This is only relevant when the {@code sql} statement is an {@code insert}
                 * statement.
                 * <p />
                 * An SQL statement which may have {@code IN} parameters can be stored and
                 * precompiled in a {@code PreparedStatement}. The {@code PreparedStatement}
                 * can then be then be used to execute the statement multiple times in an
                 * efficient way.
                 * <p />
                 * Subject to JDBC driver support, this operation will attempt to send the
                 * precompiled version of the statement to the database. If
                 * the driver does not support precompiled statements, the statement will
                 * not reach the database server until it is executed. This distinction
                 * determines the moment when {@code SQLException}s get raised.
                 * <p />
                 * By default, {@code ResultSet}s from the returned object will be
                 * {@link ResultSet#TYPE_FORWARD_ONLY} type with a
                 * {@link ResultSet#CONCUR_READ_ONLY} mode of concurrency.
                 *
                 * @param sql
                 *            the SQL statement.
                 * @param autoGeneratedKeys
                 *            one of the following generated key options:
                 *            <ul>
                 *            <li>{@link Statement#RETURN_GENERATED_KEYS}</li>
                 *            <li>{@link Statement#NO_GENERATED_KEYS}</li>
                 *            </ul>
                 * @return a new {@code PreparedStatement} instance representing the input
                 *         SQL statement.
                 * @throws SQLException
                 *             if there is a problem accessing the database.</member>
        <member name="M:biz.ritter.javapi.sql.Connection.prepareStatement(System.String,System.Int32[])">
                 * Creates a default {@code PreparedStatement} that can retrieve the
                 * auto-generated keys designated by a supplied array. If {@code sql} is an
                 * SQL {@code INSERT} statement, the parameter {@code columnIndexes} is expected
                 * to hold the index values for each column in the statement's intended
                 * database table containing the autogenerated-keys of interest. Otherwise
                 * {@code columnIndexes} is ignored.
                 * <p />
                 * Subject to JDBC driver support, this operation will attempt to send the
                 * precompiled version of the statement to the database. If
                 * the driver does not support precompiled statements, the statement will
                 * not reach the database server until it is executed. This distinction
                 * determines the moment when {@code SQLException}s get raised.
                 * <p />
                 * By default, {@code ResultSet}s from the returned object will be
                 * {@link ResultSet#TYPE_FORWARD_ONLY} type with a
                 * {@link ResultSet#CONCUR_READ_ONLY} concurrency mode.
                 *
                 * @param sql
                 *            the SQL statement.
                 * @param columnIndexes
                 *            the indexes of the columns for which auto-generated keys
                 *            should be made available.
                 * @return the PreparedStatement containing the supplied SQL statement.
                 * @throws SQLException
                 *             if a problem occurs accessing the database.</member>
        <member name="M:biz.ritter.javapi.sql.Connection.prepareStatement(System.String,System.Int32,System.Int32)">
                 * Creates a {@code PreparedStatement} that generates {@code ResultSet}s
                 * with the specified values of {@code resultSetType} and {@code
                 * resultSetConcurrency}.
                 *
                 * @param sql
                 *            the SQL statement. It can contain one or more {@code '?'}
                 *            {@code IN} parameter placeholders.
                 * @param resultSetType
                 *            one of the following type specifiers:
                 *            <ul>
                 *            <li>{@link ResultSet#TYPE_SCROLL_SENSITIVE}</li>
                 *            <li>{@link ResultSet#TYPE_SCROLL_INSENSITIVE}</li>
                 *            <li>{@link ResultSet#TYPE_FORWARD_ONLY}</li>
                 *            </ul>
                 * @param resultSetConcurrency
                 *            one of the following concurrency mode specifiers:
                 *            <ul>
                 *            <li>{@link ResultSet#CONCUR_READ_ONLY}</li>
                 *            <li>{@link ResultSet#CONCUR_UPDATABLE}</li>
                 *            </ul>
                 * @return a new instance of {@code PreparedStatement} containing the SQL
                 *         statement {@code sql}. {@code ResultSet}s emitted from this
                 *         {@code PreparedStatement} will satisfy the specified {@code
                 *         resultSetType} and {@code resultSetConcurrency} values.
                 * @throws SQLException
                 *             if a problem occurs accessing the database.</member>
        <member name="M:biz.ritter.javapi.sql.Connection.prepareStatement(System.String,System.Int32,System.Int32,System.Int32)">
                 * Creates a {@code PreparedStatement} that generates {@code ResultSet}s
                 * with the specified type, concurrency and holdability
                 *
                 * @param sql
                 *            the SQL statement. It can contain one or more {@code '?' IN}
                 *            parameter placeholders.
                 * @param resultSetType
                 *            one of the following type specifiers:
                 *            <ul>
                 *            <li>{@link ResultSet#TYPE_SCROLL_SENSITIVE}</li>
                 *            <li>{@link ResultSet#TYPE_SCROLL_INSENSITIVE}</li>
                 *            <li>{@link ResultSet#TYPE_FORWARD_ONLY}</li>
                 *            </ul>
                 * @param resultSetConcurrency
                 *            one of the following concurrency mode specifiers:
                 *            <ul>
                 *            <li>{@link ResultSet#CONCUR_READ_ONLY}</li>
                 *            <li>{@link ResultSet#CONCUR_UPDATABLE}</li>
                 *            </ul>
                 * @param resultSetHoldability
                 *            one of the following holdability mode specifiers:
                 *            <ul>
                 *            <li>{@link ResultSet#HOLD_CURSORS_OVER_COMMIT}</li>
                 *            <li>{@link ResultSet#CLOSE_CURSORS_AT_COMMIT}</li>
                 *            </ul>
                 * @return a new instance of {@code PreparedStatement} containing the SQL
                 *         statement {@code sql}. {@code ResultSet}s emitted from this
                 *         {@code PreparedStatement} will satisfy the specified {@code
                 *         resultSetType}, {@code resultSetConcurrency} and {@code
                 *         resultSetHoldability} values.
                 * @throws SQLException
                 *             if a problem occurs accessing the database.</member>
        <member name="M:biz.ritter.javapi.sql.Connection.prepareStatement(System.String,System.String[])">
                 * Creates a default {@code PreparedStatement} that can retrieve the
                 * auto-generated keys designated by a supplied array. If {@code sql} is an
                 * SQL {@code INSERT} statement, {@code columnNames} is expected to hold the
                 * names of each column in the statement's associated database table
                 * containing the autogenerated-keys of interest. Otherwise {@code
                 * columnNames} is ignored.
                 * <p />
                 * Subject to JDBC driver support, this operation will attempt to send the
                 * precompiled version of the statement to the database. Alternatively, if
                 * the driver is not capable of handling precompiled statements, the
                 * statement will not reach the database server until it is executed. This
                 * will have a bearing on precisely <i>when</i> {@code SQLException}
                 * instances get raised.
                 * <p />
                 * By default, ResultSets from the returned object will be
                 * {@link ResultSet#TYPE_FORWARD_ONLY} type with a
                 * {@link ResultSet#CONCUR_READ_ONLY} concurrency mode.
                 *
                 * @param sql
                 *            the SQL statement.
                 * @param columnNames
                 *            the names of the columns for which auto-generated keys should
                 *            be made available.
                 * @return the PreparedStatement containing the supplied SQL statement.
                 * @throws SQLException
                 *             if a problem occurs accessing the database.</member>
        <member name="M:biz.ritter.javapi.sql.Connection.releaseSavepoint(biz.ritter.javapi.sql.Savepoint)">
                 * Releases the specified {@code savepoint} from the present transaction. Once removed,
                 * the {@code Savepoint} is considered invalid and should not be referenced
                 * further.
                 *
                 * @param savepoint
                 *            the object targeted for removal.
                 * @throws SQLException
                 *             if there is a problem with accessing the database or if
                 *             {@code savepoint} is considered not valid in this
                 *             transaction.</member>
        <member name="M:biz.ritter.javapi.sql.Connection.rollback">
                 * Rolls back all updates made so far in this transaction and
                 * relinquishes all acquired database locks. It is an error to invoke this
                 * operation when in auto-commit mode.
                 *
                 * @throws SQLException
                 *             if there is a problem with the database or if the method is
                 *             called while in auto-commit mode of operation.</member>
        <member name="M:biz.ritter.javapi.sql.Connection.rollback(biz.ritter.javapi.sql.Savepoint)">
                 * Undoes all changes made after the supplied {@code Savepoint} object was
                 * set. This method should only be used when auto-commit mode is disabled.
                 *
                 * @param savepoint
                 *            the Savepoint to roll back to
                 * @throws SQLException
                 *             if there is a problem accessing the database.</member>
        <member name="M:biz.ritter.javapi.sql.Connection.setAutoCommit(System.Boolean)">
                 * Sets this connection's auto-commit mode {@code on} or {@code off}.
                 * <p />
                 * Putting a Connection into auto-commit mode means that all associated SQL
                 * statements are run and committed as separate transactions.
                 * By contrast, setting auto-commit to {@code off} means that associated SQL
                 * statements get grouped into transactions that need to be completed by
                 * explicit calls to either the {@link #commit()} or {@link #rollback()}
                 * methods.
                 * <p />
                 * Auto-commit is the default mode for new connection instances.
                 * <p />
                 * When in this mode, commits will automatically occur upon successful SQL
                 * statement completion or upon successful completion of an execute.
                 * Statements are not considered successfully completed until all associated
                 * {@code ResultSet}s and output parameters have been obtained or closed.
                 * <p />
                 * Calling this operation during an uncommitted transaction will result in
                 * it being committed.
                 *
                 * @param autoCommit
                 *            {@code boolean} indication of whether to put the target
                 *            connection into auto-commit mode ({@code true}) or not (
                 *            {@code false}).
                 * @throws SQLException
                 *             if there is a problem accessing the database.</member>
        <member name="M:biz.ritter.javapi.sql.Connection.setCatalog(System.String)">
                 * Sets the catalog name for this connection. This is used to select a
                 * subspace of the database for future work. If the driver does not support
                 * catalog names, this method is ignored.
                 *
                 * @param catalog
                 *            the catalog name to use.
                 * @throws SQLException
                 *             if there is a problem accessing the database.</member>
        <member name="M:biz.ritter.javapi.sql.Connection.setHoldability(System.Int32)">
                 * Sets the holdability of the {@code ResultSet}s created by this Connection.
                 *
                 * @param holdability
                 *            one of the following holdability mode specifiers:
                 *            <ul>
                 *            <li>{@link ResultSet#CLOSE_CURSORS_AT_COMMIT}</li>
                 *            <li>{@link ResultSet#HOLD_CURSORS_OVER_COMMIT}</li>
                 *            </ul>
                 * @throws SQLException
                 *             if there is a problem accessing the database</member>
        <member name="M:biz.ritter.javapi.sql.Connection.setReadOnly(System.Boolean)">
                 * Sets this connection to read-only mode.
                 * <p />
                 * This serves as a hint to the driver, which can enable database
                 * optimizations.
                 *
                 * @param readOnly
                 *            {@code true} to set the Connection to read only mode. {@code
                 *            false} disables read-only mode.
                 * @throws SQLException
                 *             if there is a problem accessing the database.</member>
        <member name="M:biz.ritter.javapi.sql.Connection.setSavepoint">
                 * Creates an unnamed {@code Savepoint} in the current transaction.
                 *
                 * @return a {@code Savepoint} object for this savepoint.
                 * @throws SQLException
                 *             if there is a problem accessing the database.</member>
        <member name="M:biz.ritter.javapi.sql.Connection.setSavepoint(System.String)">
                 * Creates a named {@code Savepoint} in the current transaction.
                 *
                 * @param name
                 *            the name to use for the new {@code Savepoint}.
                 * @return a {@code Savepoint} object for this savepoint.
                 * @throws SQLException
                 *             if there is a problem accessing the database.</member>
        <member name="M:biz.ritter.javapi.sql.Connection.setTransactionIsolation(System.Int32)">
                 * Sets the transaction isolation level for this Connection.
                 * <p />
                 * If this method is called during a transaction, the results are
                 * implementation defined.
                 *
                 * @param level
                 *            the new transaction isolation level to use from the following
                 *            list of possible values:
                 *            <ul>
                 *            <li>{@link #TRANSACTION_READ_COMMITTED}</li>
                 *            <li>{@link #TRANSACTION_READ_UNCOMMITTED}</li>
                 *            <li>{@link #TRANSACTION_REPEATABLE_READ}</li>
                 *            <li>{@link #TRANSACTION_SERIALIZABLE}</li>
                 *            </ul>
                 * @throws SQLException
                 *             if there is a problem with the database or if the value of
                 *             {@code level} is not one of the expected constant values.</member>
        <member name="M:biz.ritter.javapi.sql.Connection.setTypeMap(biz.ritter.javapi.util.Map{System.String,biz.ritter.javapi.lang.Class})">
                 * Sets the {@code TypeMap} for this connection. The input {@code map}
                 * should contain mappings between complex Java and SQL types.
                 *
                 * @param map
                 *            the new type map.
                 * @throws SQLException
                 *             if there is a problem accessing the database or if {@code
                 *             map} is not an instance of {@link Map}.</member>
        <member name="M:biz.ritter.javapi.sql.Connection.createClob">
                 * TODO Javadoc
                 *
                 * @return</member>
        <member name="F:biz.ritter.javapi.sql.ConnectionConstants.TRANSACTION_NONE">
                 * A constant indicating that transactions are not supported.</member>
        <member name="F:biz.ritter.javapi.sql.ConnectionConstants.TRANSACTION_READ_COMMITTED">
                 * No <i>dirty reads</i> are permitted, therefore transactions may not read
                 * a row containing uncommitted values - but does not prevent an application
                 * from <i>non-repeatable reads</i> and <i>phantom reads</i>.</member>
        <member name="F:biz.ritter.javapi.sql.ConnectionConstants.TRANSACTION_READ_UNCOMMITTED">
                 * In the case that reading uncommitted values is allowed, the following
                 * incidents may happen which may lead to an invalid results:
                 * <ul>
                 * <li><i>dirty reads</i></li>
                 * <li><i>non-repeatable reads</i></li>
                 * <li><i>phantom reads</i></li>
                 * </ul></member>
        <member name="F:biz.ritter.javapi.sql.ConnectionConstants.TRANSACTION_REPEATABLE_READ">
                 * A constant indicating that <i>dirty reads</i> and <i>non-repeatable
                 * reads</i> are <b>prevented</b> but <i>phantom reads</i> can occur.</member>
        <member name="F:biz.ritter.javapi.sql.ConnectionConstants.TRANSACTION_SERIALIZABLE">
                 * The constant that indicates that the following incidents are <b>all
                 * prevented</b> (the opposite of {@link #TRANSACTION_READ_UNCOMMITTED}):
                 * <ul>
                 * <li><i>dirty reads</i></li>
                 * <li><i>non-repeatable reads</i></li>
                 * <li><i>phantom reads</i></li>
                 * </ul></member>
        <member name="T:biz.ritter.javapi.sql.DatabaseMetaData">
                 * An interface which provides comprehensive information about the database
                 * management system and its supported features.
                 * <p />
                 * This interface is implemented by JDBC driver vendors in order to provide
                 * information about the underlying database capabilities in association with
                 * the JDBC driver.
                 * <p />
                 * Some of the methods in this interface take string parameters which are
                 * patterns. Within these string patterns, {@code '%'} and {@code '_'}
                 * characters have special meanings. {@code '%'} means
                 * "match any substring of 0 or more characters". {@code '_'} means
                 * "match any character". Only metadata entries that match the pattern are
                 * returned. If such a search pattern string is set to {@code null}, that
                 * argument's criteria are dropped from the search.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.allProceduresAreCallable">
                     * Returns whether all procedures returned by {@link #getProcedures} can be
                     * called by the current user.
                     *
                     * @return {@code true} if all procedures can be called by the current user,
                     *         {@code false} otherwise.
                     * @throws SQLException
                     *             if there is a database error.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.allTablesAreSelectable">
                     * Returns whether all the tables returned by {@code getTables} can be used
                     * by the current user in a {@code SELECT} statement.
                     *
                     * @return {@code true} if all the tables can be used,{@code false}
                     *         otherwise.
                     * @throws SQLException
                     *             if there is a database error.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.dataDefinitionCausesTransactionCommit">
                     * Returns whether a data definition statement in a transaction forces a {@code
                     * commit} of the transaction.
                     *
                     * @return {@code true} if the statement forces a commit, {@code false}
                     *         otherwise.
                     * @throws SQLException
                     *             if there is a database error.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.dataDefinitionIgnoredInTransactions">
                     * Returns whether the database ignores data definition statements within a
                     * transaction.
                     *
                     * @return {@code true} if the database ignores a data definition statement,
                     *         {@code false} otherwise.
                     * @throws SQLException
                     *             if there is a database error.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.deletesAreDetected(System.Int32)">
                     * Returns whether a visible row delete can be detected by calling
                     * {@link ResultSet#rowDeleted}.
                     *
                     * @param type
                     *            the type of the {@code ResultSet} involved: {@code
                     *            ResultSet.TYPE_FORWARD_ONLY}, {@code
                     *            ResultSet.TYPE_SCROLL_INSENSITIVE}, or {@code
                     *            ResultSet.TYPE_SCROLL_SENSITIVE}
                     * @return {@code true} if the visible row delete can be detected, {@code
                     *         false} otherwise.
                     * @throws SQLException
                     *             if there is a database error.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.doesMaxRowSizeIncludeBlobs">
                     * Returns whether the return value of {@code getMaxRowSize} includes the
                     * SQL data types {@code LONGVARCHAR} and {@code LONGVARBINARY}.
                     *
                     * @return {@code true} if the return value includes {@code LONGVARBINARY}
                     *         and {@code LONGVARCHAR}, otherwise {@code false}.
                     * @throws SQLException
                     *             if there is a database error.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.getAttributes(System.String,System.String,System.String,System.String)">
                     * Returns a {@code ResultSet} describing a subset of the attributes of a
                     * specified SQL User Defined Type (UDT) for a specified schema and catalog.
                     * The subset is determined by restricting to those attributes whose
                     * name matches the {@code attributeNamePattern} and whose type name
                     * matches the {@code typeNamePattern}. Each row of the {@code ResultSet}
                     * describes one attribute, and the rows are ordered by the columns {@code TYPE_SCHEM},
                     * {@code TYPE_NAME} and {@code ORDINAL_POSITION}. Inherited attributes
                     * are not included.
                     * <p />
                     * The columns of the returned {@code ResultSet} object have the following
                     * names and meanings:
                     * <ol>
                     * <li>{@code TYPE_CAT} - String - the type catalog name (possibly {@code
                     * null})</li>
                     * <li>{@code TYPE_SCHEM} - String - the type schema name (possibly {@code
                     * null})</li>
                     * <li>{@code TYPE_NAME} - String - the type name</li>
                     * <li>{@code ATTR_NAME} - String - the attribute name</li>
                     * <li>{@code DATA_TYPE} - int - the attribute type as defined in {@code
                     * java.sql.Types}</li>
                     * <li>{@code ATTR_TYPE_NAME} - String - the attribute type name. This
                     * depends on the data source. For a {@code UDT} the name is fully
                     * qualified. For a {@code REF} it is both fully qualified and represents
                     * the target type of the reference.</li>
                     * <li>{@code ATTR_SIZE} - int - the column size. When referring to char and
                     * date types this value is the maximum number of characters. When referring
                     * to numeric types is is the precision.</li>
                     * <li>{@code DECIMAL_DIGITS} - int - how many fractional digits are
                     * supported</li>
                     * <li>{@code NUM_PREC_RADIX} - int - numeric values radix</li>
                     * <li>{@code NULLABLE} - int - whether {@code NULL} is permitted:
                     * <ul>
                     * <li>DatabaseMetaData.attributeNoNulls - {@code NULL} values not permitted</li>
                     * <li>DatabaseMetaData.attributeNullable - {@code NULL} values definitely
                     * permitted</li>
                     * <li>DatabaseMetaData.attributeNullableUnknown - unknown</li>
                     * </ul>
                     * </li>
                     * <li>{@code REMARKS} - String - a comment describing the attribute
                     * (possibly {@code null})</li>
                     * <li>ATTR_DEF - String - Default value for the attribute (possibly {@code
                     * null})</li>
                     * <li>{@code SQL_DATA_TYPE} - int - not used</li>
                     * <li>SQL_DATETIME_SUB - int - not used</li>
                     * <li>CHAR_OCTET_LENGTH - int - for {@code CHAR} types, the max number of
                     * bytes in the column</li>
                     * <li>ORDINAL_POSITION - int - The index of the column in the table (where
                     * the count starts from 1, not 0)</li>
                     * <li>IS_NULLABLE - String - {@code "NO"} = the column does not allow {@code
                     * NULL}s, {@code "YES"} = the column allows {@code NULL}s, "" = status unknown</li>
                     * <li>{@code SCOPE_CATALOG} - String - if the {@code DATA_TYPE} is {@code REF},
                     * this gives the catalog of the table corresponding to the attribute's scope.
                     * NULL if the {@code DATA_TYPE} is not REF.</li>
                     * <li>{@code SCOPE_SCHEMA} - String - if the {@code DATA_TYPE} is {@code REF},
                     * this gives the schema of the table corresponding to the attribute's scope.
                     * NULL if the {@code DATA_TYPE} is not REF.</li>
                     * <li>{@code SCOPE_TABLE} - String - if the {@code DATA_TYPE} is {@code REF},
                     * this gives the name of the table corresponding to the attribute's scope.
                     * NULL if the {@code DATA_TYPE} is not REF.</li>
                     * <li>{@code SOURCE_DATA_TYPE} - String - The source type for a user
                     * generated REF type or for a Distinct type. ({@code NULL} if {@code
                     * DATA_TYPE} is not DISTINCT or a user generated REF)</li>
                     * </ol>
                     *
                     * @param catalog
                     *            a catalog name. {@code null} is used to imply no narrowing of
                     *            the search by catalog name. Otherwise, the name must match a
                     *            catalog name held in the database, with "" used to retrieve
                     *            those without a catalog name.
                     * @param schemaPattern
                     *            a schema name pattern. {@code null} is used to imply no
                     *            narrowing of the search by a schema name. Otherwise, the name
                     *            must match a schema name in the database, with "" used to
                     *            retrieve those without a schema name.
                     * @param typeNamePattern
                     *            a type name. This pattern must match the type name stored in
                     *            the database.
                     * @param attributeNamePattern
                     *            an Attribute name. This pattern must match the attribute name as stored in
                     *            the database.
                     * @return a {@code ResultSet}, where each row is an attribute description.
                     * @throws SQLException
                     *             if there is a database error.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.getBestRowIdentifier(System.String,System.String,System.String,System.Int32,System.Boolean)">
                     * Returns a list of a table's optimal set of columns that uniquely
                     * identify the rows. The results are ordered by {@code SCOPE} (see below).
                     * <p />
                     * The results are returned as a table, with one entry for each column, as
                     * follows:
                     * <ol>
                     * <li>{@code SCOPE} - short - the {@code SCOPE} of the result, as follows:
                     * <ul>
                     * <li>{@code DatabaseMetaData.bestRowTemporary} - the result is very temporary,
                     * only valid while on the current row</li>
                     * <li>{@code DatabaseMetaData.bestRowTransaction} - the result is good for remainder of
                     * current transaction</li>
                     * <li>{@code DatabaseMetaData.bestRowSession} - the result is good for remainder of
                     * database session</li>
                     * </ul>
                     * </li>
                     * <li>{@code COLUMN_NAME} - String - the column name</li>
                     * <li>{@code DATA_TYPE} - int - the Type of the data, as defined in {@code
                     * java.sql.Types}</li>
                     * <li>{@code TYPE_NAME} - String - the Name of the type - database dependent.
                     * For UDT types the name is fully qualified</li>
                     * <li>{@code COLUMN_SIZE} - int - the precision of the data in the column</li>
                     * <li>{@code BUFFER_LENGTH} - int - not used</li>
                     * <li>{@code DECIMAL_DIGITS} - short - number of fractional digits</li>
                     * <li>{@code PSEUDO_COLUMN} - short - whether this is a pseudo column (e.g.
                     * an Oracle {@code ROWID}):
                     * <ul>
                     * <li>{@code DatabaseMetaData.bestRowUnknown} - it is not known whether this is
                     * a pseudo column</li>
                     * <li>{@code DatabaseMetaData.bestRowNotPseudo} - the column is not pseudo</li>
                     * <li>{@code DatabaseMetaData.bestRowPseudo} - the column is a pseudo column</li>
                     * </ul>
                     * </li>
                     * </ol>
                     *
                     * @param catalog
                     *            a catalog name. {@code null} is used to imply no narrowing of
                     *            the search by catalog name. Otherwise, the name must match a
                     *            catalog name held in the database, with "" used to retrieve
                     *            those without a catalog name.
                     * @param schema
                     *            a schema name pattern. {@code null} is used to imply no
                     *            narrowing of the search by schema name. Otherwise, the name
                     *            must match a schema name in the database, with "" used to
                     *            retrieve those without a schema name.
                     * @param table
                     *            the table name. This must match the name of the table as
                     *            declared in the database.
                     * @param scope
                     *            the {@code SCOPE} of interest, values as defined above.
                     * @param nullable
                     *            {@code true} = include columns that are nullable, {@code
                     *            false} = do not include nullable columns.
                     * @return a {@code ResultSet} where each row is a description of a column
                     *         and the complete set of rows is the optimal set for this table.
                     * @throws SQLException
                     *             if there is a database error.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.getCatalogs">
                     * Returns the set of catalog names available in this database. The set is
                     * returned ordered by catalog name.
                     *
                     * @return a {@code ResultSet} containing the catalog names, with each row
                     *         containing one catalog name (as a {@code String}) in the
                     *         single column named {@code TABLE_CAT}.
                     * @throws SQLException
                     *             if there is a database error.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.getCatalogSeparator">
                     * Returns the separator that this database uses between a catalog name and
                     * table name.
                     *
                     * @return a String containing the separator.
                     * @throws SQLException
                     *             if there is a database error.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.getCatalogTerm">
                     * Returns the term that the database vendor prefers term for "catalog".
                     *
                     * @return a String with the vendor's term for "catalog".
                     * @throws SQLException
                     *             if there is a database error.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.getColumnPrivileges(System.String,System.String,System.String,System.String)">
                     * Returns a description of access rights for a table's columns. Only access
                     * rights matching the criteria for the column name are returned.
                     * <p />
                     * The description is returned as a {@code ResultSet} with rows of data for
                     * each access right, with columns as follows:
                     * <ol>
                     * <li>{@code TABLE_CAT} - String - the catalog name (possibly {@code null})</li>
                     * <li>{@code TABLE_SCHEM} - String - the schema name (possibly {@code null})</li>
                     * <li>{@code TABLE_NAME} - String - the table name</li>
                     * <li>{@code COLUMN_NAME} - String - the Column name</li>
                     * <li>{@code GRANTOR} - String - the grantor of access (possibly {@code
                     * null})</li>
                     * <li>{@code PRIVILEGE} - String - Access right - one of SELECT, INSERT,
                     * UPDATE, REFERENCES,...</li>
                     * <li>{@code IS_GRANTABLE} - String - {@code "YES"} implies that the
                     * receiver can grant access to others, {@code "NO"} if the receiver cannot
                     * grant access to others, {@code null} if unknown.</li>
                     * </ol>
                     *
                     * @param catalog
                     *            a catalog name. {@code null} is used to imply no narrowing of
                     *            the search by catalog name. Otherwise, the name must match a
                     *            catalog name held in the database, with "" used to retrieve
                     *            those without a catalog name.
                     * @param schema
                     *            a schema name pattern. {@code null} is used to imply no
                     *            narrowing of the search by schema name. Otherwise, the name
                     *            must match a schema name in the database, with "" used to
                     *            retrieve those without a schema name.
                     * @param table
                     *            the table name. This must match the name of the table as
                     *            declared in the database.
                     * @param columnNamePattern
                     *            the column name. This must match the name of a column in the
                     *            table in the database.
                     * @return a {@code ResultSet} containing the access rights, one row for
                     *         each privilege description.
                     * @throws SQLException
                     *             if there is a database error.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.getColumns(System.String,System.String,System.String,System.String)">
                     * Returns a description of table columns available in a specified catalog.
                     * Only descriptions meeting the specified catalog, schema, table, and column
                     * names are returned.
                     * <p />
                     * The descriptions are returned as a {@code ResultSet} conforming to the
                     * following data layout, with one row per table column:
                     * <ol>
                     * <li>{@code TABLE_CAT} - String - the catalog name (possibly {@code null})</li>
                     * <li>{@code TABLE_SCHEM} - String - the schema name (possibly {@code null})</li>
                     * <li>{@code TABLE_NAME} - String - the table name</li>
                     * <li>{@code COLUMN_NAME} - String - the column name</li>
                     * <li>{@code DATA_TYPE} - int - the SQL type as specified in {@code
                     * java.sql.Types}</li>
                     * <li>{@code TYPE_NAME} - String - the name of the data type, (database-dependent,
                     * UDT names are fully qualified)</li>
                     * <li>{@code COLUMN_SIZE} - int - the column size (the precision for numeric
                     * types, max characters for {@code char} and {@code date} types)</li>
                     * <li>{@code BUFFER_LENGTH} - int - Not used</li>
                     * <li>{@code DECIMAL_DIGITS} - int - maximum number of fractional digits</li>
                     * <li>{@code NUM_PREC_RADIX} - int - the radix for numerical types</li>
                     * <li>{@code NULLABLE} - int - whether the column allows {@code null}s:
                     * <ul>
                     * <li>DatabaseMetaData.columnNoNulls = may not allow {@code NULL}s</li>
                     * <li>DatabaseMetaData.columnNullable = does allow {@code NULL}s</li>
                     * <li>DatabaseMetaData.columnNullableUnknown = unknown {@code NULL} status</li>
                     * </ul>
                     * </li>
                     * <li>{@code REMARKS} - String - A description of the column (possibly
                     * {@code null})</li>
                     * <li>{@code COLUMN_DEF} - String - Default value for the column (possibly
                     * {@code null})</li>
                     * <li>{@code SQL_DATA_TYPE} - int - not used</li>
                     * <li>{@code SQL_DATETIME_SUB} - int - not used</li>
                     * <li>{@code CHAR_OCTET_LENGTH} - int - maximum number of bytes in the
                     * {@code char} type columns</li>
                     * <li>{@code ORDINAL_POSITION} - int - the column index in the table (1 based)</li>
                     * <li>{@code IS_NULLABLE} - String - {@code "NO"} = column does not allow
                     * NULLs, {@code "YES"} = column allows NULLs, "" = {@code NULL} status
                     * unknown</li>
                     * <li>{@code SCOPE_CATALOG} - String - if the {@code DATA_TYPE} is {@code REF},
                     * this gives the catalog of the table corresponding to the attribute's scope.
                     * NULL if the {@code DATA_TYPE} is not REF.</li>
                     * <li>{@code SCOPE_SCHEMA} - String - if the {@code DATA_TYPE} is {@code REF},
                     * this gives the schema of the table corresponding to the attribute's scope.
                     * NULL if the {@code DATA_TYPE} is not REF.</li>
                     * <li>{@code SCOPE_TABLE} - String - if the {@code DATA_TYPE} is {@code REF},
                     * this gives the name of the table corresponding to the attribute's scope.
                     * NULL if the {@code DATA_TYPE} is not REF.</li>
                     * <li>{@code SOURCE_DATA_TYPE} - String - The source type for a user
                     * generated REF type or for a Distinct type. ({@code NULL} if {@code
                     * DATA_TYPE} is not DISTINCT or a user generated REF)</li>
                     * </ol>
                     *
                     * @param catalog
                     *            a catalog name. {@code null} is used to imply no narrowing of
                     *            the search by catalog name. Otherwise, the name must match a
                     *            catalog name held in the database, with "" used to retrieve
                     *            those without a catalog name.
                     * @param schemaPattern
                     *            a schema name pattern. {@code null} is used to imply no
                     *            narrowing of the search by schema name. Otherwise, the name
                     *            must match a schema name in the database, with "" used to
                     *            retrieve those without a schema name.
                     * @param tableNamePattern
                     *            the table name. This must match the name of the table as
                     *            declared in the database.
                     * @param columnNamePattern
                     *            the column name. This must match the name of a column in the
                     *            table in the database.
                     * @return the descriptions as a {@code ResultSet} with rows in the form
                     *         defined above.
                     * @throws SQLException
                     *             if there is a database error.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.getConnection">
                     * Returns the database connection that created this metadata.
                     *
                     * @return the connection to the database.
                     * @throws SQLException
                     *             if there is a database error.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.getCrossReference(System.String,System.String,System.String,System.String,System.String,System.String)">
                     * Returns a list of foreign key columns in a given foreign key table that
                     * reference the primary key columns of a supplied primary key table. This
                     * describes how one table imports the key of another table. It would be
                     * expected to return a single foreign key - primary key pair in most cases.
                     * <p />
                     * The descriptions are returned as a {@code ResultSet} with one row for
                     * each foreign key, with the following layout:
                     * <ol>
                     * <li>{@code PKTABLE_CAT} - String - from the primary key table : Catalog
                     * (possibly {@code null})</li>
                     * <li>{@code PKTABLE_SCHEM} - String - from the primary key table : Schema
                     * (possibly {@code null})</li>
                     * <li>{@code PKTABLE_NAME} - String - from the primary key table : name</li>
                     * <li>{@code PKCOLUMN_NAME} - String - from the primary key column : name</li>
                     * <li>{@code FKTABLE_CAT} - String - from the foreign key table : the
                     * catalog name being exported (possibly {@code null})</li>
                     * <li>{@code FKTABLE_SCHEM} - String - from the foreign key table : the schema name
                     * being exported (possibly {@code null})</li>
                     * <li>{@code FKTABLE_NAME} - String - from the foreign key table : the name being
                     * exported</li>
                     * <li>{@code FKCOLUMN_NAME} - String - from the foreign key column : the name being
                     * exported</li>
                     * <li>{@code KEY_SEQ} - short - the sequence number (in the foreign key)</li>
                     * <li>{@code UPDATE_RULE} - short - a value giving the rule for how to treat the corresponding foreign key when a primary
                     * key is updated:
                     * <ul>
                     * <li>{@code DatabaseMetaData.importedKeyNoAction} - don't allow the
                     * primary key to be updated if it is imported as a foreign key</li>
                     * <li>{@code DatabaseMetaData.importedKeyCascade} - change the imported key to
                     * match the updated primary key</li>
                     * <li>{@code DatabaseMetaData.importedKeySetNull} - set the imported key to
                     * {@code null}</li>
                     * <li>{@code DatabaseMetaData.importedKeySetDefault} - set the imported key
                     * to its default value</li>
                     * <li>{@code DatabaseMetaData.importedKeyRestrict} - same as {@code
                     * importedKeyNoAction}</li>
                     * </ul>
                     * </li>
                     * <li>{@code DELETE_RULE} - short - a value giving the rule for how to treat the foreign key when the corresponding primary
                     * key is deleted:
                     * <ul>
                     * <li>{@code DatabaseMetaData.importedKeyNoAction} - don't allow the
                     * primary key to be deleted if it is imported as a foreign key</li>
                     * <li>{@code DatabaseMetaData.importedKeyCascade} - delete those rows that
                     * import a deleted key</li>
                     * <li>{@code DatabaseMetaData.importedKeySetNull} - set the imported key to
                     * {@code null}</li>
                     * <li>{@code DatabaseMetaData.importedKeySetDefault} - set the imported key
                     * to its default value</li>
                     * <li>{@code DatabaseMetaData.importedKeyRestrict} - same as
                     * importedKeyNoAction</li>
                     * </ul>
                     * </li>
                     * <li>{@code FK_NAME} - String - the foreign key name (possibly {@code null})</li>
                     * <li>{@code PK_NAME} - String - the primary key name (possibly {@code null})</li>
                     * <li>{@code DEFERRABILITY} - short - whether foreign key constraints can be
                     * deferred until commit (see the SQL92 specification for definitions):
                     * <ul>
                     * <li>{@code DatabaseMetaData.importedKeyInitiallyDeferred}</li>
                     * <li>{@code DatabaseMetaData.importedKeyInitiallyImmediate}</li>
                     * <li>{@code DatabaseMetaData.importedKeyNotDeferrable}</li>
                     * </ul>
                     * </li>
                     * </ol>
                     *
                     * @param primaryCatalog
                     *            a catalog name for the primary key table. {@code null} is used to imply no narrowing of
                     *            the search by catalog name. Otherwise, the name must match a
                     *            catalog name held in the database, with "" used to retrieve
                     *            those without a catalog name.
                     * @param primarySchema
                     *            a schema name for the primary key table. {@code null} is used to imply no narrowing of
                     *            the search by schema name. Otherwise, the name must match a
                     *            schema name in the database, with "" used to retrieve those
                     *            without a schema name.
                     * @param primaryTable
                     *            the name of the table which exports the key. It must match the
                     *            name of the table in the database.
                     * @param foreignCatalog
                     *            a catalog name for the foreign key table. {@code null} is used to imply no narrowing of
                     *            the search by catalog name. Otherwise, the name must match a
                     *            catalog name held in the database, with "" used to retrieve
                     *            those without a catalog name.
                     * @param foreignSchema
                     *            a schema name for the foreign key table. {@code null} is used to imply no narrowing of
                     *            the search by schema name. Otherwise, the name must match a
                     *            schema name in the database, with "" used to retrieve those
                     *            without a schema name.
                     * @param foreignTable
                     *            the name of the table importing the key. It must match the
                     *            name of the table in the database.
                     * @return a {@code ResultSet} containing rows with the descriptions of the
                     *         foreign keys laid out according to the format defined above.
                     * @throws SQLException
                     *             if there is a database error.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.getDatabaseMajorVersion">
                     * Returns the major version number of the database software.
                     *
                     * @return the major version number of the database software.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.getDatabaseMinorVersion">
                     * Returns the minor version number of the database software.
                     *
                     * @return the minor version number of the database software.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.getDatabaseProductName">
                     * Returns the name of the database software.
                     *
                     * @return a {@code String} with the name of the database software.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.getDatabaseProductVersion">
                     * Returns the version number of this database software.
                     *
                     * @return a {@code String} with the version number of the database
                     *         software.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.getDefaultTransactionIsolation">
                     * Returns the default transaction isolation level for this database.
                     *
                     * @return the default transaction isolation level. One of the following values:
                     *         <ul>
                     *         <li>{@code TRANSACTION_NONE}</li>
                     *         <li>{@code TRANSACTION_READ_COMMITTED}</li>
                     *         <li>{@code TRANSACTION_READ_UNCOMMITTED}</li>
                     *         <li>{@code TRANSACTION_REPEATABLE_READ}</li>
                     *         <li>{@code TRANSACTION_SERIALIZABLE}</li>
                     *         </ul>
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.getDriverMajorVersion">
                     * Returns the JDBC driver's major version number.
                     *
                     * @return the driver's major version number.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.getDriverMinorVersion">
                     * Returns the JDBC driver's minor version number.
                     *
                     * @return the driver's minor version number.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.getDriverName">
                     * Returns the name of this JDBC driver.
                     *
                     * @return a {@code String} containing the name of the JDBC driver
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.getDriverVersion">
                     * Returns the version number of this JDBC driver.
                     *
                     * @return a {@code String} containing the complete version number of the
                     *         JDBC driver.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.getExportedKeys(System.String,System.String,System.String)">
                     * Returns a list of the foreign key columns that reference the primary key
                     * columns of a specified table (the foreign keys exported by a table).
                     * <p />
                     * The list is returned as a {@code ResultSet} with a row for each of the
                     * foreign key columns, ordered by {@code FKTABLE_CAT}, {@code
                     * FKTABLE_SCHEM}, {@code FKTABLE_NAME}, and {@code KEY_SEQ}, with the
                     * format for each row being:
                     * <ol>
                     * <li>{@code PKTABLE_CAT} - String - from the primary key table : the catalog (possibly
                     * {@code null})</li>
                     * <li>{@code PKTABLE_SCHEM} - String - from the primary key table : the schema (possibly
                     * {@code null})</li>
                     * <li>{@code PKTABLE_NAME} - String - from the primary key table : the name</li>
                     * <li>{@code PKCOLUMN_NAME} - String - from the primary key column : the name</li>
                     * <li>{@code FKTABLE_CAT} - String - from the foreign key table : the catalog name being
                     * exported (possibly {@code null})</li>
                     * <li>{@code FKTABLE_SCHEM} - String - from the foreign key table : the schema name
                     * being exported (possibly {@code null})</li>
                     * <li>{@code FKTABLE_NAME} - String - from the foreign key table : the name being
                     * exported</li>
                     * <li>{@code FKCOLUMN_NAME} - String - from the foreign key column : the name being
                     * exported</li>
                     * <li>{@code KEY_SEQ} - short - the sequence number (in the foreign key)</li>
                     * <li>{@code UPDATE_RULE} - short - a value giving the rule for how to treat the foreign key when the corresponding primary
                     * key is updated:
                     * <ul>
                     * <li>{@code DatabaseMetaData.importedKeyNoAction} - don't allow the
                     * primary key to be updated if it is imported as a foreign key</li>
                     * <li>{@code DatabaseMetaData.importedKeyCascade} - change the imported key to
                     * match the primary key update</li>
                     * <li>{@code DatabaseMetaData.importedKeySetNull} - set the imported key to
                     * {@code null}</li>
                     * <li>{@code DatabaseMetaData.importedKeySetDefault} - set the imported key
                     * to its default value</li>
                     * <li>{@code DatabaseMetaData.importedKeyRestrict} - same as
                     * importedKeyNoAction</li>
                     * </ul>
                     * </li>
                     * <li>{@code DELETE_RULE} - short - how to treat the foreign key when the corresponding primary
                     * key is deleted:
                     * <ul>
                     * <li>{@code DatabaseMetaData.importedKeyNoAction} - don't allow the
                     * primary key to be deleted if it is imported as a foreign key</li>
                     * <li>{@code DatabaseMetaData.importedKeyCascade} - the deletion should
                     * also delete rows that import a deleted key</li>
                     * <li>{@code DatabaseMetaData.importedKeySetNull} - the deletion sets the
                     * imported key to {@code null}</li>
                     * <li>{@code DatabaseMetaData.importedKeySetDefault} - the deletion sets the
                     * imported key to its default value</li>
                     * <li>{@code DatabaseMetaData.importedKeyRestrict} - same as
                     * importedKeyNoAction</li>
                     * </ul>
                     * </li>
                     * <li>{@code FK_NAME} - String - the foreign key name (possibly {@code null})</li>
                     * <li>{@code PK_NAME} - String - the primary key name (possibly {@code null})</li>
                     * <li>{@code DEFERRABILITY} - short - defines whether the foreign key
                     * constraints can be deferred until commit (see the SQL92 specification for
                     * definitions):
                     * <ul>
                     * <li>{@code DatabaseMetaData.importedKeyInitiallyDeferred}</li>
                     * <li>{@code DatabaseMetaData.importedKeyInitiallyImmediate}</li>
                     * <li>{@code DatabaseMetaData.importedKeyNotDeferrable}</li>
                     * </ul>
                     * </li>
                     * </ol>
                     *
                     * @param catalog
                     *            a catalog name. {@code null} is used to imply no narrowing of
                     *            the search by catalog name. Otherwise, the name must match a
                     *            catalog name held in the database, with "" used to retrieve
                     *            those without a catalog name.
                     * @param schema
                     *            a schema name. {@code null} is used to imply no narrowing of
                     *            the search by schema name. Otherwise, the name must match a
                     *            schema name in the database, with "" used to retrieve those
                     *            without a schema name.
                     * @param table
                     *            a table name, which must match the name of a table in the
                     *            database
                     * @return a {@code ResultSet} containing a row for each of the foreign key
                     *         columns, as defined above
                     * @throws SQLException
                     *             a database error occurred</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.getExtraNameCharacters">
                     * Returns a string of characters that may be used in unquoted identifier
                     * names. The characters {@code a-z}, {@code A-Z}, {@code 0-9} and {@code _}
                     * are always permitted.
                     *
                     * @return a String containing all the additional permitted characters.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.getIdentifierQuoteString">
                     * Returns the string used to quote SQL identifiers. Returns " " (space) if
                     * identifier quoting not supported.
                     *
                     * @return the String used to quote SQL identifiers.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.getImportedKeys(System.String,System.String,System.String)">
                     * Returns a list columns in a table that are both primary keys and
                     * referenced by the table's foreign key columns (that is, the primary keys
                     * imported by a table).
                     * <p />
                     * The list returned is a {@code ResultSet} with a row entry for each
                     * primary key column, ordered by {@code PKTABLE_CAT}, {@code PKTABLE_SCHEM},
                     * {@code PKTABLE_NAME}, and {@code KEY_SEQ}, with the following format:
                     * <ol>
                     * <li>{@code PKTABLE_CAT} - String - primary key catalog name being
                     * imported (possibly {@code null})</li>
                     * <li>{@code PKTABLE_SCHEM} - String - primary key schema name being
                     * imported (possibly {@code null})</li>
                     * <li>{@code PKTABLE_NAME} - String - primary key table name being imported
                     * </li>
                     * <li>{@code PKCOLUMN_NAME} - String - primary key column name being
                     * imported</li>
                     * <li>{@code FKTABLE_CAT} - String - foreign key table catalog name
                     * (possibly {@code null})</li>
                     * <li>{@code FKTABLE_SCHEM} - String - foreign key table schema name
                     * (possibly {@code null})</li>
                     * <li>{@code FKTABLE_NAME} - String - foreign key table name</li>
                     * <li>{@code FKCOLUMN_NAME} - String - foreign key column name</li>
                     * <li>{@code KEY_SEQ} - short - sequence number (in the foreign key)</li>
                     * <li>{@code UPDATE_RULE} - short - how to treat the foreign key when the corresponding primary
                     * key is updated:
                     * <ul>
                     * <li>{@code DatabaseMetaData.importedKeyNoAction} - don't allow any update of
                     * the primary key if it is imported as a foreign key</li>
                     * <li>{@code DatabaseMetaData.importedKeyCascade} - change imported key to
                     * match the primary key update</li>
                     * <li>{@code DatabaseMetaData.importedKeySetNull} - set the imported key to
                     * {@code null}</li>
                     * <li>{@code DatabaseMetaData.importedKeySetDefault} - set the imported key
                     * to its default value</li>
                     * <li>{@code DatabaseMetaData.importedKeyRestrict} - same as
                     * importedKeyNoAction</li>
                     * </ul>
                     * </li>
                     * <li>{@code DELETE_RULE} - short - how to treat the foreign key when the corresponding primary
                     * key is deleted:
                     * <ul>
                     * <li>{@code DatabaseMetaData.importedKeyNoAction} - don't allow the primary key to be deleted
                     * if it is imported as a foreign key</li>
                     * <li>{@code DatabaseMetaData.importedKeyCascade} - delete those rows that
                     * import a deleted key</li>
                     * <li>{@code DatabaseMetaData.importedKeySetNull} - set the imported key to
                     * {@code null}</li>
                     * <li>{@code DatabaseMetaData.importedKeySetDefault} - set the imported key
                     * to its default value</li>
                     * <li>{@code DatabaseMetaData.importedKeyRestrict} - same as {@code
                     * importedKeyNoAction}</li>
                     * </ul>
                     * </li>
                     * <li>{@code FK_NAME} - String - foreign key name (possibly {@code null})</li>
                     * <li>{@code PK_NAME} - String - primary key name (possibly {@code null})</li>
                     * <li>{@code DEFERRABILITY} - short - defines whether foreign key
                     * constraints can be deferred until commit (see SQL92 specification for
                     * definitions):
                     * <ul>
                     * <li>{@code DatabaseMetaData.importedKeyInitiallyDeferred}</li>
                     * <li>{@code DatabaseMetaData.importedKeyInitiallyImmediate}</li>
                     * <li>{@code DatabaseMetaData.importedKeyNotDeferrable}</li>
                     * </ul>
                     * </li>
                     * </ol>
                     *
                     * @param catalog
                     *            a catalog name. {@code null} is used to imply no narrowing of
                     *            the search by catalog name. Otherwise, the name must match a
                     *            catalog name held in the database, with "" used to retrieve
                     *            those without a catalog name.
                     * @param schema
                     *            a schema name. {@code null} is used to imply no narrowing of
                     *            the search by schema name. Otherwise, the name must match a
                     *            schema name in the database, with "" used to retrieve those
                     *            without a schema name.
                     * @param table
                     *            a table name, which must match the name of a table in the
                     *            database.
                     * @return a {@code ResultSet} containing the list of primary key columns as
                     *         rows in the format defined above.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.getIndexInfo(System.String,System.String,System.String,System.Boolean,System.Boolean)">
                     * Returns a list of indices and statistics for a specified table.
                     * <p />
                     * The list is returned as a {@code ResultSet}, with one row for each index
                     * or statistic. The list is ordered by {@code NON_UNIQUE}, {@code TYPE},
                     * {@code INDEX_NAME}, and {@code ORDINAL_POSITION}. Each row has the
                     * following format:
                     * <ol>
                     * <li>{@code TABLE_CAT} - String - table catalog name (possibly {@code
                     * null})</li>
                     * <li>{@code TABLE_SCHEM} - String - table schema name (possibly {@code
                     * null})</li>
                     * <li>{@code TABLE_NAME} - String - The table name</li>
                     * <li>{@code NON_UNIQUE} - bool - {@code true} when index values can be
                     * non-unique. Must be {@code false} when the TYPE is tableIndexStatistic</li>
                     * <li>{@code INDEX_QUALIFIER} - String : index catalog name. {@code null}
                     * when the TYPE is 'tableIndexStatistic'</li>
                     * <li>{@code INDEX_NAME} - String : index name. {@code null} when TYPE is
                     * 'tableIndexStatistic'</li>
                     * <li>{@code TYPE} - short - the index type. One of:
                     * <ul>
                     * <li>{@code DatabaseMetaData.tableIndexStatistic} - table statistics
                     * returned with Index descriptions</li>
                     * <li>{@code DatabaseMetaData.tableIndexClustered} - a clustered Index</li>
                     * <li>{@code DatabaseMetaData.tableIndexHashed} - a hashed Index</li>
                     * <li>{@code DatabaseMetaData.tableIndexOther} - other style of Index</li>
                     * </ul>
                     * </li>
                     * <li>{@code ORDINAL_POSITION} - short - column sequence within Index. 0
                     * when TYPE is tableIndexStatistic</li>
                     * <li>{@code COLUMN_NAME} - String - the column name. {@code null} when
                     * TYPE is tableIndexStatistic</li>
                     * <li>{@code ASC_OR_DESC} - String - column sort sequence. {@code null} if
                     * sequencing not supported or TYPE is tableIndexStatistic; otherwise "A"
                     * means sort ascending and "D" means sort descending.</li>
                     * <li>{@code CARDINALITY} - int - Number of unique values in the Index. If
                     * TYPE is tableIndexStatistic, this is number of rows in the table.</li>
                     * <li>{@code PAGES} - int - Number of pages for current Index. If TYPE is
                     * tableIndexStatistic, this is number of pages used for the table.</li>
                     * <li>{@code FILTER_CONDITION} - String - Filter condition. (possibly null)
                     * </li>
                     * </ol>
                     *
                     * @param catalog
                     *            a catalog name. {@code null} is used to imply no narrowing of
                     *            the search by catalog name. Otherwise, the name must match a
                     *            catalog name held in the database, with "" used to retrieve
                     *            those without a catalog name.
                     * @param schema
                     *            a schema name. {@code null} is used to imply no narrowing of
                     *            the search by schema name. Otherwise, the name must match a
                     *            schema name in the database, with "" used to retrieve those
                     *            without a schema name.
                     * @param table
                     *            a table name, which must match the name of a table in the
                     *            database.
                     * @param unique
                     *            {@code true} means only return indices for unique values,
                     *            {@code false} implies that they can be returned even if not
                     *            unique.
                     * @param approximate
                     *            {@code true} implies that the list can contain approximate or
                     *            "out of data" values, {@code false} implies that all values
                     *            must be precisely accurate
                     * @return a {@code ResultSet} containing the list of indices and statistics
                     *         for the table, in the format defined above.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.getJDBCMajorVersion">
                     * Returns this driver's major JDBC version number.
                     *
                     * @return the major JDBC version number.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.getJDBCMinorVersion">
                     * Returns the minor JDBC version number for this driver.
                     *
                     * @return the Minor JDBC Version Number.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.getMaxBinaryLiteralLength">
                     * Get the maximum number of hex characters in an in-line binary literal for
                     * this database.
                     *
                     * @return the maximum number of hex characters in an in-line binary
                     *         literal. If the number is unlimited then the result is zero.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.getMaxCatalogNameLength">
                     * Returns the maximum size of a catalog name in this database.
                     *
                     * @return the maximum size in characters for a catalog name. If the limit
                     *         is unknown, or the value is unlimited, then the result is zero.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.getMaxCharLiteralLength">
                     * Returns the maximum size for a character literal in this database.
                     *
                     * @return the maximum size in characters for a character literal. If the
                     *         limit is unknown, or the value is unlimited, then the result is
                     *         zero.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.getMaxColumnNameLength">
                     * Returns the maximum size for a Column name for this database.
                     *
                     * @return the maximum number of characters for a Column name. If the limit
                     *         is unknown, or the value is unlimited, then the result is zero.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.getMaxColumnsInGroupBy">
                     * Get the maximum number of columns in a {@code GROUP BY} clause for this
                     * database.
                     *
                     * @return the maximum number of columns in a {@code GROUP BY} clause. If
                     *         the limit is unknown, or the value is unlimited, then the result
                     *         is zero.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.getMaxColumnsInIndex">
                     * Returns the maximum number of columns in an Index for this database.
                     *
                     * @return the maximum number of columns in an Index. If the limit is
                     *         unknown, or the value is unlimited, then the result is zero.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.getMaxColumnsInOrderBy">
                     * Returns the maximum number of columns in an {@code ORDER BY} clause for
                     * this database.
                     *
                     * @return the maximum number of columns in an {@code ORDER BY} clause. If
                     *         the limit is unknown, or the value is unlimited, then the result
                     *         is zero.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.getMaxColumnsInSelect">
                     * Returns the maximum number of columns in a {@code SELECT} list for this
                     * database.
                     *
                     * @return the maximum number of columns in a {@code SELECT} list. If the
                     *         limit is unknown, or the value is unlimited, then the result is
                     *         zero.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.getMaxColumnsInTable">
                     * Returns the maximum number of columns in a table for this database.
                     *
                     * @return the maximum number of columns in a table. If the limit is
                     *         unknown, or the value is unlimited, then the result is zero.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.getMaxConnections">
                     * Returns the database's maximum number of concurrent connections.
                     *
                     * @return the maximum number of connections. If the limit is unknown, or
                     *         the value is unlimited, then the result is zero.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.getMaxCursorNameLength">
                     * Returns the maximum length of a cursor name for this database.
                     *
                     * @return the maximum number of characters in a cursor name. If the limit
                     *         is unknown, or the value is unlimited, then the result is zero.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.getMaxIndexLength">
                     * Returns the maximum length in bytes for an Index for this database. This
                     * covers all the parts of a composite index.
                     *
                     * @return the maximum length in bytes for an Index. If the limit is
                     *         unknown, or the value is unlimited, then the result is zero.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.getMaxProcedureNameLength">
                     * Returns the maximum number of characters for a procedure name in this
                     * database.
                     *
                     * @return the maximum number of character for a procedure name. If the
                     *         limit is unknown, or the value is unlimited, then the result is
                     *         zero.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.getMaxRowSize">
                     * Returns the maximum number of bytes within a single row for this
                     * database.
                     *
                     * @return the maximum number of bytes for a single row. If the limit is
                     *         unknown, or the value is unlimited, then the result is zero.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.getMaxSchemaNameLength">
                     * Returns the maximum number of characters in a schema name for this
                     * database.
                     *
                     * @return the maximum number of characters in a schema name. If the limit
                     *         is unknown, or the value is unlimited, then the result is zero.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.getMaxStatementLength">
                     * Returns the maximum number of characters in an SQL statement for this
                     * database.
                     *
                     * @return the maximum number of characters in an SQL statement. If the
                     *         limit is unknown, or the value is unlimited, then the result is
                     *         zero.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.getMaxStatements">
                     * Get the maximum number of simultaneously open active statements for this
                     * database.
                     *
                     * @return the maximum number of open active statements. If the limit is
                     *         unknown, or the value is unlimited, then the result is zero.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.getMaxTableNameLength">
                     * Returns the maximum size for a table name in the database.
                     *
                     * @return the maximum size in characters for a table name. If the limit is
                     *         unknown, or the value is unlimited, then the result is zero.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.getMaxTablesInSelect">
                     * Returns the maximum number of tables permitted in a {@code SELECT}
                     * statement for the database.
                     *
                     * @return the maximum number of tables permitted in a {@code SELECT}
                     *         statement. If the limit is unknown, or the value is unlimited,
                     *         then the result is zero.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.getMaxUserNameLength">
                     * Returns the maximum number of characters in a user name for the database.
                     *
                     * @return the maximum number of characters in a user name. If the limit is
                     *         unknown, or the value is unlimited, then the result is zero.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.getNumericFunctions">
                     * Returns a list of the math functions available with this database. These
                     * are used in the JDBC function escape clause and are the Open Group CLI
                     * math function names.
                     *
                     * @return a String which contains the list of math functions as a comma
                     *         separated list.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.getPrimaryKeys(System.String,System.String,System.String)">
                     * Returns a list of the primary key columns of a specified table.
                     * <p />
                     * The list is returned as a {@code ResultSet} with one row for each primary
                     * key column, ordered by {@code COLUMN_NAME}, with each row having the
                     * structure as follows:
                     * <ol>
                     * <li>{@code TABLE_CAT} - String - table catalog name (possibly null)</li>
                     * <li>{@code TABLE_SCHEM} - String - table schema name (possibly null)</li>
                     * <li>{@code TABLE_NAME} - String - The table name</li>
                     * <li>{@code COLUMN_NAME} - String - The column name</li>
                     * <li>{@code KEY_SEQ} - short - the sequence number for this column in the
                     * primary key</li>
                     * <li>{@code PK_NAME} - String - the primary key name (possibly null)</li>
                     * </ol>
                     *
                     * @param catalog
                     *            a catalog name. {@code null} is used to imply no narrowing of
                     *            the search by catalog name. Otherwise, the name must match a
                     *            catalog name held in the database, with the empty string used
                     *            to retrieve those without a catalog name.
                     * @param schema
                     *            a schema name. {@code null} is used to imply no narrowing of
                     *            the search by schema name. Otherwise, the name must match a
                     *            schema name in the database, with the empty string used to
                     *            retrieve those without a schema name.
                     * @param table
                     *            the name of a table, which must match the name of a table in
                     *            the database.
                     * @return a {@code ResultSet} containing the list of keys in the format
                     *         defined above.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.getProcedureColumns(System.String,System.String,System.String,System.String)">
                     * Returns a list of parameter and result columns for the stored procedures
                     * belonging to a specified catalog.
                     * <p />
                     * The list is returned as a {@code ResultSet} with one row for each
                     * parameter or result column. The data is ordered by {@code
                     * PROCEDURE_SCHEM} and {@code PROCEDURE_NAME}, while for each procedure,
                     * the return value (if any) is first, followed by the parameters in the
                     * order they appear in the stored procedure call, followed by {@code
                     * ResultSet} columns in column number order. Each row has the following
                     * structure:
                     * <ol>
                     * <li>{@code PROCEDURE_CAT} - String - the procedure catalog name</li>
                     * <li>{@code PROCEDURE_SCHEM} - String - the procedure schema name
                     * (possibly null)</li>
                     * <li>{@code PROCEDURE_NAME} - String - the procedure name</li>
                     * <li>{@code COLUMN_NAME} - String - the name of the column</li>
                     * <li>{@code COLUMN_TYPE} - short - the kind of column or parameter, as
                     * follows:
                     * <ul>
                     * <li>{@code DatabaseMetaData.procedureColumnUnknown} - type unknown</li>
                     * <li>{@code DatabaseMetaData.procedureColumnIn} - an {@code IN} parameter</li>
                     * <li>{@code DatabaseMetaData.procedureColumnInOut} - an {@code INOUT}
                     * parameter</li>
                     * <li>{@code DatabaseMetaData.procedureColumnOut} - an {@code OUT}
                     * parameter</li>
                     * <li>{@code DatabaseMetaData.procedureColumnReturn} - a return value</li>
                     * <li>{@code DatabaseMetaData.procedureReturnsResult} - a result column in
                     * a result set</li>
                     * </ul>
                     * </li>
                     * <li>{@code DATA_TYPE} - int - the SQL type of the data, as in {@code
                     * java.sql.Types}</li>
                     * <li>{@code TYPE_NAME} - String - the SQL type name, for a UDT it is fully
                     * qualified</li>
                     * <li>{@code PRECISION} - int - the precision</li>
                     * <li>{@code LENGTH} - int - the length of the data in bytes</li>
                     * <li>{@code SCALE} - short - the scale for numeric types</li>
                     * <li>{@code RADIX} - short - the Radix for numeric data (typically 2 or
                     * 10)</li>
                     * <li>{@code NULLABLE} - short - can the data contain {@code null}:
                     * <ul>
                     * <li>{@code DatabaseMetaData.procedureNoNulls} - {@code NULL}s not
                     * permitted</li>
                     * <li>{@code DatabaseMetaData.procedureNullable} - {@code NULL}s are
                     * permitted</li>
                     * <li>{@code DatabaseMetaData.procedureNullableUnknown} - {@code NULL}
                     * status unknown</li>
                     * </ul>
                     * </li>
                     * <li>{@code REMARKS} - String - an explanatory comment about the data item
                     * </li>
                     * </ol>
                     *
                     * @param catalog
                     *            a catalog name. {@code null} is used to imply no narrowing of
                     *            the search by catalog name. Otherwise, the name must match a
                     *            catalog name held in the database, with "" used to retrieve
                     *            those without a catalog name.
                     * @param schemaPattern
                     *            a schema name pattern. {@code null} is used to imply no
                     *            narrowing of the search by schema name. Otherwise, the name
                     *            must match a schema name in the database, with "" used to
                     *            retrieve those without a schema name.
                     * @param procedureNamePattern
                     *            a pattern that must match the name of the procedure stored in
                     *            the database.
                     * @param columnNamePattern
                     *            a column name pattern. The name must match the column name
                     *            stored in the database.
                     * @return a {@code ResultSet} with the list of parameter and result columns
                     *         in the format defined above.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.getProcedures(System.String,System.String,System.String)">
                     * Returns a list of the stored procedures available in a specified catalog.
                     * <p />
                     * The list is returned as a {@code ResultSet} with one row for each stored
                     * procedure, ordered by PROCEDURE_SCHEM and PROCEDURE_NAME, with the data
                     * in each row as follows:
                     * <ol>
                     * <li>{@code PROCEDURE_CAT} - String : the procedure catalog name</li>
                     * <li>{@code PROCEDURE_SCHEM} - String : the procedure schema name
                     * (possibly {@code null})</li>
                     * <li>{@code PROCEDURE_NAME} - String : the procedure name</li>
                     * <li>{@code Reserved}</li>
                     * <li>{@code Reserved}</li>
                     * <li>{@code Reserved}</li>
                     * <li>{@code REMARKS} - String - information about the procedure</li>
                     * <li>{@code PROCEDURE_TYPE} - short : one of:
                     * <ul>
                     * <li>{@code DatabaseMetaData.procedureResultUnknown} - procedure may
                     * return a result</li>
                     * <li>{@code DatabaseMetaData.procedureNoResult} - procedure does not
                     * return a result</li>
                     * <li>{@code DatabaseMetaData.procedureReturnsResult} - procedure
                     * definitely returns a result</li>
                     * </ul>
                     * </li>
                     * </ol>
                     *
                     * @param catalog
                     *            a catalog name. {@code null} is used to imply no narrowing of
                     *            the search by catalog name. Otherwise, the name must match a
                     *            catalog name held in the database, with "" used to retrieve
                     *            those without a catalog name.
                     * @param schemaPattern
                     *            a schema name pattern. {@code null} is used to imply no
                     *            narrowing of the search by schema name. Otherwise, the name
                     *            must match a schema name in the database, with "" used to
                     *            retrieve those without a schema name.
                     * @param procedureNamePattern
                     *            a procedure name pattern, which must match the procedure name
                     *            stored in the database.
                     * @return a {@code ResultSet} where each row is a description of a stored
                     *         procedure in the format defined above.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.getProcedureTerm">
                     * Returns the database vendor's preferred name for "procedure".
                     *
                     * @return a String with the vendor's preferred name for "procedure".
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.getResultSetHoldability">
                     * Returns the result set's default holdability.
                     *
                     * @return one of {@code ResultSet.HOLD_CURSORS_OVER_COMMIT} or {@code
                     *         ResultSet.CLOSE_CURSORS_AT_COMMIT}.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.getSchemas">
                     * Returns a list of the schema names in the database. The list is returned
                     * as a {@code ResultSet}, ordered by the schema name, with one row per
                     * schema in the following format:
                     * <ol>
                     * <li>{@code TABLE_SCHEM} - String - the schema name</li><li>{@code
                     * TABLE_CATALOG} - String - the catalog name (possibly {@code null}) </li>
                     * </ol>
                     *
                     * @return a {@code ResultSet} with one row for each schema in the format
                     *         defined above.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.getSchemaTerm">
                     * Returns the database vendor's preferred term for "schema".
                     *
                     * @return a String which is the vendor's preferred term for schema.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.getSearchStringEscape">
                     * Returns the string that is used to escape wildcard characters. This
                     * string is used to escape the {@code '_'} and {@code '%'} wildcard
                     * characters in catalog search pattern strings. {@code '_'} is used to represent any single
                     * character while {@code '%'} is used for a sequence of zero or more
                     * characters.
                     *
                     * @return a String used to escape the wildcard characters.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.getSQLKeywords">
                     * Returns a list of all the SQL keywords that are NOT also SQL92 keywords
                     * for the database.
                     *
                     * @return a String containing the list of SQL keywords in a comma separated
                     *         format.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.getSQLStateType">
                     * States the type of {@code SQLState} value returned by {@code
                     * SQLException.getSQLState}. This can either be the X/Open (now known as
                     * Open Group) SQL CLI form or the SQL99 form.
                     *
                     * @return an integer, which is either {@code
                     *         DatabaseMetaData.sqlStateSQL99} or {@code
                     *         DatabaseMetaData.sqlStateXOpen}.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.getStringFunctions">
                     * Returns a list of string functions available with the database. These
                     * functions are used in JDBC function escape clause and follow the Open
                     * Group CLI string function names definition.
                     *
                     * @return a String containing the list of string functions in comma
                     *         separated format.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.getSuperTables(System.String,System.String,System.String)">
                     * Returns a listing of the hierarchies of tables in a specified schema in
                     * the database.
                     * <p />
                     * The listing only contains entries for tables that have a super table.
                     * Super tables and corresponding subtables must be defined in the same catalog and schema. The
                     * list is returned as a {@code ResultSet}, with one row for each table that
                     * has a super table, in the following format:
                     * <ol>
                     * <li>{@code TABLE_CAT} - String - table catalog name (possibly {@code
                     * null})</li>
                     * <li>{@code TABLE_SCHEM} - String - Table schema name (possibly {@code
                     * null})</li>
                     * <li>{@code TABLE_NAME} - String - The table name</li>
                     * <li>SUPER{@code TABLE_NAME} - String - The super table name</li>
                     * </ol>
                     *
                     * @param catalog
                     *            a catalog name. {@code null} is used to imply no narrowing of
                     *            the search by catalog name. Otherwise, the name must match a
                     *            catalog name held in the database, with "" used to retrieve
                     *            those without a catalog name.
                     * @param schemaPattern
                     *            a schema name pattern. {@code null} is used to imply no
                     *            narrowing of the search by schema name. Otherwise, the name
                     *            must match a schema name in the database, with "" used to
                     *            retrieve those without a schema name.
                     * @param tableNamePattern
                     *            a table name, which should match the table name as stored in
                     *            the database. it may be a fully qualified name. If it is fully
                     *            qualified the catalog name and schema name parameters are
                     *            ignored.
                     * @return a {@code ResultSet} with one row for each table which has a super
                     *         table, in the format defined above. An empty {@code ResultSet} is
                     *         returned if the database does not support table hierarchies.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.getSuperTypes(System.String,System.String,System.String)">
                     * Returns the User Defined Type (UDT) hierarchies for a given schema. Only
                     * the immediate parent/child relationship is described. If a UDT does not
                     * have a direct supertype, it is not listed.
                     * <p />
                     * The listing is returned as a {@code ResultSet} where there is one row for
                     * a specific UDT which describes its supertype, with the data organized in
                     * columns as follows:
                     * <ol>
                     * <li>{@code TYPE_CAT} - String - the UDT catalog name (possibly {@code
                     * null})</li>
                     * <li>{@code TYPE_SCHEM} - String - the UDT schema name (possibly {@code
                     * null})</li>
                     * <li>{@code TYPE_NAME} - String - the UDT type name</li>
                     * <li>SUPER{@code TYPE_CAT} - String - direct supertype's catalog name
                     * (possibly {@code null})</li>
                     * <li>SUPER{@code TYPE_SCHEM} - String - direct supertype's schema name
                     * (possibly {@code null})</li>
                     * <li>SUPER{@code TYPE_NAME} - String - direct supertype's name</li>
                     * </ol>
                     *
                     * @param catalog
                     *            the catalog name. "" means get the UDTs without a catalog.
                     *            {@code null} means don't use the catalog name to restrict the
                     *            search.
                     * @param schemaPattern
                     *            the Schema pattern name. "" means get the UDT's without a
                     *            schema.
                     * @param typeNamePattern
                     *            the UDT name pattern. This may be a fully qualified name. When
                     *            a fully qualified name is specified, the catalog name and
                     *            schema name parameters are ignored.
                     * @return a {@code ResultSet} in which each row gives information about a
                     *         particular UDT in the format defined above. An empty ResultSet is
                     *         returned for a database that does not support type hierarchies.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.getSystemFunctions">
                     * Returns a list of system functions available with the database. These are
                     * names used in the JDBC function escape clause and are Open Group CLI
                     * function names.
                     *
                     * @return a String containing the list of system functions in a comma
                     *         separated format.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.getTablePrivileges(System.String,System.String,System.String)">
                     * Returns a description of access rights for each table present in a
                     * catalog. Table privileges can apply to one or more columns in the table -
                     * but are not guaranteed to apply to all columns.
                     * <p />
                     * The privileges are returned as a {@code ResultSet}, with one row for each
                     * privilege, ordered by {@code TABLE_SCHEM}, {@code TABLE_NAME}, {@code
                     * PRIVILEGE}, and each row has data as defined in the following column
                     * definitions:
                     * <ol>
                     * <li>{@code TABLE_CAT} - String - table catalog name (possibly {@code
                     * null})</li>
                     * <li>{@code TABLE_SCHEM} - String - Table schema name (possibly {@code
                     * null})</li>
                     * <li>{@code TABLE_NAME} - String - The table name</li>
                     * <li>GRANTOR - String - who granted the access</li>
                     * <li>GRANTEE - String - who received the access grant</li>
                     * <li>PRIVILEGE - String - the type of access granted - one of SELECT,
                     * INSERT, UPDATE, REFERENCES,...</li>
                     * <li>IS_GRANTABLE - String - {@code "YES"} implies the grantee can grant
                     * access to others, {@code "NO"} implies guarantee cannot grant access to
                     * others, {@code null} means this status is unknown</li>
                     * </ol>
                     *
                     * @param catalog
                     *            a catalog name. {@code null} is used to imply no narrowing of
                     *            the search by catalog name. Otherwise, the name must match a
                     *            catalog name held in the database, with "" used to retrieve
                     *            those without a catalog name.
                     * @param schemaPattern
                     *            a schema name pattern. {@code null} is used to imply no
                     *            narrowing of the search by schema name. Otherwise, the name
                     *            must match a schema name in the database, with "" used to
                     *            retrieve those without a schema name.
                     * @param tableNamePattern
                     *            a Table Name, which should match the table name as stored in
                     *            the database.
                     * @return a {@code ResultSet} containing a list with one row for each table
                     *         in the format defined above.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.getTables(System.String,System.String,System.String,System.String[])">
                     * Returns a description of the tables in a specified catalog.
                     * <p />
                     * The descriptions are returned as rows in a {@code ResultSet}, one row for
                     * each Table. The ResultSet is ordered by {@code TABLE_TYPE}, {@code
                     * TABLE_SCHEM} and {@code TABLE_NAME}. Each row in the ResultSet consists
                     * of a series of columns as follows:
                     * <ol>
                     * <li>{@code TABLE_CAT} - String - table catalog name (possibly {@code
                     * null})</li>
                     * <li>{@code TABLE_SCHEM} - String - Table schema name (possibly {@code
                     * null})</li>
                     * <li>{@code TABLE_NAME} - String - The table name</li>
                     * <li>{@code TABLE_TYPE} - String - Typical names include "TABLE", "VIEW",
                     * "SYSTEM TABLE", "ALIAS", "SYNONYM", "GLOBAL TEMPORARY"</li>
                     * <li>{@code REMARKS} - String - A comment describing the table</li>
                     * <li>{@code TYPE_CAT} - String - the 'Types' catalog(possibly {@code null}
                     * )</li>
                     * <li>{@code TYPE_SCHEM} - String - the 'Types' schema(possibly {@code
                     * null})</li>
                     * <li>{@code TYPE_NAME} - String - the 'Types' name (possibly {@code null})
                     * </li>
                     * <li>{@code SELF_REFERENCING_COL_NAME} - String - the name of a designated
                     * identifier column in a typed table (possibly {@code null})</li>
                     * <li>REF_GENERATION - String - one of the following values : "SYSTEM" |
                     * "USER" | "DERIVED" - specifies how values in the {@code
                     * SELF_REFERENCING_COL_NAME} are created (possibly {@code null})</li>
                     * </ol>
                     *
                     * @param catalog
                     *            a catalog name. {@code null} is used to imply no narrowing of
                     *            the search by catalog name. Otherwise, the name must match a
                     *            catalog name held in the database, with "" used to retrieve
                     *            those without a catalog name.
                     * @param schemaPattern
                     *            a schema name pattern. {@code null} is used to imply no
                     *            narrowing of the search by schema name. Otherwise, the name
                     *            must match a schema name in the database, with "" used to
                     *            retrieve those without a schema name.
                     * @param tableNamePattern
                     *            a table name, which should match the table name as stored in
                     *            the database.
                     * @param types
                     *            a list of table types to include in the list. {@code null}
                     *            implies list all types.
                     * @return a {@code ResultSet} with one row per table in the format defined
                     *         above.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.getTableTypes">
                     * Returns a list of table types supported by the database.
                     * <p />
                     * The list is returned as a {@code ResultSet} with one row per table type,
                     * ordered by the table type. The information in the {@code ResultSet} is
                     * structured into a single column per row, as follows:
                     * <ol>
                     * <li>{@code TABLE_TYPE} - String - the table type. Typical names include
                     * {@code "TABLE"}, {@code "VIEW"}, "{@code SYSTEM TABLE"}, {@code "ALIAS"},
                     * {@code "SYNONYM"}, {@code "GLOBAL TEMPORARY"}</li>
                     * </ol>
                     *
                     * @return a {@code ResultSet} with one row per table type in the format
                     *         defined above.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.getTimeDateFunctions">
                     * Returns a list of time and date functions available for the database.
                     *
                     * @return a string containing a comma separated list of the time and date
                     *         functions.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.getTypeInfo">
                     * Get a list of the standard SQL types supported by this database. The list
                     * is returned as a {@code ResultSet}, with one row for each type, ordered
                     * by the {@code DATA_TYPE} value, where the data in each row is structured
                     * into the following columns:
                     * <ol>
                     * <li>{@code TYPE_NAME} - String : the type name</li>
                     * <li>{@code DATA_TYPE} - int : the SQL data type value as defined in
                     * {@code java.sql.Types}</li>
                     * <li>{@code PRECISION} - int - the maximum precision of the type</li>
                     * <li>{@code LITERAL_PREFIX} - String : the prefix to be used when quoting
                     * a literal value (possibly {@code null})</li>
                     * <li>{@code LITERAL_SUFFIX} - String : the suffix to be used when quoting
                     * a literal value (possibly {@code null})</li>
                     * <li>{@code CREATE_PARAMS} - String : params used when creating the type
                     * (possibly {@code null})</li>
                     * <li>{@code NULLABLE} - short : shows if the value is nullable:
                     * <ul>
                     * <li>{@code DatabaseMetaData.typeNoNulls} : {@code NULL}s not permitted</li>
                     * <li>{@code DatabaseMetaData.typeNullable} : {@code NULL}s are permitted</li>
                     * <li>{@code DatabaseMetaData.typeNullableUnknown} : {@code NULL} status
                     * unknown</li>
                     * </ul>
                     * </li>
                     * <li>{@code CASE_SENSITIVE} - bool : true if the type is case sensitive
                     * </li>
                     * <li>{@code SEARCHABLE} - short : how this type can be used with {@code WHERE}
                     * clauses:
                     * <ul>
                     * <li>{@code DatabaseMetaData.typePredNone} - {@code WHERE} clauses cannot be used</li>
                     * <li>{@code DatabaseMetaData.typePredChar} - support for {@code
                     * WHERE...LIKE} only</li>
                     * <li>{@code DatabaseMetaData.typePredBasic} - support except for {@code
                     * WHERE...LIKE}</li>
                     * <li>{@code DatabaseMetaData.typeSearchable} - support for all {@code
                     * WHERE} clauses</li>
                     * </ul>
                     * </li>
                     * <li>{@code UNSIGNED_ATTRIBUTE} - bool - the type is unsigned or not</li>
                     * <li>{@code FIXED_PREC_SCALE} - bool - fixed precision = it can be used
                     * as a money value</li>
                     * <li>{@code AUTO_INCREMENT} - bool - can be used as an auto-increment
                     * value</li>
                     * <li>{@code LOCAL_TYPE_NAME} - String - a localized version of the type
                     * name (possibly {@code null})</li>
                     * <li>{@code MINIMUM_SCALE} - short - the minimum scale supported</li>
                     * <li>{@code MAXIMUM_SCALE} - short - the maximum scale supported</li>
                     * <li>{@code SQL_DATA_TYPE} - int - not used</li>
                     * <li>{@code SQL_DATETIME_SUB} - int - not used</li>
                     * <li>{@code NUM_PREC_RADIX} - int - number radix (typically 2 or 10)</li>
                     * </ol>
                     *
                     * @return a {@code ResultSet} which is structured as described above.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.getUDTs(System.String,System.String,System.String,System.Int32[])">
                     * Returns a description of the User Defined Types (UDTs) defined in a given
                     * schema, which includes the types {@code DISTINCT}, {@code STRUCT} and
                     * {@code JAVA_OBJECT}.
                     * <p />
                     * The types matching the supplied the specified catalog, schema, type name
                     * and type are returned as rows in a {@code ResultSet} with columns of
                     * information as follows:
                     * <ol>
                     * <li>{@code TABLE_CAT} - String - catalog name (possibly {@code null})</li>
                     * <li>{@code TABLE_SCHEM} - String - schema name (possibly {@code null})</li>
                     * <li>{@code TABLE_NAME} - String - The table name</li>
                     * <li>{@code CLASS_NAME} - String - The Java class name</li>
                     * <li>{@code DATA_TYPE} - int - The SQL type as specified in {@code
                     * java.sql.Types}. One of DISTINCT, STRUCT, and JAVA_OBJECT</li>
                     * <li>{@code REMARKS} - String - A comment which describes the type</li>
                     * <li>{@code BASE_TYPE} - short - A type code. For a DISTINCT type, the
                     * source type. For a structured type this is the type that implements the
                     * user generated reference type of the {@code SELF_REFERENCING_COLUMN}.
                     * This is defined in {@code java.sql.Types}, and will be {@code null} if
                     * the {@code DATA_TYPE} does not match these criteria.</li>
                     * </ol>
                     * <p />
                     * If the driver does not support UDTs, the {@code ResultSet} is empty.
                     *
                     * @param catalog
                     *            a catalog name. {@code null} is used to imply no narrowing of
                     *            the search by catalog name. Otherwise, the name must match a
                     *            catalog name held in the database, with "" used to retrieve
                     *            those without a catalog name.
                     * @param schemaPattern
                     *            a schema name pattern. {@code null} is used to imply no
                     *            narrowing of the search using schema name. Otherwise, the name
                     *            must match a schema name in the database, with "" used to
                     *            retrieve those without a schema name.
                     * @param typeNamePattern
                     *            a type name pattern, which should match a type name as stored in the
                     *            database. It may be fully qualified.
                     * @param types
                     *            a list of the UDT types to include in the list - one of
                     *            {@code DISTINCT}, {@code STRUCT} or {@code JAVA_OBJECT}.
                     * @return a {@code ResultSet} in the format described above.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.getURL">
                     * Returns the URL for this database.
                     *
                     * @return the URL for the database. {@code null} if it cannot be generated.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.getUserName">
                     * Determine the user name as known by the database.
                     *
                     * @return the user name.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.getVersionColumns(System.String,System.String,System.String)">
                     * Returns which of a table's columns are automatically updated when any
                     * value in a row is updated.
                     * <p />
                     * The result is laid-out in the following columns:
                     * <ol>
                     * <li>{@code SCOPE} - short - not used</li>
                     * <li>{@code COLUMN_NAME} - String - Column name</li>
                     * <li>{@code DATA_TYPE} - int - The SQL data type, as defined in {@code
                     * java.sql.Types}</li>
                     * <li>{@code TYPE_NAME} - String - The SQL type name, data source dependent
                     * </li>
                     * <li>{@code COLUMN_SIZE} - int - Precision for numeric types</li>
                     * <li>{@code BUFFER_LENGTH} - int - Length of a column value in bytes</li>
                     * <li>{@code DECIMAL_DIGITS} - short - Number of digits after the decimal
                     * point</li>
                     * <li>{@code PSEUDO_COLUMN} - short - If this is a pseudo-column (for
                     * example, an Oracle {@code ROWID}):
                     * <ul>
                     * <li>{@code DatabaseMetaData.bestRowUnknown} - don't know whether this is
                     * a pseudo column</li>
                     * <li>{@code DatabaseMetaData.bestRowNotPseudo} - column is not pseudo</li>
                     * <li>{@code DatabaseMetaData.bestRowPseudo} - column is a pseudo column</li>
                     * </ul>
                     * </li>
                     * </ol>
                     *
                     * @param catalog
                     *            a catalog name. {@code null} is used to imply no narrowing of
                     *            the search using catalog name. Otherwise, the name must match
                     *            a catalog name held in the database, with "" used to retrieve
                     *            those without a catalog name.
                     * @param schema
                     *            a schema name pattern. {@code null} is used to imply no
                     *            narrowing of the search using schema names. Otherwise, the
                     *            name must match a schema name in the database, with "" used to
                     *            retrieve those without a schema name.
                     * @param table
                     *            a table name. It must match the name of a table in the
                     *            database.
                     * @return a {@code ResultSet} containing the descriptions, one row for each
                     *         column, in the format defined above.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.insertsAreDetected(System.Int32)">
                     * Determines whether a visible row insert can be detected by calling {@code
                     * ResultSet.rowInserted}.
                     *
                     * @param type
                     *            the {@code ResultSet} type. This may be one of {@code
                     *            ResultSet.TYPE_SCROLL_SENSITIVE} or {@code
                     *            ResultSet.TYPE_SCROLL_INSENSITIVE} or {@code
                     *            ResultSet.TYPE_FORWARD_ONLY},
                     * @return {@code true} if {@code ResultSet.rowInserted} detects a visible
                     *         row insert otherwise {@code false}.
                     * @throws SQLException
                     *             a database error occurred.
                     * @see ResultSet#rowInserted()</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.isCatalogAtStart">
                     * Determine whether a fully qualified table name is prefixed or suffixed to
                     * a fully qualified table name.
                     *
                     * @return {@code true} if the catalog appears at the start of a fully
                     *         qualified table name, {@code false} otherwise.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.isReadOnly">
                     * Determines whether the database is in read-only mode.
                     *
                     * @return {@code true} if the database is in read-only mode, {@code false}
                     *         otherwise.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.locatorsUpdateCopy">
                     * Determines whether updates are made to a copy of, or directly on, Large Objects
                     * ({@code LOB}s).
                     *
                     * @return {@code true} if updates are made to a copy of the Large Object,
                     *         {@code false} otherwise.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.nullPlusNonNullIsNull">
                     * Determines whether the database handles concatenations between {@code NULL} and
                     * non-{@code NULL} values by producing a {@code NULL} output.
                     *
                     * @return {@code true} if {@code NULL} to non-{@code NULL} concatenations
                     *         produce a {@code NULL} result, {@code false} otherwise.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.nullsAreSortedAtEnd">
                     * Determines whether {@code NULL} values are always sorted to the end of sorted
                     * results regardless of requested sort order. This means that they will
                     * appear at the end of sorted lists whatever other non-{@code NULL} values
                     * may be present.
                     *
                     * @return {@code true} if {@code NULL} values are sorted at the end,
                     *         {@code false} otherwise.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.nullsAreSortedAtStart">
                     * Determines whether {@code NULL} values are always sorted at the start of the
                     * sorted list, irrespective of the sort order. This means that they appear
                     * at the start of sorted lists, whatever other values may be present.
                     *
                     * @return {@code true} if {@code NULL} values are sorted at the start,
                     *         {@code false} otherwise.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.nullsAreSortedHigh">
                     * Determines whether {@code NULL} values are sorted high - i.e. they are sorted
                     * as if they are higher than any other values.
                     *
                     * @return {@code true} if {@code NULL} values are sorted high, {@code
                     *         false} otherwise.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.nullsAreSortedLow">
                     * Determines whether {@code NULL} values are sorted low - i.e. they are sorted as
                     * if they are lower than any other values.
                     *
                     * @return {@code true} if {@code NULL} values are sorted low, {@code false}
                     *         otherwise.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.othersDeletesAreVisible(System.Int32)">
                     * Determines whether deletes made by others are visible, for a specified {@code
                     * ResultSet} type.
                     *
                     * @param type
                     *            the type of the {@code ResultSet}. It may be either {@code
                     *            ResultSet.TYPE_FORWARD_ONLY} or {@code
                     *            ResultSet.TYPE_SCROLL_INSENSITIVE}, or {@code
                     *            ResultSet.TYPE_SCROLL_SENSITIVE})
                     * @return {@code true} if others' deletes are visible, {@code false}
                     *         otherwise.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.othersInsertsAreVisible(System.Int32)">
                     * Determines whether inserts made by others are visible, for a specified {@code
                     * ResultSet} type.
                     *
                     * @param type
                     *            the type of the {@code ResultSet}. May be {@code
                     *            ResultSet.TYPE_FORWARD_ONLY}, or {@code
                     *            ResultSet.TYPE_SCROLL_INSENSITIVE}, or {@code
                     *            ResultSet.TYPE_SCROLL_SENSITIVE}
                     * @return {@code true} if others' inserts are visible, otherwise {@code
                     *         false}.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.othersUpdatesAreVisible(System.Int32)">
                     * Determines whether updates made by others are visible, for a specified {@code
                     * ResultSet} type.
                     *
                     * @param type
                     *            the type of the {@code ResultSet}. May be {@code
                     *            ResultSet.TYPE_FORWARD_ONLY}, or {@code
                     *            ResultSet.TYPE_SCROLL_INSENSITIVE}, or {@code
                     *            ResultSet.TYPE_SCROLL_SENSITIVE}
                     * @return {@code true} if others' inserts are visible, otherwise {@code
                     *         false}.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.ownDeletesAreVisible(System.Int32)">
                     * Determines whether a {@code ResultSet} can see its own deletes, for a
                     * specified {@code ResultSet} type.
                     *
                     * @param type
                     *            the type of the {@code ResultSet}: {@code
                     *            ResultSet.TYPE_FORWARD_ONLY}, {@code
                     *            ResultSet.TYPE_SCROLL_INSENSITIVE}, or {@code
                     *            ResultSet.TYPE_SCROLL_SENSITIVE}
                     * @return {@code true} if the deletes are seen by the {@code
                     *         ResultSet} itself, otherwise {@code false}.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.ownInsertsAreVisible(System.Int32)">
                     * Determines whether a {@code ResultSet} can see its own inserts, for a
                     * specified {@code ResultSet} type.
                     *
                     * @param type
                     *            the type of the {@code ResultSet}: {@code
                     *            ResultSet.TYPE_FORWARD_ONLY}, {@code
                     *            ResultSet.TYPE_SCROLL_INSENSITIVE}, or {@code
                     *            ResultSet.TYPE_SCROLL_SENSITIVE}
                     * @return {@code true} if the inserts are seen by the {@code
                     *         ResultSet} itself, otherwise {@code false}.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.ownUpdatesAreVisible(System.Int32)">
                     * Determines whether a {@code ResultSet} can see its own updates, for a
                     * specified {@code ResultSet} type.
                     *
                     * @param type
                     *            the type of the {@code ResultSet}: {@code
                     *            ResultSet.TYPE_FORWARD_ONLY}, {@code
                     *            ResultSet.TYPE_SCROLL_INSENSITIVE}, or {@code
                     *            ResultSet.TYPE_SCROLL_SENSITIVE}
                     * @return {@code true} if the updates are seen by the {@code
                     *         ResultSet} itself, otherwise {@code false}.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.storesLowerCaseIdentifiers">
                     * Determines whether the database treats SQL identifiers that are in mixed
                     * case (and unquoted) as case insensitive. If {@code true} then the
                     * database stores them in lower case.
                     *
                     * @return {@code true} if unquoted SQL identifiers are stored in lower
                     *         case, {@code false} otherwise.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.storesLowerCaseQuotedIdentifiers">
                     * Determines whether the database considers mixed case quoted SQL
                     * identifiers as case insensitive and stores them in lower case.
                     *
                     * @return {@code true} if quoted SQL identifiers are stored in lower case,
                     *         {@code false} otherwise.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.storesMixedCaseIdentifiers">
                     * Determines whether the database considers mixed case unquoted SQL
                     * identifiers as case insensitive and stores them in mixed case.
                     *
                     * @return {@code true} if unquoted SQL identifiers as stored in mixed case,
                     *         {@code false} otherwise.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.storesMixedCaseQuotedIdentifiers">
                     * Determines whether the database considers identifiers as case insensitive
                     * if they are mixed case quoted SQL. The database stores them in mixed
                     * case.
                     *
                     * @return {@code true} if quoted SQL identifiers are stored in mixed case,
                     *         {@code false} otherwise.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.storesUpperCaseIdentifiers">
                     * Determines whether the database considers mixed case unquoted SQL
                     * identifiers as case insensitive and stores them in upper case.
                     *
                     * @return {@code true} if unquoted SQL identifiers are stored in upper
                     *         case, {@code false} otherwise.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.storesUpperCaseQuotedIdentifiers">
                     * Determines whether the database considers mixed case quoted SQL
                     * identifiers as case insensitive and stores them in upper case.
                     *
                     * @return {@code true} if quoted SQL identifiers are stored in upper case,
                     *         {@code false} otherwise.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.supportsAlterTableWithAddColumn">
                     * Determines whether the database supports {@code ALTER TABLE} operation with
                     * {@code ADD COLUMN}.
                     *
                     * @return {@code true} if {@code ALTER TABLE} with {@code ADD COLUMN} is
                     *         supported, {@code false} otherwise.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.supportsAlterTableWithDropColumn">
                     * Determines whether the database supports {@code ALTER TABLE} operation with
                     * {@code DROP COLUMN}.
                     *
                     * @return {@code true} if {@code ALTER TABLE} with {@code DROP COLUMN} is
                     *         supported, {@code false} otherwise.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.supportsANSI92EntryLevelSQL">
                     * Determines whether the database supports the ANSI92 entry level SQL grammar.
                     *
                     * @return {@code true} if the ANSI92 entry level SQL grammar is supported,
                     *         {@code false} otherwise.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.supportsANSI92FullSQL">
                     * Determines whether the database supports the ANSI92 full SQL grammar.
                     *
                     * @return {@code true} if the ANSI92 full SQL grammar is supported, {@code
                     *         false} otherwise.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.supportsANSI92IntermediateSQL">
                     * Determines whether the database supports the ANSI92 intermediate SQL Grammar.
                     *
                     * @return {@code true} if the ANSI92 intermediate SQL grammar is supported,
                     *         {@code false} otherwise.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.supportsBatchUpdates">
                     * Determines whether the database supports batch updates.
                     *
                     * @return {@code true} if batch updates are supported, {@code false}
                     *         otherwise.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.supportsCatalogsInDataManipulation">
                     * Determines whether catalog names may be used in data manipulation
                     * statements.
                     *
                     * @return {@code true} if catalog names can be used in data manipulation
                     *         statements, {@code false} otherwise.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.supportsCatalogsInIndexDefinitions">
                     * Determines whether catalog names can be used in index definition statements.
                     *
                     * @return {@code true} if catalog names can be used in index definition
                     *         statements, {@code false} otherwise.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.supportsCatalogsInPrivilegeDefinitions">
                     * Determines whether catalog names can be used in privilege definition
                     * statements.
                     *
                     * @return {@code true} if catalog names can be used in privilege definition
                     *         statements, {@code false} otherwise.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.supportsCatalogsInProcedureCalls">
                     * Determines whether catalog names can be used in procedure call statements.
                     *
                     * @return {@code true} if catalog names can be used in procedure call
                     *         statements.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.supportsCatalogsInTableDefinitions">
                     * Determines whether catalog names may be used in table definition statements.
                     *
                     * @return {@code true} if catalog names can be used in definition
                     *         statements, {@code false} otherwise.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.supportsColumnAliasing">
                     * Determines whether the database supports column aliasing.
                     * <p />
                     * If aliasing is supported, then the SQL AS clause is used to provide names
                     * for computed columns and provide alias names for columns.
                     *
                     * @return {@code true} if column aliasing is supported, {@code false}
                     *         otherwise.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.supportsConvert">
                     * Determines whether the database supports the {@code CONVERT} operation between
                     * SQL types.
                     *
                     * @return {@code true} if the {@code CONVERT} operation is supported,
                     *         {@code false} otherwise.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.supportsConvert(System.Int32,System.Int32)">
                     * Determines whether the database supports {@code CONVERT} operation for two
                     * supplied SQL types.
                     *
                     * @param fromType
                     *            the Type to convert from, as defined by {@code java.sql.Types}
                     * @param toType
                     *            the Type to convert to, as defined by {@code java.sql.Types}
                     * @return {@code true} if the {@code CONVERT} operation is supported for
                     *         these types, {@code false} otherwise.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.supportsCoreSQLGrammar">
                     * Determines whether the database supports the Core SQL Grammar for ODBC.
                     *
                     * @return {@code true} if the Core SQL Grammar is supported, {@code false}
                     *         otherwise.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.supportsCorrelatedSubqueries">
                     * Determines whether the database supports correlated sub-queries.
                     *
                     * @return {@code true} if the database does support correlated sub-queries
                     *         and {@code false} otherwise.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.supportsDataDefinitionAndDataManipulationTransactions">
                     * Determines whether the database allows both data definition and data
                     * manipulation statements inside a transaction.
                     *
                     * @return {@code true} if both types of statement are permitted, {@code
                     *         false} otherwise.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.supportsDataManipulationTransactionsOnly">
                     * Determines whether the database only allows data manipulation statements inside
                     * a transaction.
                     *
                     * @return {@code true} if data manipulation statements are permitted only within a transaction,
                     *         {@code false} otherwise.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.supportsDifferentTableCorrelationNames">
                     * Determines whether table correlation names are required to be different from
                     * the names of the tables, when they are supported.
                     *
                     * @return {@code true} if correlation names must be different from table
                     *         names, {@code false} otherwise.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.supportsExpressionsInOrderBy">
                     * Determines whether expressions in {@code ORDER BY} lists are supported.
                     *
                     * @return {@code true} if expressions in {@code ORDER BY} lists are
                     *         supported.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.supportsExtendedSQLGrammar">
                     * Determines whether the Extended SQL Grammar for ODBC is supported.
                     *
                     * @return {@code true} if the Extended SQL Grammar is supported, {@code
                     *         false} otherwise.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.supportsFullOuterJoins">
                     * Determines whether the database supports full nested outer joins.
                     *
                     * @return {@code true} if full nested outer joins are supported, {@code
                     *         false} otherwise.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.supportsGetGeneratedKeys">
                     * Determines whether auto generated keys can be returned when a statement
                     * executes.
                     *
                     * @return {@code true} if auto generated keys can be returned, {@code
                     *         false} otherwise.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.supportsGroupBy">
                     * Determines whether the database supports {@code GROUP BY} clauses.
                     *
                     * @return {@code true} if the {@code GROUP BY} clause is supported, {@code
                     *         false} otherwise.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.supportsGroupByBeyondSelect">
                     * Determines whether the database supports using a column name in a {@code GROUP
                     * BY} clause not included in the {@code SELECT} statement as long as all of
                     * the columns in the {@code SELECT} statement are used in the {@code GROUP
                     * BY} clause.
                     *
                     * @return {@code true} if {@code GROUP BY} clauses can use column names in
                     *         this way, {@code false} otherwise.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.supportsGroupByUnrelated">
                     * Determines whether the database supports using a column name in a {@code GROUP
                     * BY} clause that is not in the {@code SELECT} statement.
                     *
                     * @return {@code true} if {@code GROUP BY} clause can use a column name not
                     *         in the {@code SELECT} statement, {@code false} otherwise.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.supportsIntegrityEnhancementFacility">
                     * Determines whether the database supports SQL Integrity Enhancement
                     * Facility.
                     *
                     * @return {@code true} if the Integrity Enhancement Facility is supported,
                     *         {@code false} otherwise.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.supportsLikeEscapeClause">
                     * Determines whether the database supports a {@code LIKE} escape clause.
                     *
                     * @return {@code true} if LIKE escape clause is supported, {@code false}
                     *         otherwise.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.supportsLimitedOuterJoins">
                     * Determines whether the database provides limited support for outer join
                     * operations.
                     *
                     * @return {@code true} if there is limited support for outer join
                     *         operations, {@code false} otherwise. This will be {@code true} if
                     *         {@code supportsFullOuterJoins} returns {@code true}.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.supportsMinimumSQLGrammar">
                     * Determines whether the database supports Minimum SQL Grammar for ODBC.
                     *
                     * @return {@code true} if the Minimum SQL Grammar is supported, {@code
                     *         false} otherwise.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.supportsMixedCaseIdentifiers">
                     * Determines whether the database treats mixed case unquoted SQL identifiers as
                     * case sensitive storing them in mixed case.
                     *
                     * @return {@code true} if unquoted SQL identifiers are stored in mixed
                     *         case, {@code false} otherwise.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.supportsMixedCaseQuotedIdentifiers">
                     * Determines whether the database considers mixed case quoted SQL
                     * identifiers as case sensitive, storing them in mixed case.
                     *
                     * @return {@code true} if quoted SQL identifiers are stored in mixed case,
                     *         {@code false} otherwise.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.supportsMultipleOpenResults">
                     * Determines whether it is possible for a single {@code CallableStatement} to
                     * return multiple {@code ResultSet}s simultaneously.
                     *
                     * @return {@code true} if a single {@code CallableStatement} can return
                     *         multiple {@code ResultSet}s simultaneously, {@code false}
                     *         otherwise.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.supportsMultipleResultSets">
                     * Determines whether retrieving multiple {@code ResultSet}s from a single
                     * call to the {@code execute} method is supported.
                     *
                     * @return {@code true} if multiple {@code ResultSet}s can be retrieved,
                     *         {@code false} otherwise.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.supportsMultipleTransactions">
                     * Determines whether multiple simultaneous transactions on
                     * different connections are supported.
                     *
                     * @return {@code true} if multiple open transactions are supported, {@code
                     *         false} otherwise.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.supportsNamedParameters">
                     * Determines whether callable statements with named parameters is supported.
                     *
                     * @return {@code true} if named parameters can be used with callable
                     *         statements, {@code false} otherwise.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.supportsNonNullableColumns">
                     * Determines whether columns in the database can be defined as non-nullable.
                     *
                     * @return {@code true} if columns can be defined non-nullable, {@code
                     *         false} otherwise.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.supportsOpenCursorsAcrossCommit">
                     * Determines whether keeping cursors open across commit operations is
                     * supported.
                     *
                     * @return {@code true} if cursors can be kept open across commit
                     *         operations, {@code false} if they might get closed.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.supportsOpenCursorsAcrossRollback">
                     * Determines whether the database can keep cursors open across rollback
                     * operations.
                     *
                     * @return {@code true} if cursors can be kept open across rollback
                     *         operations, {@code false} if they might get closed.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.supportsOpenStatementsAcrossCommit">
                     * Determines whether keeping statements open across commit operations is
                     * supported.
                     *
                     * @return {@code true} if statements can be kept open, {@code false} if
                     *         they might not.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.supportsOpenStatementsAcrossRollback">
                     * Determines whether keeping statements open across rollback operations is
                     * supported.
                     *
                     * @return {@code true} if statements can be kept open, {@code false} if
                     *         they might not.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.supportsOrderByUnrelated">
                     * Determines whether using a column in an {@code ORDER BY} clause that is
                     * not in the {@code SELECT} statement is supported.
                     *
                     * @return {@code true} if it is possible to {@code ORDER} using a column
                     *         not in the {@code SELECT}, {@code false} otherwise.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.supportsOuterJoins">
                     * Determines whether outer join operations are supported.
                     *
                     * @return {@code true} if outer join operations are supported, {@code
                     *         false} otherwise.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.supportsPositionedDelete">
                     * Determines whether positioned {@code DELETE} statements are supported.
                     *
                     * @return {@code true} if the database supports positioned {@code DELETE}
                     *         statements.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.supportsPositionedUpdate">
                     * Determines whether positioned {@code UPDATE} statements are supported.
                     *
                     * @return {@code true} if the database supports positioned {@code UPDATE}
                     *         statements, {@code false} otherwise.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.supportsResultSetConcurrency(System.Int32,System.Int32)">
                     * Determines whether there is support for a given concurrency style for the
                     * given {@code ResultSet}.
                     *
                     * @param type
                     *            the {@code ResultSet} type, as defined in {@code
                     *            java.sql.ResultSet}:
                     *            <ul>
                     *            <li>{@code ResultSet.TYPE_FORWARD_ONLY}</li>
                     *            <li>{@code ResultSet.TYPE_SCROLL_INSENSITIVE}</li>
                     *            <li>{@code ResultSet.TYPE_SCROLL_SENSITIVE}</li>
                     *            </ul>
                     * @param concurrency
                     *            a concurrency type, which may be one of {@code
                     *            ResultSet.CONCUR_READ_ONLY} or {@code
                     *            ResultSet.CONCUR_UPDATABLE}.
                     * @return {@code true} if that concurrency and {@code ResultSet} type
                     *         pairing is supported otherwise {@code false}.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.supportsResultSetHoldability(System.Int32)">
                     * Determines whether the supplied {@code ResultSet} holdability mode is
                     * supported.
                     *
                     * @param holdability
                     *            as specified in {@code java.sql.ResultSet}: {@code
                     *            ResultSet.HOLD_CURSORS_OVER_COMMIT} or {@code
                     *            ResultSet.CLOSE_CURSORS_AT_COMMIT}
                     * @return {@code true} if the given ResultSet holdability is supported and
                     *         if it isn't then {@code false}.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.supportsResultSetType(System.Int32)">
                     * Determines whether the supplied {@code ResultSet} type is supported.
                     *
                     * @param type
                     *            the {@code ResultSet} type as defined in {@code
                     *            java.sql.ResultSet}: {@code ResultSet.TYPE_FORWARD_ONLY},
                     *            {@code ResultSet.TYPE_SCROLL_INSENSITIVE}, or {@code
                     *            ResultSet.TYPE_SCROLL_SENSITIVE}
                     * @return {@code true} if the {@code ResultSet} type is supported, {@code
                     *         false} otherwise.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.supportsSavepoints">
                     * Determines whether savepoints for transactions are supported.
                     *
                     * @return {@code true} if savepoints are supported, {@code false}
                     *         otherwise.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.supportsSchemasInDataManipulation">
                     * Determines whether a schema name may be used in a data manipulation
                     * statement.
                     *
                     * @return {@code true} if a schema name can be used in a data manipulation,
                     *         otherwise {@code false}.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.supportsSchemasInIndexDefinitions">
                     * Determines whether a schema name may be used in an index definition
                     * statement.
                     *
                     * @return {@code true} if a schema name can be used in an index definition,
                     *         otherwise {@code false}.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.supportsSchemasInPrivilegeDefinitions">
                     * Determines whether a database schema name can be used in a privilege
                     * definition statement.
                     *
                     * @return {@code true} if a database schema name may be used in a privilege
                     *         definition, otherwise {@code false}
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.supportsSchemasInProcedureCalls">
                     * Determines whether a procedure call statement may be contain in a schema name.
                     *
                     * @return {@code true} if a schema name can be used in a procedure call,
                     *         otherwise {@code false}.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.supportsSchemasInTableDefinitions">
                     * Determines whether a schema name can be used in a table definition statement.
                     *
                     * @return {@code true} if a schema name can be used in a table definition,
                     *         otherwise {@code false}.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.supportsSelectForUpdate">
                     * Determines whether the {@code SELECT FOR UPDATE} statement is supported.
                     *
                     * @return {@code true} if {@code SELECT FOR UPDATE} statements are
                     *         supported, otherwise {@code false}.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.supportsStatementPooling">
                     * Determines whether statement pooling is supported.
                     *
                     * @return {@code true} of the database does support statement pooling,
                     *         otherwise {@code false}.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.supportsStoredProcedures">
                     * Determines whether stored procedure calls using the stored procedure
                     * escape syntax is supported.
                     *
                     * @return {@code true} if stored procedure calls using the stored procedure
                     *         escape syntax are supported, otherwise {@code false}.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.supportsSubqueriesInComparisons">
                     * Determines whether subqueries in comparison expressions are supported.
                     *
                     * @return {@code true} if subqueries are supported in comparison
                     *         expressions.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.supportsSubqueriesInExists">
                     * Determines whether subqueries in {@code EXISTS} expressions are supported.
                     *
                     * @return {@code true} if subqueries are supported in {@code EXISTS}
                     *         expressions, otherwise {@code false}.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.supportsSubqueriesInIns">
                     * Determines whether subqueries in {@code IN} statements are supported.
                     *
                     * @return {@code true} if subqueries are supported in {@code IN} statements,
                     *         otherwise {@code false}.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.supportsSubqueriesInQuantifieds">
                     * Determines whether subqueries in quantified expressions are supported.
                     *
                     * @return {@code true} if subqueries are supported, otherwise {@code false}.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.supportsTableCorrelationNames">
                     * Determines whether the database has table correlation names support.
                     *
                     * @return {@code true} if table correlation names are supported, otherwise
                     *         {@code false}.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.supportsTransactionIsolationLevel(System.Int32)">
                     * Determines whether a specified transaction isolation level is supported.
                     *
                     * @param level
                     *            the transaction isolation level, as specified in {@code
                     *            java.sql.Connection}: {@code TRANSACTION_NONE}, {@code
                     *            TRANSACTION_READ_COMMITTED}, {@code
                     *            TRANSACTION_READ_UNCOMMITTED}, {@code
                     *            TRANSACTION_REPEATABLE_READ}, {@code TRANSACTION_SERIALIZABLE}
                     * @return {@code true} if the specific isolation level is supported,
                     *         otherwise {@code false}.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.supportsTransactions">
                     * Determines whether transactions are supported.
                     * <p />
                     * If transactions are not supported, then the {@code commit} method does
                     * nothing and the transaction isolation level is always {@code
                     * TRANSACTION_NONE}.
                     *
                     * @return {@code true} if transactions are supported, otherwise {@code
                     *         false}.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.supportsUnion">
                     * Determines whether the {@code SQL UNION} operation is supported.
                     *
                     * @return {@code true} of the database does support {@code UNION}, otherwise
                     *         {@code false}.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.supportsUnionAll">
                     * Determines whether the {@code SQL UNION ALL} operation is supported.
                     *
                     * @return {@code true} if the database does support {@code UNION ALL},
                     *         otherwise {@code false}.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.updatesAreDetected(System.Int32)">
                     * Determines whether the method {@code ResultSet.rowUpdated} can detect a visible
                     * row update for the specified {@code ResultSet} type.
                     *
                     * @param type
                     *            {@code ResultSet} type: {@code ResultSet.TYPE_FORWARD_ONLY},
                     *            {@code ResultSet.TYPE_SCROLL_INSENSITIVE}, or {@code
                     *            ResultSet.TYPE_SCROLL_SENSITIVE}
                     * @return {@code true} detecting changes is possible, otherwise {@code
                     *         false}.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.usesLocalFilePerTable">
                     * Determines whether this database uses a file for each table.
                     *
                     * @return {@code true} if the database uses one file for each table,
                     *         otherwise {@code false}.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.usesLocalFiles">
                     * Determines whether this database uses a local file to store tables.
                     *
                     * @return {@code true} if the database stores tables in a local file,
                     *         otherwise {@code false}.
                     * @throws SQLException
                     *             a database error occurred.</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.getRowIdLifetime">
                     * Answers the lifetime for which a RowId object remains valid if this data
                     * source supports the SQL ROWID type
                     *
                     * @return the time of a RowId object that remains valid.
                     * @throws SQLException
                     *             if any error occurs</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.getSchemas(System.String,System.String)">
                     * Answers the schema names ordered by TABLE_CATALOG and TABLE_SCHEM.
                     *
                     * @param catalog
                     *            the catalog
                     * @param schemaPattern
                     *            the schema pattern
                     * @return the schema names
                     * @throws SQLException
                     *             if any error occurs</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.supportsStoredFunctionsUsingCallSyntax">
                     * Determin if this database supports invoking user-defined or vendor
                     * functions using the stored procedure escape syntax.
                     *
                     * @return true if this database supports invoking user-defined or vendor
                     *         functions using the stored procedure escape syntax.
                     * @throws SQLException
                     *             if any error occurs</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.autoCommitFailureClosesAllResultSets">
                     * Determin if a SQLException while autoCommit is true inidcates that all
                     * open ResultSets are closed, even ones that are holdable
                     *
                     * @return true if all open ResultSets are closed
                     * @throws SQLException
                     *             if any error occurs</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.getClientInfoProperties">
                     * Answers a list of the client info properties of the driver.
                     *
                     * @return a list of the client info
                     * @throws SQLException
                     *             if any error occurs</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.getFunctions(System.String,System.String,System.String)">
                     * Answers a description of the system and user functions available
                     * according to the given catalog.
                     *
                     * @param catalog
                     *            the given catalong
                     * @param schemaPattern
                     *            the schema pattern
                     * @param functionNamePattern
                     *            the function name pattern
                     * @return user functions
                     * @throws SQLException
                     *             if any error occurs</member>
        <member name="M:biz.ritter.javapi.sql.DatabaseMetaData.getFunctionColumns(System.String,System.String,System.String,System.String)">
                     * Answers a description according to the given catalog's system or user
                     * function parameters and return type.
                     *
                     * @param catalog
                     *            the given catalong
                     * @param schemaPattern
                     *            the schema pattern
                     * @param functionNamePattern
                     *            the function name pattern
                     * @param columnNamePattern
                     *            the column name pattern
                     * @return a description of user functions
                     * @throws SQLException
                     *             if any error occurs</member>
        <member name="F:biz.ritter.javapi.sql.DatabaseMetaDataConstants.attributeNoNulls">
                     * States that it may not be permitted to store {@code NULL} values.</member>
        <member name="F:biz.ritter.javapi.sql.DatabaseMetaDataConstants.attributeNullable">
                     * States that {@code NULL} values are definitely permitted.</member>
        <member name="F:biz.ritter.javapi.sql.DatabaseMetaDataConstants.attributeNullableUnknown">
                     * States that whether {@code NULL} values are permitted is unknown.</member>
        <member name="F:biz.ritter.javapi.sql.DatabaseMetaDataConstants.bestRowNotPseudo">
                     * States the best row identifier is <em>NOT</em> a pseudo column.</member>
        <member name="F:biz.ritter.javapi.sql.DatabaseMetaDataConstants.bestRowPseudo">
                     * States that the best row identifier is a pseudo column.</member>
        <member name="F:biz.ritter.javapi.sql.DatabaseMetaDataConstants.bestRowSession">
                     * States that the remainder of the current session is used as the scope for
                     * the best row identifier.</member>
        <member name="F:biz.ritter.javapi.sql.DatabaseMetaDataConstants.bestRowTemporary">
                     * States that best row identifier scope lasts only while the row is being
                     * used.</member>
        <member name="F:biz.ritter.javapi.sql.DatabaseMetaDataConstants.bestRowTransaction">
                     * States that the remainder of the current transaction is used as the scope
                     * for the best row identifier.</member>
        <member name="F:biz.ritter.javapi.sql.DatabaseMetaDataConstants.bestRowUnknown">
                     * States that the best row identifier may or may not be a pseudo column.</member>
        <member name="F:biz.ritter.javapi.sql.DatabaseMetaDataConstants.columnNoNulls">
                     * States that the column must not allow {@code NULL} values.</member>
        <member name="F:biz.ritter.javapi.sql.DatabaseMetaDataConstants.columnNullable">
                     * States that the column definitely allows {@code NULL} values.</member>
        <member name="F:biz.ritter.javapi.sql.DatabaseMetaDataConstants.columnNullableUnknown">
                     * States that it is unknown whether the columns may be nulled.</member>
        <member name="F:biz.ritter.javapi.sql.DatabaseMetaDataConstants.importedKeyCascade">
                     * For the column {@code UPDATE_RULE}, states that when the primary key is
                     * updated, the foreign key (imported key) is changed accordingly.</member>
        <member name="F:biz.ritter.javapi.sql.DatabaseMetaDataConstants.importedKeyInitiallyDeferred">
                     * States that the evaluation of foreign key constraints is deferred (delayed
                     * until commit).</member>
        <member name="F:biz.ritter.javapi.sql.DatabaseMetaDataConstants.importedKeyInitiallyImmediate">
                     * States that the evaluation of foreign key constraint is {@code IMMEDIATE}
                     * .</member>
        <member name="F:biz.ritter.javapi.sql.DatabaseMetaDataConstants.importedKeyNoAction">
                     * For the columns {@code UPDATE_RULE} and {@code DELETE_RULE}, states that
                     * if the primary key has been imported, it cannot be updated or deleted.</member>
        <member name="F:biz.ritter.javapi.sql.DatabaseMetaDataConstants.importedKeyNotDeferrable">
                     * States that the evaluation of foreign key constraint must not be {@code
                     * DEFERRED}.</member>
        <member name="F:biz.ritter.javapi.sql.DatabaseMetaDataConstants.importedKeyRestrict">
                     * States that a primary key must not be updated when imported as a foreign
                     * key by some other table. Used for the column {@code UPDATE_RULE}.</member>
        <member name="F:biz.ritter.javapi.sql.DatabaseMetaDataConstants.importedKeySetDefault">
                     * States that when the primary key is modified (updated or deleted) the
                     * foreign (imported) key is changed to its default value. Applies to the
                     * {@code UPDATE_RULE} and {@code DELETE_RULE} columns.</member>
        <member name="F:biz.ritter.javapi.sql.DatabaseMetaDataConstants.importedKeySetNull">
                     * States that when the primary key is modified (updated or deleted) the
                     * foreign (imported) key is changed to {@code NULL}. Applies to the {@code
                     * UPDATE_RULE} and {@code DELETE_RULE} columns.</member>
        <member name="F:biz.ritter.javapi.sql.DatabaseMetaDataConstants.procedureColumnIn">
                     * States that the column stores {@code IN} type parameters.</member>
        <member name="F:biz.ritter.javapi.sql.DatabaseMetaDataConstants.procedureColumnInOut">
                     * States that this column stores {@code INOUT} type parameters.</member>
        <member name="F:biz.ritter.javapi.sql.DatabaseMetaDataConstants.procedureColumnOut">
                     * States that this column stores {@code OUT} type parameters.</member>
        <member name="F:biz.ritter.javapi.sql.DatabaseMetaDataConstants.procedureColumnResult">
                     * States that the column stores results.</member>
        <member name="F:biz.ritter.javapi.sql.DatabaseMetaDataConstants.procedureColumnReturn">
                     * States that the column stores return values.</member>
        <member name="F:biz.ritter.javapi.sql.DatabaseMetaDataConstants.procedureColumnUnknown">
                     * States that type of the column is unknown.</member>
        <member name="F:biz.ritter.javapi.sql.DatabaseMetaDataConstants.procedureNoNulls">
                     * States that {@code NULL} values are not permitted.</member>
        <member name="F:biz.ritter.javapi.sql.DatabaseMetaDataConstants.procedureNoResult">
                     * States that the procedure does not return a result.</member>
        <member name="F:biz.ritter.javapi.sql.DatabaseMetaDataConstants.procedureNullable">
                     * States that {@code NULL} values are permitted.</member>
        <member name="F:biz.ritter.javapi.sql.DatabaseMetaDataConstants.procedureNullableUnknown">
                     * States that it is unknown whether {@code NULL} values are permitted.</member>
        <member name="F:biz.ritter.javapi.sql.DatabaseMetaDataConstants.procedureResultUnknown">
                     * States that it is unknown whether or not the procedure returns a result.</member>
        <member name="F:biz.ritter.javapi.sql.DatabaseMetaDataConstants.procedureReturnsResult">
                     * States that the procedure returns a result.</member>
        <member name="F:biz.ritter.javapi.sql.DatabaseMetaDataConstants.sqlStateSQL99">
                     * States that the value is an SQL99 {@code SQLSTATE} value.</member>
        <member name="F:biz.ritter.javapi.sql.DatabaseMetaDataConstants.sqlStateXOpen">
                     * States that the value is an SQL {@code CLI SQLSTATE} value as defined by
                     * the X/Open standard.</member>
        <member name="F:biz.ritter.javapi.sql.DatabaseMetaDataConstants.tableIndexClustered">
                     * States that this table index is a clustered index.</member>
        <member name="F:biz.ritter.javapi.sql.DatabaseMetaDataConstants.tableIndexHashed">
                     * States that this table index is a hashed index.</member>
        <member name="F:biz.ritter.javapi.sql.DatabaseMetaDataConstants.tableIndexOther">
                     * States this table's index is neither a clustered index, not a hashed
                     * index, and not a table statistics index; i.e. it is something else.</member>
        <member name="F:biz.ritter.javapi.sql.DatabaseMetaDataConstants.tableIndexStatistic">
                     * States this column has the table's statistics, and that it is returned in
                     * conjunction with the table's index description.</member>
        <member name="F:biz.ritter.javapi.sql.DatabaseMetaDataConstants.typeNoNulls">
                     * States that a {@code NULL} value is <em>NOT</em> permitted for
                     * this data type.</member>
        <member name="F:biz.ritter.javapi.sql.DatabaseMetaDataConstants.typeNullable">
                     * States that a {@code NULL} value is permitted for this data type.</member>
        <member name="F:biz.ritter.javapi.sql.DatabaseMetaDataConstants.typeNullableUnknown">
                     * States that it is unknown if a {@code NULL} value is permitted for
                     * this data type.</member>
        <member name="F:biz.ritter.javapi.sql.DatabaseMetaDataConstants.typePredBasic">
                     * States that this column shall not be used for {@code WHERE} statements
                     * with a {@code LIKE} clause.</member>
        <member name="F:biz.ritter.javapi.sql.DatabaseMetaDataConstants.typePredChar">
                     * States that this column can only be used in a {@code WHERE...LIKE}
                     * statement.</member>
        <member name="F:biz.ritter.javapi.sql.DatabaseMetaDataConstants.typePredNone">
                     * States that this column does not support searches.</member>
        <member name="F:biz.ritter.javapi.sql.DatabaseMetaDataConstants.typeSearchable">
                     * States that the column is searchable.</member>
        <member name="F:biz.ritter.javapi.sql.DatabaseMetaDataConstants.versionColumnNotPseudo">
                     * States that the version column is known to be not a pseudo column.</member>
        <member name="F:biz.ritter.javapi.sql.DatabaseMetaDataConstants.versionColumnPseudo">
                     * States that this version column is known to be a pseudo column.</member>
        <member name="F:biz.ritter.javapi.sql.DatabaseMetaDataConstants.versionColumnUnknown">
                     * States that the version column may be a pseudo column or not.</member>
        <member name="F:biz.ritter.javapi.sql.DatabaseMetaDataConstants.sqlStateSQL">
                     * States that the method DatabaseMetaData.getSQLStateType may returns an
                     * SQLSTATE value or not.</member>
        <member name="F:biz.ritter.javapi.sql.DatabaseMetaDataConstants.functionColumnIn">
                     * States that the parameter or column is an IN parameter</member>
        <member name="F:biz.ritter.javapi.sql.DatabaseMetaDataConstants.functionColumnInOut">
                     * States that the parameter or column is an INOUT parameter</member>
        <member name="F:biz.ritter.javapi.sql.DatabaseMetaDataConstants.functionColumnOut">
                     * States that the parameter or column is an OUT parameter</member>
        <member name="F:biz.ritter.javapi.sql.DatabaseMetaDataConstants.functionReturn">
                     * States that the parameter or column is a return value</member>
        <member name="F:biz.ritter.javapi.sql.DatabaseMetaDataConstants.functionColumnUnknown">
                     * States that the parameter of function is unknown</member>
        <member name="F:biz.ritter.javapi.sql.DatabaseMetaDataConstants.functionColumnResult">
                     * States that the parameter or column is a column in a result set</member>
        <member name="F:biz.ritter.javapi.sql.DatabaseMetaDataConstants.functionNoNulls">
                     * States that NULL values are not allowed</member>
        <member name="F:biz.ritter.javapi.sql.DatabaseMetaDataConstants.functionNullable">
                     * States that NULL values are allowed</member>
        <member name="F:biz.ritter.javapi.sql.DatabaseMetaDataConstants.functionNullableUnknown">
                     * States that whether NULL values are allowed is unknown</member>
        <member name="F:biz.ritter.javapi.sql.DatabaseMetaDataConstants.functionResultUnknown">
                     * States that it is not known whether the function returns a result or a
                     * table</member>
        <member name="F:biz.ritter.javapi.sql.DatabaseMetaDataConstants.functionNoTable">
                     * States that the function does not return a table</member>
        <member name="F:biz.ritter.javapi.sql.DatabaseMetaDataConstants.functionReturnsTable">
                     * States that the function returns a table.</member>
        <member name="T:biz.ritter.javapi.sql.Date">
            <summary>
            A class which can consume and produce dates in SQL {@code Date} format.
            <p />
            Dates are represented in SQL as {@code yyyy-mm-dd}. Note that this date
            format only deals with year, month and day values. There are no values for
            hours, minutes, seconds.
            <p />
            This is unlike the familiar {@code java.util.Date} object, which also includes
            values for hours, minutes, seconds, and milliseconds.
            <p />
            Time points are handled as millisecond values - milliseconds since the Epoch,
            January 1st 1970, 00:00:00.000 GMT. Time values passed to the {@code
            java.sql.Date} class are "normalized" to the time 00:00:00.000 GMT on the
            date implied by the time value.
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.sql.Date.#ctor(System.Int32,System.Int32,System.Int32)">
                     * Constructs a {@code Date} object corresponding to the supplied year,
                     * month and day.
                     *
                     * @deprecated Use the constructor {@link #Date(long)}.
                     * @param theYear
                     *            the year, specified as the year minus 1900. Must be in the
                     *            range {@code [0,8099]}.
                     * @param theMonth
                     *            the month, specified as a number with 0 = January. Must be in
                     *            the range {@code [0,11]}.
                     * @param theDay
                     *            the day in the month. Must be in the range {@code [1,31]}.</member>
        <member name="M:biz.ritter.javapi.sql.Date.#ctor(System.Int64)">
                     * Creates a date which corresponds to the day determined by the supplied
                     * milliseconds time value {@code theDate}.
                     *
                     * @param theDate
                     *            a time value in milliseconds since the epoch - January 1 1970
                     *            00:00:00 GMT. The time value (hours, minutes, seconds,
                     *            milliseconds) stored in the {@code Date} object is adjusted to
                     *            correspond to 00:00:00 GMT on the day determined by the supplied
                     *            time value.</member>
        <member name="M:biz.ritter.javapi.sql.Date.getHours">
                     * @deprecated This method is deprecated and must not be used. SQL {@code
                     *             Date} values do not have an hours component.
                     * @return does not return anything.
                     * @throws IllegalArgumentException
                     *             if this method is called.</member>
        <member name="M:biz.ritter.javapi.sql.Date.getMinutes">
                     * @deprecated This method is deprecated and must not be used. SQL {@code
                     *             Date} values do not have a minutes component.
                     * @return does not return anything.
                     * @throws IllegalArgumentException
                     *             if this method is called.</member>
        <member name="M:biz.ritter.javapi.sql.Date.getSeconds">
                     * @deprecated This method is deprecated and must not be used. SQL {@code
                     *             Date} values do not have a seconds component.
                     * @return does not return anything.
                     * @throws IllegalArgumentException
                     *             if this method is called.</member>
        <member name="M:biz.ritter.javapi.sql.Date.setHours(System.Int32)">
                     * @deprecated This method is deprecated and must not be used. SQL {@code
                     *             Date} values do not have an hours component.
                     * @param theHours
                     *            the number of hours to set.
                     * @throws IllegalArgumentException
                     *             if this method is called.</member>
        <member name="M:biz.ritter.javapi.sql.Date.setMinutes(System.Int32)">
                     * @deprecated This method is deprecated and must not be used. SQL {@code
                     *             Date} values do not have a minutes component.
                     * @param theMinutes
                     *            the number of minutes to set.
                     * @throws IllegalArgumentException
                     *             if this method is called.</member>
        <member name="M:biz.ritter.javapi.sql.Date.setSeconds(System.Int32)">
                     * @deprecated This method is deprecated and must not be used. SQL {@code
                     *             Date} values do not have a seconds component.
                     * @param theSeconds
                     *            the number of seconds to set.
                     * @throws IllegalArgumentException
                     *             if this method is called.</member>
        <member name="M:biz.ritter.javapi.sql.Date.setTime(System.Int64)">
                     * Sets this date to a date supplied as a milliseconds value. The date is
                     * set based on the supplied time value and rounded to zero GMT for that day.
                     *
                     * @param theTime
                     *            the time in milliseconds since the Epoch.</member>
        <member name="M:biz.ritter.javapi.sql.Date.ToString">
                     * Produces a string representation of the date in SQL format
                     *
                     * @return a string representation of the date in SQL format - {@code
                     *         "yyyy-mm-dd"}.</member>
        <member name="M:biz.ritter.javapi.sql.Date.valueOf(System.String)">
                     * Creates a {@code Date} from a string representation of a date in SQL
                     * format.
                     *
                     * @param dateString
                     *            the string representation of a date in SQL format - " {@code
                     *            yyyy-mm-dd}".
                     * @return the {@code Date} object.
                     * @throws IllegalArgumentException
                     *             if the format of the supplied string does not match the SQL
                     *             format.</member>
        <member name="T:biz.ritter.javapi.sql.Driver">
                 * An interface to a JDBC driver.
                 * <p />
                 * The JDBC driver uses URLs to specify the location of specific data. URL
                 * format typically takes the form " {@code xxxx:yyyy:SpecificData}", where "
                 * {@code xxxx:yyyy}" is referred to as the <i>subprotocol</i> and is normally
                 * the same for all of a particular driver. " {@code SpecificData}" is a string
                 * which identifies the particular data source that the driver should use.
                 * <p />
                 * A driver needs to be registered with a {@link DriverManager}. It is
                 * registered and instantiated by calling {@code Class.forName("DriverURL")}
                 * with the URL string as argument.
                 *
                 * @see DriverManager</member>
        <member name="M:biz.ritter.javapi.sql.Driver.acceptsURL(System.String)">
                     * Returns whether the driver thinks that it can open a connection to the
                     * given URL.
                     *
                     * @param url
                     *            the URL to connect to.
                     * @return {@code true} if the driver thinks that is can open a connection
                     *         to the supplied URL, {@code false} otherwise. Typically, the
                     *         driver will respond {@code true} if it thinks that it can handle
                     *         the subprotocol specified by the driver.
                     * @throws SQLException
                     *          if a database error occurs.</member>
        <member name="M:biz.ritter.javapi.sql.Driver.connect(System.String,biz.ritter.javapi.util.Properties)">
                     * Attempts to make a database connection to a data source specified by a
                     * supplied URL.
                     *
                     * @param url
                     *            the URL to connect.
                     * @param info
                     *            some properties that should be used in establishing the
                     *            connection. The properties consist of name/value pairs of
                     *            strings. Normally, a connection to a database requires at
                     *            least two properties - for {@code "user"} and {@code
                     *            "password"} in order to pass authentication to the database.
                     * @return the connection to the database.
                     * @throws SQLException
                     *             if a database error occurs.</member>
        <member name="M:biz.ritter.javapi.sql.Driver.getMajorVersion">
                     * Gets the driver's major version number.
                     *
                     * @return the major version number of the driver - typically starts at 1.</member>
        <member name="M:biz.ritter.javapi.sql.Driver.getMinorVersion">
                     * Gets the driver's minor version number.
                     *
                     * @return the minor version number of the driver - typically starts at 0.</member>
        <member name="M:biz.ritter.javapi.sql.Driver.getPropertyInfo(System.String,biz.ritter.javapi.util.Properties)">
                     * Gets information about possible properties for this driver.
                     * <p />
                     * This method is intended to provide a listing of possible properties that
                     * the client of the driver must supply in order to establish a connection
                     * to a database. Note that the returned array of properties may change
                     * depending on the supplied list of property values.
                     *
                     * @param url
                     *            the URL of the database. An application may call this method
                     *            iteratively as the property list is built up - for example,
                     *            when displaying a dialog to an end-user as part of the
                     *            database login process.
                     * @param info
                     *            a set of tag/value pairs giving data that a user may be
                     *            prompted to provide in order to connect to the database.
                     * @return an array of {@code DriverPropertyInfo} records which provide
                     *         details on which additional properties are required (in addition
                     *         to those supplied in the {@code info} parameter) in order to
                     *         connect to the database.
                     * @throws SQLException
                     *             if a database error occurs.</member>
        <member name="M:biz.ritter.javapi.sql.Driver.jdbcCompliant">
                     * Reports whether this driver is a genuine JDBC CompliantTM driver. The
                     * driver may only return {@code true} if it passes all the JDBC compliance
                     * tests.
                     * <p />
                     * A driver may not be fully compliant if the underlying database has
                     * limited functionality.
                     *
                     * @return {@code true} if the driver is fully JDBC compliant, {@code false}
                     *         otherwise.</member>
        <member name="T:biz.ritter.javapi.sql.DriverManager">
                 * Provides facilities for managing JDBC drivers.
                 * <p />
                 * The {@code DriverManager} class loads JDBC drivers during its initialization,
                 * from the list of drivers referenced by the system property {@code
                 * "jdbc.drivers"}.</member>
        <member name="M:biz.ritter.javapi.sql.DriverManager.deregisterDriver(biz.ritter.javapi.sql.Driver)">
                     * Removes a driver from the {@code DriverManager}'s registered driver list.
                     * This will only succeed when the caller's class loader loaded the driver
                     * that is to be removed. If the driver was loaded by a different class
                     * loader, the removal of the driver fails silently.
                     * <p />
                     * If the removal succeeds, the {@code DriverManager} will not use this
                     * driver in the future when asked to get a {@code Connection}.
                     *
                     * @param driver
                     *            the JDBC driver to remove.
                     * @throws SQLException
                     *             if there is a problem interfering with accessing the
                     *             database.</member>
        <member name="M:biz.ritter.javapi.sql.DriverManager.getConnection(System.String)">
                     * Attempts to establish a connection to the given database URL.
                     *
                     * @param url
                     *            a URL string representing the database target to connect with.
                     * @return a {@code Connection} to the database identified by the URL.
                     *         {@code null} if no connection can be established.
                     * @throws SQLException
                     *             if there is an error while attempting to connect to the
                     *             database identified by the URL.</member>
        <member name="M:biz.ritter.javapi.sql.DriverManager.getConnection(System.String,biz.ritter.javapi.util.Properties)">
                     * Attempts to establish a connection to the given database URL.
                     *
                     * @param url
                     *            a URL string representing the database target to connect with
                     * @param info
                     *            a set of properties to use as arguments to set up the
                     *            connection. Properties are arbitrary string/value pairs.
                     *            Normally, at least the properties {@code "user"} and {@code
                     *            "password"} should be passed, with appropriate settings for
                     *            the user ID and its corresponding password to get access to
                     *            the corresponding database.
                     * @return a {@code Connection} to the database identified by the URL.
                     *         {@code null} if no connection can be established.
                     * @throws SQLException
                     *             if there is an error while attempting to connect to the
                     *             database identified by the URL.</member>
        <member name="M:biz.ritter.javapi.sql.DriverManager.getConnection(System.String,System.String,System.String)">
                     * Attempts to establish a connection to the given database URL.
                     *
                     * @param url
                     *            a URL string representing the database target to connect with.
                     * @param user
                     *            a user ID used to login to the database.
                     * @param password
                     *            a password for the user ID to login to the database.
                     * @return a {@code Connection} to the database identified by the URL.
                     *         {@code null} if no connection can be established.
                     * @throws SQLException
                     *             if there is an error while attempting to connect to the
                     *             database identified by the URL.</member>
        <member name="M:biz.ritter.javapi.sql.DriverManager.getDriver(System.String)">
                     * Tries to find a driver that can interpret the supplied URL.
                     *
                     * @param url
                     *            the URL of a database.
                     * @return a {@code Driver} that matches the provided URL. {@code null} if
                     *         no {@code Driver} understands the URL
                     * @throws SQLException
                     *             if there is any kind of problem accessing the database.</member>
        <member name="M:biz.ritter.javapi.sql.DriverManager.getDrivers">
                     * Returns an {@code Enumeration} that contains all of the loaded JDBC
                     * drivers that the current caller can access.
                     *
                     * @return An {@code Enumeration} containing all the currently loaded JDBC
                     *         {@code Drivers}.</member>
        <member name="M:biz.ritter.javapi.sql.DriverManager.getLoginTimeout">
                     * Returns the login timeout when connecting to a database in seconds.
                     *
                     * @return the login timeout in seconds.</member>
        <member name="M:biz.ritter.javapi.sql.DriverManager.getLogStream">
                     * Gets the log {@code PrintStream} used by the {@code DriverManager} and
                     * all the JDBC Drivers.
                     *
                     * @deprecated use {@link #getLogWriter()} instead.
                     * @return the {@code PrintStream} used for logging activities.</member>
        <member name="M:biz.ritter.javapi.sql.DriverManager.getLogWriter">
                     * Retrieves the log writer.
                     *
                     * @return A {@code PrintWriter} object used as the log writer. {@code null}
                     *         if no log writer is set.</member>
        <member name="M:biz.ritter.javapi.sql.DriverManager.println(System.String)">
                     * Prints a message to the current JDBC log stream. This is either the
                     * {@code PrintWriter} or (deprecated) the {@code PrintStream}, if set.
                     *
                     * @param message
                     *            the message to print to the JDBC log stream.</member>
        <member name="M:biz.ritter.javapi.sql.DriverManager.registerDriver(biz.ritter.javapi.sql.Driver)">
                     * Registers a given JDBC driver with the {@code DriverManager}.
                     * <p />
                     * A newly loaded JDBC driver class should register itself with the
                     * {@code DriverManager} by calling this method.
                     *
                     * @param driver
                     *            the {@code Driver} to register with the {@code DriverManager}.
                     * @throws SQLException
                     *             if a database access error occurs.</member>
        <member name="M:biz.ritter.javapi.sql.DriverManager.setLoginTimeout(System.Int32)">
                     * Sets the login timeout when connecting to a database in seconds.
                     *
                     * @param seconds
                     *            seconds until timeout. 0 indicates wait forever.</member>
        <member name="M:biz.ritter.javapi.sql.DriverManager.setLogStream(biz.ritter.javapi.io.PrintStream)">
                     * Sets the print stream to use for logging data from the {@code
                     * DriverManager} and the JDBC drivers.
                     *
                     * @deprecated Use {@link #setLogWriter} instead.
                     * @param out
                     *            the {@code PrintStream} to use for logging.</member>
        <member name="M:biz.ritter.javapi.sql.DriverManager.setLogWriter(biz.ritter.javapi.io.PrintWriter)">
                     * Sets the {@code PrintWriter} that is used by all loaded drivers, and also
                     * the {@code DriverManager}.
                     *
                     * @param out
                     *            the {@code PrintWriter} to be used.</member>
        <member name="M:biz.ritter.javapi.sql.DriverManager.isClassFromClassLoader(System.Object,biz.ritter.javapi.lang.ClassLoader)">
                     * Determines whether the supplied object was loaded by the given {@code ClassLoader}.
                     *
                     * @param theObject
                     *            the object to check.
                     * @param theClassLoader
                     *            the {@code ClassLoader}.
                     * @return {@code true} if the Object does belong to the {@code ClassLoader}
                     *         , {@code false} otherwise</member>
        <member name="T:biz.ritter.javapi.sql.DriverPropertyInfo">
                 * A class holding information about driver properties of a database connection.
                 * This class is returned by the
                 * {@link Driver#getPropertyInfo(String, java.util.Properties)} method and
                 * allows for the advanced connection handling.</member>
        <member name="F:biz.ritter.javapi.sql.DriverPropertyInfo.choices">
                     * If the value member can be chosen from a set of possible values, they are
                     * contained here. Otherwise choices is {@code null}.</member>
        <member name="F:biz.ritter.javapi.sql.DriverPropertyInfo.description">
                     * A description of the property. May be {@code null}.</member>
        <member name="F:biz.ritter.javapi.sql.DriverPropertyInfo.name">
                     * The name of the property.</member>
        <member name="F:biz.ritter.javapi.sql.DriverPropertyInfo.required">
                     * {@code true} when the value member must be provided during {@code
                     * Driver.connect}. {@code false} otherwise.</member>
        <member name="F:biz.ritter.javapi.sql.DriverPropertyInfo.value">
                     * The current value associated with this property. It is depending on the
                     * data gathered by the {@code getPropertyInfo} method, the general Java
                     * environment and the driver's default values.</member>
        <member name="M:biz.ritter.javapi.sql.DriverPropertyInfo.#ctor(System.String,System.String)">
                     * Creates a {@code DriverPropertyInfo} instance with the supplied name and
                     * value. Other class members take their default values.
                     *
                     * @param name
                     *            The property name.
                     * @param value
                     *            The property value.</member>
        <member name="T:biz.ritter.javapi.sql.ParameterMetaData">
                 * An interface used to get information about the types and properties of
                 * parameters in a {@code PreparedStatement}.</member>
        <member name="M:biz.ritter.javapi.sql.ParameterMetaData.getParameterClassName(System.Int32)">
                     * Gets the fully-qualified name of the Java class which should be passed as
                     * a parameter to the method {@code PreparedStatement.setObject}.
                     *
                     * @param paramIndex
                     *            the index number of the parameter, where the first parameter
                     *            has index 1.
                     * @return the fully qualified Java class name of the parameter with the
                     *         specified index. This class name is used for custom mapping
                     *         between SQL types and Java objects.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ParameterMetaData.getParameterCount">
                     * Gets the number of parameters in the {@code PreparedStatement} for which
                     * this {@code ParameterMetaData} contains information.
                     *
                     * @return the number of parameters.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ParameterMetaData.getParameterMode(System.Int32)">
                     * Gets the mode of the specified parameter. Can be one of:
                     * <ul>
                     * <li>ParameterMetaData.parameterModeIn</li>
                     * <li>ParameterMetaData.parameterModeOut</li>
                     * <li>ParameterMetaData.parameterModeInOut</li>
                     * <li>ParameterMetaData.parameterModeUnknown</li>
                     * </ul>
                     *
                     * @param paramIndex
                     *            the index number of the parameter, where the first parameter
                     *            has index 1.
                     * @return the parameter's mode.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ParameterMetaData.getParameterType(System.Int32)">
                     * Gets the SQL type of a specified parameter.
                     *
                     * @param paramIndex
                     *            the index number of the parameter, where the first parameter
                     *            has index 1.
                     * @return the SQL type of the parameter as defined in {@code
                     *         java.sql.Types}.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ParameterMetaData.getParameterTypeName(System.Int32)">
                     * Gets the database-specific type name of a specified parameter.
                     *
                     * @param paramIndex
                     *            the index number of the parameter, where the first parameter
                     *            has index 1.
                     * @return the type name for the parameter as used by the database. A
                     *         fully-qualified name is returned if the parameter is a <i>User
                     *         Defined Type</i> (UDT).
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ParameterMetaData.getPrecision(System.Int32)">
                     * Gets the number of decimal digits for a specified parameter.
                     *
                     * @param paramIndex
                     *            the index number of the parameter, where the first parameter
                     *            has index 1.
                     * @return the number of decimal digits ("the precision") for the parameter.
                     *         {@code 0} if the parameter is not a numeric type.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ParameterMetaData.getScale(System.Int32)">
                     * Gets the number of digits after the decimal point for a specified
                     * parameter.
                     *
                     * @param paramIndex
                     *            the index number of the parameter, where the first parameter
                     *            has index 1.
                     * @return the number of digits after the decimal point ("the scale") for
                     *         the parameter. {@code 0} if the parameter is not a numeric type.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ParameterMetaData.isNullable(System.Int32)">
                     * Gets whether {@code null} values are allowed for the specified parameter.
                     * The returned value is one of:
                     * <ul>
                     * <li>ParameterMetaData.parameterNoNulls</li>
                     * <li>ParameterMetaData.parameterNullable</li>
                     * <li>ParameterMetaData.parameterNullableUnknown</li>
                     * </ul>
                     *
                     * @param paramIndex
                     *            the index number of the parameter, where the first parameter
                     *            has index 1.
                     * @return the int code indicating the nullability of the parameter.
                     * @throws SQLException
                     *             if a database error is encountered.</member>
        <member name="M:biz.ritter.javapi.sql.ParameterMetaData.isSigned(System.Int32)">
                     * Gets whether values for the specified parameter can be signed numbers.
                     *
                     * @param paramIndex
                     *            the index number of the parameter, where the first parameter
                     *            has index 1.
                     * @return {@code true} if values can be signed numbers for this parameter,
                     *         {@code false} otherwise.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="F:biz.ritter.javapi.sql.ParameterMetaDataConstants.parameterModeIn">
                     * Indicates that the parameter mode is {@code IN}.</member>
        <member name="F:biz.ritter.javapi.sql.ParameterMetaDataConstants.parameterModeInOut">
                     * Indicates that the parameter mode is {@code INOUT}.</member>
        <member name="F:biz.ritter.javapi.sql.ParameterMetaDataConstants.parameterModeOut">
                     * Indicates that the parameter mode is {@code OUT}.</member>
        <member name="F:biz.ritter.javapi.sql.ParameterMetaDataConstants.parameterModeUnknown">
                     * Indicates that the parameter mode is not known.</member>
        <member name="F:biz.ritter.javapi.sql.ParameterMetaDataConstants.parameterNoNulls">
                     * Indicates that a parameter is not permitted to be {@code NULL}.</member>
        <member name="F:biz.ritter.javapi.sql.ParameterMetaDataConstants.parameterNullable">
                     * Indicates that a parameter is permitted to be {@code NULL}.</member>
        <member name="F:biz.ritter.javapi.sql.ParameterMetaDataConstants.parameterNullableUnknown">
                     * Indicates that whether a parameter is allowed to be {@code null} or not
                     * is not known.</member>
        <member name="T:biz.ritter.javapi.sql.PreparedStatement">
                 * An interface for a precompiled SQL Statement.
                 * <p />
                 * An SQL Statement is put into a {@code PreparedStatement} and is precompiled
                 * so that it can be executed efficiently multiple times.
                 * <p />
                 * Setter methods are supplied in the {@code PreparedStatement} interface for
                 * the setting of {@code IN} parameters for the statement. The setter method
                 * used for each {@code IN} parameter must match the parameter's type.</member>
        <member name="M:biz.ritter.javapi.sql.PreparedStatement.addBatch">
                     * Add a set of parameters to the {@code PreparedStatement}'s command batch.
                     *
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.PreparedStatement.clearParameters">
                     * Clear the current parameter values.
                     * <p />
                     * Typically, parameter values are retained for multiple executions of the
                     * {@code Statement}. Setting a parameter value replaces the previous value. This
                     * method clears the values for all parameters, releasing all resources used
                     * by those parameters.
                     *
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.PreparedStatement.execute">
                     * Executes the SQL statement in this {@code PreparedStatement}.
                     * <p />
                     * A {@code PreparedStatement} may return multiple results. The execute
                     * method executes the {@code PreparedStatement} and returns a flag
                     * indicating the kind of result produced by the action. The methods
                     * {@code getResultSet} or {@code getUpdateCount} are used to retrieve
                     * the first result, and the second and subsequent results are
                     * retrieved with {@code getMoreResults}.
                     *
                     * @return {@code true} if the result of the execution is a {@code
                     *         ResultSet}, {@code false} if there is no result or if the result
                     *         is an update count.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.PreparedStatement.executeQuery">
                     * Executes the SQL query in the {@code PreparedStatement} and returns the
                     * {@code ResultSet} generated by the query.
                     *
                     * @return the {@code ResultSet} generated by the query, never {@code null}.
                     * @throws SQLException
                     *             if a database error happens or if the SQL statement does not
                     *             produce a {@code ResultSet}.</member>
        <member name="M:biz.ritter.javapi.sql.PreparedStatement.executeUpdate">
                     * Invokes the SQL command contained within the prepared statement. This
                     * must be {@code INSERT}, {@code UPDATE}, {@code DELETE}, or a command that
                     * returns nothing.
                     *
                     * @return the number of affected rows for {@code INSERT}, {@code UPDATE} or {@code
                     *         DELETE} statements, {@code 0} for statements that return nothing.
                     * @throws SQLException
                     *             if a database error happens or if the SQL statement returns a
                     *             {@code ResultSet}.</member>
        <member name="M:biz.ritter.javapi.sql.PreparedStatement.getMetaData">
                     * Returns a {@code ResultSetMetaData} describing the {@code
                     * ResultSet} that would be produced by execution of the {@code PreparedStatement}.
                     * <p />
                     * It is possible to know the metadata for the {@code ResultSet} without
                     * executing the {@code PreparedStatement}, because the {@code
                     * PreparedStatement} is precompiled. As a result the metadata can be
                     * queried ahead of time without actually executing the statement.
                     *
                     * @return a {@code ResultSetMetaData} object with the information about the
                     *         columns of the {@code ResultSet}, if the driver can return a
                     *         {@code ResultSetMetaData}. {@code null} otherwise.
                     * @throws SQLException
                     *             if there is a database error.</member>
        <member name="M:biz.ritter.javapi.sql.PreparedStatement.getParameterMetaData">
                     * Gets information about the parameters of the {@code PreparedStatement}.
                     *
                     * @return a {@code ParameterMetaData} object which holds information about
                     *         the number, type, and properties of the parameters of this {@code
                     *         PreparedStatement}.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.PreparedStatement.setArray(System.Int32,biz.ritter.javapi.sql.Array)">
                     * Sets the value of a specified parameter to the supplied {@code Array}.
                     *
                     * @param parameterIndex
                     *            the parameter number index, where the first parameter has
                     *            index 1.
                     * @param theArray
                     *            a {@code java.sql.Array} giving the new value of the parameter at {@code
                     *            parameterIndex}.
                     * @throws SQLException
                     *             if a database error happens.
                     * @see Array</member>
        <member name="M:biz.ritter.javapi.sql.PreparedStatement.setAsciiStream(System.Int32,biz.ritter.javapi.io.InputStream,System.Int32)">
                     * Sets the value of a specified parameter to the content of a supplied
                     * {@code InputStream}, which has a specified number of bytes.
                     * <p />
                     * This is a good method for setting an SQL {@code LONGVARCHAR} parameter
                     * where the length of the data is large. Data is read from the {@code
                     * InputStream} until end-of-file is reached or the specified number of
                     * bytes is copied.
                     *
                     * @param parameterIndex
                     *            the parameter number index, where the first parameter has
                     *            index 1.
                     * @param theInputStream
                     *            the ASCII {@code InputStream} carrying the data to which the
                     *            parameter at {@code parameterIndex} is set.
                     * @param length
                     *            the number of bytes in the {@code InputStream} to copy to the
                     *            parameter.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.PreparedStatement.setBigDecimal(System.Int32,biz.ritter.javapi.math.BigDecimal)">
                     * Sets the value of a specified parameter to a supplied {@code
                     * java.math.BigDecimal} value.
                     *
                     * @param parameterIndex
                     *            the parameter number index, where the first parameter has
                     *            index 1.
                     * @param theBigDecimal
                     *            the value to which the parameter at {@code parameterIndex} is
                     *            set.
                     * @throws SQLException
                     *             if a database error happens.
                     * @see java.math.BigDecimal</member>
        <member name="M:biz.ritter.javapi.sql.PreparedStatement.setBinaryStream(System.Int32,biz.ritter.javapi.io.InputStream,System.Int32)">
                     * Sets the value of a specified parameter to the content of a supplied
                     * binary {@code InputStream}, which has a specified number of bytes.
                     * <p />
                     * Use this method when a large amount of data needs to be set into a
                     * {@code LONGVARBINARY} parameter.
                     *
                     * @param parameterIndex
                     *            the parameter number index, where the first parameter has
                     *            index 1.
                     * @param theInputStream
                     *            the binary {@code InputStream} carrying the data to update the
                     *            parameter.
                     * @param length
                     *            the number of bytes in the {@code InputStream} to copy to the
                     *            parameter.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.PreparedStatement.setBlob(System.Int32,biz.ritter.javapi.sql.Blob)">
                     * Sets the value of a specified parameter to the given {@code Blob} object.
                     *
                     * @param parameterIndex
                     *            the parameter number index, where the first parameter has
                     *            index 1.
                     * @param theBlob
                     *            the {@code java.sql.Blob} to which the parameter at {@code
                     *            parameterIndex} is set.
                     * @throws SQLException
                     *             if a database error happens.
                     * @see Blob</member>
        <member name="M:biz.ritter.javapi.sql.PreparedStatement.setBoolean(System.Int32,System.Boolean)">
                     * Sets the value of a specified parameter to a supplied {@code boolean}
                     * value.
                     *
                     * @param parameterIndex
                     *            the parameter number index, where the first parameter has
                     *            index 1.
                     * @param theBoolean
                     *            the boolean value to which the parameter at {@code
                     *            parameterIndex} is set.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.PreparedStatement.setByte(System.Int32,System.Byte)">
                     * Sets the value of a specified parameter to a supplied {@code byte} value.
                     *
                     * @param parameterIndex
                     *            the parameter number index, where the first parameter has
                     *            index 1.
                     * @param theByte
                     *            the byte value to which the parameter at {@code
                     *            parameterIndex} is set.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.PreparedStatement.setBytes(System.Int32,System.Byte[])">
                     * Sets the value of a specified parameter to a supplied array of bytes. The
                     * array is mapped to a {@code VARBINARY} or {@code LONGVARBINARY} in the
                     * database.
                     *
                     * @param parameterIndex
                     *            the parameter number index, where the first parameter has
                     *            index 1.
                     * @param theBytes
                     *            the array of bytes to which the parameter at {@code
                     *            parameterIndex} is set.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.PreparedStatement.setCharacterStream(System.Int32,biz.ritter.javapi.io.Reader,System.Int32)">
                     * Sets the value of a specified parameter to the character content of a
                     * {@code Reader} object, with the specified length of character data.
                     * <p />
                     * Data is read from the {@code
                     * Reader} until end-of-file is reached or the specified number of
                     * characters are copied.
                     *
                     * @param parameterIndex
                     *            the parameter number index, where the first parameter has
                     *            index 1
                     * @param reader
                     *            the {@code java.io.Reader} containing the character data.
                     * @param length
                     *            the number of characters to be read.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.PreparedStatement.setClob(System.Int32,biz.ritter.javapi.sql.Clob)">
                     * Sets the value of a specified parameter to the given {@code Clob} object.
                     *
                     * @param parameterIndex
                     *            the parameter number index, where the first parameter has
                     *            index 1.
                     * @param theClob
                     *            a {@code java.sql.Clob} holding the data to which the
                     *            parameter at {@code parameterIndex} is set.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.PreparedStatement.setDate(System.Int32,biz.ritter.javapi.sql.Date)">
                     * Sets the value of a specified parameter to a supplied {@code
                     * java.sql.Date} value.
                     *
                     * @param parameterIndex
                     *            the parameter number index, where the first parameter has
                     *            index 1.
                     * @param theDate
                     *            a {@code java.sql.Date} to which the parameter at {@code
                     *            parameterIndex} is set.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.PreparedStatement.setDate(System.Int32,biz.ritter.javapi.sql.Date,biz.ritter.javapi.util.Calendar)">
                     * Sets the value of a specified parameter to a supplied {@code
                     * java.sql.Date} value, using a supplied {@code Calendar} to map the Date.
                     * The {@code Calendar} allows the application to control the timezone used
                     * to compute the SQL {@code DATE} in the database - without the supplied
                     * {@code Calendar}, the driver uses the default timezone of the Java
                     * virtual machine.
                     *
                     * @param parameterIndex
                     *            the parameter number index, where the first parameter has
                     *            index 1.
                     * @param theDate
                     *            a {@code java.sql.Date} to which the parameter at {@code
                     *            parameterIndex} is set.
                     * @param cal
                     *            a {@code Calendar} to use to construct the SQL {@code DATE}
                     *            value.
                     * @throws SQLException
                     *             if a database error happens.
                     * @see Date
                     * @see java.util.Calendar</member>
        <member name="M:biz.ritter.javapi.sql.PreparedStatement.setDouble(System.Int32,System.Double)">
                     * Sets the value of a specified parameter to a supplied {@code double}
                     * value.
                     *
                     * @param parameterIndex
                     *            the parameter number index, where the first parameter has
                     *            index 1.
                     * @param theDouble
                     *            the {@code double} value to which the parameter at {@code
                     *            parameterIndex} is set.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.PreparedStatement.setFloat(System.Int32,System.Single)">
                     * Sets the value of a specified parameter to to a supplied {@code float}
                     * value.
                     *
                     * @param parameterIndex
                     *            the parameter number index, where the first parameter has
                     *            index 1.
                     * @param theFloat
                     *            the {@code float} value to update the parameter.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.PreparedStatement.setInt(System.Int32,System.Int32)">
                     * Sets the value of a specified parameter to a supplied {@code int} value.
                     *
                     * @param parameterIndex
                     *            the parameter number index, where the first parameter has
                     *            index 1.
                     * @param theInt
                     *            the {@code int} value to which the parameter at {@code
                     *            parameterIndex} is set.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.PreparedStatement.setLong(System.Int32,System.Int64)">
                     * Sets the value of a specified parameter to a supplied {@code long} value.
                     *
                     * @param parameterIndex
                     *            the parameter number index, where the first parameter has
                     *            index 1.
                     * @param theLong
                     *            the {@code long} value to which the parameter at {@code
                     *            parameterIndex} is set.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.PreparedStatement.setNull(System.Int32,System.Int32)">
                     * Sets the value of a specified parameter to SQL {@code NULL}. Don't use
                     * this version of {@code setNull} for <i>User Defined Types</i> (UDT) or
                     * for REF type parameters.
                     *
                     * @param parameterIndex
                     *            the parameter number index, where the first parameter has
                     *            index 1.
                     * @param sqlType
                     *            the SQL type of the parameter, as defined in {@code
                     *            java.sql.Types}.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.PreparedStatement.setNull(System.Int32,System.Int32,System.String)">
                     * Sets the value of a specified parameter to SQL {@code NULL}. This version
                     * of {@code setNull} should be used for <i>User Defined Types</i> (UDTs)
                     * and also REF types. UDTs can be {@code STRUCT}, {@code DISTINCT}, {@code
                     * JAVA_OBJECT} and named array types.
                     * <p />
                     * Applications must provide the SQL type code and also a fully qualified
                     * SQL type name when supplying a {@code NULL} UDT or REF. For a UDT, the
                     * type name is the type name of the parameter itself, but for a REF
                     * parameter the type name is the type name of the referenced type.
                     *
                     * @param paramIndex
                     *            the parameter number index, where the first parameter has
                     *            index 1.
                     * @param sqlType
                     *            the SQL type of the parameter, as defined in {@code
                     *            java.sql.Types}.
                     * @param typeName
                     *            the fully qualified name of a UDT or REF type - ignored if the
                     *            parameter is not a UDT.
                     * @throws SQLException
                     *             if a database error happens.
                     * @see Types</member>
        <member name="M:biz.ritter.javapi.sql.PreparedStatement.setObject(System.Int32,System.Object)">
                     * Sets the value of a specified parameter using a supplied object.
                     * <p />
                     * There is a standard mapping from Java types to SQL types, defined in the
                     * JDBC specification. The passed object is then transformed into the
                     * appropriate SQL type, and then transferred to the database. {@code
                     * setObject} can be used to pass abstract data types unique to the
                     * database, by using a JDBC driver specific Java type. If the object's
                     * class implements the interface {@code SQLData}, the JDBC driver calls
                     * {@code SQLData.writeSQL} to write it to the SQL data stream. If the
                     * object's class implements {@code Ref}, {@code Blob}, {@code Clob},
                     * {@code Struct}, or {@code Array}, the driver passes it to the database as
                     * a value of the corresponding SQL type.
                     *
                     * @param parameterIndex
                     *            the parameter number index, where the first parameter has
                     *            index 1.
                     * @param theObject
                     *            the object containing the value to which the parameter at
                     *            {@code parameterIndex} is set.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.PreparedStatement.setObject(System.Int32,System.Object,System.Int32)">
                     * Sets the value of a specified parameter using a supplied object.
                     * <p />
                     * The object is converted to the given {@code targetSqlType} before it is
                     * sent to the database. If the object has a custom mapping (its class
                     * implements the interface {@code SQLData}), the JDBC driver will call the method
                     * {@code SQLData.writeSQL} to write it to the SQL data stream. If the
                     * object's class implements {@code Ref}, {@code Blob}, {@code Clob},
                     * {@code Struct}, or {@code Array}, the driver will pass it to the database
                     * in the form of the relevant SQL type.
                     *
                     * @param parameterIndex
                     *            the parameter index, where the first parameter has index 1.
                     * @param theObject
                     *            the Object containing the value to which the parameter at
                     *            {@code parameterIndex} is set.
                     * @param targetSqlType
                     *            the SQL type to send to the database, as defined in {@code
                     *            java.sql.Types}.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.PreparedStatement.setObject(System.Int32,System.Object,System.Int32,System.Int32)">
                     * Sets the value of a specified parameter using a supplied object.
                     * <p />
                     * The object is converted to the given {@code targetSqlType} before it is
                     * sent to the database. If the object has a custom mapping (its class
                     * implements the interface {@code SQLData}), the JDBC driver will call the method
                     * {@code SQLData.writeSQL} to write it to the SQL data stream. If the
                     * object's class implements {@code Ref}, {@code Blob}, {@code Clob},
                     * {@code Struct}, or {@code Array}, the driver will pass it to the database
                     * in the form of the relevant SQL type.
                     *
                     * @param parameterIndex
                     *            the parameter index, where the first parameter has index 1.
                     * @param theObject
                     *            the Object containing the value to which the parameter at
                     *            {@code parameterIndex} is set.
                     * @param targetSqlType
                     *            the SQL type to send to the database, as defined in {@code
                     *            java.sql.Types}.
                     * @param scale
                     *            the number of digits after the decimal point - only applies to
                     *            the types {@code java.sql.Types.DECIMAL} and {@code
                     *            java.sql.Types.NUMERIC} - ignored for all other types.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.PreparedStatement.setRef(System.Int32,biz.ritter.javapi.sql.Ref)">
                     * Sets the value of a specified parameter to a supplied {@code
                     * REF(&lt;structured-type&gt;)} value. This is stored as an SQL {@code REF}.
                     *
                     * @param parameterIndex
                     *            the parameter number index, where the first parameter has
                     *            index 1.
                     * @param theRef
                     *            a {@code java.sql.Ref} value to which the parameter at {@code
                     *            parameterIndex} is set.
                     * @throws SQLException
                     *             if a database error happens.
                     * @see Ref</member>
        <member name="M:biz.ritter.javapi.sql.PreparedStatement.setShort(System.Int32,System.Int16)">
                     * Sets the value of a specified parameter to a supplied {@code short}
                     * value.
                     *
                     * @param parameterIndex
                     *            the parameter number index, where the first parameter has
                     *            index 1.
                     * @param theShort
                     *            a {@code short} value to which the parameter at {@code
                     *            parameterIndex} is set.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.PreparedStatement.setString(System.Int32,System.String)">
                     * Sets the value of a specified parameter to a supplied string.
                     *
                     * @param parameterIndex
                     *            the parameter number index, where the first parameter has
                     *            index 1.
                     * @param theString
                     *            the value to which the parameter at {@code parameterIndex} is
                     *            set.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.PreparedStatement.setTime(System.Int32,biz.ritter.javapi.sql.Time)">
                     * Sets the value of a specified parameter to a supplied {@code
                     * java.sql.Time} value.
                     *
                     * @param parameterIndex
                     *            the parameter number index, where the first parameter has
                     *            index 1.
                     * @param theTime
                     *            a {@code java.sql.Time} value to which the parameter at
                     *            {@code parameterIndex} is set.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.PreparedStatement.setTime(System.Int32,biz.ritter.javapi.sql.Time,biz.ritter.javapi.util.Calendar)">
                     * Sets the value of a specified parameter to a supplied {@code
                     * java.sql.Time} value, using a supplied {@code Calendar}.
                     * <p />
                     * The driver uses the supplied {@code Calendar} to create the SQL {@code
                     * TIME} value, which allows it to use a custom timezone - otherwise the
                     * driver uses the default timezone of the Java virtual machine.
                     *
                     * @param parameterIndex
                     *            the parameter number index, where the first parameter has
                     *            index 1.
                     * @param theTime
                     *            a {@code java.sql.Time} value to which the parameter at
                     *            {@code parameterIndex} is set.
                     * @param cal
                     *            a {@code Calendar} to use to construct the SQL {@code TIME}
                     *            value.
                     * @throws SQLException
                     *             if a database error happens.
                     * @see Time
                     * @see java.util.Calendar</member>
        <member name="M:biz.ritter.javapi.sql.PreparedStatement.setTimestamp(System.Int32,biz.ritter.javapi.sql.Timestamp)">
                     * Sets the value of a specified parameter to a supplied java.sql.Timestamp
                     * value.
                     *
                     * @param parameterIndex
                     *            the parameter number index, where the first parameter has
                     *            index 1.
                     * @param theTimestamp
                     *            the java.sql.Timestamp value to which the parameter at {@code
                     *            parameterIndex} is set.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.PreparedStatement.setTimestamp(System.Int32,biz.ritter.javapi.sql.Timestamp,biz.ritter.javapi.util.Calendar)">
                     * Sets the value of a specified parameter to a supplied {@code
                     * java.sql.Timestamp} value, using the supplied {@code Calendar}.
                     * <p />
                     * The driver uses the supplied {@code Calendar} to create the SQL {@code
                     * TIMESTAMP} value, which allows it to use a custom timezone - otherwise
                     * the driver uses the default timezone of the Java virtual machine.
                     *
                     * @param parameterIndex
                     *            the parameter number index, where the first parameter has
                     *            index 1.
                     * @param theTimestamp
                     *            the {@code java.sql.Timestamp} value to which the parameter at
                     *            {@code parameterIndex} is set.
                     * @param cal
                     *            a {@code Calendar} to use to construct the SQL {@code
                     *            TIMESTAMP} value
                     * @throws SQLException
                     *             if a database error happens.
                     * @see Timestamp
                     * @see java.util.Calendar</member>
        <member name="M:biz.ritter.javapi.sql.PreparedStatement.setUnicodeStream(System.Int32,biz.ritter.javapi.io.InputStream,System.Int32)">
                     * Sets the value of a specified parameter to the characters from a supplied
                     * {@code InputStream}, with a specified number of bytes.
                     *
                     * @deprecated Use {@link #setCharacterStream(int, Reader, int)}
                     * @param parameterIndex
                     *            the parameter number index, where the first parameter has
                     *            index 1.
                     * @param theInputStream
                     *            the {@code InputStream} with the character data to which the
                     *            parameter at {@code parameterIndex} is set.
                     * @param length
                     *            the number of bytes to read from the {@code InputStream}.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.PreparedStatement.setURL(System.Int32,biz.ritter.javapi.net.URL)">
                     * Sets the value of a specified parameter to a supplied {@code
                     * java.net.URL}.
                     *
                     * @param parameterIndex
                     *            the parameter number index, where the first parameter has
                     *            index 1.
                     * @param theURL
                     *            the {@code URL} to which the parameter at {@code
                     *            parameterIndex} is set.
                     * @throws SQLException
                     *             if a database error happens.
                     * @see URL</member>
        <member name="M:biz.ritter.javapi.sql.PreparedStatement.setRowId(System.Int32,biz.ritter.javapi.sql.RowId)">
                     * TODO Javadoc</member>
        <member name="T:biz.ritter.javapi.sql.Ref">
                 * This interface represents an SQL Ref - a data object containing a cursor
                 * or pointer to a result table.
                 * <p />
                 * The data structure identified by an instance of Ref is held in the
                 * database, so the data is not necessarily read and converted
                 * into a Java object until {@code getObject} is called. However, if
                 * the database supports the {@code Ref} type, it is not typically
                 * necessary to get the underlying object before using it in a method call -
                 * the {@code Ref} object can be used in place of the data structure.
                 * <p />
                 * A {@code Ref} object is stored into the database using the
                 * {@link PreparedStatement#setRef(int, Ref)} method.</member>
        <member name="M:biz.ritter.javapi.sql.Ref.getBaseTypeName">
                     * Gets the fully-qualified SQL name of the SQL structured type that this
                     * {@code Ref} references.
                     *
                     * @return the fully qualified name of the SQL structured type.
                     * @throws SQLException
                     *             if there is a database error.</member>
        <member name="M:biz.ritter.javapi.sql.Ref.getObject">
                     * Gets the SQL structured type instance referenced by this {@code Ref}.
                     *
                     * @return a Java object whose type is defined by the mapping for the SQL
                     *         structured type.
                     * @throws SQLException
                     *             if there is a database error.</member>
        <member name="M:biz.ritter.javapi.sql.Ref.getObject(biz.ritter.javapi.util.Map{System.String,biz.ritter.javapi.lang.Class})">
                     * Returns the associated object and uses the relevant mapping to convert it
                     * to a Java type.
                     *
                     * @param map
                     *            the mapping for type conversion.
                     * @return a Java object whose type is defined by the mapping for the SQL
                     *         structured type.
                     * @throws SQLException
                     *             if there is a database error.</member>
        <member name="M:biz.ritter.javapi.sql.Ref.setObject(System.Object)">
                     * Sets the value of the structured type that this {@code Ref} references to
                     * a supplied object.
                     *
                     * @param value
                     *            the {@code Object} representing the new SQL structured type
                     *            that this {@code Ref} references.
                     * @throws SQLException
                     *             if there is a database error.</member>
        <member name="T:biz.ritter.javapi.sql.ResultSet">
                 * An interface for an object which represents a database table entry, returned
                 * as the result of the query to the database.
                 * <p />
                 * {@code ResultSet}s have a cursor which points to the current data table row.
                 * When the {@code ResultSet} is created, the cursor's location is one position
                 * ahead of the first row. To move the cursor to the first and consecutive rows,
                 * use the {@code next} method. The {@code next} method returns {@code true} as
                 * long as there are more rows in the {@code ResultSet}, otherwise it returns
                 * {@code false}.
                 * <p />
                 * The default type of {@code ResultSet} can not be updated and its cursor can
                 * only advance forward through the rows of data. This means that it is only
                 * possible to read through it once. However, other kinds of {@code ResultSet}
                 * are implemented: an <i>updatable</i> type and also types where the cursor can
                 * be <i>scrolled</i> forward and backward through the rows of data. How such a
                 * {@code ResultSet} is created is demonstrated in the following example:
                 * <ul>
                 * <dd>
                 *         {@code Connection con;}</dd>
                 * <dd>{@code Statement aStatement = con.createStatement(
                 * ResultSet.TYPE_SCROLL_SENSITIVE,}{@code ResultSet.CONCUR_UPDATABLE );}</dd>
                 * <dd>{@code ResultSet theResultSet =
                 * theStatement.executeQuery("SELECT price, quantity FROM STOCKTABLE");}</dd>
                 * <dd>{@code // theResultSet is both scrollable and updatable}</dd></ul>
                 * <p />
                 * The {@code ResultSet} interface provides a series of methods for retrieving
                 * data from columns in the current row, such as {@code getDate} and {@code
                 * getFloat}. The columns are retrieved either by their index number (starting
                 * at 1) or by their name - there are separate methods for both techniques of
                 * column addressing. The column names are case insensitive. If several columns
                 * have the same name, then the getter methods use the first matching column.
                 * This means that if column names are used, it is not possible to guarantee
                 * that the name will retrieve data from the intended column - for certainty it
                 * is better to use column indexes. Ideally the columns should be read
                 * left-to-right and read once only, since not all databases are optimized to
                 * handle other techniques of reading the data.
                 * <p />
                 * When reading data via the appropriate getter methods, the JDBC driver maps
                 * the SQL data retrieved from the database to the Java type implied by the
                 * method invoked by the application. The JDBC specification has a table for the
                 * mappings from SQL types to Java types.
                 * <p />
                 * There are also methods for writing data into the {@code ResultSet}, such as
                 * {@code updateInt} and {@code updateString}. The update methods can be used
                 * either to modify the data of an existing row or to insert new data rows into
                 * the {@code ResultSet} . Modification of existing data involves moving the
                 * cursor to the row which needs modification and then using the update methods
                 * to modify the data, followed by calling the {@code ResultSet.updateRow}
                 * method. For insertion of new rows, the cursor is first moved to a special row
                 * called the <i>Insert Row</i>, data is added using the update methods,
                 * followed by calling the {@code ResultSet.insertRow} method.
                 * <p />
                 * A {@code ResultSet} is closed if the statement which generated it closes, the
                 * statement is executed again, or the same statement's next {@code ResultSet}
                 * is retrieved (if the statement returned of multiple results).</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.absolute(System.Int32)">
                     * Moves the cursor to a specified row number in the {@code ResultSet}.
                     *
                     * @param row
                     *            the index of the row starting at index 1. Index {@code -1}
                     *            returns the last row.
                     * @return {@code true} if the new cursor position is on the {@code
                     *         ResultSet}, {@code false} otherwise.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.afterLast">
                     * Moves the cursor to the end of the {@code ResultSet}, after the last row.
                     *
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.beforeFirst">
                     * Moves the cursor to the start of the {@code ResultSet}, before the first
                     * row.
                     *
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.cancelRowUpdates">
                     * Cancels any updates made to the current row in the {@code ResultSet}.
                     *
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.clearWarnings">
                     * Clears all warnings related to this {@code ResultSet}.
                     *
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.close">
                     * Releases this {@code ResultSet}'s database and JDBC resources. You are
                     * strongly advised to use this method rather than relying on the release
                     * being done when the {@code ResultSet}'s finalize method is called during
                     * garbage collection process. Note that the {@code close()} method might
                     * take some time to complete since it is dependent on the behavior of the
                     * connection to the database and the database itself.
                     *
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.deleteRow">
                     * Deletes the current row from the {@code ResultSet} and from the
                     * underlying database.
                     *
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.findColumn(System.String)">
                     * Gets the index number for a column in the {@code ResultSet} from the
                     * provided column name.
                     *
                     * @param columnName
                     *            the column name.
                     * @return the column's index in the {@code ResultSet} identified by column
                     *         name.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.first">
                     * Shifts the cursor position to the first row in the {@code ResultSet}.
                     *
                     * @return {@code true} if the position is in a legitimate row, {@code
                     *         false} if the {@code ResultSet} contains no rows.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.getArray(System.Int32)">
                     * Gets the content of a column specified by column index in the current row
                     * of this {@code ResultSet} as a {@code java.sql.Array}.
                     *
                     * @param columnIndex
                     *            the index of the column to read
                     * @return a {@code java.sql.Array} with the data from the column.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.getArray(System.String)">
                     * Gets the value of a column specified by column name as a {@code
                     * java.sql.Array}.
                     *
                     * @param colName
                     *            the name of the column to read.
                     * @return a {@code java.sql.Array} with the data from the specified column.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.getAsciiStream(System.Int32)">
                     * Gets the value of a column specified by column index as an ASCII
                     * character stream.
                     *
                     * @param columnIndex
                     *            the index of the column to read.
                     * @return an {@code InputStream} with the data from the column.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.getAsciiStream(System.String)">
                     * Gets the value of a column specified by column name as an ASCII character
                     * stream.
                     *
                     * @param columnName
                     *            the name of the column to read
                     * @return an {@code InputStream} with the data from the column.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.getBigDecimal(System.Int32)">
                     * Gets the value of a column specified by column index as a {@code
                     * java.math.BigDecimal}.
                     *
                     * @param columnIndex
                     *            the index of the column to read.
                     * @return a {@code BigDecimal} with the value of the column.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.getBigDecimal(System.Int32,System.Int32)">
                     * Gets the value of a column specified by column index as a {@code
                     * java.math.BigDecimal}.
                     *
                     * @deprecated use {@link #getBigDecimal(int)} or
                     *             {@link #getBigDecimal(String)}
                     * @param columnIndex
                     *            the index of the column to read.
                     * @param scale
                     *            the number of digits after the decimal point
                     * @return a {@code BigDecimal} with the value of the column.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.getBigDecimal(System.String)">
                     * Gets the value of a column specified by column name, as a {@code
                     * java.math.BigDecimal}.
                     *
                     * @param columnName
                     *            the name of the column to read.
                     * @return a BigDecimal with value of the column.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.getBigDecimal(System.String,System.Int32)">
                     * Gets the value of a column specified by column name, as a {@code
                     * java.math.BigDecimal}.
                     *
                     * @deprecated use {@link #getBigDecimal(int)} or
                     *             {@link #getBigDecimal(String)}
                     * @param columnName
                     *            the name of the column to read.
                     * @param scale
                     *            the number of digits after the decimal point
                     * @return a BigDecimal with value of the column.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.getBinaryStream(System.Int32)">
                     * Gets the value of a column specified by column index as a binary
                     * stream.
                     * <p />
                     * This method can be used to read {@code LONGVARBINARY} values. All of the
                     * data in the {@code InputStream} should be read before getting data from
                     * any other column. A further call to a getter method will implicitly close
                     * the {@code InputStream}.
                     *
                     * @param columnIndex
                     *            the index of the column to read.
                     * @return an {@code InputStream} with the data from the column. If the
                     *         column value is SQL {@code NULL}, {@code null} is returned.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.getBinaryStream(System.String)">
                     * Gets the value of a column specified by column name as a binary stream.
                     * <p />
                     * This method can be used to read {@code LONGVARBINARY} values. All of the
                     * data in the {@code InputStream} should be read before getting data from
                     * any other column. A further call to a getter method will implicitly close
                     * the {@code InputStream}.
                     *
                     * @param columnName
                     *            the name of the column to read.
                     * @return an {@code InputStream} with the data from the column if the
                     *         column value is SQL {@code NULL}, {@code null} is returned.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.getBlob(System.Int32)">
                     * Gets the value of a column specified by column index as a {@code
                     * java.sql.Blob} object.
                     *
                     * @param columnIndex
                     *            the index of the column to read.
                     * @return a {@code java.sql.Blob} with the value of the column.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.getBlob(System.String)">
                     * Gets the value of a column specified by column name, as a {@code
                     * java.sql.Blob} object.
                     *
                     * @param columnName
                     *            the name of the column to read.
                     * @return a {@code java.sql.Blob} with the value of the column.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.getBoolean(System.Int32)">
                     * Gets the value of a column specified by column index as a {@code bool}
                     * .
                     *
                     * @param columnIndex
                     *            the index of the column to read.
                     * @return a {@code bool} value from the column. If the column is SQL
                     *         {@code NULL}, {@code false} is returned.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.getBoolean(System.String)">
                     * Gets the value of a column specified by column name, as a {@code bool}
                     * .
                     *
                     * @param columnName
                     *            the name of the column to read.
                     * @return a {@code bool} value from the column. If the column is SQL
                     *         {@code NULL}, {@code false} is returned.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.getByte(System.Int32)">
                     * Gets the value of a column specified by column index as a {@code byte}.
                     *
                     * @param columnIndex
                     *            the index of the column to read.
                     * @return a {@code byte} equal to the value of the column. 0 if the value
                     *         is SQL {@code NULL}.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.getByte(System.String)">
                     * Gets the value of a column specified by column name as a {@code byte}.
                     *
                     * @param columnName
                     *            the name of the column to read.
                     * @return a {@code byte} equal to the value of the column. 0 if the value
                     *         is SQL {@code NULL}.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.getBytes(System.Int32)">
                     * Gets the value of a column specified by column index as a byte array.
                     *
                     * @param columnIndex
                     *            the index of the column to read.
                     * @return a byte array containing the value of the column. {@code null} if
                     *         the column contains SQL {@code NULL}.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.getBytes(System.String)">
                     * Gets the value of a column specified by column name as a byte array.
                     *
                     * @param columnName
                     *            the name of the column to read.
                     * @return a byte array containing the value of the column. {@code null} if
                     *         the column contains SQL {@code NULL}.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.getCharacterStream(System.Int32)">
                     * Gets the value of a column specified by column index as a {@code
                     * java.io.Reader} object.
                     *
                     * @param columnIndex
                     *            the index of the column to read.
                     * @return a {@code Reader} holding the value of the column. {@code null} if
                     *         the column value is SQL {@code NULL}.
                     * @throws SQLException
                     *             if a database error happens.
                     * @see java.io.Reader</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.getCharacterStream(System.String)">
                     * Gets the value of a column specified by column name as a {@code
                     * java.io.Reader} object.
                     *
                     * @param columnName
                     *            the name of the column to read.
                     * @return a {@code Reader} holding the value of the column. {@code null} if
                     *         the column value is SQL {@code NULL}.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.getClob(System.Int32)">
                     * Gets the value of a column specified by column index as a {@code
                     * java.sql.Clob}.
                     *
                     * @param columnIndex
                     *            the index of the column to read.
                     * @return a {@code Clob} object representing the value in the column.
                     *         {@code null} if the value is SQL {@code NULL}.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.getClob(System.String)">
                     * Gets the value of a column specified by column name as a {@code
                     * java.sql.Clob}.
                     *
                     * @param colName
                     *            the name of the column to read.
                     * @return a {@code Clob} object representing the value in the column.
                     *         {@code null} if the value is SQL {@code NULL}.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.getConcurrency">
                     * Gets the concurrency mode of this {@code ResultSet}.
                     *
                     * @return the concurrency mode - one of: {@code ResultSet.CONCUR_READ_ONLY}
                     *         , {@code ResultSet.CONCUR_UPDATABLE}.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.getCursorName">
                     * Gets the name of the SQL cursor of this {@code ResultSet}.
                     *
                     * @return the SQL cursor name.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.getDate(System.Int32)">
                     * Gets the value of a column specified by column index as a {@code
                     * java.sql.Date}.
                     *
                     * @param columnIndex
                     *            the index of the column to read.
                     * @return a {@code java.sql.Date} matching the column value. {@code null}
                     *         if the column is SQL {@code NULL}.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.getDate(System.Int32,biz.ritter.javapi.util.Calendar)">
                     * Gets the value of a column specified by column index as a {@code
                     * java.sql.Date}. This method uses a supplied calendar to compute the Date.
                     *
                     * @param columnIndex
                     *            the index of the column to read.
                     * @param cal
                     *            a {@code java.util.Calendar} to use in constructing the Date.
                     * @return a {@code java.sql.Date} matching the column value. {@code null}
                     *         if the column is SQL {@code NULL}.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.getDate(System.String)">
                     * Gets the value of a column specified by column name as a {@code
                     * java.sql.Date}.
                     *
                     * @param columnName
                     *            the name of the column to read.
                     * @return a {@code java.sql.Date} matching the column value. {@code null}
                     *         if the column is SQL {@code NULL}.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.getDate(System.String,biz.ritter.javapi.util.Calendar)">
                     * Gets the value of a column specified by column name, as a {@code
                     * java.sql.Date} object.
                     *
                     * @param columnName
                     *            the name of the column to read.
                     * @param cal
                     *            {@code java.util.Calendar} to use in constructing the Date.
                     * @return a {@code java.sql.Date} matching the column value. {@code null}
                     *         if the column is SQL {@code NULL}.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.getDouble(System.Int32)">
                     * Gets the value of a column specified by column index as a {@code double}
                     * value.
                     *
                     * @param columnIndex
                     *            the index of the column to read.
                     * @return a {@code double} equal to the column value. {@code 0.0} if the
                     *         column is SQL {@code NULL}.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.getDouble(System.String)">
                     * Gets the value of a column specified by column name as a {@code double}
                     * value.
                     *
                     * @param columnName
                     *            the name of the column to read.
                     * @return a {@code double} equal to the column value. {@code 0.0} if the
                     *         column is SQL {@code NULL}.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.getFetchDirection">
                     * Gets the direction in which rows are fetched for this {@code ResultSet}
                     * object.
                     *
                     * @return the fetch direction. Will be one of:
                     *         <ul>
                     *         <li>ResultSet.FETCH_FORWARD</li><li>ResultSet.FETCH_REVERSE</li>
                     *         <li>ResultSet.FETCH_UNKNOWN</li>
                     *         </ul>
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.getFetchSize">
                     * Gets the fetch size (in number of rows) for this {@code ResultSet}.
                     *
                     * @return the fetch size as an int
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.getFloat(System.Int32)">
                     * Gets the value of a column specified by column index as a {@code float}
                     * value.
                     *
                     * @param columnIndex
                     *            the index of the column to read.
                     * @return a {@code float} equal to the column value. {@code 0.0} if the
                     *         column is SQL {@code NULL}.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.getFloat(System.String)">
                     * Gets the value of a column specified by column name as a {@code float}
                     * value.
                     *
                     * @param columnName
                     *            the name of the column to read.
                     * @return a {@code float} equal to the column value. {@code 0.0} if the
                     *         column is SQL {@code NULL}.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.getInt(System.Int32)">
                     * Gets the value of a column specified by column index as an {@code int}
                     * value.
                     *
                     * @param columnIndex
                     *            the index of the column to read.
                     * @return an {@code int} equal to the column value. {@code 0} if the
                     *         column is SQL {@code NULL}.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.getInt(System.String)">
                     * Gets the value of a column specified by column name, as an {@code int}
                     * value.
                     *
                     * @param columnName
                     *            the name of the column to read.
                     * @return an {@code int} equal to the column value. {@code 0} if the
                     *         column is SQL {@code NULL}.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.getLong(System.Int32)">
                     * Gets the value of a column specified by column index as a {@code long}
                     * value.
                     *
                     * @param columnIndex
                     *            the index of the column to read.
                     * @return a {@code long} equal to the column value. {@code 0} if the
                     *         column is SQL {@code NULL}.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.getLong(System.String)">
                     * Gets the value of a column specified by column name, as a {@code long}
                     * value.
                     *
                     * @param columnName
                     *            the name of the column to read.
                     * @return a {@code long} equal to the column value. {@code 0} if the
                     *         column is SQL {@code NULL}.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.getMetaData">
                     * Gets the metadata for this {@code ResultSet}. This defines the number,
                     * types and properties of the columns in the {@code ResultSet}.
                     *
                     * @return a {@code ResultSetMetaData} object with information about this
                     *         {@code ResultSet}.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.getObject(System.Int32)">
                     * Gets the value of a specified column as a Java {@code Object}. The type
                     * of the returned object will be the default according to the column's SQL
                     * type, following the JDBC specification for built-in types.
                     * <p />
                     * For SQL User Defined Types, if a column value is Structured or Distinct,
                     * this method behaves the same as a call to: {@code
                     * getObject(columnIndex,this.getStatement().getConnection().getTypeMap())}
                     *
                     * @param columnIndex
                     *            the index of the column to read.
                     * @return an {@code Object} containing the value of the column. {@code
                     *         null} if the column value is SQL {@code NULL}.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.getObject(System.Int32,biz.ritter.javapi.util.Map{System.String,biz.ritter.javapi.lang.Class})">
                     * Gets the value of a column specified by column index as a Java {@code
                     * Object}.
                     * <p />
                     * The type of the Java object will be determined by the supplied Map to
                     * perform the mapping of SQL {@code Struct} or Distinct types into Java
                     * objects.
                     *
                     * @param columnIndex
                     *            the index of the column to read.
                     * @param map
                     *            a {@code java.util.Map} containing a mapping from SQL Type
                     *            names to Java classes.
                     * @return an {@code Object} containing the value of the column. {@code
                     *         null} if the column value is SQL {@code NULL}.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.getObject(System.String)">
                     * Gets the value of a specified column as a Java {@code Object}. The type
                     * of the returned object will be the default according to the column's SQL
                     * type, following the JDBC specification for built-in types.
                     * <p />
                     * For SQL User Defined Types, if a column value is structured or distinct,
                     * this method behaves the same as a call to: {@code
                     * getObject(columnIndex,this.getStatement().getConnection().getTypeMap())}
                     *
                     * @param columnName
                     *            the name of the column to read.
                     * @return an {@code Object} containing the value of the column. {@code
                     *         null} if the column value is SQL {@code NULL}.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.getObject(System.String,biz.ritter.javapi.util.Map{System.String,biz.ritter.javapi.lang.Class})">
                     * Gets the value of a column specified by column name as a Java {@code
                     * Object}.
                     * <p />
                     * The type of the Java object will be determined by the supplied Map to
                     * perform the mapping of SQL Struct or Distinct types into Java objects.
                     *
                     * @param columnName
                     *            the name of the column to read.
                     * @param map
                     *            a {@code java.util.Map} containing a mapping from SQL Type names to
                     *            Java classes.
                     * @return an {@code Object} containing the value of the column. {@code
                     *         null} if the column value is SQL {@code NULL}.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.getRef(System.Int32)">
                     * Gets the value of a column specified by column index as a Java {@code
                     * java.sql.Ref}.
                     *
                     * @param columnIndex
                     *            the index of the column to read.
                     * @return a Ref representing the value of the SQL REF in the column
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.getRef(System.String)">
                     * Gets the value of a column specified by column name as a Java {@code
                     * java.sql.Ref}.
                     *
                     * @param colName
                     *            the name of the column to read.
                     * @return a Ref representing the value of the SQL {@code REF} in the column
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.getRow">
                     * Gets the number of the current row in the {@code ResultSet}. Row numbers
                     * start at 1 for the first row.
                     *
                     * @return the index number of the current row. {@code 0} is returned if
                     *         there is no current row.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.getShort(System.Int32)">
                     * Gets the value of a column specified by column index as a short value.
                     *
                     * @param columnIndex
                     *            the index of the column to read.
                     * @return a short value equal to the value of the column. {@code 0} if
                     *         the value is SQL {@code NULL}.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.getShort(System.String)">
                     * Gets the value of a column specified by column name, as a short value.
                     *
                     * @param columnName
                     *            the name of the column to read.
                     * @return a short value equal to the value of the column. {@code 0} if
                     *         the value is SQL {@code NULL}.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.getStatement">
                     * Gets the statement that produced this {@code ResultSet}. If the {@code
                     * ResultSet} was not created by a statement (i.e. because it was returned
                     * from one of the {@link DatabaseMetaData} methods), {@code null} is
                     * returned.
                     *
                     * @return the Statement which produced this {@code ResultSet}, or {@code
                     *         null} if the {@code ResultSet} was not created by a Statement.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.getString(System.Int32)">
                     * Gets the value of a column specified by column index as a String.
                     *
                     * @param columnIndex
                     *            the index of the column to read.
                     * @return the String representing the value of the column, {@code null} if
                     *         the column is SQL {@code NULL}.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.getString(System.String)">
                     * Gets the value of a column specified by column name, as a String.
                     *
                     * @param columnName
                     *            the name of the column to read.
                     * @return the String representing the value of the column, {@code null} if
                     *         the column is SQL {@code NULL}.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.getTime(System.Int32)">
                     * Gets the value of a column specified by column index as a {@code
                     * java.sql.Time} value.
                     *
                     * @param columnIndex
                     *            the index of the column to read.
                     * @return a Time representing the column value, {@code null} if the column
                     *         value is SQL {@code NULL}.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.getTime(System.Int32,biz.ritter.javapi.util.Calendar)">
                     * Gets the value of a column specified by column index as a {@code
                     * java.sql.Time} value. The supplied {@code Calendar} is used to
                     * map the SQL {@code Time} value to a Java Time value.
                     *
                     * @param columnIndex
                     *            the index of the column to read.
                     * @param cal
                     *            a {@code Calendar} to use in creating the Java Time value.
                     * @return a Time representing the column value, {@code null} if the column
                     *         value is SQL {@code NULL}.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.getTime(System.String)">
                     * Gets the value of a column specified by column name, as a {@code
                     * java.sql.Time} value.
                     *
                     * @param columnName
                     *            the name of the column to read.
                     * @return the column value, {@code null} if the column value is SQL {@code
                     *         NULL}.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.getTime(System.String,biz.ritter.javapi.util.Calendar)">
                     * Gets the value of a column specified by column index, as a {@code
                     * java.sql.Time} value. The supplied {@code Calendar} is used to
                     * map the SQL {@code Time} value to a Java Time value.
                     *
                     * @param columnName
                     *            the name of the column to read.
                     * @param cal
                     *            a {@code Calendar} to use in creating the Java time value.
                     * @return a Time representing the column value, {@code null} if the column
                     *         value is SQL {@code NULL}.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.getTimestamp(System.Int32)">
                     * Gets the value of a column specified by column index as a {@code
                     * java.sql.Timestamp} value.
                     *
                     * @param columnIndex
                     *            the index of the column to read.
                     * @return a timestamp representing the column value, {@code null} if the
                     *         column value is SQL {@code NULL}.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.getTimestamp(System.Int32,biz.ritter.javapi.util.Calendar)">
                     * Gets the value of a column specified by column index, as a {@code
                     * java.sql.Timestamp} value. The supplied Calendar is used when mapping
                     * the SQL {@code Timestamp} value to a Java {@code Timestamp} value.
                     *
                     * @param columnIndex
                     *            the index of the column to read.
                     * @param cal
                     *            Calendar to use in creating the Java timestamp value.
                     * @return a timestamp representing the column value, {@code null} if the
                     *         column value is SQL NULL.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.getTimestamp(System.String)">
                     * Gets the value of a column specified by column name, as a {@code
                     * java.sql.Timestamp} value.
                     *
                     * @param columnName
                     *            the name of the column to read.
                     * @return a timestamp representing the column value, {@code null} if the
                     *         column value is SQL {@code NULL}.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.getTimestamp(System.String,biz.ritter.javapi.util.Calendar)">
                     * Gets the value of a column specified by column name, as a {@code
                     * java.sql.Timestamp} value. The supplied Calendar is used when mapping
                     * the SQL {@code Timestamp} value to a Java {@code Timestamp} value.
                     *
                     * @param columnName
                     *            the name of the column to read.
                     * @param cal
                     *            Calendar to use in creating the Java {@code Timestamp} value.
                     * @return a timestamp representing the column value, {@code null} if the
                     *         column value is SQL {@code NULL}.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.getType">
                     * Gets the type of the {@code ResultSet}.
                     *
                     * @return The {@code ResultSet} type, one of:
                     *         <ul>
                     *         <li>{@code ResultSet.TYPE_FORWARD_ONLY}</li><li>{@code
                     *         ResultSet.TYPE_SCROLL_INSENSITIVE}</li><li>{@code
                     *         ResultSet.TYPE_SCROLL_SENSITIVE}</li>
                     *         </ul>
                     * @throws SQLException
                     *             if there is a database error.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.getUnicodeStream(System.Int32)">
                     * Gets the value of the column as an {@code InputStream} of unicode
                     * characters.
                     *
                     * @deprecated Use {@link #getCharacterStream}.
                     * @param columnIndex
                     *            the index of the column to read.
                     * @return an {@code InputStream} holding the value of the column. {@code
                     *         null} if the column value is SQL {@code NULL}.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.getUnicodeStream(System.String)">
                     * Gets the value of the column as an {@code InputStream} of Unicode
                     * characters.
                     *
                     * @deprecated Use {@link #getCharacterStream}
                     * @param columnName
                     *            the name of the column to read.
                     * @return an {@code InputStream} holding the value of the column. {@code
                     *         null} if the column value is SQL {@code NULL}.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.getURL(System.Int32)">
                     * Gets the value of a column specified by column index as a {@code
                     * java.net.URL}.
                     *
                     * @param columnIndex
                     *            the index of the column to read.
                     * @return a URL. {@code null} if the column value is SQL {@code NULL}.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.getURL(System.String)">
                     * Gets the value of a column specified by column name as a {@code
                     * java.net.URL} object.
                     *
                     * @param columnName
                     *            the name of the column to read.
                     * @return the column vaule as a URL. {@code null} if the column value is SQL {@code NULL}.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.getWarnings">
                     * Gets the first warning generated by calls on this {@code ResultSet}.
                     * Subsequent warnings on this {@code ResultSet} are chained to the first
                     * one.
                     * <p />
                     * The warnings are cleared when a new Row is read from the {@code
                     * ResultSet}. The warnings returned by this method are only the warnings
                     * generated by {@code ResultSet} method calls - warnings generated by
                     * Statement methods are held by the Statement.
                     * <p />
                     * An {@code SQLException} is generated if this method is called on a closed
                     * {@code ResultSet}.
                     *
                     * @return an SQLWarning which is the first warning for this {@code
                     *         ResultSet}. {@code null} if there are no warnings.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.insertRow">
                     * Insert the insert row into the {@code ResultSet} and into the underlying
                     * database. The cursor must be set to the Insert Row before this method is
                     * invoked.
                     *
                     * @throws SQLException
                     *             if a database error happens. Particular cases include the
                     *             cursor not being on the Insert Row or if any columns in the
                     *             row do not have a value where the column is declared as
                     *             not-nullable.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.isAfterLast">
                     * Gets if the cursor is after the last row of the {@code ResultSet}.
                     *
                     * @return {@code true} if the cursor is after the last row in the {@code
                     *         ResultSet}, {@code false} if the cursor is at any other position
                     *         in the {@code ResultSet}.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.isBeforeFirst">
                     * Gets if the cursor is before the first row of the {@code ResultSet}.
                     *
                     * @return {@code true} if the cursor is before the first row in the {@code
                     *         ResultSet}, {@code false} if the cursor is at any other position
                     *         in the {@code ResultSet}.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.isFirst">
                     * Gets if the cursor is on the first row of the {@code ResultSet}.
                     *
                     * @return {@code true} if the cursor is on the first row in the {@code
                     *         ResultSet}, {@code false} if the cursor is at any other position
                     *         in the {@code ResultSet}.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.isLast">
                     * Gets if the cursor is on the last row of the {@code ResultSet}
                     *
                     * @return {@code true} if the cursor is on the last row in the {@code
                     *         ResultSet}, {@code false} if the cursor is at any other position
                     *         in the {@code ResultSet}.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.last">
                     * Shifts the cursor position to the last row of the {@code ResultSet}.
                     *
                     * @return {@code true} if the new position is in a legitimate row, {@code
                     *         false} if the {@code ResultSet} contains no rows.
                     * @throws SQLException
                     *             if there is a database error.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.moveToCurrentRow">
                     * Moves the cursor to the remembered position, namely the
                     * row that was the current row before a call to {@code moveToInsertRow}.
                     * This only applies if the cursor is on the Insert Row.
                     *
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.moveToInsertRow">
                     * Moves the cursor position to the Insert Row. The current position is
                     * remembered and the cursor is positioned at the Insert Row. The columns in
                     * the Insert Row should be filled in with the appropriate update methods,
                     * before calling {@code insertRow} to insert the new row into the database.
                     *
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.next">
                     * Shifts the cursor position down one row in this {@code ResultSet} object.
                     * <p />
                     * Any input streams associated with the current row are closed and any
                     * warnings are cleared.
                     *
                     * @return {@code true} if the updated cursor position is pointing to a
                     *         valid row, {@code false} otherwise (i.e. when the cursor is after
                     *         the last row in the {@code ResultSet}).
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.previous">
                     * Relocates the cursor position to the preceding row in this {@code
                     * ResultSet}.
                     *
                     * @return {@code true} if the new position is in a legitimate row, {@code
                     *         false} if the cursor is now before the first row.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.refreshRow">
                     * Refreshes the current row with its most up to date value in the database.
                     * Must not be called when the cursor is on the Insert Row.
                     * <p />
                     * If any columns in the current row have been updated but the {@code
                     * updateRow} has not been called, then the updates are lost when this
                     * method is called.
                     *
                     * @throws SQLException
                     *             if a database error happens., including if the current row is
                     *             the Insert row.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.relative(System.Int32)">
                     * Moves the cursor position up or down by a specified number of rows. If
                     * the new position is beyond the start row (or end row), the cursor position is
                     * set before the first row (or, respectively, after the last row).
                     *
                     * @param rows
                     *            a number of rows to move the cursor - may be positive or
                     *            negative
                     * @return {@code true} if the new cursor position is on a row, {@code
                     *         false} otherwise
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.rowDeleted">
                     * Indicates whether a row has been deleted. This method depends on whether
                     * the JDBC driver and database can detect deletions.
                     *
                     * @return {@code true} if a row has been deleted and if deletions are
                     *         detected, {@code false} otherwise.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.rowInserted">
                     * Indicates whether the current row has had an insertion operation. This
                     * method depends on whether the JDBC driver and database can detect
                     * insertions.
                     *
                     * @return {@code true} if a row has been inserted and if insertions are
                     *         detected, {@code false} otherwise.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.rowUpdated">
                     * Indicates whether the current row has been updated. This method depends
                     * on whether the JDBC driver and database can detect updates.
                     *
                     * @return {@code true} if the current row has been updated and if updates
                     *         can be detected, {@code false} otherwise.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.setFetchDirection(System.Int32)">
                     * Indicates which direction (forward/reverse) will be used to process the
                     * rows of this {@code ResultSet} object. This is treated as a hint by the
                     * JDBC driver.
                     *
                     * @param direction
                     *            can be {@code ResultSet.FETCH_FORWARD}, {@code
                     *            ResultSet.FETCH_REVERSE}, or {@code ResultSet.FETCH_UNKNOWN}
                     * @throws SQLException
                     *             if there is a database error.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.setFetchSize(System.Int32)">
                     * Indicates the number of rows to fetch from the database when extra rows
                     * are required for this {@code ResultSet}. This used as a hint to the JDBC
                     * driver.
                     *
                     * @param rows
                     *            the number of rows to fetch. {@code 0} implies that the JDBC
                     *            driver can make its own decision about the fetch size. The
                     *            number should not be greater than the maximum number of rows
                     *            established by the statement that generated the {@code
                     *            ResultSet}.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.updateArray(System.Int32,biz.ritter.javapi.sql.Array)">
                     * Updates a column specified by a column index with a {@code
                     * java.sql.Array} value.
                     *
                     * @param columnIndex
                     *            the index of the column to update.
                     * @param x
                     *            the new value for the specified column.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.updateArray(System.String,biz.ritter.javapi.sql.Array)">
                     * Updates a column specified by a column name with a {@code java.sql.Array}
                     * value.
                     *
                     * @param columnName
                     *            the name of the column to update.
                     * @param x
                     *            the new value for the specified column.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.updateAsciiStream(System.Int32,biz.ritter.javapi.io.InputStream,System.Int32)">
                     * Updates a column specified by a column index with an ASCII stream value.
                     *
                     * @param columnIndex
                     *            the index of the column to update.
                     * @param x
                     *            the new value for the specified column.
                     * @param length
                     *            the length of the data to write from the stream
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.updateAsciiStream(System.String,biz.ritter.javapi.io.InputStream,System.Int32)">
                     * Updates a column specified by a column name with an Ascii stream value.
                     *
                     * @param columnName
                     *            the name of the column to update.
                     * @param x
                     *            the new value for the specified column.
                     * @param length
                     *            the length of the data to write from the stream
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.updateBigDecimal(System.Int32,biz.ritter.javapi.math.BigDecimal)">
                     * Updates a column specified by a column index with a {@code
                     * java.sql.BigDecimal} value.
                     *
                     * @param columnIndex
                     *            the index of the column to update.
                     * @param x
                     *            the new value for the specified column.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.updateBigDecimal(System.String,biz.ritter.javapi.math.BigDecimal)">
                     * Updates a column specified by a column name with a {@code
                     * java.sql.BigDecimal} value.
                     *
                     * @param columnName
                     *            the name of the column to update.
                     * @param x
                     *            the new value for the specified column.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.updateBinaryStream(System.Int32,biz.ritter.javapi.io.InputStream,System.Int32)">
                     * Updates a column specified by a column index with a binary stream value.
                     *
                     * @param columnIndex
                     *            the index of the column to update.
                     * @param x
                     *            the new value for the specified column.
                     * @param length
                     *            the number of bytes to be read from the the stream.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.updateBinaryStream(System.String,biz.ritter.javapi.io.InputStream,System.Int32)">
                     * Updates a column specified by a column name with a binary stream value.
                     *
                     * @param columnName
                     *            the name of the column to update.
                     * @param x
                     *            the new value for the specified column.
                     * @param length
                     *            he number of bytes to be read from the the stream.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.updateBlob(System.Int32,biz.ritter.javapi.sql.Blob)">
                     * Updates a column specified by a column index with a {@code java.sql.Blob}
                     * value.
                     *
                     * @param columnIndex
                     *            the index of the column to update.
                     * @param x
                     *            the new value for the specified column.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.updateBlob(System.String,biz.ritter.javapi.sql.Blob)">
                     * Updates a column specified by a column name with a {@code java.sql.Blob}
                     * value.
                     *
                     * @param columnName
                     *            the name of the column to update.
                     * @param x
                     *            the new value for the specified column.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.updateBoolean(System.Int32,System.Boolean)">
                     * Updates a column specified by a column index with a {@code bool}
                     * value.
                     *
                     * @param columnIndex
                     *            the index of the column to update.
                     * @param x
                     *            the new value for the specified column.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.updateBoolean(System.String,System.Boolean)">
                     * Updates a column specified by a column name with a {@code bool} value.
                     *
                     * @param columnName
                     *            the name of the column to update.
                     * @param x
                     *            the new value for the specified column.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.updateByte(System.Int32,System.Byte)">
                     * Updates a column specified by a column index with a {@code byte} value.
                     *
                     * @param columnIndex
                     *            the index of the column to update.
                     * @param x
                     *            the new value for the specified column.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.updateByte(System.String,System.Byte)">
                     * Updates a column specified by a column name with a {@code byte} value.
                     *
                     * @param columnName
                     *            the name of the column to update.
                     * @param x
                     *            the new value for the specified column.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.updateBytes(System.Int32,System.Byte[])">
                     * Updates a column specified by a column index with a {@code byte} array
                     * value.
                     *
                     * @param columnIndex
                     *            the index of the column to update.
                     * @param x
                     *            the new value for the specified column.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.updateBytes(System.String,System.Byte[])">
                     * Updates a column specified by a column name with a byte array value.
                     *
                     * @param columnName
                     *            the name of the column to update.
                     * @param x
                     *            the new value for the specified column.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.updateCharacterStream(System.Int32,biz.ritter.javapi.io.Reader,System.Int32)">
                     * Updates a column specified by a column index with a character stream
                     * value.
                     *
                     * @param columnIndex
                     *            the index of the column to update.
                     * @param x
                     *            the new value for the specified column.
                     * @param length
                     *            the length of data to write from the stream
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.updateCharacterStream(System.String,biz.ritter.javapi.io.Reader,System.Int32)">
                     * Updates a column specified by a column name with a character stream
                     * value.
                     *
                     * @param columnName
                     *            the name of the column to update.
                     * @param reader
                     *            the new value for the specified column.
                     * @param length
                     *            the length of data to write from the Reader
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.updateClob(System.Int32,biz.ritter.javapi.sql.Clob)">
                     * Updates a column specified by a column index with a {@code java.sql.Clob}
                     * value.
                     *
                     * @param columnIndex
                     *            the index of the column to update.
                     * @param x
                     *            the new value for the specified column.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.updateClob(System.String,biz.ritter.javapi.sql.Clob)">
                     * Updates a column specified by a column name with a {@code java.sql.Clob}
                     * value.
                     *
                     * @param columnName
                     *            the name of the column to update.
                     * @param x
                     *            the new value for the specified column.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.updateDate(System.Int32,biz.ritter.javapi.sql.Date)">
                     * Updates a column specified by a column index with a {@code java.sql.Date}
                     * value.
                     *
                     * @param columnIndex
                     *            the index of the column to update.
                     * @param x
                     *            the new value for the specified column.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.updateDate(System.String,biz.ritter.javapi.sql.Date)">
                     * Updates a column specified by a column name with a {@code java.sql.Date}
                     * value.
                     *
                     * @param columnName
                     *            the name of the column to update.
                     * @param x
                     *            the new value for the specified column.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.updateDouble(System.Int32,System.Double)">
                     * Updates a column specified by a column index with a {@code double} value.
                     *
                     * @param columnIndex
                     *            the index of the column to update.
                     * @param x
                     *            the new value for the specified column.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.updateDouble(System.String,System.Double)">
                     * Updates a column specified by a column name with a {@code double} value.
                     *
                     * @param columnName
                     *            the name of the column to update.
                     * @param x
                     *            the new value for the specified column.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.updateFloat(System.Int32,System.Single)">
                     * Updates a column specified by a column index with a {@code float} value.
                     *
                     * @param columnIndex
                     *            the index of the column to update.
                     * @param x
                     *            the new value for the specified column.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.updateFloat(System.String,System.Single)">
                     * Updates a column specified by a column name with a {@code float} value.
                     *
                     * @param columnName
                     *            the name of the column to update.
                     * @param x
                     *            the new value for the specified column.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.updateInt(System.Int32,System.Int32)">
                     * Updates a column specified by a column index with an {@code int} value.
                     *
                     * @param columnIndex
                     *            the index of the column to update.
                     * @param x
                     *            the new value for the specified column.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.updateInt(System.String,System.Int32)">
                     * Updates a column specified by a column name with an {@code int} value.
                     *
                     * @param columnName
                     *            the name of the column to update.
                     * @param x
                     *            the new value for the specified column.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.updateLong(System.Int32,System.Int64)">
                     * Updates a column specified by a column index with a {@code long} value.
                     *
                     * @param columnIndex
                     *            the index of the column to update.
                     * @param x
                     *            the new value for the specified column..
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.updateLong(System.String,System.Int64)">
                     * Updates a column specified by a column name with a {@code long} value.
                     *
                     * @param columnName
                     *            the name of the column to update.
                     * @param x
                     *            the new value for the specified column.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.updateNull(System.Int32)">
                     * Updates a column specified by a column index with a {@code null} value.
                     *
                     * @param columnIndex
                     *            the index of the column to update.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.updateNull(System.String)">
                     * Updates a column specified by a column name with a {@code null} value.
                     *
                     * @param columnName
                     *            the name of the column to update.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.updateObject(System.Int32,System.Object)">
                     * Updates a column specified by a column index with an {@code Object}
                     * value.
                     *
                     * @param columnIndex
                     *            the index of the column to update.
                     * @param x
                     *            the new value for the specified column.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.updateObject(System.Int32,System.Object,System.Int32)">
                     * Updates a column specified by a column index with an {@code Object}
                     * value.
                     *
                     * @param columnIndex
                     *            the index of the column to update.
                     * @param x
                     *            the new value for the specified column.
                     * @param scale
                     *            for the types {@code java.sql.Types.DECIMAL} or {@code
                     *            java.sql.Types.NUMERIC}, this specifies the number of digits
                     *            after the decimal point.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.updateObject(System.String,System.Object)">
                     * Updates a column specified by a column name with an {@code Object} value.
                     *
                     * @param columnName
                     *            the name of the column to update.
                     * @param x
                     *            the new value for the specified column.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.updateObject(System.String,System.Object,System.Int32)">
                     * Updates a column specified by a column name with an {@code Object} value.
                     *
                     * @param columnName
                     *            the name of the column to update.
                     * @param x
                     *            the new value for the specified column.
                     * @param scale
                     *            for the types {@code java.sql.Types.DECIMAL} or {@code
                     *            java.sql.Types.NUMERIC}, this specifies the number of digits
                     *            after the decimal point.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.updateRef(System.Int32,biz.ritter.javapi.sql.Ref)">
                     * Updates a column specified by a column index with a {@code java.sql.Ref}
                     * value.
                     *
                     * @param columnIndex
                     *            the index of the column to update.
                     * @param x
                     *            the new value for the specified column.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.updateRef(System.String,biz.ritter.javapi.sql.Ref)">
                     * Updates a column specified by a column name with a {@code java.sql.Ref}
                     * value.
                     *
                     * @param columnName
                     *            the name of the column to update.
                     * @param x
                     *            the new value for the specified column.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.updateRow">
                     * Updates the database with the new contents of the current row of this
                     * {@code ResultSet} object.
                     *
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.updateShort(System.Int32,System.Int16)">
                     * Updates a column specified by a column index with a {@code short} value.
                     *
                     * @param columnIndex
                     *            the index of the column to update.
                     * @param x
                     *            the new value for the specified column.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.updateShort(System.String,System.Int16)">
                     * Updates a column specified by a column name with a {@code short} value.
                     *
                     * @param columnName
                     *            the name of the column to update.
                     * @param x
                     *            the new value for the specified column.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.updateString(System.Int32,System.String)">
                     * Updates a column specified by a column index with a {@code String} value.
                     *
                     * @param columnIndex
                     *            the index of the column to update.
                     * @param x
                     *            the new value for the specified column.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.updateString(System.String,System.String)">
                     * Updates a column specified by a column name with a {@code String} value.
                     *
                     * @param columnName
                     *            the name of the column to update.
                     * @param x
                     *            the new value for the specified column.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.updateTime(System.Int32,biz.ritter.javapi.sql.Time)">
                     * Updates a column specified by a column index with a {@code Time} value.
                     *
                     * @param columnIndex
                     *            the index of the column to update.
                     * @param x
                     *            the new value for the specified column.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.updateTime(System.String,biz.ritter.javapi.sql.Time)">
                     * Updates a column specified by a column name with a {@code Time} value.
                     *
                     * @param columnName
                     *            the name of the column to update.
                     * @param x
                     *            the new value for the specified column.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.updateTimestamp(System.Int32,biz.ritter.javapi.sql.Timestamp)">
                     * Updates a column specified by a column index with a {@code Timestamp}
                     * value.
                     *
                     * @param columnIndex
                     *            the index of the column to update.
                     * @param x
                     *            the new timestamp value for the specified column.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.updateTimestamp(System.String,biz.ritter.javapi.sql.Timestamp)">
                     * Updates a column specified by column name with a {@code Timestamp} value.
                     *
                     * @param columnName
                     *            the name of the column to update.
                     * @param x
                     *            the new timestamp value for the specified column.
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.wasNull">
                     * Determines whether the last column read from this {@code ResultSet}
                     * contained SQL {@code NULL}.
                     *
                     * @return {@code true} if the last column contained SQL {@code
                     *         NULL}, {@code false} otherwise
                     * @throws SQLException
                     *             if a database error happens.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSet.getRowId(System.Int32)">
                     * TODO
                     *
                     * @param columnIndex
                     * @return
                     * @throws SQLException</member>
        <member name="F:biz.ritter.javapi.sql.ResultSetConstants.CLOSE_CURSORS_AT_COMMIT">
                     * A constant used to indicate that a {@code ResultSet} object must be
                     * closed when the method {@code Connection.commit} is invoked.</member>
        <member name="F:biz.ritter.javapi.sql.ResultSetConstants.HOLD_CURSORS_OVER_COMMIT">
                     * A constant used to indicate that a {@code ResultSet} object must not be
                     * closed when the method {@code Connection.commit} is invoked.</member>
        <member name="F:biz.ritter.javapi.sql.ResultSetConstants.CONCUR_READ_ONLY">
                     * A constant used to indicate the concurrency mode for a {@code ResultSet}
                     * object that cannot be updated.</member>
        <member name="F:biz.ritter.javapi.sql.ResultSetConstants.CONCUR_UPDATABLE">
                     * A constant used to indicate the concurrency mode for a {@code ResultSet}
                     * object that can be updated.</member>
        <member name="F:biz.ritter.javapi.sql.ResultSetConstants.FETCH_FORWARD">
                     * A constant used to indicate processing of the rows of a {@code ResultSet}
                     * in the forward direction, first to last.</member>
        <member name="F:biz.ritter.javapi.sql.ResultSetConstants.FETCH_REVERSE">
                     * A constant used to indicate processing of the rows of a {@code ResultSet}
                     * in the reverse direction, last to first.</member>
        <member name="F:biz.ritter.javapi.sql.ResultSetConstants.FETCH_UNKNOWN">
                     * A constant used to indicate that the order of processing of the rows of a
                     * {@code ResultSet} is unknown.</member>
        <member name="F:biz.ritter.javapi.sql.ResultSetConstants.TYPE_FORWARD_ONLY">
                     * A constant used to indicate a {@code ResultSet} object whose cursor can
                     * only move forward.</member>
        <member name="F:biz.ritter.javapi.sql.ResultSetConstants.TYPE_SCROLL_INSENSITIVE">
                     * A constant used to indicate a {@code ResultSet} object which is
                     * scrollable but is insensitive to changes made by others.</member>
        <member name="F:biz.ritter.javapi.sql.ResultSetConstants.TYPE_SCROLL_SENSITIVE">
                     * A constant used to indicate a {@code ResultSet} object which is
                     * scrollable and sensitive to changes made by others.</member>
        <member name="T:biz.ritter.javapi.sql.ResultSetMetaData">
                 * Provides information about the columns returned in a {@code ResultSet}.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSetMetaData.getCatalogName(System.Int32)">
                     * Returns the title of an indexed column's catalog.
                     *
                     * @param column
                     *            the column index, starting at 1.
                     * @return the catalog title.
                     * @throws SQLException
                     *             if there is a database error.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSetMetaData.getColumnClassName(System.Int32)">
                     * Returns the fully-qualified type of the class that is produced when
                     * invoking {@code ResultSet.getObject} to recover this column's value.
                     *
                     * @param column
                     *            the column index, starting at 1.
                     * @return the fully-qualified class name.
                     * @throws SQLException
                     *             if there is a database error.
                     * @see ResultSet#getObject</member>
        <member name="M:biz.ritter.javapi.sql.ResultSetMetaData.getColumnCount">
                     * Returns number of columns contained in the associated result set.
                     *
                     * @return the column count.
                     * @throws SQLException
                     *             if there is a database error.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSetMetaData.getColumnDisplaySize(System.Int32)">
                     * Returns the indexed column's standard maximum width, expressed in number
                     * of characters.
                     *
                     * @param column
                     *            the column index, starting at 1.
                     * @return the column's max width.
                     * @throws SQLException
                     *             if there is a database error.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSetMetaData.getColumnLabel(System.Int32)">
                     * Returns a recommended title for the indexed column, to be used when the
                     * title needs to be displayed.
                     *
                     * @param column
                     *            the column index, starting at 1.
                     * @return the column's title.
                     * @throws SQLException
                     *             if there is a database error.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSetMetaData.getColumnName(System.Int32)">
                     * Returns the title of the indexed column.
                     *
                     * @param column
                     *            the column index, starting at 1.
                     * @return the column title.
                     * @throws SQLException
                     *             if there is a database error.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSetMetaData.getColumnType(System.Int32)">
                     * Returns the type of the indexed column as SQL type code.
                     *
                     * @param column
                     *            the column index, starting at 1.
                     * @return the column type code.
                     * @throws SQLException
                     *             if there is a database error.
                     * @see Types</member>
        <member name="M:biz.ritter.javapi.sql.ResultSetMetaData.getColumnTypeName(System.Int32)">
                     * Returns the type name of the indexed column.
                     *
                     * @param column
                     *            the column index, starting at 1.
                     * @return the type name.
                     * @throws SQLException
                     *             if there is a database error.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSetMetaData.getPrecision(System.Int32)">
                     * Returns the decimal precision of the indexed column.
                     *
                     * @param column
                     *            the column index, starting at 1.
                     * @return the precision.
                     * @throws SQLException
                     *             if there is a database error.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSetMetaData.getScale(System.Int32)">
                     * Returns the number of digits to the right of the decimal point of the
                     * indexed column.
                     *
                     * @param column
                     *            the column index, starting at 1.
                     * @return number of decimal places.
                     * @throws SQLException
                     *             if there is a database error.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSetMetaData.getSchemaName(System.Int32)">
                     * Returns the name of the indexed columns schema.
                     *
                     * @param column
                     *            the column index, starting at 1.
                     * @return the name of the columns schema.
                     * @throws SQLException
                     *             if there is a database error.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSetMetaData.getTableName(System.Int32)">
                     * Returns the title of the indexed columns table.
                     *
                     * @param column
                     *            the column index, starting at 1.
                     * @return the table title.
                     * @throws SQLException
                     *             if there is a database error.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSetMetaData.isAutoIncrement(System.Int32)">
                     * Returns an indication of whether the indexed column is automatically
                     * incremented and is therefore read-only.
                     *
                     * @param column
                     *            the column index, starting at 1.
                     * @return {@code true} if it is automatically numbered, {@code false}
                     *         otherwise.
                     * @throws SQLException
                     *             if there is a database error.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSetMetaData.isCaseSensitive(System.Int32)">
                     * Returns an indication of whether the case of the indexed column is
                     * important.
                     *
                     * @param column
                     *            the column index, starting at 1.
                     * @return {@code true} if case matters, {@code false} otherwise.
                     * @throws SQLException
                     *             if there is a database error.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSetMetaData.isCurrency(System.Int32)">
                     * Returns whether the indexed column contains a monetary amount.
                     *
                     * @param column
                     *            the column index, starting at 1.
                     * @return {@code true} if it is a monetary value, {@code false} otherwise.
                     * @throws SQLException
                     *             if there is a database error.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSetMetaData.isDefinitelyWritable(System.Int32)">
                     * Returns an indication of whether writing to the indexed column is
                     * guaranteed to be successful.
                     *
                     * @param column
                     *            the column index, starting at 1.
                     * @return {@code true} if the write is guaranteed, {@code false} otherwise.
                     * @throws SQLException
                     *             if there is a database error.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSetMetaData.isNullable(System.Int32)">
                     * Returns whether the indexed column is nullable.
                     *
                     * @param column
                     *            the column index, starting at 1.
                     * @return {@code true} if it is nullable, {@code false} otherwise.
                     * @throws SQLException
                     *             if there is a database error.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSetMetaData.isReadOnly(System.Int32)">
                     * Returns an indication of whether writing to the indexed column is
                     * guaranteed to be unsuccessful.
                     *
                     * @param column
                     *            the column index, starting at 1.
                     * @return {@code true} if the column is read-only, {@code false} otherwise.
                     * @throws SQLException
                     *             if there is a database error.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSetMetaData.isSearchable(System.Int32)">
                     * Returns an indication of whether the indexed column is searchable.
                     *
                     * @param column
                     *            the column index, starting at 1.
                     * @return {@code true} if the indexed column is searchable, {@code false}
                     *         otherwise.
                     * @throws SQLException
                     *             if there is a database error.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSetMetaData.isSigned(System.Int32)">
                     * Returns an indication of whether the values contained in the indexed
                     * column are signed.
                     *
                     * @param column
                     *            the column index, starting at 1.
                     * @return {@code true} if they are signed, {@code false} otherwise.
                     * @throws SQLException
                     *             if there is a database error.</member>
        <member name="M:biz.ritter.javapi.sql.ResultSetMetaData.isWritable(System.Int32)">
                     * Returns an indication of whether writing to the indexed column is
                     * possible.
                     *
                     * @param column
                     *            the column index, starting at 1.
                     * @return {@code true} if it is possible to write, {@code false} otherwise.
                     * @throws SQLException
                     *             if there is a database error.</member>
        <member name="F:biz.ritter.javapi.sql.ResultSetMetaDataConstants.columnNoNulls">
                     * Indicates that a column cannot contain {@code NULL} values.</member>
        <member name="F:biz.ritter.javapi.sql.ResultSetMetaDataConstants.columnNullable">
                     * Indicates that a column can contain {@code NULL} values.</member>
        <member name="F:biz.ritter.javapi.sql.ResultSetMetaDataConstants.columnNullableUnknown">
                     * Indicates that it is unknown whether a column can contain {@code NULL}s or not.</member>
        <member name="T:biz.ritter.javapi.sql.RowIdLifetime">
                 * An enumeration to describe the life-time of RowID.
                 *
                 * @since 1.6</member>
        <member name="T:biz.ritter.javapi.sql.Savepoint">
                 * A savepoint is an instant during the current transaction that can be utilized
                 * by a rollback via the {@link Connection#rollback} command. Rolling back to a
                 * particular savepoint means that all changes that occurred after that
                 * savepoint are undone.</member>
        <member name="M:biz.ritter.javapi.sql.Savepoint.getSavepointId">
                     * Returns the constructed ID for this savepoint.
                     *
                     * @return the ID for this savepoint.
                     * @throws SQLException
                     *             if an error occurrs accessing the database.</member>
        <member name="M:biz.ritter.javapi.sql.Savepoint.getSavepointName">
                     * Returns the name for this savepoint.
                     *
                     * @return the name of this savepoint.
                     * @throws SQLException
                     *             if an error occurrs accessing the database.</member>
        <member name="T:biz.ritter.javapi.sql.SQLClientInfoException">
                 * An exception, which is subclass of SQLException, is thrown when one or more
                 * client info properties could not be set on a Connection.</member>
        <member name="M:biz.ritter.javapi.sql.SQLClientInfoException.#ctor">
                     * Creates an SQLClientInfoException object. The Reason string is set to
                     * null, the SQLState string is set to null and the Error Code is set to 0.</member>
        <member name="M:biz.ritter.javapi.sql.SQLClientInfoException.#ctor(biz.ritter.javapi.util.Map{System.String,biz.ritter.javapi.sql.ClientInfoStatus})">
                     * Creates an SQLClientInfoException object. The Reason string is set to the
                     * given reason string, the SQLState string is set to null and the Error
                     * Code is set to 0, and the Map&lt;String,ClientInfoStatus&gt; object is set to
                     * the failed properties.
                     *
                     * @param failedProperties
                     *            the Map&lt;String,ClientInfoStatus&gt; object to use as the
                     *            property values</member>
        <member name="M:biz.ritter.javapi.sql.SQLClientInfoException.#ctor(biz.ritter.javapi.util.Map{System.String,biz.ritter.javapi.sql.ClientInfoStatus},biz.ritter.javapi.lang.Throwable)">
                     * Creates an SQLClientInfoException object. The Reason string is set to the
                     * null if cause == null or cause.toString() if cause!=null, the cause
                     * Throwable object is set to the given cause Throwable object, and the Map&lt;String,ClientInfoStatus&gt;
                     * object is set to the failed properties.
                     *
                     * @param failedProperties
                     *            the Map&lt;String,ClientInfoStatus&gt; object to use as the
                     *            property values
                     * @param cause
                     *            the Throwable object for the underlying reason this
                     *            SQLException</member>
        <member name="M:biz.ritter.javapi.sql.SQLClientInfoException.#ctor(System.String,biz.ritter.javapi.util.Map{System.String,biz.ritter.javapi.sql.ClientInfoStatus})">
                     * Creates an SQLClientInfoException object. The Reason string is set to
                     * reason, and the Map&lt;String,ClientInfoStatus&gt; object is set to the failed
                     * properties.
                     *
                     * @param reason
                     *            the string to use as the Reason string
                     * @param failedProperties
                     *            the Map&lt;String,ClientInfoStatus&gt; object to use as the
                     *            property values</member>
        <member name="M:biz.ritter.javapi.sql.SQLClientInfoException.#ctor(System.String,biz.ritter.javapi.util.Map{System.String,biz.ritter.javapi.sql.ClientInfoStatus},biz.ritter.javapi.lang.Throwable)">
                     * Creates an SQLClientInfoException object. The Reason string is set to
                     * reason, the cause Throwable object is set to the given cause Throwable
                     * object, and the Map&lt;String,ClientInfoStatus&gt; object is set to the failed
                     * properties.
                     *
                     * @param reason
                     *            the string to use as the Reason string
                     * @param failedProperties
                     *            the Map&lt;String,ClientInfoStatus&gt; object to use as the
                     *            property values
                     * @param cause
                     *            the Throwable object for the underlying reason this
                     *            SQLException</member>
        <member name="M:biz.ritter.javapi.sql.SQLClientInfoException.#ctor(System.String,System.String,System.Int32,biz.ritter.javapi.util.Map{System.String,biz.ritter.javapi.sql.ClientInfoStatus})">
                     * Creates an SQLClientInfoException object. The Reason string is set to
                     * reason, the SQLState string is set to the sqlState, the Error Code is set
                     * to the vendorCode and the Map&lt;String,ClientInfoStatus&gt; object is set to
                     * the failed properties.
                     *
                     * @param reason
                     *            the string to use as the Reason string
                     * @param sqlState
                     *            the string to use as the SQLState string
                     * @param vendorCode
                     *            the integer value for the error code
                     * @param failedProperties
                     *            the Map&lt;String,ClientInfoStatus&gt; object to use as the
                     *            property values
                     *</member>
        <member name="M:biz.ritter.javapi.sql.SQLClientInfoException.#ctor(System.String,System.String,System.Int32,biz.ritter.javapi.util.Map{System.String,biz.ritter.javapi.sql.ClientInfoStatus},biz.ritter.javapi.lang.Throwable)">
                     * Creates an SQLClientInfoException object. The Reason string is set to
                     * reason, the SQLState string is set to the sqlState, the Error Code is set
                     * to the vendorCode the cause Throwable object is set to the given cause
                     * Throwable object, and the Map&lt;String,ClientInfoStatus&gt; object is set to
                     * the failed properties.
                     *
                     * @param reason
                     *            the string to use as the Reason string
                     * @param sqlState
                     *            the string to use as the SQLState string
                     * @param vendorCode
                     *            the integer value for the error code
                     * @param failedProperties
                     *            the Map&lt;String,ClientInfoStatus&gt; object to use as the
                     *            property values
                     * @param cause
                     *            the Throwable object for the underlying reason this
                     *            SQLException</member>
        <member name="M:biz.ritter.javapi.sql.SQLClientInfoException.#ctor(System.String,System.String,biz.ritter.javapi.util.Map{System.String,biz.ritter.javapi.sql.ClientInfoStatus})">
                     * Creates an SQLClientInfoException object. The Reason string is set to
                     * reason, the SQLState string is set to the sqlState, and the Map&lt;String,ClientInfoStatus&gt;
                     * object is set to the failed properties.
                     *
                     * @param reason
                     *            the string to use as the Reason string
                     * @param sqlState
                     *            the string to use as the SQLState string
                     * @param failedProperties
                     *            the Map&lt;String,ClientInfoStatus&gt; object to use as the
                     *            property values</member>
        <member name="M:biz.ritter.javapi.sql.SQLClientInfoException.#ctor(System.String,System.String,biz.ritter.javapi.util.Map{System.String,biz.ritter.javapi.sql.ClientInfoStatus},biz.ritter.javapi.lang.Throwable)">
                     * Creates an SQLClientInfoException object. The Reason string is set to
                     * reason, the SQLState string is set to the sqlState, the Error Code is set
                     * to the vendorCode, and the Map&lt;String,ClientInfoStatus&gt; object is set to
                     * the failed properties.
                     *
                     * @param reason
                     *            the string to use as the Reason string
                     * @param sqlState
                     *            the string to use as the SQLState string
                     * @param failedProperties
                     *            the Map&lt;String,ClientInfoStatus&gt; object to use as the
                     *            property values
                     * @param cause
                     *            the Throwable object for the underlying reason this
                     *            SQLException</member>
        <member name="M:biz.ritter.javapi.sql.SQLClientInfoException.getFailedProperties">
                     * returns that the client info properties which could not be set
                     *
                     * @return the list of ClientInfoStatus objects indicate client info
                     *         properties</member>
        <member name="T:biz.ritter.javapi.sql.SQLException">
                 * An {@code Exception} class that is used in conjunction with JDBC operations.
                 * It provides information about problems encountered with database access and
                 * other problems related to JDBC
                 * <p />
                 * The {@code SQLException} class provides the following information:
                 * <ul>
                 * <li>A standard Java exception message, as a {@code String}</li>
                 * <li>An {@code SQLState} string. This is an error description string which
                 * follows either the SQL 99 conventions or the X/OPEN {@code SQLstate}
                 * conventions. The potential values of the {@code SQLState} string are
                 * described in each of the specifications. Which of the conventions is being
                 * used by the {@code SQLState} string can be discovered by using the {@code
                 * getSQLStateType} method of the {@code DatabaseMetaData} interface.</li>
                 * <li>An error code, an an integer. The error code is specific to each database
                 * vendor and is typically the error code returned by the database itself.</li>
                 * <li>A chain to a next {@code Exception}, if relevant, which can give access
                 * to additional error information.</li>
                 * </ul>
                 *
                 * @see DatabaseMetaData</member>
        <member name="M:biz.ritter.javapi.sql.SQLException.#ctor">
                     * Creates an {@code SQLException} object. The reason string is set to
                     * {@code null}, the {@code SQLState} string is set to {@code null} and the
                     * error code is set to 0.</member>
        <member name="M:biz.ritter.javapi.sql.SQLException.#ctor(System.String)">
                     * Creates an {@code SQLException} object. The reason string is set to the given
                     * reason string, the {@code SQLState} string is set to {@code null} and the error code is
                     * set to 0.
                     *
                     * @param theReason
                     *            the string to use as the Reason string</member>
        <member name="M:biz.ritter.javapi.sql.SQLException.#ctor(System.String,System.String)">
                     * Creates an {@code SQLException} object. The reason string is set to the
                     * given reason string, the {@code SQLState} string is set to the given
                     * {@code SQLState} string and the error code is set to 0.
                     *
                     * @param theReason
                     *            the string to use as the reason string.
                     * @param theSQLState
                     *            the string to use as the {@code SQLState} string.</member>
        <member name="M:biz.ritter.javapi.sql.SQLException.#ctor(System.String,System.String,System.Int32)">
                     * Creates an {@code SQLException} object. The reason string is set to the
                     * given reason string, the {@code SQLState} string is set to the given
                     * {@code SQLState} string and the error code is set to the given error code
                     * value.
                     *
                     * @param theReason
                     *            the string to use as the reason string.
                     * @param theSQLState
                     *            the string to use as the {@code SQLState} string.
                     * @param theErrorCode
                     *            the integer value for the error code.</member>
        <member name="M:biz.ritter.javapi.sql.SQLException.#ctor(biz.ritter.javapi.lang.Throwable)">
                     * Creates an SQLException object. The Reason string is set to the null if
                     * cause == null or cause.toString() if cause!=null,and the cause Throwable
                     * object is set to the given cause Throwable object.
                     *
                     * @param theCause
                     *            the Throwable object for the underlying reason this
                     *            SQLException
                     *
                     * @since 1.6</member>
        <member name="M:biz.ritter.javapi.sql.SQLException.#ctor(System.String,biz.ritter.javapi.lang.Throwable)">
                     * Creates an SQLException object. The Reason string is set to the given and
                     * the cause Throwable object is set to the given cause Throwable object.
                     *
                     * @param theReason
                     *            the string to use as the Reason string
                     * @param theCause
                     *            the Throwable object for the underlying reason this
                     *            SQLException
                     *
                     * @since 1.6</member>
        <member name="M:biz.ritter.javapi.sql.SQLException.#ctor(System.String,System.String,biz.ritter.javapi.lang.Throwable)">
                     * Creates an SQLException object. The Reason string is set to the given
                     * reason string, the SQLState string is set to the given SQLState string
                     * and the cause Throwable object is set to the given cause Throwable
                     * object.
                     *
                     * @param theReason
                     *            the string to use as the Reason string
                     * @param theSQLState
                     *            the string to use as the SQLState string
                     * @param theCause
                     *            the Throwable object for the underlying reason this
                     *            SQLException
                     * @since 1.6</member>
        <member name="M:biz.ritter.javapi.sql.SQLException.#ctor(System.String,System.String,System.Int32,biz.ritter.javapi.lang.Throwable)">
                     * Creates an SQLException object. The Reason string is set to the given
                     * reason string, the SQLState string is set to the given SQLState string ,
                     * the Error Code is set to the given error code value, and the cause
                     * Throwable object is set to the given cause Throwable object.
                     *
                     * @param theReason
                     *            the string to use as the Reason string
                     * @param theSQLState
                     *            the string to use as the SQLState string
                     * @param theErrorCode
                     *            the integer value for the error code
                     * @param theCause
                     *            the Throwable object for the underlying reason this
                     *            SQLException
                     * @since 1.6</member>
        <member name="M:biz.ritter.javapi.sql.SQLException.getErrorCode">
                     * Returns the integer error code for this {@code SQLException}.
                     *
                     * @return The integer error code for this {@code SQLException}. The meaning
                     *         of the code is specific to the vendor of the database.</member>
        <member name="M:biz.ritter.javapi.sql.SQLException.getNextException">
                     * Retrieves the {@code SQLException} chained to this {@code SQLException},
                     * if any.
                     *
                     * @return The {@code SQLException} chained to this {@code SQLException}.
                     *         {@code null} if there is no {@code SQLException} chained to this
                     *         {@code SQLException}.</member>
        <member name="M:biz.ritter.javapi.sql.SQLException.getSQLState">
                     * Retrieves the {@code SQLState} description string for this {@code
                     * SQLException} object.
                     *
                     * @return The {@code SQLState} string for this {@code SQLException} object.
                     *         This is an error description string which follows either the SQL
                     *         99 conventions or the X/OPEN {@code SQLstate} conventions. The
                     *         potential values of the {@code SQLState} string are described in
                     *         each of the specifications. Which of the conventions is being
                     *         used by the {@code SQLState} string can be discovered by using
                     *         the {@code getSQLStateType} method of the {@code
                     *         DatabaseMetaData} interface.</member>
        <member name="M:biz.ritter.javapi.sql.SQLException.setNextException(biz.ritter.javapi.sql.SQLException)">
                     * Adds the SQLException to the end of this {@code SQLException} chain.
                     *
                     * @param ex
                     *            the new {@code SQLException} to be added to the end of the
                     *            chain.</member>
        <member name="M:biz.ritter.javapi.sql.SQLException.iterator">
                     * Answer an iterator over the chained SQLExceptions.</member>
        <member name="T:biz.ritter.javapi.sql.SQLFeatureNotSupportedException">
                 * An exception, which is subclass of SQLNonTransientException, is thrown when
                 * various the JDBC driver does not support an optional JDBC feature.</member>
        <member name="M:biz.ritter.javapi.sql.SQLFeatureNotSupportedException.#ctor">
                     * Creates an SQLFeatureNotSupportedException object. The Reason string is
                     * set to null, the SQLState string is set to null and the Error Code is set
                     * to 0.</member>
        <member name="M:biz.ritter.javapi.sql.SQLFeatureNotSupportedException.#ctor(System.String)">
                     * Creates an SQLFeatureNotSupportedException object. The Reason string is
                     * set to the given reason string, the SQLState string is set to null and
                     * the Error Code is set to 0.
                     *
                     * @param reason
                     *            the string to use as the Reason string</member>
        <member name="M:biz.ritter.javapi.sql.SQLFeatureNotSupportedException.#ctor(System.String,System.String)">
                     * Creates an SQLFeatureNotSupportedException object. The Reason string is
                     * set to the given reason string, the SQLState string is set to the given
                     * SQLState string and the Error Code is set to 0.
                     *
                     * @param reason
                     *            the string to use as the Reason string
                     * @param sqlState
                     *            the string to use as the SQLState string</member>
        <member name="M:biz.ritter.javapi.sql.SQLFeatureNotSupportedException.#ctor(System.String,System.String,System.Int32)">
                     * Creates an SQLFeatureNotSupportedException object. The Reason string is
                     * set to the given reason string, the SQLState string is set to the given
                     * SQLState string and the Error Code is set to the given error code value.
                     *
                     * @param reason
                     *            the string to use as the Reason string
                     * @param sqlState
                     *            the string to use as the SQLState string
                     * @param vendorCode
                     *            the integer value for the error code</member>
        <member name="M:biz.ritter.javapi.sql.SQLFeatureNotSupportedException.#ctor(biz.ritter.javapi.lang.Throwable)">
                     * Creates an SQLFeatureNotSupportedException object. The Reason string is
                     * set to the null if cause == null or cause.toString() if cause!=null,and
                     * the cause java.lang.Throwable object is set to the given cause java.lang.Throwable object.
                     *
                     * @param cause
                     *            the java.lang.Throwable object for the underlying reason this
                     *            SQLException</member>
        <member name="M:biz.ritter.javapi.sql.SQLFeatureNotSupportedException.#ctor(System.String,biz.ritter.javapi.lang.Throwable)">
                     * Creates an SQLFeatureNotSupportedException object. The Reason string is
                     * set to the given and the cause java.lang.Throwable object is set to the given cause
                     * java.lang.Throwable object.
                     *
                     * @param reason
                     *            the string to use as the Reason string
                     * @param cause
                     *            the java.lang.Throwable object for the underlying reason this
                     *            SQLException</member>
        <member name="M:biz.ritter.javapi.sql.SQLFeatureNotSupportedException.#ctor(System.String,System.String,biz.ritter.javapi.lang.Throwable)">
                     * Creates an SQLFeatureNotSupportedException object. The Reason string is
                     * set to the given reason string, the SQLState string is set to the given
                     * SQLState string and the cause java.lang.Throwable object is set to the given cause
                     * java.lang.Throwable object.
                     *
                     * @param reason
                     *            the string to use as the Reason string
                     * @param sqlState
                     *            the string to use as the SQLState string
                     * @param cause
                     *            the java.lang.Throwable object for the underlying reason this
                     *            SQLException</member>
        <member name="M:biz.ritter.javapi.sql.SQLFeatureNotSupportedException.#ctor(System.String,System.String,System.Int32,biz.ritter.javapi.lang.Throwable)">
                     * Creates an SQLFeatureNotSupportedException object. The Reason string is
                     * set to the given reason string, the SQLState string is set to the given
                     * SQLState string , the Error Code is set to the given error code value,
                     * and the cause java.lang.Throwable object is set to the given cause java.lang.Throwable
                     * object.
                     *
                     * @param reason
                     *            the string to use as the Reason string
                     * @param sqlState
                     *            the string to use as the SQLState string
                     * @param vendorCode
                     *            the integer value for the error code
                     * @param cause
                     *            the java.lang.Throwable object for the underlying reason this
                     *            SQLException</member>
        <member name="T:biz.ritter.javapi.sql.SQLNonTransientConnectionException">
                 * An exception, which is subclass of SQLException, is thrown when the
                 * connection operation that failed will not succeed when the operation is
                 * retried without the cause of the failure being corrected.</member>
        <member name="M:biz.ritter.javapi.sql.SQLNonTransientConnectionException.#ctor">
                     * Creates an SQLNonTransientConnectionException object. The Reason string
                     * is set to null, the SQLState string is set to null and the Error Code is
                     * set to 0.</member>
        <member name="M:biz.ritter.javapi.sql.SQLNonTransientConnectionException.#ctor(System.String)">
                     * Creates an SQLNonTransientConnectionException object. The Reason string
                     * is set to the given reason string, the SQLState string is set to null and
                     * the Error Code is set to 0.
                     *
                     * @param reason
                     *            the string to use as the Reason string</member>
        <member name="M:biz.ritter.javapi.sql.SQLNonTransientConnectionException.#ctor(System.String,System.String)">
                     * Creates an SQLNonTransientConnectionException object. The Reason string
                     * is set to the given reason string, the SQLState string is set to the
                     * given SQLState string and the Error Code is set to 0.
                     *
                     * @param reason
                     *            the string to use as the Reason string
                     * @param sqlState
                     *            the string to use as the SQLState string</member>
        <member name="M:biz.ritter.javapi.sql.SQLNonTransientConnectionException.#ctor(System.String,System.String,System.Int32)">
                     * Creates an SQLNonTransientConnectionException object. The Reason string
                     * is set to the given reason string, the SQLState string is set to the
                     * given SQLState string and the Error Code is set to the given error code
                     * value.
                     *
                     * @param reason
                     *            the string to use as the Reason string
                     * @param sqlState
                     *            the string to use as the SQLState string
                     * @param vendorCode
                     *            the integer value for the error code</member>
        <member name="M:biz.ritter.javapi.sql.SQLNonTransientConnectionException.#ctor(biz.ritter.javapi.lang.Throwable)">
                     * Creates an SQLNonTransientConnectionException object. The Reason string
                     * is set to the null if cause == null or cause.toString() if
                     * cause!=null,and the cause java.lang.Throwable object is set to the given cause
                     * java.lang.Throwable object.
                     *
                     * @param cause
                     *            the java.lang.Throwable object for the underlying reason this
                     *            SQLException</member>
        <member name="M:biz.ritter.javapi.sql.SQLNonTransientConnectionException.#ctor(System.String,biz.ritter.javapi.lang.Throwable)">
                     * Creates an SQLNonTransientConnectionException object. The Reason string
                     * is set to the given and the cause java.lang.Throwable object is set to the given
                     * cause java.lang.Throwable object.
                     *
                     * @param reason
                     *            the string to use as the Reason string
                     * @param cause
                     *            the java.lang.Throwable object for the underlying reason this
                     *            SQLException</member>
        <member name="M:biz.ritter.javapi.sql.SQLNonTransientConnectionException.#ctor(System.String,System.String,biz.ritter.javapi.lang.Throwable)">
                     * Creates an SQLNonTransientConnectionException object. The Reason string
                     * is set to the given reason string, the SQLState string is set to the
                     * given SQLState string and the cause java.lang.Throwable object is set to the given
                     * cause java.lang.Throwable object.
                     *
                     * @param reason
                     *            the string to use as the Reason string
                     * @param sqlState
                     *            the string to use as the SQLState string
                     * @param cause
                     *            the java.lang.Throwable object for the underlying reason this
                     *            SQLException</member>
        <member name="M:biz.ritter.javapi.sql.SQLNonTransientConnectionException.#ctor(System.String,System.String,System.Int32,biz.ritter.javapi.lang.Throwable)">
                     * Creates an SQLNonTransientConnectionException object. The Reason string
                     * is set to the given reason string, the SQLState string is set to the
                     * given SQLState string , the Error Code is set to the given error code
                     * value, and the cause java.lang.Throwable object is set to the given cause java.lang.Throwable
                     * object.
                     *
                     * @param reason
                     *            the string to use as the Reason string
                     * @param sqlState
                     *            the string to use as the SQLState string
                     * @param vendorCode
                     *            the integer value for the error code
                     * @param cause
                     *            the java.lang.Throwable object for the underlying reason this
                     *            SQLException</member>
        <member name="M:biz.ritter.javapi.sql.SQLNonTransientException.#ctor">
                     * Creates an SQLNonTransientException object. The Reason string is set to
                     * null, the SQLState string is set to null and the Error Code is set to 0.</member>
        <member name="M:biz.ritter.javapi.sql.SQLNonTransientException.#ctor(System.String)">
                     * Creates an SQLNonTransientException object. The Reason string is set to
                     * the given reason string, the SQLState string is set to null and the Error
                     * Code is set to 0.
                     *
                     * @param reason
                     *            the string to use as the Reason string</member>
        <member name="M:biz.ritter.javapi.sql.SQLNonTransientException.#ctor(System.String,System.String)">
                     * Creates an SQLNonTransientException object. The Reason string is set to
                     * the given reason string, the SQLState string is set to the given SQLState
                     * string and the Error Code is set to 0.
                     *
                     * @param reason
                     *            the string to use as the Reason string
                     * @param sqlState
                     *            the string to use as the SQLState string</member>
        <member name="M:biz.ritter.javapi.sql.SQLNonTransientException.#ctor(System.String,System.String,System.Int32)">
                     * Creates an SQLNonTransientException object. The Reason string is set to
                     * the given reason string, the SQLState string is set to the given SQLState
                     * string and the Error Code is set to the given error code value.
                     *
                     * @param reason
                     *            the string to use as the Reason string
                     * @param sqlState
                     *            the string to use as the SQLState string
                     * @param vendorCode
                     *            the integer value for the error code</member>
        <member name="M:biz.ritter.javapi.sql.SQLNonTransientException.#ctor(biz.ritter.javapi.lang.Throwable)">
                     * Creates an SQLNonTransientException object. The Reason string is set to
                     * the null if cause == null or cause.toString() if cause!=null,and the
                     * cause Throwable object is set to the given cause Throwable object.
                     *
                     * @param cause
                     *            the Throwable object for the underlying reason this
                     *            SQLException</member>
        <member name="M:biz.ritter.javapi.sql.SQLNonTransientException.#ctor(System.String,biz.ritter.javapi.lang.Throwable)">
                     * Creates an SQLNonTransientException object. The Reason string is set to
                     * the given and the cause Throwable object is set to the given cause
                     * Throwable object.
                     *
                     * @param reason
                     *            the string to use as the Reason string
                     * @param cause
                     *            the Throwable object for the underlying reason this
                     *            SQLException</member>
        <member name="M:biz.ritter.javapi.sql.SQLNonTransientException.#ctor(System.String,System.String,biz.ritter.javapi.lang.Throwable)">
                     * Creates an SQLNonTransientException object. The Reason string is set to
                     * the given reason string, the SQLState string is set to the given SQLState
                     * string and the cause Throwable object is set to the given cause Throwable
                     * object.
                     *
                     * @param reason
                     *            the string to use as the Reason string
                     * @param sqlState
                     *            the string to use as the SQLState string
                     * @param cause
                     *            the Throwable object for the underlying reason this
                     *            SQLException</member>
        <member name="M:biz.ritter.javapi.sql.SQLNonTransientException.#ctor(System.String,System.String,System.Int32,biz.ritter.javapi.lang.Throwable)">
                     * Creates an SQLNonTransientException object. The Reason string is set to
                     * the given reason string, the SQLState string is set to the given SQLState
                     * string , the Error Code is set to the given error code value, and the
                     * cause Throwable object is set to the given cause Throwable object.
                     *
                     * @param reason
                     *            the string to use as the Reason string
                     * @param sqlState
                     *            the string to use as the SQLState string
                     * @param vendorCode
                     *            the integer value for the error code
                     * @param cause
                     *            the Throwable object for the underlying reason this
                     *            SQLException</member>
        <member name="T:biz.ritter.javapi.sql.SQLPermission">
                 * A Permission relating to security access control in the {@code java.sql}
                 * package.
                 * <p />
                 * Currently, the only permission supported has the name " {@code setLog}". The
                 * {@code setLog} permission controls whether a Java application or applet can
                 * open a logging stream using the {@code DriverManager.setLogWriter} method or
                 * the {@code DriverManager.setLogStream} method. This is a potentially
                 * dangerous operation since the logging stream can contain sensitive
                 * information such as usernames and passwords.
                 *
                 * @see DriverManager</member>
        <member name="M:biz.ritter.javapi.sql.SQLPermission.#ctor(System.String)">
                     * Creates a new {@code SQLPermission} object with the specified name.
                     *
                     * @param name
                     *            the name to use for this {@code SQLPermission}.</member>
        <member name="M:biz.ritter.javapi.sql.SQLPermission.#ctor(System.String,System.String)">
                     * Creates a new {@code SQLPermission} object with the specified name.
                     *
                     * @param name
                     *            is the name of the {@code SQLPermission}. Currently only
                     *            {@code "setLog"} is allowed.
                     * @param actions
                     *            is currently unused and should be set to {@code null}.</member>
        <member name="T:biz.ritter.javapi.sql.SQLWarning">
                 * An exception class that holds information about Database access warnings.</member>
        <member name="M:biz.ritter.javapi.sql.SQLWarning.#ctor">
                     * Creates an {@code SQLWarning} object. The reason string is set to {@code
                     * null}, the {@code SQLState} string is set to {@code null} and the error
                     * code is set to 0.</member>
        <member name="M:biz.ritter.javapi.sql.SQLWarning.#ctor(System.String)">
                     * Creates an {@code SQLWarning} object. The reason string is set to the
                     * given reason string, the {@code SQLState} string is set to {@code null}
                     * and the error code is set to 0.
                     *
                     * @param theReason
                     *            the reason why this warning is issued.</member>
        <member name="M:biz.ritter.javapi.sql.SQLWarning.#ctor(System.String,System.String)">
                     * Creates an {@code SQLWarning} object. The reason string is set to the
                     * given reason string, the {@code SQLState} string is set to the given
                     * {@code SQLState} string and the error code is set to 0.
                     *
                     * @param theReason
                     *            the reason why this warning is issued.
                     * @param theSQLState
                     *            the string to use as the {@code SQLState} string.</member>
        <member name="M:biz.ritter.javapi.sql.SQLWarning.#ctor(System.String,System.String,System.Int32)">
                     * Creates an {@code SQLWarning} object. The reason string is set to the
                     * given reason string, the {@code SQLState} string is set to the given
                     * {@code SQLState} string and the error code is set to the given error code
                     * value.
                     *
                     * @param theReason
                     *            the reason why this warning is issued.
                     * @param theSQLState
                     *            the X/Open standard specifc error code.
                     * @param theErrorCode
                     *            a vendor specific error code.</member>
        <member name="M:biz.ritter.javapi.sql.SQLWarning.getNextWarning">
                     * Gets the next {@code SQLWarning} chained to this {@code SQLWarning} object.
                     *
                     * @return the {@code SQLWarning} chained to this {@code SQLWarning}.
                     *         {@code null} if no {@code SQLWarning} is chained to this {@code
                     *         SQLWarning}.</member>
        <member name="M:biz.ritter.javapi.sql.SQLWarning.#ctor(biz.ritter.javapi.lang.Throwable)">
                     * Creates an SQLWarning object. The Reason string is set to null, the
                     * SQLState string is set to null and the Error Code is set to 0, cause is
                     * set to cause.
                     *
                     * @since 1.6</member>
        <member name="M:biz.ritter.javapi.sql.SQLWarning.#ctor(System.String,biz.ritter.javapi.lang.Throwable)">
                     * Creates an SQLWarning object. The Reason string is set to reason, the
                     * SQLState string is set to null and the Error Code is set to 0, cause is
                     * set to the given cause
                     *
                     * @since 1.6</member>
        <member name="M:biz.ritter.javapi.sql.SQLWarning.#ctor(System.String,System.String,biz.ritter.javapi.lang.Throwable)">
                     * Creates an SQLWarning object. The Reason string is set to reason, the
                     * SQLState string is set to given SQLState and the Error Code is set to 0,
                     * cause is set to the given cause
                     *
                     * @since 1.6</member>
        <member name="M:biz.ritter.javapi.sql.SQLWarning.#ctor(System.String,System.String,System.Int32,biz.ritter.javapi.lang.Throwable)">
                     * Creates an SQLWarning object. The Reason string is set to reason, the
                     * SQLState string is set to given SQLState and the Error Code is set to
                     * vendorCode, cause is set to the given cause
                     *
                     * @since 1.6</member>
        <member name="M:biz.ritter.javapi.sql.SQLWarning.setNextWarning(biz.ritter.javapi.sql.SQLWarning)">
                     * Chains a supplied {@code SQLWarning} to this {@code SQLWarning}.
                     *
                     * @param w
                     *            the {@code SQLWarning} linked to this {@code SQLWarning}.</member>
        <member name="T:biz.ritter.javapi.sql.SQLXML">
                 * TODO Javadoc</member>
        <member name="T:biz.ritter.javapi.sql.Statement">
                 * Interface used for executing static SQL statements to retrieve query results.
                 * The resulting table rows are returned as {@code ResultSet}s. For any given
                 * {@code Statement} object, only one {@code ResultSet} can be opened at one
                 * time. A call to any of the execution methods of {@code Statement} will cause
                 * any previously created {@code ResultSet} object for that {@code Statement} to
                 * be closed implicitly.
                 * <p />
                 * To have multiple {@code ResultSet} objects opened concurrently, multiple
                 * {@code Statement} objects must be created and then executed.
                 * <p />
                 * To obtain such an executable statement one needs to invoke {@code
                 * Connection#createStatement}.
                 *
                 * @see ResultSet
                 * @see Connection#createStatement</member>
        <member name="M:biz.ritter.javapi.sql.Statement.addBatch(System.String)">
                     * Adds a specified SQL command to the list of commands for this {@code
                     * Statement}.
                     * <p />
                     * The list of commands is executed by invoking the {@code executeBatch}
                     * method.
                     *
                     * @param sql
                     *            the SQL command as a String. Typically an {@code INSERT} or
                     *            {@code UPDATE} statement.
                     * @throws SQLException
                     *             if an error occurs accessing the database or the database
                     *             does not support batch updates.</member>
        <member name="M:biz.ritter.javapi.sql.Statement.cancel">
                     * Cancels this statement's execution if both the database and the JDBC
                     * driver support aborting an SQL statement in flight. This method can be
                     * used by one thread to stop a statement that is executed on another
                     * thread.
                     *
                     * @throws SQLException
                     *             if an error occurs accessing the database.</member>
        <member name="M:biz.ritter.javapi.sql.Statement.clearBatch">
                     * Clears the current list of SQL commands for this statement.
                     *
                     * @throws SQLException
                     *             if an error occurs accessing the database or the database
                     *             does not support batch updates.</member>
        <member name="M:biz.ritter.javapi.sql.Statement.clearWarnings">
                     * Clears all {@code SQLWarnings} from this statement.
                     *
                     * @throws SQLException
                     *             if an error occurs accessing the database.</member>
        <member name="M:biz.ritter.javapi.sql.Statement.close">
                     * Releases this statement's database and JDBC driver resources.
                     * <p />
                     * Using this method to release these resources as soon as possible is
                     * strongly recommended.
                     * <p />
                     * One should not rely on the resources being automatically released when
                     * finalized during garbage collection. Doing so can result in unpredictable
                     * behavior for the application.
                     *
                     * @throws SQLException
                     *             if an error occurs accessing the database.</member>
        <member name="M:biz.ritter.javapi.sql.Statement.execute(System.String)">
                     * Executes a supplied SQL statement. This may return multiple {@code
                     * ResultSet}s.
                     * <p />
                     * Use the {@code getResultSet} or {@code getUpdateCount} methods to get the
                     * first result and {@code getMoreResults} to get any subsequent results.
                     *
                     * @param sql
                     *            the SQL statement to execute
                     * @return {@code true} if the first result is a {@code ResultSet}, {@code
                     *         false} if the first result is an update count or if there is no
                     *         result.
                     * @throws SQLException
                     *             if an error occurs accessing the database.</member>
        <member name="M:biz.ritter.javapi.sql.Statement.execute(System.String,System.Int32)">
                     * Executes a supplied SQL statement. This may return multiple {@code
                     * ResultSet}s. This method allows control of whether auto-generated Keys
                     * should be made available for retrieval, if the SQL statement is an
                     * {@code INSERT} statement.
                     * <p />
                     * Use the {@code getResultSet} or {@code getUpdateCount} methods to get the
                     * first result and {@code getMoreResults} to get any subsequent results.
                     *
                     * @param sql
                     *            the SQL statement to execute.
                     * @param autoGeneratedKeys
                     *            a flag indicating whether to make auto generated keys
                     *            available for retrieval. This parameter must be one of {@code
                     *            Statement.NO_GENERATED_KEYS} or {@code
                     *            Statement.RETURN_GENERATED_KEYS}.
                     * @return {@code true} if results exists and the first result is a {@code
                     *         ResultSet}, {@code false} if the first result is an update count
                     *         or if there is no result.
                     * @throws SQLException
                     *             if an error occurs accessing the database.</member>
        <member name="M:biz.ritter.javapi.sql.Statement.execute(System.String,System.Int32[])">
                     * Executes the supplied SQL statement. This may return multiple {@code
                     * ResultSet}s. This method allows retrieval of auto generated keys
                     * specified by the supplied array of column indexes, if the SQL statement
                     * is an {@code INSERT} statement.
                     * <p />
                     * Use the {@code getResultSet} or {@code getUpdateCount} methods to get the
                     * first result and {@code getMoreResults} to get any subsequent results.
                     *
                     * @param sql
                     *            the SQL statement to execute.
                     * @param columnIndexes
                     *            an array of indexes of the columns in the inserted row which
                     *            should be made available for retrieval via the {@code
                     *            getGeneratedKeys} method.
                     * @return {@code true} if the first result is a {@code ResultSet}, {@code
                     *         false} if the first result is an update count or if there is no
                     *         result.
                     * @throws SQLException
                     *             if an error occurs accessing the database.</member>
        <member name="M:biz.ritter.javapi.sql.Statement.execute(System.String,System.String[])">
                     * Executes the supplied SQL statement. This may return multiple {@code
                     * ResultSet}s. This method allows retrieval of auto generated keys
                     * specified by the supplied array of column indexes, if the SQL statement
                     * is an {@code INSERT} statement.
                     * <p />
                     * Use the {@code getResultSet} or {@code getUpdateCount} methods to get the
                     * first result and {@code getMoreResults} to get any subsequent results.
                     *
                     * @param sql
                     *            the SQL statement to execute.
                     * @param columnNames
                     *            an array of column names in the inserted row which should be
                     *            made available for retrieval via the {@code getGeneratedKeys}
                     *            method.
                     * @return {@code true} if the first result is a {@code ResultSet}, {@code
                     *         false} if the first result is an update count or if there is no
                     *         result
                     * @throws SQLException
                     *             if an error occurs accessing the database.</member>
        <member name="M:biz.ritter.javapi.sql.Statement.executeBatch">
                     * Submits a batch of SQL commands to the database. Returns an array of
                     * update counts, if all the commands execute successfully.
                     * <p />
                     * If one of the commands in the batch fails, this method can throw a
                     * {@link BatchUpdateException} and the JDBC driver may or may not process
                     * the remaining commands. The JDBC driver must behave consistently with the
                     * underlying database, following the "all or nothing" principle. If the
                     * driver continues processing, the array of results returned contains the
                     * same number of elements as there are commands in the batch, with a
                     * minimum of one of the elements having the {@code EXECUTE_FAILED} value.
                     *
                     * @return an array of update counts, with one entry for each command in the
                     *         batch. The elements are ordered according to the order in which
                     *         the commands were added to the batch.
                     *         <p />
                     *         <ol>
                     *         <li>If the value of an element is &gt; 0, the corresponding
                     *         command completed successfully and the value is the <i>update
                     *         count</i> (the number of rows in the database affected by the
                     *         command) for that command.</li>
                     *         <li>If the value is {@code SUCCESS_NO_INFO}, the command
                     *         completed successfully but the number of rows affected is
                     *         unknown.
                     *         </li>
                     *         <li>If the value is {@code EXECUTE_FAILED}, the command failed.</li>
                     *         </ol>
                     * @throws SQLException
                     *             if an error occurs accessing the database.</member>
        <member name="M:biz.ritter.javapi.sql.Statement.executeQuery(System.String)">
                     * Executes a supplied SQL statement. Returns a single {@code ResultSet}.
                     *
                     * @param sql
                     *            an SQL statement to execute. Typically a {@code SELECT}
                     *            statement
                     * @return a {@code ResultSet} containing the data produced by the SQL
                     *         statement. Never null.
                     * @throws SQLException
                     *             if an error occurs accessing the database or if the statement
                     *             produces anything other than a single {@code ResultSet}.</member>
        <member name="M:biz.ritter.javapi.sql.Statement.executeUpdate(System.String)">
                     * Executes the supplied SQL statement. The statement may be an {@code
                     * INSERT}, {@code UPDATE} or {@code DELETE} statement or a statement which
                     * returns nothing.
                     *
                     * @param sql
                     *            an SQL statement to execute - an SQL {@code INSERT}, {@code
                     *            UPDATE}, {@code DELETE} or a statement which returns nothing
                     * @return the count of updated rows, or 0 for a statement that returns
                     *         nothing.
                     * @throws SQLException
                     *             if an error occurs accessing the database or if the statement
                     *             produces a {@code ResultSet}.</member>
        <member name="M:biz.ritter.javapi.sql.Statement.executeUpdate(System.String,System.Int32)">
                     * Executes the supplied SQL statement. This method allows control of
                     * whether auto-generated Keys should be made available for retrieval.
                     *
                     * @param sql
                     *            an SQL statement to execute - an SQL {@code INSERT}, {@code
                     *            UPDATE}, {@code DELETE} or a statement which does not return
                     *            anything.
                     * @param autoGeneratedKeys
                     *            a flag that indicates whether to allow retrieval of auto
                     *            generated keys. Parameter must be one of {@code
                     *            Statement.RETURN_GENERATED_KEYS} or {@code
                     *            Statement.NO_GENERATED_KEYS}
                     * @return the number of updated rows, or 0 if the statement returns
                     *         nothing.
                     * @throws SQLException
                     *             if an error occurs accessing the database or if the statement
                     *             produces a {@code ResultSet}.</member>
        <member name="M:biz.ritter.javapi.sql.Statement.executeUpdate(System.String,System.Int32[])">
                     * Executes the supplied SQL statement. This method allows retrieval of auto
                     * generated keys specified by the supplied array of column indexes.
                     *
                     * @param sql
                     *            an SQL statement to execute - an SQL {@code INSERT}, {@code
                     *            UPDATE}, {@code DELETE} or a statement which returns nothing
                     * @param columnIndexes
                     *            an array of indexes of the columns in the inserted row which
                     *            should be made available for retrieval via the {@code
                     *            getGeneratedKeys} method.
                     * @return the count of updated rows, or 0 for a statement that returns
                     *         nothing.
                     * @throws SQLException
                     *             if an error occurs accessing the database or if the statement
                     *             produces a {@code ResultSet}.</member>
        <member name="M:biz.ritter.javapi.sql.Statement.executeUpdate(System.String,System.String[])">
                     * Executes the supplied SQL statement. This method allows retrieval of auto
                     * generated keys specified by the supplied array of column names.
                     *
                     * @param sql
                     *            an SQL statement to execute - an SQL {@code INSERT}, {@code
                     *            UPDATE}, {@code DELETE} or a statement which returns nothing
                     * @param columnNames
                     *            an array of column names in the inserted row which should be
                     *            made available for retrieval via the {@code getGeneratedKeys}
                     *            method.
                     * @return the count of updated rows, or 0 for a statement that returns
                     *         nothing.
                     * @throws SQLException
                     *             if an error occurs accessing the database or if the statement
                     *             produces a {@code ResultSet}.</member>
        <member name="M:biz.ritter.javapi.sql.Statement.getConnection">
                     * Gets the {@code Connection} object which created this statement.
                     *
                     * @return the {@code Connection} through which this statement is
                     *         transmitted to the database.
                     * @throws SQLException
                     *             if an error occurs accessing the database.</member>
        <member name="M:biz.ritter.javapi.sql.Statement.getFetchDirection">
                     * Gets the default direction for fetching rows for {@code ResultSet}s
                     * generated from this statement.
                     *
                     * @return the default fetch direction, one of:
                     *         <ul>
                     *         <li>ResultSet.FETCH_FORWARD</li><li>ResultSet.FETCH_REVERSE</li>
                     *         <li>ResultSet.FETCH_UNKNOWN</li>
                     *         </ul>
                     * @throws SQLException
                     *             if an error occurs accessing the database.</member>
        <member name="M:biz.ritter.javapi.sql.Statement.getFetchSize">
                     * Gets the default number of rows for a fetch for the {@code ResultSet}
                     * objects returned from this statement.
                     *
                     * @return the default fetch size for {@code ResultSet}s produced by this
                     *         statement.
                     * @throws SQLException
                     *             if an error occurs accessing the database.</member>
        <member name="M:biz.ritter.javapi.sql.Statement.getGeneratedKeys">
                     * Returns auto generated keys created by executing this statement.
                     *
                     * @return a {@code ResultSet} containing the auto generated keys - empty if
                     *         no keys are generated by this statement.
                     * @throws SQLException
                     *             if an error occurs accessing the database.</member>
        <member name="M:biz.ritter.javapi.sql.Statement.getMaxFieldSize">
                     * Gets the maximum number of bytes which can be returned as values from
                     * character and binary type columns in a {@code ResultSet} derived from this
                     * statement. This limit applies to {@code BINARY}, {@code VARBINARY},
                     * {@code LONGVARBINARY}, {@code CHAR}, {@code VARCHAR}, and {@code
                     * LONGVARCHAR} types. Any data exceeding the maximum size is abandoned
                     * without announcement.
                     *
                     * @return the current size limit, where {@code 0} means that there is no
                     *         limit.
                     * @throws SQLException
                     *             if an error occurs accessing the database.</member>
        <member name="M:biz.ritter.javapi.sql.Statement.getMaxRows">
                     * Gets the maximum number of rows that a {@code ResultSet} can contain when
                     * produced from this statement. If the limit is exceeded, the excess rows
                     * are discarded silently.
                     *
                     * @return the current row limit, where {@code 0} means that there is no
                     *         limit.
                     * @throws SQLException
                     *             if an error occurs accessing the database.</member>
        <member name="M:biz.ritter.javapi.sql.Statement.getMoreResults">
                     * Moves to this statement's next result. Returns {@code true} if it is a
                     * {@code ResultSet}. Any current {@code ResultSet} objects previously
                     * obtained with {@code getResultSet()} are closed implicitly.
                     *
                     * @return {@code true} if the next result is a {@code ResultSet}, {@code
                     *         false} if the next result is not a {@code ResultSet} or if there
                     *         are no more results. Note that if there is no more data, this
                     *         method will return {@code false} and {@code getUpdateCount} will
                     *         return -1.
                     * @throws SQLException
                     *             if an error occurs accessing the database.</member>
        <member name="M:biz.ritter.javapi.sql.Statement.getMoreResults(System.Int32)">
                     * Moves to this statement's next result. Returns {@code true} if the next
                     * result is a {@code ResultSet}. Any current {@code ResultSet} objects
                     * previously obtained with {@code getResultSet()} are handled as indicated
                     * by a supplied Flag parameter.
                     *
                     * @param current
                     *            a flag indicating what to do with existing {@code ResultSet}s.
                     *            This parameter must be one of {@code
                     *            Statement.CLOSE_ALL_RESULTS}, {@code
                     *            Statement.CLOSE_CURRENT_RESULT} or {@code
                     *            Statement.KEEP_CURRENT_RESULT}.
                     * @return {@code true} if the next result exists and is a {@code ResultSet}
                     *         , {@code false} if the next result is not a {@code ResultSet} or
                     *         if there are no more results. Note that if there is no more data,
                     *         this method will return {@code false} and {@code getUpdateCount}
                     *         will return -1.
                     * @throws SQLException
                     *             if an error occurs accessing the database.</member>
        <member name="M:biz.ritter.javapi.sql.Statement.getQueryTimeout">
                     * Gets the timeout value for the statement's execution time. The JDBC
                     * driver will wait up to this value for the execution to complete - after
                     * the limit is exceeded an SQL {@code Exception} is thrown.
                     *
                     * @return the current query timeout value, where {@code 0} indicates that
                     *         there is no current timeout.
                     * @throws SQLException
                     *             if an error occurs accessing the database.</member>
        <member name="M:biz.ritter.javapi.sql.Statement.getResultSet">
                     * Gets the current result. Should only be called once per result.
                     *
                     * @return the {@code ResultSet} for the current result. {@code null} if the
                     *         result is an update count or if there are no more results.
                     * @throws SQLException
                     *             if an error occurs accessing the database.</member>
        <member name="M:biz.ritter.javapi.sql.Statement.getResultSetConcurrency">
                     * Gets the concurrency setting for {@code ResultSet} objects generated by
                     * this statement.
                     *
                     * @return {@code ResultSet.CONCUR_READ_ONLY} or {@code
                     *         ResultSet.CONCUR_UPDATABLE}.
                     * @throws SQLException
                     *             if an error occurs accessing the database.</member>
        <member name="M:biz.ritter.javapi.sql.Statement.getResultSetHoldability">
                     * Gets the cursor hold setting for {@code ResultSet} objects generated by
                     * this statement.
                     *
                     * @return {@code ResultSet.HOLD_CURSORS_OVER_COMMIT} or {@code
                     *         ResultSet.CLOSE_CURSORS_AT_COMMIT}
                     * @throws SQLException
                     *             if there is an error while accessing the database.</member>
        <member name="M:biz.ritter.javapi.sql.Statement.getResultSetType">
                     * Gets the {@code ResultSet} type setting for {@code ResultSet}s derived
                     * from this statement.
                     *
                     * @return {@code ResultSet.TYPE_FORWARD_ONLY} for a {@code ResultSet} where
                     *         the cursor can only move forwards, {@code
                     *         ResultSet.TYPE_SCROLL_INSENSITIVE} for a {@code ResultSet} which
                     *         is scrollable but is not sensitive to changes made by others,
                     *         {@code ResultSet.TYPE_SCROLL_SENSITIVE} for a {@code ResultSet}
                     *         which is scrollable but is sensitive to changes made by others.
                     * @throws SQLException
                     *             if there is an error accessing the database.</member>
        <member name="M:biz.ritter.javapi.sql.Statement.getUpdateCount">
                     * Gets an update count for the current result if it is not a {@code
                     * ResultSet}.
                     *
                     * @return the current result as an update count. {@code -1} if the current
                     *         result is a {@code ResultSet} or if there are no more results.
                     * @throws SQLException
                     *             if an error occurs accessing the database.</member>
        <member name="M:biz.ritter.javapi.sql.Statement.getWarnings">
                     * Retrieves the first {@code SQLWarning} reported by calls on this
                     * statement. If there are multiple warnings, subsequent warnings are
                     * chained to the first one. The chain of warnings is cleared each time the
                     * statement is executed.
                     * <p />
                     * Warnings associated with reads from the {@code ResultSet} returned from
                     * executing the statement will be attached to the {@code ResultSet}, not the
                     * statement object.
                     *
                     * @return an SQLWarning, null if there are no warnings
                     * @throws SQLException
                     *             if an error occurs accessing the database.</member>
        <member name="M:biz.ritter.javapi.sql.Statement.setCursorName(System.String)">
                     * Sets the SQL cursor name. This name is used by subsequent statement
                     * execute methods.
                     * <p />
                     * Cursor names must be unique within one Connection.
                     * <p />
                     * With the cursor name set, it can then be used in SQL positioned
                     * update or delete statements to determine the current row in a {@code
                     * ResultSet} generated from this statement. The positioned update or delete
                     * must be done with a different statement than this one.
                     *
                     * @param name
                     *            the Cursor name as a string,
                     * @throws SQLException
                     *             if an error occurs accessing the database.</member>
        <member name="M:biz.ritter.javapi.sql.Statement.setEscapeProcessing(System.Boolean)">
                     * Sets Escape Processing mode.
                     * <p />
                     * If Escape Processing is on, the JDBC driver will do escape substitution
                     * on an SQL statement before sending it for execution. This does not apply
                     * to {@link PreparedStatement}s since they are processed when created,
                     * before this method can be called.
                     *
                     * @param enable
                     *            {@code true} to set escape processing mode <i>on</i>, {@code
                     *            false} to turn it <i>off</i>.
                     * @throws SQLException
                     *             if an error occurs accessing the database.</member>
        <member name="M:biz.ritter.javapi.sql.Statement.setFetchDirection(System.Int32)">
                     * Sets the fetch direction - a hint to the JDBC driver about the direction
                     * of processing of rows in {@code ResultSet}s created by this statement.
                     * The default fetch direction is {@code FETCH_FORWARD}.
                     *
                     * @param direction
                     *            which fetch direction to use. This parameter should be one of
                     *            <ul>
                     *            <li>{@code ResultSet.FETCH_UNKNOWN}</li>
                     *            <li>{@code ResultSet.FETCH_FORWARD}</li>
                     *            <li>{@code ResultSet.FETCH_REVERSE}</li>
                     *            </ul>
                     * @throws SQLException
                     *             if there is an error while accessing the database or if the
                     *             fetch direction is unrecognized.</member>
        <member name="M:biz.ritter.javapi.sql.Statement.setFetchSize(System.Int32)">
                     * Sets the fetch size. This is a hint to the JDBC driver about how many
                     * rows should be fetched from the database when more are required by
                     * application processing.
                     *
                     * @param rows
                     *            the number of rows that should be fetched. {@code 0} tells the driver
                     *            to ignore the hint. Should be less than {@code getMaxRows} for
                     *            this statement. Should not be negative.
                     * @throws SQLException
                     *             if an error occurs accessing the database, or if the rows
                     *             parameter is out of range.</member>
        <member name="M:biz.ritter.javapi.sql.Statement.setMaxFieldSize(System.Int32)">
                     * Sets the maximum number of bytes for {@code ResultSet} columns that
                     * contain character or binary values. This applies to {@code BINARY},
                     * {@code VARBINARY}, {@code LONGVARBINARY}, {@code CHAR}, {@code VARCHAR},
                     * and {@code LONGVARCHAR} fields. Any data exceeding the maximum size is
                     * abandoned without announcement.
                     *
                     * @param max
                     *            the maximum field size in bytes. {@code 0} means "no limit".
                     * @throws SQLException
                     *             if an error occurs accessing the database or the {@code max}
                     *             value is &lt; {@code 0}.</member>
        <member name="M:biz.ritter.javapi.sql.Statement.setMaxRows(System.Int32)">
                     * Sets the maximum number of rows that any {@code ResultSet} can contain.
                     * If the number of rows exceeds this value, the additional rows are
                     * silently discarded.
                     *
                     * @param max
                     *            the maximum number of rows. {@code 0} means "no limit".
                     * @throws SQLException
                     *             if an error occurs accessing the database or if max &lt; {@code
                     *             0}.</member>
        <member name="M:biz.ritter.javapi.sql.Statement.setQueryTimeout(System.Int32)">
                     * Sets the timeout, in seconds, for queries - how long the driver will
                     * allow for completion of a statement execution. If the timeout is
                     * exceeded, the query will throw an {@code SQLException}.
                     *
                     * @param seconds
                     *            timeout in seconds. 0 means no timeout ("wait forever")
                     * @throws SQLException
            		 *             if an error occurs accessing the database or if seconds &lt;
                     *             {@code 0}.</member>
        <member name="M:biz.ritter.javapi.sql.Statement.isClosed">
                     * TODO Javadoc
                     *
                     * @return</member>
        <member name="F:biz.ritter.javapi.sql.StatementConstants.CLOSE_ALL_RESULTS">
                     * Passing this constant to {@link #getMoreResults} implies that all {@code
                     * ResultSet} objects previously kept open should be closed.</member>
        <member name="F:biz.ritter.javapi.sql.StatementConstants.CLOSE_CURRENT_RESULT">
                     * Passing this constant to {@link #getMoreResults} implies that the current
                     * {@code ResultSet} object should be closed.</member>
        <member name="F:biz.ritter.javapi.sql.StatementConstants.EXECUTE_FAILED">
                     * Indicates that an error was encountered during execution of a batch
                     * statement.</member>
        <member name="F:biz.ritter.javapi.sql.StatementConstants.KEEP_CURRENT_RESULT">
                     * Passing this constant to <i>getMoreResults</i> implies that the current
                     * {@code ResultSet} object should not be closed.</member>
        <member name="F:biz.ritter.javapi.sql.StatementConstants.NO_GENERATED_KEYS">
                     * Indicates that generated keys should not be accessible for retrieval.</member>
        <member name="F:biz.ritter.javapi.sql.StatementConstants.RETURN_GENERATED_KEYS">
                     * Indicates that generated keys should be accessible for retrieval.</member>
        <member name="F:biz.ritter.javapi.sql.StatementConstants.SUCCESS_NO_INFO">
                     * Indicates that a batch statement was executed with a successful result,
                     * but a count of the number of rows it affected is unavailable.</member>
        <member name="T:biz.ritter.javapi.sql.Struct">
                 * An interface which provides facilities for manipulating an SQL structured type
                 * as a Java object. The {@code Struct} object has a value for each attribute of the SQL structured
                 * type.</member>
        <member name="M:biz.ritter.javapi.sql.Struct.getSQLTypeName">
                     * Gets the SQL Type name of the SQL structured type that this {@code
                     * Struct} represents.
                     *
                     * @return the fully qualified name of SQL structured type.
                     * @throws SQLException
                     *             if a database error occurs.</member>
        <member name="M:biz.ritter.javapi.sql.Struct.getAttributes">
                     * Gets the values of the attributes of this SQL structured type. This
                     * method uses the type map associated with the {@link Connection} for
                     * customized type mappings. Where there is no entry in the type mapping
                     * which matches this structured type, the JDBC driver uses the standard
                     * mapping.
                     *
                     * @return an {@code Object} array containing the ordered attributes.
                     * @throws SQLException
                     *             if a database error occurs.</member>
        <member name="M:biz.ritter.javapi.sql.Struct.getAttributes(biz.ritter.javapi.util.Map{System.String,biz.ritter.javapi.lang.Class})">
                     * Gets the values of the attributes of this SQL structured type. This
                     * method uses the supplied type mapping to determine how to map SQL types
                     * to their corresponding Java objects. In the
                     * case where there is no entry in the type mapping which matches this
                     * structured type, the JDBC driver uses the default mapping. The {@code
                     * Connection} type map is <i>never</i> utilized by this method.
                     *
                     * @param theMap
                     *            a Map describing how SQL Type names are mapped to classes.
                     * @return an Object array containing the ordered attributes,.
                     * @throws SQLException
                     *             if a database error occurs.</member>
        <member name="T:biz.ritter.javapi.sql.Time">
                 * Java representation of an SQL {@code TIME} value. Provides utilities to
                 * format and parse the time's representation as a String in JDBC escape format.</member>
        <member name="M:biz.ritter.javapi.sql.Time.#ctor(System.Int32,System.Int32,System.Int32)">
                     * Constructs a {@code Time} object using the supplied values for <i>Hour</i>,
                     * <i>Minute</i> and <i>Second</i>. The <i>Year</i>, <i>Month</i> and
                     * <i>Day</i> elements of the {@code Time} object are set to the date
                     * of the Epoch (January 1, 1970).
                     * <p />
                     * Any attempt to access the <i>Year</i>, <i>Month</i> or <i>Day</i>
                     * elements of a {@code Time} object will result in an {@code
                     * IllegalArgumentException}.
                     * <p />
                     * The result is undefined if any argument is out of bounds.
                     *
                     * @deprecated Use the constructor {@link #Time(long)}.
                     * @param theHour
                     *            a value in the range {@code [0,23]}.
                     * @param theMinute
                     *            a value in the range {@code [0,59]}.
                     * @param theSecond
                     *            a value in the range {@code [0,59]}.</member>
        <member name="M:biz.ritter.javapi.sql.Time.#ctor(System.Int64)">
                     * Constructs a {@code Time} object using a supplied time specified in
                     * milliseconds.
                     *
                     * @param theTime
                     *            a {@code Time} specified in milliseconds since the
                     *            <i>Epoch</i> (January 1st 1970, 00:00:00.000).</member>
        <member name="M:biz.ritter.javapi.sql.Time.getDate">
                     * @deprecated This method is deprecated and must not be used. An SQL
                     *             {@code Time} object does not have a {@code Date} component.
                     * @return does not return anything.
                     * @throws IllegalArgumentException
                     *             if this method is called.</member>
        <member name="M:biz.ritter.javapi.sql.Time.getDay">
                     * @deprecated This method is deprecated and must not be used. An SQL
                     *             {@code Time} object does not have a <i>Day</i> component.
                     * @return does not return anything.
                     * @throws IllegalArgumentException
                     *             if this method is called.</member>
        <member name="M:biz.ritter.javapi.sql.Time.getMonth">
                     * @deprecated This method is deprecated and must not be used. An SQL
                     *             {@code Time} object does not have a <i>Month</i> component.
                     * @return does not return anything.
                     * @throws IllegalArgumentException
                     *             if this method is called.</member>
        <member name="M:biz.ritter.javapi.sql.Time.getYear">
                     * @deprecated This method is deprecated and must not be used. An SQL
                     *             {@code Time} object does not have a <i>Year</i> component.
                     * @return does not return anything.
                     * @throws IllegalArgumentException
                     *             if this method is called.</member>
        <member name="M:biz.ritter.javapi.sql.Time.setDate(System.Int32)">
                     * @deprecated This method is deprecated and must not be used. An SQL
                     *             {@code Time} object does not have a {@code Date} component.
                     * @throws IllegalArgumentException
                     *             if this method is called.</member>
        <member name="M:biz.ritter.javapi.sql.Time.setMonth(System.Int32)">
                     * @deprecated This method is deprecated and must not be used. An SQL
                     *             {@code Time} object does not have a <i>Month</i> component.
                     * @throws IllegalArgumentException
                     *             if this method is called.</member>
        <member name="M:biz.ritter.javapi.sql.Time.setYear(System.Int32)">
                     * @deprecated This method is deprecated and must not be used. An SQL
                     *             {@code Time} object does not have a <i>Year</i> component.
                     * @throws IllegalArgumentException
                     *             if this method is called.</member>
        <member name="M:biz.ritter.javapi.sql.Time.setTime(System.Int64)">
                     * Sets the time for this {@code Time} object to the supplied milliseconds
                     * value.
                     *
                     * @param time
                     *            A time value expressed as milliseconds since the <i>Epoch</i>.
                     *            Negative values are milliseconds before the Epoch. The Epoch
                     *            is January 1 1970, 00:00:00.000.</member>
        <member name="M:biz.ritter.javapi.sql.Time.ToString">
                     * Formats the {@code Time} as a String in JDBC escape format: {@code
                     * hh:mm:ss}.
                     *
                     * @return A String representing the {@code Time} value in JDBC escape
                     *         format: {@code HH:mm:ss}</member>
        <member name="M:biz.ritter.javapi.sql.Time.valueOf(System.String)">
                     * Creates a {@code Time} object from a string holding a time represented in
                     * JDBC escape format: {@code hh:mm:ss}.
                     * <p />
                     * An exception occurs if the input string does not comply with this format.
                     *
                     * @param timeString
                     *            A String representing the time value in JDBC escape format:
                     *            {@code hh:mm:ss}.
                     * @return The {@code Time} object set to a time corresponding to the given
                     *         time.
                     * @throws IllegalArgumentException
                     *             if the supplied time string is not in JDBC escape format.</member>
        <member name="T:biz.ritter.javapi.sql.Timestamp">
                 * A Java representation of the SQL {@code TIMESTAMP} type. It provides the
                 * capability of representing the SQL {@code TIMESTAMP} nanosecond value, in
                 * addition to the regular date/time value which has millisecond resolution.
                 * <p />
                 * The {@code Timestamp} class consists of a regular date/time value, where only
                 * the integral seconds value is stored, plus a nanoseconds value where the
                 * fractional seconds are stored.
                 * <p />
                 * The addition of the nanosecond value field to the {@code Timestamp} object
                 * makes it significantly different from the {@code java.util.Date} object which
                 * it extends. Users should be aware that {@code Timestamp} objects are not
                 * interchangable with {@code java.util.Date} objects when used outside the
                 * confines of the {@code java.sql} package.
                 *
                 * @see Date
                 * @see Time
                 * @see java.util.Date</member>
        <member name="M:biz.ritter.javapi.sql.Timestamp.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
                     * Returns a {@code Timestamp} corresponding to the time specified by the
                     * supplied values for <i>Year</i>, <i>Month</i>, <i>Date</i>, <i>Hour</i>,
                     * <i>Minutes</i>, <i>Seconds</i> and <i>Nanoseconds</i>.
                     *
                     * @deprecated Use the constructor {@link #Timestamp(long)}.
                     * @param theYear
                     *            specified as the year minus 1900.
                     * @param theMonth
                     *            specified as an integer in the range [0,11].
                     * @param theDate
                     *            specified as an integer in the range [1,31].
                     * @param theHour
                     *            specified as an integer in the range [0,23].
                     * @param theMinute
                     *            specified as an integer in the range [0,59].
                     * @param theSecond
                     *            specified as an integer in the range [0,59].
                     * @param theNano
                     *            which defines the nanosecond value of the timestamp specified
                     *            as an integer in the range [0,999'999'999]
                     * @throws IllegalArgumentException
                     *             if any of the parameters is out of range.</member>
        <member name="M:biz.ritter.javapi.sql.Timestamp.#ctor(System.Int64)">
                     * Returns a {@code Timestamp} object corresponding to the time represented
                     * by a supplied time value.
                     *
                     * @param theTime
                     *            a time value in the format of milliseconds since the Epoch
                     *            (January 1 1970 00:00:00.000 GMT).</member>
        <member name="M:biz.ritter.javapi.sql.Timestamp.after(biz.ritter.javapi.sql.Timestamp)">
                     * Returns {@code true} if this timestamp object is later than the supplied
                     * timestamp, otherwise returns {@code false}.
                     *
                     * @param theTimestamp
                     *            the timestamp to compare with this timestamp object.
                     * @return {@code true} if this {@code Timestamp} object is later than the
                     *         supplied timestamp, {@code false} otherwise.</member>
        <member name="M:biz.ritter.javapi.sql.Timestamp.before(biz.ritter.javapi.sql.Timestamp)">
                     * Returns {@code true} if this {@code Timestamp} object is earlier than the
                     * supplied timestamp, otherwise returns {@code false}.
                     *
                     * @param theTimestamp
                     *            the timestamp to compare with this {@code Timestamp} object.
                     * @return {@code true} if this {@code Timestamp} object is earlier than the
                     *         supplied timestamp, {@code false} otherwise.</member>
        <member name="M:biz.ritter.javapi.sql.Timestamp.compareTo(biz.ritter.javapi.util.Date)">
                     * Compares this {@code Timestamp} object with a supplied {@code Timestamp}
                     * object.
                     *
                     * @param theObject
                     *            the timestamp to compare with this {@code Timestamp} object,
                     *            passed as an {@code Object}.
                     * @return <dd>
                     *         <dl>
                     *         {@code 0} if the two {@code Timestamp} objects are equal in time
                     *         </dl>
                     *         <dl>
                     *         a value {@code &lt; 0} if this {@code Timestamp} object is before
                     *         the supplied {@code Timestamp} and a value
                     *         </dl>
                     *         <dl>
                     *         {@code &gt; 0} if this {@code Timestamp} object is after the
                     *         supplied {@code Timestamp}
                     *         </dl>
                     *         </dd>
                     * @throws ClassCastException
                     *             if the supplied object is not a {@code Timestamp} object.</member>
        <member name="M:biz.ritter.javapi.sql.Timestamp.compareTo(biz.ritter.javapi.sql.Timestamp)">
                     * Compares this {@code Timestamp} object with a supplied {@code Timestamp}
                     * object.
                     *
                     * @param theTimestamp
                     *            the timestamp to compare with this {@code Timestamp} object,
                     *            passed in as a {@code Timestamp}.
                     * @return one of the following:
                     *         <ul>
                     *         <li>{@code 0}, if the two {@code Timestamp} objects are
                     *         equal in time</li>
                     *         <li>{@code &lt; 0}, if this {@code Timestamp} object is before the
                     *         supplied {@code Timestamp}</li>
                     *         <li> {@code &gt; 0}, if this {@code Timestamp} object is after the
                     *         supplied {@code Timestamp}</li>
                     *         </ul></member>
        <member name="M:biz.ritter.javapi.sql.Timestamp.Equals(System.Object)">
            <summary>
            Tests to see if this timestamp is equal to a supplied object.
            </summary>
            <param name="theObject">the object to which this timestamp is compared.</param>
            <returns>
            {@code true} if this {@code Timestamp} object is equal to the
            supplied {@code Timestamp} object<br />{@code false} if the object
            is not a {@code Timestamp} object or if the object is a {@code
            Timestamp} but represents a different instant in time.
            </returns>
        </member>
        <member name="M:biz.ritter.javapi.sql.Timestamp.equals(biz.ritter.javapi.sql.Timestamp)">
                     * Tests to see if this timestamp is equal to a supplied timestamp.
                     *
                     * @param theTimestamp
                     *            the timestamp to compare with this {@code Timestamp} object,
                     *            passed as an {@code Object}.
                     * @return {@code true} if this {@code Timestamp} object is equal to the
                     *         supplied {@code Timestamp} object, {@code false} otherwise.</member>
        <member name="M:biz.ritter.javapi.sql.Timestamp.getNanos">
                     * Gets this {@code Timestamp}'s nanosecond value
                     *
                     * @return The timestamp's nanosecond value, an integer between 0 and
                     *         999,999,999.</member>
        <member name="M:biz.ritter.javapi.sql.Timestamp.getTime">
                     * Returns the time represented by this {@code Timestamp} object, as a long
                     * value containing the number of milliseconds since the Epoch (January 1
                     * 1970, 00:00:00.000 GMT).
                     *
                     * @return the number of milliseconds that have passed since January 1 1970,
                     *         00:00:00.000 GMT.</member>
        <member name="M:biz.ritter.javapi.sql.Timestamp.setNanos(System.Int32)">
                     * Sets the nanosecond value for this {@code Timestamp}.
                     *
                     * @param n
                     *            number of nanoseconds.
                     * @throws IllegalArgumentException
                     *             if number of nanoseconds smaller than 0 or greater than
                     *             999,999,999.</member>
        <member name="M:biz.ritter.javapi.sql.Timestamp.setTime(System.Int64)">
                     * Sets the time represented by this {@code Timestamp} object to the
                     * supplied time, defined as the number of milliseconds since the Epoch
                     * (January 1 1970, 00:00:00.000 GMT).
                     *
                     * @param theTime
                     *            number of milliseconds since the Epoch (January 1 1970,
                     *            00:00:00.000 GMT).</member>
        <member name="M:biz.ritter.javapi.sql.Timestamp.ToString">
                     * Returns the timestamp formatted as a String in the JDBC Timestamp Escape
                     * format, which is {@code "yyyy-mm-dd hh:mm:ss.nnnnnnnnn"}.
                     *
                     * @return A string representing the instant defined by the {@code
                     *         Timestamp}, in JDBC Timestamp escape format.</member>
        <member name="M:biz.ritter.javapi.sql.Timestamp.valueOf(System.String)">
                     * Creates a {@code Timestamp} object with a time value equal to the time
                     * specified by a supplied String holding the time in JDBC timestamp escape
                     * format, which is {@code "yyyy-mm-dd hh:mm:ss.nnnnnnnnn}"
                     *
                     * @param s
                     *            the {@code String} containing a time in JDBC timestamp escape
                     *            format.
                     * @return A {@code Timestamp} object with time value as defined by the
                     *         supplied {@code String}.
                     * @throws IllegalArgumentException
                     *             if the provided string is {@code null}.</member>
        <member name="T:biz.ritter.javapi.sql.Types">
                 * A class which defines constants used to identify generic SQL types, also
                 * called JDBC types. The type constant values are equivalent to those defined
                 * by X/OPEN.</member>
        <member name="F:biz.ritter.javapi.sql.Types.ARRAY">
                     * The type code that identifies the SQL type {@code ARRAY}.</member>
        <member name="F:biz.ritter.javapi.sql.Types.BIGINT">
                     * The type code that identifies the SQL type {@code BIGINT}.</member>
        <member name="F:biz.ritter.javapi.sql.Types.BINARY">
                     * The type code that identifies the SQL type {@code BINARY}.</member>
        <member name="F:biz.ritter.javapi.sql.Types.BIT">
                     * The type code that identifies the SQL type {@code BIT}.</member>
        <member name="F:biz.ritter.javapi.sql.Types.BLOB">
                     * The type code that identifies the SQL type {@code BLOB}.</member>
        <member name="F:biz.ritter.javapi.sql.Types.BOOLEAN">
                     * The type code that identifies the SQL type {@code BOOLEAN}.</member>
        <member name="F:biz.ritter.javapi.sql.Types.CHAR">
                     * The type code that identifies the SQL type {@code CHAR}.</member>
        <member name="F:biz.ritter.javapi.sql.Types.CLOB">
                     * The type code that identifies the SQL type {@code CLOB}.</member>
        <member name="F:biz.ritter.javapi.sql.Types.DATALINK">
                     * The type code that identifies the SQL type {@code DATALINK}.</member>
        <member name="F:biz.ritter.javapi.sql.Types.DATE">
                     * The type code that identifies the SQL type {@code DATE}.</member>
        <member name="F:biz.ritter.javapi.sql.Types.DECIMAL">
                     * The type code that identifies the SQL type {@code DECIMAL}.</member>
        <member name="F:biz.ritter.javapi.sql.Types.DISTINCT">
                     * The type code that identifies the SQL type {@code DISTINCT}.</member>
        <member name="F:biz.ritter.javapi.sql.Types.DOUBLE">
                     * The type code that identifies the SQL type {@code DOUBLE}.</member>
        <member name="F:biz.ritter.javapi.sql.Types.FLOAT">
                     * The type code that identifies the SQL type {@code FLOAT}.</member>
        <member name="F:biz.ritter.javapi.sql.Types.INTEGER">
                     * The type code that identifies the SQL type {@code INTEGER}.</member>
        <member name="F:biz.ritter.javapi.sql.Types.JAVA_OBJECT">
                     * The type code that identifies the SQL type {@code JAVA_OBJECT}.</member>
        <member name="F:biz.ritter.javapi.sql.Types.LONGVARBINARY">
                     * The type code that identifies the SQL type {@code LONGVARBINARY}.</member>
        <member name="F:biz.ritter.javapi.sql.Types.LONGVARCHAR">
                     * The type code that identifies the SQL type {@code LONGVARCHAR}.</member>
        <member name="F:biz.ritter.javapi.sql.Types.NULL">
                     * The type code that identifies the SQL type {@code NULL}.</member>
        <member name="F:biz.ritter.javapi.sql.Types.NUMERIC">
                     * The type code that identifies the SQL type {@code NUMERIC}.</member>
        <member name="F:biz.ritter.javapi.sql.Types.OTHER">
                     * The type code that identifies that the SQL type is database specific and
                     * is mapped to a Java object, accessed via the methods
                     * {@code getObject} and {@code setObject}.</member>
        <member name="F:biz.ritter.javapi.sql.Types.REAL">
                     * The type code that identifies the SQL type {@code REAL}.</member>
        <member name="F:biz.ritter.javapi.sql.Types.REF">
                     * The type code that identifies the SQL type {@code REF}.</member>
        <member name="F:biz.ritter.javapi.sql.Types.SMALLINT">
                     * The type code that identifies the SQL type {@code SMALLINT}.</member>
        <member name="F:biz.ritter.javapi.sql.Types.STRUCT">
                     * The type code that identifies the SQL type {@code STRUCT}.</member>
        <member name="F:biz.ritter.javapi.sql.Types.TIME">
                     * The type code that identifies the SQL type {@code TIME}.</member>
        <member name="F:biz.ritter.javapi.sql.Types.TIMESTAMP">
                     * The type code that identifies the SQL type {@code TIMESTAMP}.</member>
        <member name="F:biz.ritter.javapi.sql.Types.TINYINT">
                     * The type code that identifies the SQL type {@code TINYINT}.</member>
        <member name="F:biz.ritter.javapi.sql.Types.VARBINARY">
                     * The type code that identifies the SQL type {@code VARBINARY}.</member>
        <member name="F:biz.ritter.javapi.sql.Types.VARCHAR">
                     * The type code that identifies the SQL type {@code VARCHAR}.</member>
        <member name="F:biz.ritter.javapi.sql.Types.ROWID">
                     * The type code that identifies the SQL type ROWID.</member>
        <member name="F:biz.ritter.javapi.sql.Types.NCHAR">
                     * The type code that identifies the SQL type NCHAR.</member>
        <member name="F:biz.ritter.javapi.sql.Types.NVARCHAR">
                     * The type code that identifies the SQL type NVARCHAR.</member>
        <member name="F:biz.ritter.javapi.sql.Types.LONGNVARCHAR">
                     * The type code that identifies the SQL type LONGNVARCHAR.</member>
        <member name="F:biz.ritter.javapi.sql.Types.NCLOB">
                     * The type code that identifies the SQL type NCLOB.</member>
        <member name="F:biz.ritter.javapi.sql.Types.SQLXML">
                     * The type code that identifies the SQL type SQLXML.</member>
        <member name="T:biz.ritter.javapi.sql.Wrapper">
                 * This class is an actual usage of the wrapper pattern for JDBC classes.
                 * Developers can get the delegate instance when the instance may be a proxy
                 * class.
                 *
                 * @since 1.6</member>
        <member name="M:biz.ritter.javapi.sql.Wrapper.unwrap``1(biz.ritter.javapi.lang.Class)">
                     * Answers an object that implements the given interface. If the caller is
                     * not a wrapper, a SQLException will be thrown.
                     *
                     * @param iface -
                     *            the class that defines the interface
                     * @return - an object that implements the interface
                     * @throws SQLException -
                     *             if there is no object implementing the specific interface</member>
        <member name="M:biz.ritter.javapi.sql.Wrapper.isWrapperFor(biz.ritter.javapi.lang.Class)">
                     * If the caller is a wrapper of the class or implements the given
                     * interface, the methods return false and vice versa.
                     *
                     * @param iface -
                     *            the class that defines the interface
                     * @return - true if the instance implements the interface
                     * @throws SQLException -
                     *             when an error occurs when judges the object</member>
        <member name="M:biz.ritter.javapi.text.NumberFormat.#ctor">
            <summary>
            Use factory methods to create instance.
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.text.SimpleDateFormat.parse(System.String,biz.ritter.javapi.text.ParsePosition)">
            <summary>
            Parse String with given pattern on ParsePosition to Data object
            </summary>
            <param name="s">
            </param>
            <param name="pos">
            </param>
            <returns>
            </returns>
        </member>
        <member name="T:biz.ritter.javapi.text.spi.NumberFormatProvider">
                 * This abstract class should be extended by service provider which provides
                 * instances of <code>NumberFormat</code> class.</member>
        <member name="M:biz.ritter.javapi.text.spi.NumberFormatProvider.#ctor">
                     * The constructor
                     *</member>
        <member name="M:biz.ritter.javapi.text.spi.NumberFormatProvider.getCurrencyInstance(biz.ritter.javapi.util.Locale)">
                     * Get an instance of <code>NumberFormat</code> class which formats
                     * monetary values for the given locale.
                     *
                     * @param locale
                     *            the specified locale
                     * @return an instance of <code>NumberFormat</code> class
                     * @throws NullPointerException,
                     *             if locale is null
                     * @throws IllegalArgumentException,
                     *             if locale isn't one of the locales returned from
                     *             getAvailableLocales().</member>
        <member name="M:biz.ritter.javapi.text.spi.NumberFormatProvider.getIntegerInstance(biz.ritter.javapi.util.Locale)">
                     * Get an instance of <code>NumberFormat</code> class which formats
                     * integer values for the given locale. The returned number format instance
                     * is configured to round floating point numbers to the nearest integer
                     * using half-even rounding mode for formatting, and to parse only the
                     * integer part of an input string.
                     *
                     * @param locale
                     *            the specified locale
                     * @return an instance of <code>NumberFormat</code> class
                     * @throws NullPointerException,
                     *             if locale is null
                     * @throws IllegalArgumentException,
                     *             if locale isn't one of the locales returned from
                     *             getAvailableLocales().</member>
        <member name="M:biz.ritter.javapi.text.spi.NumberFormatProvider.getNumberInstance(biz.ritter.javapi.util.Locale)">
                     * Get an instance of <code>NumberFormat</code> class which is for general
                     * use for the given locale.
                     *
                     * @param locale
                     *            the specified locale
                     * @return an instance of <code>NumberFormat</code> class
                     * @throws NullPointerException,
                     *             if locale is null
                     * @throws IllegalArgumentException,
                     *             if locale isn't one of the locales returned from
                     *             getAvailableLocales().</member>
        <member name="M:biz.ritter.javapi.text.spi.NumberFormatProvider.getPercentInstance(biz.ritter.javapi.util.Locale)">
                     * Get an instance of <code>NumberFormat</code> class which formats
                     * percentage values for the given locale.
                     *
                     * @param locale
                     *            the specified locale
                     * @return an instance of <code>NumberFormat</code> class
                     * @throws NullPointerException,
                     *             if locale is null
                     * @throws IllegalArgumentException,
                     *             if locale isn't one of the locales returned from
                     *             getAvailableLocales().</member>
        <member name="T:biz.ritter.javapi.text.StringCharacterIterator">
                 * An implementation of {@link CharacterIterator} for strings.</member>
        <member name="M:biz.ritter.javapi.text.StringCharacterIterator.#ctor(System.String)">
                     * Constructs a new {@code StringCharacterIterator} on the specified string.
                     * The begin and current indices are set to the beginning of the string, the
                     * end index is set to the length of the string.
                     *
                     * @param value
                     *            the source string to iterate over.</member>
        <member name="M:biz.ritter.javapi.text.StringCharacterIterator.#ctor(System.String,System.Int32)">
                     * Constructs a new {@code StringCharacterIterator} on the specified string
                     * with the current index set to the specified value. The begin index is set
                     * to the beginning of the string, the end index is set to the length of the
                     * string.
                     *
                     * @param value
                     *            the source string to iterate over.
                     * @param location
                     *            the current index.
                     * @throws IllegalArgumentException
                     *            if {@code location} is negative or greater than the length
                     *            of the source string.</member>
        <member name="M:biz.ritter.javapi.text.StringCharacterIterator.#ctor(System.String,System.Int32,System.Int32,System.Int32)">
                     * Constructs a new {@code StringCharacterIterator} on the specified string
                     * with the begin, end and current index set to the specified values.
                     *
                     * @param value
                     *            the source string to iterate over.
                     * @param start
                     *            the index of the first character to iterate.
                     * @param end
                     *            the index one past the last character to iterate.
                     * @param location
                     *            the current index.
                     * @throws IllegalArgumentException
                     *            if {@code start &lt; 0}, {@code start &gt; end}, {@code location &lt;
                     *            start}, {@code location &gt; end} or if {@code end} is greater
                     *            than the length of {@code value}.</member>
        <member name="M:biz.ritter.javapi.text.StringCharacterIterator.clone">
                     * Returns a new {@code StringCharacterIterator} with the same source
                     * string, begin, end, and current index as this iterator.
                     *
                     * @return a shallow copy of this iterator.
                     * @see java.lang.Cloneable</member>
        <member name="M:biz.ritter.javapi.text.StringCharacterIterator.current">
                     * Returns the character at the current index in the source string.
                     *
                     * @return the current character, or {@code CharacterIteratorConstants.DONE} if the current index is
                     *         past the end.</member>
        <member name="M:biz.ritter.javapi.text.StringCharacterIterator.Equals(System.Object)">
                     * Compares the specified object with this {@code StringCharacterIterator}
                     * and indicates if they are equal. In order to be equal, {@code object}
                     * must be an instance of {@code StringCharacterIterator} that iterates over
                     * the same sequence of characters with the same index.
                     *
                     * @param object
                     *            the object to compare with this object.
                     * @return {@code true} if the specified object is equal to this
                     *         {@code StringCharacterIterator}; {@code false} otherwise.
                     * @see #hashCode</member>
        <member name="M:biz.ritter.javapi.text.StringCharacterIterator.first">
                     * Sets the current position to the begin index and returns the character at
                     * the new position in the source string.
                     *
                     * @return the character at the begin index or {@code CharacterIteratorConstants.DONE} if the begin
                     *         index is equal to the end index.</member>
        <member name="M:biz.ritter.javapi.text.StringCharacterIterator.getBeginIndex">
                     * Returns the begin index in the source string.
                     *
                     * @return the index of the first character of the iteration.</member>
        <member name="M:biz.ritter.javapi.text.StringCharacterIterator.getEndIndex">
                     * Returns the end index in the source string.
                     *
                     * @return the index one past the last character of the iteration.</member>
        <member name="M:biz.ritter.javapi.text.StringCharacterIterator.getIndex">
                     * Returns the current index in the source string.
                     *
                     * @return the current index.</member>
        <member name="M:biz.ritter.javapi.text.StringCharacterIterator.last">
                     * Sets the current position to the end index - 1 and returns the character
                     * at the new position.
                     *
                     * @return the character before the end index or {@code CharacterIteratorConstants.DONE} if the begin
                     *         index is equal to the end index.</member>
        <member name="M:biz.ritter.javapi.text.StringCharacterIterator.next">
                     * Increments the current index and returns the character at the new index.
                     *
                     * @return the character at the next index, or {@code CharacterIteratorConstants.DONE} if the next
                     *         index would be past the end.</member>
        <member name="M:biz.ritter.javapi.text.StringCharacterIterator.previous">
                     * Decrements the current index and returns the character at the new index.
                     *
                     * @return the character at the previous index, or {@code CharacterIteratorConstants.DONE} if the
                     *         previous index would be past the beginning.</member>
        <member name="M:biz.ritter.javapi.text.StringCharacterIterator.setIndex(System.Int32)">
                     * Sets the current index in the source string.
                     *
                     * @param location
                     *            the index the current position is set to.
                     * @return the character at the new index, or {@code CharacterIteratorConstants.DONE} if
                     *         {@code location} is set to the end index.
                     * @throws IllegalArgumentException
                     *            if {@code location} is smaller than the begin index or greater
                     *            than the end index.</member>
        <member name="M:biz.ritter.javapi.text.StringCharacterIterator.setText(System.String)">
                     * Sets the source string to iterate over. The begin and end positions are
                     * set to the start and end of this string.
                     *
                     * @param value
                     *            the new source string.</member>
        <member name="T:biz.ritter.javapi.util.BitSet">
                 * The {@code BitSet} class implements a bit field. Each element in a
                 * {@code BitSet} can be on(1) or off(0). A {@code BitSet} is created with a
                 * given size and grows if this size is exceeded. Growth is always rounded to a
                 * 64 bit boundary.</member>
        <member name="F:biz.ritter.javapi.util.BitSet.serialVersionUID">
                 * The {@code BitSet} class implements a bit field. Each element in a
                 * {@code BitSet} can be on(1) or off(0). A {@code BitSet} is created with a
                 * given size and grows if this size is exceeded. Growth is always rounded to a
                 * 64 bit boundary.</member>
        <member name="M:biz.ritter.javapi.util.BitSet.#ctor">
                     * Create a new {@code BitSet} with size equal to 64 bits.
                     *
                     * @see #clear(int)
                     * @see #set(int)
                     * @see #clear()
                     * @see #clear(int, int)
                     * @see #set(int, boolean)
                     * @see #set(int, int)
                     * @see #set(int, int, boolean)</member>
        <member name="M:biz.ritter.javapi.util.BitSet.#ctor(System.Int32)">
                     * Create a new {@code BitSet} with size equal to nbits. If nbits is not a
                     * multiple of 64, then create a {@code BitSet} with size nbits rounded to
                     * the next closest multiple of 64.
                     *
                     * @param nbits
                     *            the size of the bit set.
                     * @throws NegativeArraySizeException
                     *             if {@code nbits} is negative.
                     * @see #clear(int)
                     * @see #set(int)
                     * @see #clear()
                     * @see #clear(int, int)
                     * @see #set(int, boolean)
                     * @see #set(int, int)
                     * @see #set(int, int, boolean)</member>
        <member name="M:biz.ritter.javapi.util.BitSet.#ctor(System.Int64[],System.Boolean,System.Int32,System.Boolean)">
                     * Private constructor called from get(int, int) method
                     *
                     * @param bits
                     *            the size of the bit set</member>
        <member name="M:biz.ritter.javapi.util.BitSet.clone">
                     * Creates a copy of this {@code BitSet}.
                     *
                     * @return a copy of this {@code BitSet}.</member>
        <member name="M:biz.ritter.javapi.util.BitSet.Equals(System.Object)">
                     * Compares the argument to this {@code BitSet} and returns whether they are
                     * equal. The object must be an instance of {@code BitSet} with the same
                     * bits set.
                     *
                     * @param obj
                     *            the {@code BitSet} object to compare.
                     * @return a {@code boolean} indicating whether or not this {@code BitSet} and
                     *         {@code obj} are equal.
                     * @see #hashCode</member>
        <member name="M:biz.ritter.javapi.util.BitSet.growLength(System.Int32)">
                     * Increase the size of the internal array to accommodate {@code pos} bits.
                     * The new array max index will be a multiple of 64.
                     *
                     * @param len
                     *            the index the new array needs to be able to access.</member>
        <member name="M:biz.ritter.javapi.util.BitSet.GetHashCode">
                     * Computes the hash code for this {@code BitSet}. If two {@code BitSet}s are equal
                     * the have to return the same result for {@code hashCode()}.
                     *
                     * @return the {@code int} representing the hash code for this bit
                     *         set.
                     * @see #equals
                     * @see java.util.Hashtable</member>
        <member name="M:biz.ritter.javapi.util.BitSet.get(System.Int32)">
                     * Retrieves the bit at index {@code pos}. Grows the {@code BitSet} if
                     * {@code pos &gt; size}.
                     *
                     * @param pos
                     *            the index of the bit to be retrieved.
                     * @return {@code true} if the bit at {@code pos} is set,
                     *         {@code false} otherwise.
                     * @throws IndexOutOfBoundsException
                     *             if {@code pos} is negative.
                     * @see #clear(int)
                     * @see #set(int)
                     * @see #clear()
                     * @see #clear(int, int)
                     * @see #set(int, boolean)
                     * @see #set(int, int)
                     * @see #set(int, int, boolean)</member>
        <member name="M:biz.ritter.javapi.util.BitSet.get(System.Int32,System.Int32)">
                     * Retrieves the bits starting from {@code pos1} to {@code pos2} and returns
                     * back a new bitset made of these bits. Grows the {@code BitSet} if
                     * {@code pos2 &gt; size}.
                     *
                     * @param pos1
                     *            beginning position.
                     * @param pos2
                     *            ending position.
                     * @return new bitset of the range specified.
                     * @throws IndexOutOfBoundsException
                     *             if {@code pos1} or {@code pos2} is negative, or if
                     *             {@code pos2} is smaller than {@code pos1}.
                     * @see #get(int)</member>
        <member name="M:biz.ritter.javapi.util.BitSet.set(System.Int32)">
                     * Sets the bit at index {@code pos} to 1. Grows the {@code BitSet} if
                     * {@code pos &gt; size}.
                     *
                     * @param pos
                     *            the index of the bit to set.
                     * @throws IndexOutOfBoundsException
                     *             if {@code pos} is negative.
                     * @see #clear(int)
                     * @see #clear()
                     * @see #clear(int, int)</member>
        <member name="M:biz.ritter.javapi.util.BitSet.set(System.Int32,System.Boolean)">
                     * Sets the bit at index {@code pos} to {@code val}. Grows the
                     * {@code BitSet} if {@code pos &gt; size}.
                     *
                     * @param pos
                     *            the index of the bit to set.
                     * @param val
                     *            value to set the bit.
                     * @throws IndexOutOfBoundsException
                     *             if {@code pos} is negative.
                     * @see #set(int)</member>
        <member name="M:biz.ritter.javapi.util.BitSet.set(System.Int32,System.Int32)">
                     * Sets the bits starting from {@code pos1} to {@code pos2}. Grows the
                     * {@code BitSet} if {@code pos2 &gt; size}.
                     *
                     * @param pos1
                     *            beginning position.
                     * @param pos2
                     *            ending position.
                     * @throws IndexOutOfBoundsException
                     *             if {@code pos1} or {@code pos2} is negative, or if
                     *             {@code pos2} is smaller than {@code pos1}.
                     * @see #set(int)</member>
        <member name="M:biz.ritter.javapi.util.BitSet.set(System.Int32,System.Int32,System.Boolean)">
                     * Sets the bits starting from {@code pos1} to {@code pos2} to the given
                     * {@code val}. Grows the {@code BitSet} if {@code pos2 &gt; size}.
                     *
                     * @param pos1
                     *            beginning position.
                     * @param pos2
                     *            ending position.
                     * @param val
                     *            value to set these bits.
                     * @throws IndexOutOfBoundsException
                     *             if {@code pos1} or {@code pos2} is negative, or if
                     *             {@code pos2} is smaller than {@code pos1}.
                     * @see #set(int,int)</member>
        <member name="M:biz.ritter.javapi.util.BitSet.clear">
                     * Clears all the bits in this {@code BitSet}.
                     *
                     * @see #clear(int)
                     * @see #clear(int, int)</member>
        <member name="M:biz.ritter.javapi.util.BitSet.clear(System.Int32)">
                     * Clears the bit at index {@code pos}. Grows the {@code BitSet} if
                     * {@code pos &gt; size}.
                     *
                     * @param pos
                     *            the index of the bit to clear.
                     * @throws IndexOutOfBoundsException
                     *             if {@code pos} is negative.
                     * @see #clear(int, int)</member>
        <member name="M:biz.ritter.javapi.util.BitSet.clear(System.Int32,System.Int32)">
                     * Clears the bits starting from {@code pos1} to {@code pos2}. Grows the
                     * {@code BitSet} if {@code pos2 &gt; size}.
                     *
                     * @param pos1
                     *            beginning position.
                     * @param pos2
                     *            ending position.
                     * @throws IndexOutOfBoundsException
                     *             if {@code pos1} or {@code pos2} is negative, or if
                     *             {@code pos2} is smaller than {@code pos1}.
                     * @see #clear(int)</member>
        <member name="M:biz.ritter.javapi.util.BitSet.flip(System.Int32)">
                     * Flips the bit at index {@code pos}. Grows the {@code BitSet} if
                     * {@code pos &gt; size}.
                     *
                     * @param pos
                     *            the index of the bit to flip.
                     * @throws IndexOutOfBoundsException
                     *             if {@code pos} is negative.
                     * @see #flip(int, int)</member>
        <member name="M:biz.ritter.javapi.util.BitSet.flip(System.Int32,System.Int32)">
                     * Flips the bits starting from {@code pos1} to {@code pos2}. Grows the
                     * {@code BitSet} if {@code pos2 &gt; size}.
                     *
                     * @param pos1
                     *            beginning position.
                     * @param pos2
                     *            ending position.
                     * @throws IndexOutOfBoundsException
                     *             if {@code pos1} or {@code pos2} is negative, or if
                     *             {@code pos2} is smaller than {@code pos1}.
                     * @see #flip(int)</member>
        <member name="M:biz.ritter.javapi.util.BitSet.intersects(biz.ritter.javapi.util.BitSet)">
                     * Checks if these two {@code BitSet}s have at least one bit set to true in the same
                     * position.
                     *
                     * @param bs
                     *            {@code BitSet} used to calculate the intersection.
                     * @return {@code true} if bs intersects with this {@code BitSet},
                     *         {@code false} otherwise.</member>
        <member name="M:biz.ritter.javapi.util.BitSet.and(biz.ritter.javapi.util.BitSet)">
                     * Performs the logical AND of this {@code BitSet} with another
                     * {@code BitSet}. The values of this {@code BitSet} are changed accordingly.
                     *
                     * @param bs
                     *            {@code BitSet} to AND with.
                     * @see #or
                     * @see #xor</member>
        <member name="M:biz.ritter.javapi.util.BitSet.andNot(biz.ritter.javapi.util.BitSet)">
                     * Clears all bits in the receiver which are also set in the parameter
                     * {@code BitSet}. The values of this {@code BitSet} are changed accordingly.
                     *
                     * @param bs
                     *            {@code BitSet} to ANDNOT with.</member>
        <member name="M:biz.ritter.javapi.util.BitSet.or(biz.ritter.javapi.util.BitSet)">
                     * Performs the logical OR of this {@code BitSet} with another {@code BitSet}.
                     * The values of this {@code BitSet} are changed accordingly.
                     *
                     * @param bs
                     *            {@code BitSet} to OR with.
                     * @see #xor
                     * @see #and</member>
        <member name="M:biz.ritter.javapi.util.BitSet.xor(biz.ritter.javapi.util.BitSet)">
                     * Performs the logical XOR of this {@code BitSet} with another {@code BitSet}.
                     * The values of this {@code BitSet} are changed accordingly.
                     *
                     * @param bs
                     *            {@code BitSet} to XOR with.
                     * @see #or
                     * @see #and</member>
        <member name="M:biz.ritter.javapi.util.BitSet.size">
                     * Returns the number of bits this {@code BitSet} has.
                     *
                     * @return the number of bits contained in this {@code BitSet}.
                     * @see #length</member>
        <member name="M:biz.ritter.javapi.util.BitSet.length">
                     * Returns the number of bits up to and including the highest bit set.
                     *
                     * @return the length of the {@code BitSet}.</member>
        <member name="M:biz.ritter.javapi.util.BitSet.ToString">
                     * Returns a string containing a concise, human-readable description of the
                     * receiver.
                     *
                     * @return a comma delimited list of the indices of all bits that are set.</member>
        <member name="M:biz.ritter.javapi.util.BitSet.nextSetBit(System.Int32)">
                     * Returns the position of the first bit that is {@code true} on or after {@code pos}.
                     *
                     * @param pos
                     *            the starting position (inclusive).
                     * @return -1 if there is no bits that are set to {@code true} on or after {@code pos}.</member>
        <member name="M:biz.ritter.javapi.util.BitSet.nextClearBit(System.Int32)">
                     * Returns the position of the first bit that is {@code false} on or after {@code pos}.
                     *
                     * @param pos
                     *            the starting position (inclusive).
                     * @return the position of the next bit set to {@code false}, even if it is further
                     *         than this {@code BitSet}'s size.</member>
        <member name="M:biz.ritter.javapi.util.BitSet.isEmpty">
                     * Returns true if all the bits in this {@code BitSet} are set to false.
                     *
                     * @return {@code true} if the {@code BitSet} is empty,
                     *         {@code false} otherwise.</member>
        <member name="M:biz.ritter.javapi.util.BitSet.cardinality">
                     * Returns the number of bits that are {@code true} in this {@code BitSet}.
                     *
                     * @return the number of {@code true} bits in the set.</member>
        <member name="T:biz.ritter.javapi.util.concurrent.ConcurrentMap`2">
                 * A {@link java.util.Map} providing additional atomic
                 * <tt>putIfAbsent</tt>, <tt>remove</tt>, and <tt>replace</tt> methods.
                 *
                 * <p />Memory consistency effects: As with other concurrent
                 * collections, actions in a thread prior to placing an object into a
                 * {@code ConcurrentMap} as a key or value
                 * <a href="package-summary.html#MemoryVisibility"><i>happen-before</i></a>
                 * actions subsequent to the access or removal of that object from
                 * the {@code ConcurrentMap} in another thread.
                 *
                 * <p />This interface is a member of the
                 * <a href="{@docRoot}/../technotes/guides/collections/index.html">
                 * Java Collections Framework</a>.
                 *
                 * @since 1.5
                 * @author Doug Lea
                 * @param K the type of keys maintained by this map
                 * @param V the type of mapped values</member>
        <member name="M:biz.ritter.javapi.util.concurrent.ConcurrentMap`2.putIfAbsent(`0,`1)">
                     * If the specified key is not already associated
                     * with a value, associate it with the given value.
                     * This is equivalent to
                     * <pre>
                     *   if (!map.containsKey(key))
                     *       return map.put(key, value);
                     *   else
                     *       return map.get(key);</pre>
                     * except that the action is performed atomically.
                     *
                     * @param key key with which the specified value is to be associated
                     * @param value value to be associated with the specified key
                     * @return the previous value associated with the specified key, or
                     *         <tt>null</tt> if there was no mapping for the key.
                     *         (A <tt>null</tt> return can also indicate that the map
                     *         previously associated <tt>null</tt> with the key,
                     *         if the implementation supports null values.)
                     * @throws UnsupportedOperationException if the <tt>put</tt> operation
                     *         is not supported by this map
                     * @throws ClassCastException if the class of the specified key or value
                     *         prevents it from being stored in this map
                     * @throws NullPointerException if the specified key or value is null,
                     *         and this map does not permit null keys or values
                     * @throws IllegalArgumentException if some property of the specified key
                     *         or value prevents it from being stored in this map
                     *</member>
        <member name="M:biz.ritter.javapi.util.concurrent.ConcurrentMap`2.remove(System.Object,System.Object)">
                     * Removes the entry for a key only if currently mapped to a given value.
                     * This is equivalent to
                     * <pre>
                     *   if (map.containsKey(key) &amp;&amp; map.get(key).equals(value)) {
                     *       map.remove(key);
                     *       return true;
                     *   } else return false;</pre>
                     * except that the action is performed atomically.
                     *
                     * @param key key with which the specified value is associated
                     * @param value value expected to be associated with the specified key
                     * @return <tt>true</tt> if the value was removed
                     * @throws UnsupportedOperationException if the <tt>remove</tt> operation
                     *         is not supported by this map
                     * @throws ClassCastException if the key or value is of an inappropriate
                     *         type for this map (optional)
                     * @throws NullPointerException if the specified key or value is null,
                     *         and this map does not permit null keys or values (optional)</member>
        <member name="M:biz.ritter.javapi.util.concurrent.ConcurrentMap`2.replace(`0,`1,`1)">
                     * Replaces the entry for a key only if currently mapped to a given value.
                     * This is equivalent to
                     * <pre>
                     *   if (map.containsKey(key) &amp;&amp; map.get(key).equals(oldValue)) {
                     *       map.put(key, newValue);
                     *       return true;
                     *   } else return false;</pre>
                     * except that the action is performed atomically.
                     *
                     * @param key key with which the specified value is associated
                     * @param oldValue value expected to be associated with the specified key
                     * @param newValue value to be associated with the specified key
                     * @return <tt>true</tt> if the value was replaced
                     * @throws UnsupportedOperationException if the <tt>put</tt> operation
                     *         is not supported by this map
                     * @throws ClassCastException if the class of a specified key or value
                     *         prevents it from being stored in this map
                     * @throws NullPointerException if a specified key or value is null,
                     *         and this map does not permit null keys or values
                     * @throws IllegalArgumentException if some property of a specified key
                     *         or value prevents it from being stored in this map</member>
        <member name="M:biz.ritter.javapi.util.concurrent.ConcurrentMap`2.replace(`0,`1)">
                     * Replaces the entry for a key only if currently mapped to some value.
                     * This is equivalent to
                     * <pre>
                     *   if (map.containsKey(key)) {
                     *       return map.put(key, value);
                     *   } else return null;</pre>
                     * except that the action is performed atomically.
                     *
                     * @param key key with which the specified value is associated
                     * @param value value to be associated with the specified key
                     * @return the previous value associated with the specified key, or
                     *         <tt>null</tt> if there was no mapping for the key.
                     *         (A <tt>null</tt> return can also indicate that the map
                     *         previously associated <tt>null</tt> with the key,
                     *         if the implementation supports null values.)
                     * @throws UnsupportedOperationException if the <tt>put</tt> operation
                     *         is not supported by this map
                     * @throws ClassCastException if the class of the specified key or value
                     *         prevents it from being stored in this map
                     * @throws NullPointerException if the specified key or value is null,
                     *         and this map does not permit null keys or values
                     * @throws IllegalArgumentException if some property of the specified key
                     *         or value prevents it from being stored in this map</member>
        <member name="T:biz.ritter.javapi.util.concurrent.ConcurrentNavigableMap`2">
                 * A {@link ConcurrentMap} supporting {@link NavigableMap} operations,
                 * and recursively so for its navigable sub-maps.
                 *
                 * <p />This interface is a member of the
                 * <a href="{@docRoot}/../technotes/guides/collections/index.html">
                 * Java Collections Framework</a>.
                 *
                 * @author Doug Lea
                 * @param K the type of keys maintained by this map
                 * @param V the type of mapped values
                 * @since 1.6</member>
        <member name="M:biz.ritter.javapi.util.concurrent.ConcurrentNavigableMap`2.subMap(`0,System.Boolean,`0,System.Boolean)">
                     * @throws ClassCastException       {@inheritDoc}
                     * @throws NullPointerException     {@inheritDoc}
                     * @throws IllegalArgumentException {@inheritDoc}</member>
        <member name="M:biz.ritter.javapi.util.concurrent.ConcurrentNavigableMap`2.headMap(`0,System.Boolean)">
                     * @throws ClassCastException       {@inheritDoc}
                     * @throws NullPointerException     {@inheritDoc}
                     * @throws IllegalArgumentException {@inheritDoc}</member>
        <member name="M:biz.ritter.javapi.util.concurrent.ConcurrentNavigableMap`2.tailMap(`0,System.Boolean)">
                     * @throws ClassCastException       {@inheritDoc}
                     * @throws NullPointerException     {@inheritDoc}
                     * @throws IllegalArgumentException {@inheritDoc}</member>
        <member name="M:biz.ritter.javapi.util.concurrent.ConcurrentNavigableMap`2.subMap(`0,`0)">
                     * @throws ClassCastException       {@inheritDoc}
                     * @throws NullPointerException     {@inheritDoc}
                     * @throws IllegalArgumentException {@inheritDoc}</member>
        <member name="M:biz.ritter.javapi.util.concurrent.ConcurrentNavigableMap`2.headMap(`0)">
                     * @throws ClassCastException       {@inheritDoc}
                     * @throws NullPointerException     {@inheritDoc}
                     * @throws IllegalArgumentException {@inheritDoc}</member>
        <member name="M:biz.ritter.javapi.util.concurrent.ConcurrentNavigableMap`2.tailMap(`0)">
                     * @throws ClassCastException       {@inheritDoc}
                     * @throws NullPointerException     {@inheritDoc}
                     * @throws IllegalArgumentException {@inheritDoc}</member>
        <member name="M:biz.ritter.javapi.util.concurrent.ConcurrentNavigableMap`2.descendingMap">
                     * Returns a reverse order view of the mappings contained in this map.
                     * The descending map is backed by this map, so changes to the map are
                     * reflected in the descending map, and vice-versa.
                     *
                     * <p />The returned map has an ordering equivalent to
                     * <tt>{@link Collections#reverseOrder(Comparator) Collections.reverseOrder}(comparator())</tt>.
                     * The expression {@code m.descendingMap().descendingMap()} returns a
                     * view of {@code m} essentially equivalent to {@code m}.
                     *
                     * @return a reverse order view of this map</member>
        <member name="M:biz.ritter.javapi.util.concurrent.ConcurrentNavigableMap`2.navigableKeySet">
                     * Returns a {@link NavigableSet} view of the keys contained in this map.
                     * The set's iterator returns the keys in ascending order.
                     * The set is backed by the map, so changes to the map are
                     * reflected in the set, and vice-versa.  The set supports element
                     * removal, which removes the corresponding mapping from the map,
                     * via the {@code Iterator.remove}, {@code Set.remove},
                     * {@code removeAll}, {@code retainAll}, and {@code clear}
                     * operations.  It does not support the {@code add} or {@code addAll}
                     * operations.
                     *
                     * <p />The view's {@code iterator} is a "weakly consistent" iterator
                     * that will never throw {@link ConcurrentModificationException},
                     * and guarantees to traverse elements as they existed upon
                     * construction of the iterator, and may (but is not guaranteed to)
                     * reflect any modifications subsequent to construction.
                     *
                     * @return a navigable set view of the keys in this map</member>
        <member name="M:biz.ritter.javapi.util.concurrent.ConcurrentNavigableMap`2.keySet">
                     * Returns a {@link NavigableSet} view of the keys contained in this map.
                     * The set's iterator returns the keys in ascending order.
                     * The set is backed by the map, so changes to the map are
                     * reflected in the set, and vice-versa.  The set supports element
                     * removal, which removes the corresponding mapping from the map,
                     * via the {@code Iterator.remove}, {@code Set.remove},
                     * {@code removeAll}, {@code retainAll}, and {@code clear}
                     * operations.  It does not support the {@code add} or {@code addAll}
                     * operations.
                     *
                     * <p />The view's {@code iterator} is a "weakly consistent" iterator
                     * that will never throw {@link ConcurrentModificationException},
                     * and guarantees to traverse elements as they existed upon
                     * construction of the iterator, and may (but is not guaranteed to)
                     * reflect any modifications subsequent to construction.
                     *
                     * <p />This method is equivalent to method {@code navigableKeySet}.
                     *
                     * @return a navigable set view of the keys in this map</member>
        <member name="M:biz.ritter.javapi.util.concurrent.ConcurrentNavigableMap`2.descendingKeySet">
                     * Returns a reverse order {@link NavigableSet} view of the keys contained in this map.
                     * The set's iterator returns the keys in descending order.
                     * The set is backed by the map, so changes to the map are
                     * reflected in the set, and vice-versa.  The set supports element
                     * removal, which removes the corresponding mapping from the map,
                     * via the {@code Iterator.remove}, {@code Set.remove},
                     * {@code removeAll}, {@code retainAll}, and {@code clear}
                     * operations.  It does not support the {@code add} or {@code addAll}
                     * operations.
                     *
                     * <p />The view's {@code iterator} is a "weakly consistent" iterator
                     * that will never throw {@link ConcurrentModificationException},
                     * and guarantees to traverse elements as they existed upon
                     * construction of the iterator, and may (but is not guaranteed to)
                     * reflect any modifications subsequent to construction.
                     *
                     * @return a reverse order navigable set view of the keys in this map</member>
        <member name="T:biz.ritter.javapi.util.DuplicateFormatFlagsException">
                 * The unchecked exception will be thrown out if there are duplicate flags given
                 * out in the format specifier.
                 *
                 * @see java.lang.RuntimeException</member>
        <member name="M:biz.ritter.javapi.util.DuplicateFormatFlagsException.#ctor(System.String)">
                     * Constructs a new {@code DuplicateFormatFlagsException} with the flags
                     * containing duplicates.
                     *
                     * @param f
                     *           the format flags that contain a duplicate flag.</member>
        <member name="M:biz.ritter.javapi.util.DuplicateFormatFlagsException.getFlags">
                     * Returns the format flags that contain a duplicate flag.
                     *
                     * @return the format flags that contain a duplicate flag.</member>
        <member name="M:biz.ritter.javapi.util.DuplicateFormatFlagsException.getMessage">
                     * Returns the message string of the DuplicateFormatFlagsException.
                     *
                     * @return the message string of the DuplicateFormatFlagsException.</member>
        <member name="T:biz.ritter.javapi.util.FormatFlagsConversionMismatchException">
                 * A {@code FormatFlagsConversionMismatchException} will be thrown if a
                 * conversion and the flags are incompatible.
                 *
                 * @see java.lang.RuntimeException</member>
        <member name="M:biz.ritter.javapi.util.FormatFlagsConversionMismatchException.#ctor(System.String,System.Char)">
                     * Constructs a new {@code FormatFlagsConversionMismatchException} with the
                     * flags and conversion specified.
                     *
                     * @param f
                     *           the flags.
                     * @param c
                     *           the conversion.</member>
        <member name="M:biz.ritter.javapi.util.FormatFlagsConversionMismatchException.getFlags">
                     * Returns the incompatible format flag.
                     *
                     * @return the incompatible format flag.</member>
        <member name="M:biz.ritter.javapi.util.FormatFlagsConversionMismatchException.getConversion">
                     * Returns the incompatible conversion.
                     *
                     * @return the incompatible conversion.</member>
        <member name="M:biz.ritter.javapi.util.FormatFlagsConversionMismatchException.getMessage">
                     * Returns the message string of the {@code FormatFlagsConversionMismatchException}.
                     *
                     * @return the message string of the {@code FormatFlagsConversionMismatchException}.</member>
        <member name="T:biz.ritter.javapi.util.Formattable">
                 * Classes that handle custom formatting for the 's' specifier of {@code Formatter}
                 * should implement the {@code Formattable} interface. It gives basic control over
                 * formatting objects.
                 *
                 * @see Formatter</member>
        <member name="M:biz.ritter.javapi.util.Formattable.formatTo(biz.ritter.javapi.util.Formatter,System.Int32,System.Int32,System.Int32)">
                     * Formats the object using the specified {@code Formatter}.
                     *
                     * @param formatter
                     *            the {@code Formatter} to use.
                     * @param flags
                     *            the flags applied to the output format, which is a bitmask
                     *            that is any combination of {@code FormattableFlags.LEFT_JUSTIFY},
                     *            {@code FormattableFlags.UPPERCASE}, and {@code FormattableFlags.ALTERNATE}. If
                     *            no such flag is set, the output is formatted by the default
                     *            formatting of the implementation.
                     * @param width
                     *            the minimum number of characters that should be written to the
                     *            output. If the length of the converted value is less than {@code width}
                     *            Additional space characters (' ') are added to the output if the
                     *            as needed to make up the difference. These spaces are added at the
                     *            beginning by default unless the flag
                     *            FormattableFlags.LEFT_JUSTIFY is set, which denotes that
                     *            padding should be added at the end. If width is -1, then
                     *            minimum length is not enforced.
                     * @param precision
                     *            the maximum number of characters that can be written to the
                     *            output. The length of the output is trimmed down to this size
                     *            before the width padding is applied. If the precision
                     *            is -1, then maximum length is not enforced.
                     * @throws IllegalFormatException
                     *             if any of the parameters is not supported.</member>
        <member name="T:biz.ritter.javapi.util.FormattableFlags">
                 * FormattableFlags are used as a parameter to
                 * {@link Formattable#formatTo(Formatter, int, int, int)} and change the output
                 * format in {@code Formattable}s. The validation and interpretation of the
                 * flags must be done by the implementations.
                 *
                 * @see Formattable</member>
        <member name="F:biz.ritter.javapi.util.FormattableFlags.LEFT_JUSTIFY">
                     * Denotes the output is to be left-justified. In order to fill the minimum
                     * width requirement, spaces('\u0020') will be appended at the end of the
                     * specified output element. If no such flag is set, the output is
                     * right-justified.
                     *
                     * The flag corresponds to '-' ('\u002d') in the format specifier.</member>
        <member name="F:biz.ritter.javapi.util.FormattableFlags.UPPERCASE">
                     * Denotes the output is to be converted to upper case in the way the locale
                     * parameter of Formatter.formatTo() requires. The output has the same
                     * effect as {@code String.toUpperCase(java.util.Locale)}.
                     *
                     * This flag corresponds to {@code '^' ('\u005e')} in the format specifier.</member>
        <member name="F:biz.ritter.javapi.util.FormattableFlags.ALTERNATE">
                     * Denotes the output is to be formatted in an alternate form. The definition
                     * of the alternate form is determined by the {@code Formattable}.
                     *
                     * This flag corresponds to {@code '#' ('\u0023')} in the format specifier.</member>
        <member name="M:biz.ritter.javapi.util.regex.Pattern.matches(System.String,biz.ritter.javapi.lang.CharSequence)">
            <summary>
            Match input agains pattern.
            </summary>
            <param name="pattern">
            </param>
            <param name="input">
            </param>
            <returns>
            </returns>
        </member>
        <member name="T:biz.ritter.javapi.util.TimeZone">
                 * {@code TimeZone} represents a time zone offset, taking into account
                 * daylight savings.
                 * <p />
                 * Typically, you get a {@code TimeZone} using {@code getDefault}
                 * which creates a {@code TimeZone} based on the time zone where the
                 * program is running. For example, for a program running in Japan,
                 * {@code getDefault} creates a {@code TimeZone} object based on
                 * Japanese Standard Time.
                 * <p />
                 * You can also get a {@code TimeZone} using {@code getTimeZone}
                 * along with a time zone ID. For instance, the time zone ID for the U.S.
                 * Pacific Time zone is "America/Los_Angeles". So, you can get a U.S. Pacific
                 * Time {@code TimeZone} object with the following: <blockquote>
                 *
                 * <pre>
                 * TimeZone tz = TimeZone.getTimeZone("America/Los_Angeles");
                 * </pre>
                 *
                 * </blockquote> You can use the {@code getAvailableIDs} method to iterate
                 * through all the supported time zone IDs. You can then choose a supported ID
                 * to get a {@code TimeZone}. If the time zone you want is not
                 * represented by one of the supported IDs, then you can create a custom time
                 * zone ID with the following syntax: <blockquote>
                 *
                 * <pre>
                 * GMT[+|-]hh[[:]mm]
                 * </pre>
                 *
                 * </blockquote> For example, you might specify GMT+14:00 as a custom time zone
                 * ID. The {@code TimeZone} that is returned when you specify a custom
                 * time zone ID does not include daylight savings time.
                 * <p />
                 * For compatibility with JDK 1.1.x, some other three-letter time zone IDs (such
                 * as "PST", "CTT", "AST") are also supported. However, <strong>their use is
                 * deprecated</strong> because the same abbreviation is often used for multiple
                 * time zones (for example, "CST" could be U.S. "Central Standard Time" and
                 * "China Standard Time"), and the Java platform can then only recognize one of
                 * them.
                 * <p />
                 * Please note the type returned by factory methods, i.e. {@code getDefault()}
                 * and {@code getTimeZone(String)}, is implementation dependent, so it may
                 * introduce serialization incompatibility issues between different
                 * implementations.
                 *
                 * @see GregorianCalendar
                 * @see SimpleTimeZone</member>
        <member name="F:biz.ritter.javapi.util.TimeZone.SHORT">
                     * The SHORT display name style.</member>
        <member name="F:biz.ritter.javapi.util.TimeZone.LONG">
                     * The LONG display name style.</member>
        <member name="M:biz.ritter.javapi.util.TimeZone.#ctor">
                     * Constructs a new instance of this class.</member>
        <member name="M:biz.ritter.javapi.util.TimeZone.clone">
                     * Returns a new {@code TimeZone} with the same ID, {@code rawOffset} and daylight savings
                     * time rules as this {@code TimeZone}.
                     *
                     * @return a shallow copy of this {@code TimeZone}.
                     * @see java.lang.Cloneable</member>
        <member name="M:biz.ritter.javapi.util.TimeZone.getID">
                     * Gets the ID of this {@code TimeZone}.
                     *
                     * @return the time zone ID string.</member>
        <member name="M:biz.ritter.javapi.util.TimeZone.getDSTSavings">
                     * Gets the daylight savings offset in milliseconds for this {@code TimeZone}.
                     * <p />
                     * This implementation returns 3600000 (1 hour), or 0 if the time zone does
                     * not observe daylight savings.
                     * <p />
                     * Subclasses may override to return daylight savings values other than 1
                     * hour.
                     * <p />
                     *
                     * @return the daylight savings offset in milliseconds if this {@code TimeZone}
                     *         observes daylight savings, zero otherwise.</member>
        <member name="M:biz.ritter.javapi.util.TimeZone.getOffset(System.Int64)">
                     * Gets the offset from GMT of this {@code TimeZone} for the specified date. The
                     * offset includes daylight savings time if the specified date is within the
                     * daylight savings time period.
                     *
                     * @param time
                     *            the date in milliseconds since January 1, 1970 00:00:00 GMT
                     * @return the offset from GMT in milliseconds.</member>
        <member name="M:biz.ritter.javapi.util.TimeZone.getOffset(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
                     * Gets the offset from GMT of this {@code TimeZone} for the specified date and
                     * time. The offset includes daylight savings time if the specified date and
                     * time are within the daylight savings time period.
                     *
                     * @param era
                     *            the {@code GregorianCalendar} era, either {@code GregorianCalendar.BC} or
                     *            {@code GregorianCalendar.AD}.
                     * @param year
                     *            the year.
                     * @param month
                     *            the {@code Calendar} month.
                     * @param day
                     *            the day of the month.
                     * @param dayOfWeek
                     *            the {@code Calendar} day of the week.
                     * @param time
                     *            the time of day in milliseconds.
                     * @return the offset from GMT in milliseconds.</member>
        <member name="M:biz.ritter.javapi.util.TimeZone.getRawOffset">
                     * Gets the offset for standard time from GMT for this {@code TimeZone}.
                     *
                     * @return the offset from GMT in milliseconds.</member>
        <member name="M:biz.ritter.javapi.util.TimeZone.hasSameRules(biz.ritter.javapi.util.TimeZone)">
                     * Returns whether the specified {@code TimeZone} has the same raw offset as this
                     * {@code TimeZone}.
                     *
                     * @param zone
                     *            a {@code TimeZone}.
                     * @return {@code true} when the {@code TimeZone} have the same raw offset, {@code false}
                     *         otherwise.</member>
        <member name="M:biz.ritter.javapi.util.TimeZone.inDaylightTime(biz.ritter.javapi.util.Date)">
                     * Returns whether the specified {@code Date} is in the daylight savings time period for
                     * this {@code TimeZone}.
                     *
                     * @param time
                     *            a {@code Date}.
                     * @return {@code true} when the {@code Date} is in the daylight savings time period, {@code false}
                     *         otherwise.</member>
        <member name="M:biz.ritter.javapi.util.TimeZone.setID(System.String)">
                     * Sets the ID of this {@code TimeZone}.
                     *
                     * @param name
                     *            a string which is the time zone ID.</member>
        <member name="M:biz.ritter.javapi.util.TimeZone.setRawOffset(System.Int32)">
                     * Sets the offset for standard time from GMT for this {@code TimeZone}.
                     *
                     * @param offset
                     *            the offset from GMT in milliseconds.</member>
        <member name="M:biz.ritter.javapi.util.TimeZone.useDaylightTime">
                     * Returns whether this {@code TimeZone} has a daylight savings time period.
                     *
                     * @return {@code true} if this {@code TimeZone} has a daylight savings time period, {@code false}
                     *         otherwise.</member>
        <member name="T:biz.ritter.javapi.util.FormatterClosedException">
                 * A {@code FormatterClosedException} will be thrown if the formatter has been
                 * closed.
                 *
                 * @see java.lang.RuntimeException</member>
        <member name="M:biz.ritter.javapi.util.FormatterClosedException.#ctor">
                     * Constructs a new {@code FormatterClosedException} with the stack trace
                     * filled in.</member>
        <member name="T:biz.ritter.javapi.util.IllegalFormatCodePointException">
                 * An {@code IllegalFormatCodePointException} will be thrown if an invalid
                 * Unicode code point (defined by {@link Character#isValidCodePoint(int)}) is
                 * passed as a parameter to a Formatter.
                 *
                 * @see java.lang.RuntimeException</member>
        <member name="M:biz.ritter.javapi.util.IllegalFormatCodePointException.#ctor(System.Int32)">
                     * Constructs a new {@code IllegalFormatCodePointException} which is
                     * specified by the invalid Unicode code point.
                     *
                     * @param c
                     *           the invalid Unicode code point.</member>
        <member name="M:biz.ritter.javapi.util.IllegalFormatCodePointException.getCodePoint">
                     * Returns the invalid Unicode code point.
                     *
                     * @return the invalid Unicode code point.</member>
        <member name="M:biz.ritter.javapi.util.IllegalFormatCodePointException.getMessage">
                     * Returns the message string of the IllegalFormatCodePointException.
                     *
                     * @return the message string of the IllegalFormatCodePointException.</member>
        <member name="T:biz.ritter.javapi.util.IllegalFormatConversionException">
                 * An {@code IllegalFormatConversionException} will be thrown when the parameter
                 * is incompatible with the corresponding format specifier.
                 *
                 * @see java.lang.RuntimeException
                 *
                 * @since 1.5</member>
        <member name="M:biz.ritter.javapi.util.IllegalFormatConversionException.#ctor(System.Char,biz.ritter.javapi.lang.Class)">
                     * Constructs a new {@code IllegalFormatConversionException} with the class
                     * of the mismatched conversion and corresponding parameter.
                     *
                     * @param c
                     *           the class of the mismatched conversion.
                     * @param arg
                     *           the corresponding parameter.</member>
        <member name="M:biz.ritter.javapi.util.IllegalFormatConversionException.getArgumentClass">
                     * Returns the class of the mismatched parameter.
                     *
                     * @return the class of the mismatched parameter.</member>
        <member name="M:biz.ritter.javapi.util.IllegalFormatConversionException.getConversion">
                     * Returns the incompatible conversion.
                     *
                     * @return the incompatible conversion.</member>
        <member name="M:biz.ritter.javapi.util.IllegalFormatConversionException.getMessage">
                     * Returns the message string of the IllegalFormatConversionException.
                     *
                     * @return the message string of the IllegalFormatConversionException.</member>
        <member name="T:biz.ritter.javapi.util.IllegalFormatException">
                 * An {@code IllegalFormatException} is thrown when a format string that
                 * contains either an illegal syntax or format specifier is transferred as a
                 * parameter. Only subclasses inheriting explicitly from this exception are
                 * allowed to be instantiated.
                 *
                 * @see java.lang.RuntimeException</member>
        <member name="T:biz.ritter.javapi.io.BufferedOutputStream">
                 * Wraps an existing {@link OutputStream} and <em>buffers</em> the output.
                 * Expensive interaction with the underlying input stream is minimized, since
                 * most (smaller) requests can be satisfied by accessing the buffer alone. The
                 * drawback is that some extra space is required to hold the buffer and that
                 * copying takes place when flushing that buffer, but this is usually outweighed
                 * by the performance benefits.
                 *
                 * <p />A typical application pattern for the class looks like this:<p />
                 *
                 * <pre>
                 * BufferedOutputStream buf = new BufferedOutputStream(new FileOutputStream("file.java"));
                 * </pre>
                 *
                 * @see BufferedInputStream</member>
        <member name="F:biz.ritter.javapi.io.BufferedOutputStream.buf">
                     * The buffer containing the bytes to be written to the target stream.</member>
        <member name="F:biz.ritter.javapi.io.BufferedOutputStream.count">
                     * The total number of bytes inside the byte array {@code buf}.</member>
        <member name="M:biz.ritter.javapi.io.BufferedOutputStream.#ctor(biz.ritter.javapi.io.OutputStream)">
                     * Constructs a new {@code BufferedOutputStream} on the {@link OutputStream}
                     * {@code out}. The buffer size is set to the default value of 8 KB.
                     *
                     * @param out
                     *            the {@code OutputStream} for which write operations are
                     *            buffered.</member>
        <member name="M:biz.ritter.javapi.io.BufferedOutputStream.#ctor(biz.ritter.javapi.io.OutputStream,System.Int32)">
                     * Constructs a new {@code BufferedOutputStream} on the {@link OutputStream}
                     * {@code out}. The buffer size is set to {@code size}.
                     *
                     * @param out
                     *            the output stream for which write operations are buffered.
                     * @param size
                     *            the size of the buffer in bytes.
                     * @throws IllegalArgumentException
                     *             if {@code size &lt;= 0}.</member>
        <member name="M:biz.ritter.javapi.io.BufferedOutputStream.flush">
                     * Flushes this stream to ensure all pending data is written out to the
                     * target stream. In addition, the target stream is flushed.
                     *
                     * @throws IOException
                     *             if an error occurs attempting to flush this stream.</member>
        <member name="M:biz.ritter.javapi.io.BufferedOutputStream.write(System.Byte[],System.Int32,System.Int32)">
                     * Writes {@code count} bytes from the byte array {@code buffer} starting at
                     * {@code offset} to this stream. If there is room in the buffer to hold the
                     * bytes, they are copied in. If not, the buffered bytes plus the bytes in
                     * {@code buffer} are written to the target stream, the target is flushed,
                     * and the buffer is cleared.
                     *
                     * @param buffer
                     *            the buffer to be written.
                     * @param offset
                     *            the start position in {@code buffer} from where to get bytes.
                     * @param length
                     *            the number of bytes from {@code buffer} to write to this
                     *            stream.
                     * @throws IndexOutOfBoundsException
                     *             if {@code offset &lt; 0} or {@code length &lt; 0}, or if
                     *             {@code offset + length} is greater than the size of
                     *             {@code buffer}.
                     * @throws IOException
                     *             if an error occurs attempting to write to this stream.
                     * @throws NullPointerException
                     *             if {@code buffer} is {@code null}.
                     * @throws ArrayIndexOutOfBoundsException
                     *             If offset or count is outside of bounds.</member>
        <member name="M:biz.ritter.javapi.io.BufferedOutputStream.write(System.Int32)">
                     * Writes one byte to this stream. Only the low order byte of the integer
                     * {@code oneByte} is written. If there is room in the buffer, the byte is
                     * copied into the buffer and the count incremented. Otherwise, the buffer
                     * plus {@code oneByte} are written to the target stream, the target is
                     * flushed, and the buffer is reset.
                     *
                     * @param oneByte
                     *            the byte to be written.
                     * @throws IOException
                     *             if an error occurs attempting to write to this stream.</member>
        <member name="M:biz.ritter.javapi.io.BufferedOutputStream.flushInternal">
                     * Flushes only internal buffer.</member>
        <member name="T:biz.ritter.javapi.io.PrintWriter">
                 * Wraps either an existing {@link OutputStream} or an existing {@link Writer}
                 * and provides convenience methods for printing common data types in a human
                 * readable format. No {@code IOException} is thrown by this class. Instead,
                 * callers should use {@link #checkError()} to see if a problem has occurred in
                 * this writer.</member>
        <member name="F:biz.ritter.javapi.io.PrintWriter.outJ">
                     * The writer to print data to.</member>
        <member name="F:biz.ritter.javapi.io.PrintWriter.ioError">
                     * Indicates whether this PrintWriter is in an error state.</member>
        <member name="F:biz.ritter.javapi.io.PrintWriter.autoflush">
                     * Indicates whether or not this PrintWriter should flush its contents after
                     * printing a new line.</member>
        <member name="M:biz.ritter.javapi.io.PrintWriter.#ctor(biz.ritter.javapi.io.OutputStream)">
                     * Constructs a new {@code PrintWriter} with {@code out} as its target
                     * stream. By default, the new print writer does not automatically flush its
                     * contents to the target stream when a newline is encountered.
                     *
                     * @param out
                     *            the target output stream.
                     * @throws NullPointerException
                     *             if {@code out} is {@code null}.</member>
        <member name="M:biz.ritter.javapi.io.PrintWriter.#ctor(biz.ritter.javapi.io.OutputStream,System.Boolean)">
                     * Constructs a new {@code PrintWriter} with {@code out} as its target
                     * stream. The parameter {@code autoflush} determines if the print writer
                     * automatically flushes its contents to the target stream when a newline is
                     * encountered.
                     *
                     * @param out
                     *            the target output stream.
                     * @param autoflush
                     *            indicates whether contents are flushed upon encountering a
                     *            newline sequence.
                     * @throws NullPointerException
                     *             if {@code out} is {@code null}.</member>
        <member name="M:biz.ritter.javapi.io.PrintWriter.#ctor(biz.ritter.javapi.io.Writer)">
                     * Constructs a new {@code PrintWriter} with {@code wr} as its target
                     * writer. By default, the new print writer does not automatically flush its
                     * contents to the target writer when a newline is encountered.
                     *
                     * @param wr
                     *            the target writer.
                     * @throws NullPointerException
                     *             if {@code wr} is {@code null}.</member>
        <member name="M:biz.ritter.javapi.io.PrintWriter.#ctor(biz.ritter.javapi.io.Writer,System.Boolean)">
                     * Constructs a new {@code PrintWriter} with {@code out} as its target
                     * writer. The parameter {@code autoflush} determines if the print writer
                     * automatically flushes its contents to the target writer when a newline is
                     * encountered.
                     *
                     * @param wr
                     *            the target writer.
                     * @param autoflush
                     *            indicates whether to flush contents upon encountering a
                     *            newline sequence.
                     * @throws NullPointerException
                     *             if {@code out} is {@code null}.</member>
        <member name="M:biz.ritter.javapi.io.PrintWriter.#ctor(biz.ritter.javapi.io.File)">
                     * Constructs a new {@code PrintWriter} with {@code file} as its target. The
                     * virtual machine's default character set is used for character encoding.
                     * The print writer does not automatically flush its contents to the target
                     * file when a newline is encountered. The output to the file is buffered.
                     *
                     * @param file
                     *            the target file. If the file already exists, its contents are
                     *            removed, otherwise a new file is created.
                     * @throws FileNotFoundException
                     *             if an error occurs while opening or creating the target file.
                     * @throws SecurityException
                     *             if a security manager exists and it denies writing to the
                     *             target file.</member>
        <member name="M:biz.ritter.javapi.io.PrintWriter.#ctor(biz.ritter.javapi.io.File,System.String)">
                     * Constructs a new {@code PrintWriter} with {@code file} as its target. The
                     * character set named {@code csn} is used for character encoding.
                     * The print writer does not automatically flush its contents to the target
                     * file when a newline is encountered. The output to the file is buffered.
                     *
                     * @param file
                     *            the target file. If the file already exists, its contents are
                     *            removed, otherwise a new file is created.
                     * @param csn
                     *            the name of the character set used for character encoding.
                     * @throws FileNotFoundException
                     *             if an error occurs while opening or creating the target file.
                     * @throws NullPointerException
                     *             if {@code csn} is {@code null}.
                     * @throws SecurityException
                     *             if a security manager exists and it denies writing to the
                     *             target file.
                     * @throws UnsupportedEncodingException
                     *             if the encoding specified by {@code csn} is not supported.</member>
        <member name="M:biz.ritter.javapi.io.PrintWriter.#ctor(System.String)">
                     * Constructs a new {@code PrintWriter} with the file identified by {@code
                     * fileName} as its target. The virtual machine's default character set is
                     * used for character encoding. The print writer does not automatically
                     * flush its contents to the target file when a newline is encountered. The
                     * output to the file is buffered.
                     *
                     * @param fileName
                     *            the target file's name. If the file already exists, its
                     *            contents are removed, otherwise a new file is created.
                     * @throws FileNotFoundException
                     *             if an error occurs while opening or creating the target file.
                     * @throws SecurityException
                     *             if a security manager exists and it denies writing to the
                     *             target file.</member>
        <member name="M:biz.ritter.javapi.io.PrintWriter.#ctor(System.String,System.String)">
                     * Constructs a new {@code PrintWriter} with the file identified by {@code
                     * fileName} as its target. The character set named {@code csn} is used for
                     * character encoding. The print writer does not automatically flush its
                     * contents to the target file when a newline is encountered. The output to
                     * the file is buffered.
                     *
                     * @param fileName
                     *            the target file's name. If the file already exists, its
                     *            contents are removed, otherwise a new file is created.
                     * @param csn
                     *            the name of the character set used for character encoding.
                     * @throws FileNotFoundException
                     *             if an error occurs while opening or creating the target file.
                     * @throws NullPointerException
                     *             if {@code csn} is {@code null}.
                     * @throws SecurityException
                     *             if a security manager exists and it denies writing to the
                     *             target file.
                     * @throws UnsupportedEncodingException
                     *             if the encoding specified by {@code csn} is not supported.</member>
        <member name="M:biz.ritter.javapi.io.PrintWriter.checkError">
                     * Flushes this writer and returns the value of the error flag.
                     *
                     * @return {@code true} if either an {@code IOException} has been thrown
                     *         previously or if {@code setError()} has been called;
                     *         {@code false} otherwise.
                     * @see #setError()</member>
        <member name="M:biz.ritter.javapi.io.PrintWriter.clearError">
                     * Sets the error state of the stream to false.
                     *
                     * @since 1.6</member>
        <member name="M:biz.ritter.javapi.io.PrintWriter.close">
                     * Closes this print writer. Flushes this writer and then closes the target.
                     * If an I/O error occurs, this writer's error flag is set to {@code true}.</member>
        <member name="M:biz.ritter.javapi.io.PrintWriter.flush">
                     * Ensures that all pending data is sent out to the target. It also
                     * flushes the target. If an I/O error occurs, this writer's error
                     * state is set to {@code true}.</member>
        <member name="M:biz.ritter.javapi.io.PrintWriter.format(System.String,System.Object[])">
                     * Writes a string formatted by an intermediate {@code Formatter} to the
                     * target using the specified format string and arguments. For the locale,
                     * the default value of the current virtual machine instance is used. If
                     * automatic flushing is enabled then the buffer is flushed as well.
                     *
                     * @param format
                     *            the format string used for {@link java.util.Formatter#format}.
                     * @param args
                     *            the list of arguments passed to the formatter. If there are
                     *            more arguments than required by the {@code format} string,
                     *            then the additional arguments are ignored.
                     * @return this writer.
                     * @throws IllegalFormatException
                     *             if the format string is illegal or incompatible with the
                     *             arguments, if there are not enough arguments or if any other
                     *             error regarding the format string or arguments is detected.
                     * @throws NullPointerException
                     *             if {@code format} is {@code null}.</member>
        <member name="M:biz.ritter.javapi.io.PrintWriter.format(biz.ritter.javapi.util.Locale,System.String,System.Object[])">
                     * Writes a string formatted by an intermediate {@code Formatter} to the
                     * target using the specified locale, format string and arguments. If
                     * automatic flushing is enabled then this writer is flushed.
                     *
                     * @param l
                     *            the locale used in the method. No localization will be applied
                     *            if {@code l} is {@code null}.
                     * @param format
                     *            the format string used for {@link java.util.Formatter#format}.
                     * @param args
                     *            the list of arguments passed to the formatter. If there are
                     *            more arguments than required by the {@code format} string,
                     *            then the additional arguments are ignored.
                     * @return this writer.
                     * @throws IllegalFormatException
                     *             if the format string is illegal or incompatible with the
                     *             arguments, if there are not enough arguments or if any other
                     *             error regarding the format string or arguments is detected.
                     * @throws NullPointerException
                     *             if {@code format} is {@code null}.</member>
        <member name="M:biz.ritter.javapi.io.PrintWriter.printf(System.String,System.Object[])">
                     * Prints a formatted string. The behavior of this method is the same as
                     * this writer's {@code #format(String, Object...)} method. For the locale,
                     * the default value of the current virtual machine instance is used.
                     *
                     * @param format
                     *            the format string used for {@link java.util.Formatter#format}.
                     * @param args
                     *            the list of arguments passed to the formatter. If there are
                     *            more arguments than required by the {@code format} string,
                     *            then the additional arguments are ignored.
                     * @return this writer.
                     * @throws IllegalFormatException
                     *             if the format string is illegal or incompatible with the
                     *             arguments, if there are not enough arguments or if any other
                     *             error regarding the format string or arguments is detected.
                     * @throws NullPointerException
                     *             if {@code format} is {@code null}.</member>
        <member name="M:biz.ritter.javapi.io.PrintWriter.printf(biz.ritter.javapi.util.Locale,System.String,System.Object[])">
                     * Prints a formatted string. The behavior of this method is the same as
                     * this writer's {@code #format(Locale, String, Object...)} method.
                     *
                     * @param l
                     *            the locale used in the method. No localization will be applied
                     *            if {@code l} is {@code null}.
                     * @param format
                     *            the format string used for {@link java.util.Formatter#format}.
                     * @param args
                     *            the list of arguments passed to the formatter. If there are
                     *            more arguments than required by the {@code format} string,
                     *            then the additional arguments are ignored.
                     * @return this writer.
                     * @throws IllegalFormatException
                     *             if the format string is illegal or incompatible with the
                     *             arguments, if there are not enough arguments or if any other
                     *             error regarding the format string or arguments is detected.
                     * @throws NullPointerException
                     *             if {@code format} is {@code null}.</member>
        <member name="M:biz.ritter.javapi.io.PrintWriter.print(System.Char[])">
                     * Prints the string representation of the specified character array
                     * to the target.
                     *
                     * @param charArray
                     *            the character array to print to the target.
                     * @see #print(String)</member>
        <member name="M:biz.ritter.javapi.io.PrintWriter.print(System.Char)">
                     * Prints the string representation of the specified character to the
                     * target.
                     *
                     * @param ch
                     *            the character to print to the target.
                     * @see #print(String)</member>
        <member name="M:biz.ritter.javapi.io.PrintWriter.print(System.Double)">
                     * Prints the string representation of the specified double to the target.
                     *
                     * @param dnum
                     *            the double value to print to the target.
                     * @see #print(String)</member>
        <member name="M:biz.ritter.javapi.io.PrintWriter.print(System.Single)">
                     * Prints the string representation of the specified float to the target.
                     *
                     * @param fnum
                     *            the float value to print to the target.
                     * @see #print(String)</member>
        <member name="M:biz.ritter.javapi.io.PrintWriter.print(System.Int32)">
                     * Prints the string representation of the specified integer to the target.
                     *
                     * @param inum
                     *            the integer value to print to the target.
                     * @see #print(String)</member>
        <member name="M:biz.ritter.javapi.io.PrintWriter.print(System.Int64)">
                     * Prints the string representation of the specified long to the target.
                     *
                     * @param lnum
                     *            the long value to print to the target.
                     * @see #print(String)</member>
        <member name="M:biz.ritter.javapi.io.PrintWriter.print(System.Object)">
                     * Prints the string representation of the specified object to the target.
                     *
                     * @param obj
                     *            the object to print to the target.
                     * @see #print(String)</member>
        <member name="M:biz.ritter.javapi.io.PrintWriter.print(System.String)">
            <summary>
            Prints a string to the target. The string is converted to an array of
            bytes using the encoding chosen during the construction of this writer.
            The bytes are then written to the target with {@code write(int)}.
            <para>
            If an I/O error occurs, this writer's error flag is set to <code>true</code>.
            </para></summary>
            <param name="str">the string to print to the target.</param>
            <see cref="M:biz.ritter.javapi.io.PrintWriter.write(System.Int32)" />
        </member>
        <member name="M:biz.ritter.javapi.io.PrintWriter.print(System.Boolean)">
                     * Prints the string representation of the specified boolean to the target.
                     *
                     * @param bool
                     *            the boolean value to print the target.
                     * @see #print(String)</member>
        <member name="M:biz.ritter.javapi.io.PrintWriter.println">
                     * Prints the string representation of the system property {@code
                     * "line.separator"} to the target. Flushes this writer if the autoflush
                     * flag is set to {@code true}.</member>
        <member name="M:biz.ritter.javapi.io.PrintWriter.println(System.Char[])">
                     * Prints the string representation of the specified character array
                     * followed by the system property {@code "line.separator"} to the target.
                     * Flushes this writer if the autoflush flag is set to {@code true}.
                     *
                     * @param charArray
                     *            the character array to print to the target.
                     * @see #print(String)</member>
        <member name="M:biz.ritter.javapi.io.PrintWriter.println(System.Char)">
                     * Prints the string representation of the specified character followed by
                     * the system property {@code "line.separator"} to the target. Flushes this
                     * writer if the autoflush flag is set to {@code true}.
                     *
                     * @param ch
                     *            the character to print to the target.
                     * @see #print(String)</member>
        <member name="M:biz.ritter.javapi.io.PrintWriter.println(System.Double)">
                     * Prints the string representation of the specified double followed by the
                     * system property {@code "line.separator"} to the target. Flushes this
                     * writer if the autoflush flag is set to {@code true}.
                     *
                     * @param dnum
                     *            the double value to print to the target.
                     * @see #print(String)</member>
        <member name="M:biz.ritter.javapi.io.PrintWriter.println(System.Single)">
                     * Prints the string representation of the specified float followed by the
                     * system property {@code "line.separator"} to the target. Flushes this
                     * writer if the autoflush flag is set to {@code true}.
                     *
                     * @param fnum
                     *            the float value to print to the target.
                     * @see #print(String)</member>
        <member name="M:biz.ritter.javapi.io.PrintWriter.println(System.Int32)">
                     * Prints the string representation of the specified integer followed by the
                     * system property {@code "line.separator"} to the target. Flushes this
                     * writer if the autoflush flag is set to {@code true}.
                     *
                     * @param inum
                     *            the integer value to print to the target.
                     * @see #print(String)</member>
        <member name="M:biz.ritter.javapi.io.PrintWriter.println(System.Int64)">
                     * Prints the string representation of the specified long followed by the
                     * system property {@code "line.separator"} to the target. Flushes this
                     * writer if the autoflush flag is set to {@code true}.
                     *
                     * @param lnum
                     *            the long value to print to the target.
                     * @see #print(String)</member>
        <member name="M:biz.ritter.javapi.io.PrintWriter.println(System.Object)">
                     * Prints the string representation of the specified object followed by the
                     * system property {@code "line.separator"} to the target. Flushes this
                     * writer if the autoflush flag is set to {@code true}.
                     *
                     * @param obj
                     *            the object to print to the target.
                     * @see #print(String)</member>
        <member name="M:biz.ritter.javapi.io.PrintWriter.println(System.String)">
                     * Prints a string followed by the system property {@code "line.separator"}
                     * to the target. The string is converted to an array of bytes using the
                     * encoding chosen during the construction of this writer. The bytes are
                     * then written to the target with {@code write(int)}. Finally, this writer
                     * is flushed if the autoflush flag is set to {@code true}.
                     * <p>
                     * If an I/O error occurs, this writer's error flag is set to {@code true}.
                     *</p>
                     * @param str
                     *            the string to print to the target.
                     * @see #write(int)</member>
        <member name="M:biz.ritter.javapi.io.PrintWriter.println(System.Boolean)">
                     * Prints the string representation of the specified boolean followed by the
                     * system property {@code "line.separator"} to the target. Flushes this
                     * writer if the autoflush flag is set to {@code true}.
                     *
                     * @param bool
                     *            the boolean value to print to the target.
                     * @see #print(String)</member>
        <member name="M:biz.ritter.javapi.io.PrintWriter.setError">
                     * Sets the error flag of this writer to {@code true}.</member>
        <member name="M:biz.ritter.javapi.io.PrintWriter.write(System.Char[])">
                     * Writes the character buffer {@code buf} to the target.
                     *
                     * @param buf
                     *            the non-null array containing characters to write.</member>
        <member name="M:biz.ritter.javapi.io.PrintWriter.write(System.Char[],System.Int32,System.Int32)">
                     * Writes {@code count} characters from {@code buffer} starting at {@code
                     * offset} to the target.
                     * <p>
                     * This writer's error flag is set to {@code true} if this writer is closed
                     * or an I/O error occurs.
                     *</p>
                     * @param buf
                     *            the buffer to write to the target.
                     * @param offset
                     *            the index of the first character in {@code buffer} to write.
                     * @param count
                     *            the number of characters in {@code buffer} to write.
                     * @throws IndexOutOfBoundsException
                     *             if {@code offset &lt; 0} or {@code count &lt; 0}, or if {@code
                     *             offset + count} is greater than the length of {@code buf}.</member>
        <member name="M:biz.ritter.javapi.io.PrintWriter.write(System.Int32)">
                     * Writes one character to the target. Only the two least significant bytes
                     * of the integer {@code oneChar} are written.
                     * <p>
                     * This writer's error flag is set to {@code true} if this writer is closed
                     * or an I/O error occurs.
                     * </p>
                     * @param oneChar
                     *            the character to write to the target.</member>
        <member name="M:biz.ritter.javapi.io.PrintWriter.write(System.String)">
                     * Writes the characters from the specified string to the target.
                     *
                     * @param str
                     *            the non-null string containing the characters to write.</member>
        <member name="M:biz.ritter.javapi.io.PrintWriter.write(System.String,System.Int32,System.Int32)">
                     * Writes {@code count} characters from {@code str} starting at {@code
                     * offset} to the target.
                     *
                     * @param str
                     *            the non-null string containing the characters to write.
                     * @param offset
                     *            the index of the first character in {@code str} to write.
                     * @param count
                     *            the number of characters from {@code str} to write.
                     * @throws IndexOutOfBoundsException
                     *             if {@code offset &lt; 0} or {@code count &lt; 0}, or if {@code
                     *             offset + count} is greater than the length of {@code str}.</member>
        <member name="M:biz.ritter.javapi.io.PrintWriter.append(System.Char)">
                     * Appends the character {@code c} to the target.
                     *
                     * @param c
                     *            the character to append to the target.
                     * @return this writer.</member>
        <member name="M:biz.ritter.javapi.io.PrintWriter.append(biz.ritter.javapi.lang.CharSequence)">
                     * Appends the character sequence {@code csq} to the target. This
                     * method works the same way as {@code PrintWriter.print(csq.toString())}.
                     * If {@code csq} is {@code null}, then the string "null" is written
                     * to the target.
                     *
                     * @param csq
                     *            the character sequence appended to the target.
                     * @return this writer.</member>
        <member name="M:biz.ritter.javapi.io.PrintWriter.append(biz.ritter.javapi.lang.CharSequence,System.Int32,System.Int32)">
                     * Appends a subsequence of the character sequence {@code csq} to the
                     * target. This method works the same way as {@code
                     * PrintWriter.print(csq.subsequence(start, end).toString())}. If {@code
                     * csq} is {@code null}, then the specified subsequence of the string "null"
                     * will be written to the target.
                     *
                     * @param csq
                     *            the character sequence appended to the target.
                     * @param start
                     *            the index of the first char in the character sequence appended
                     *            to the target.
                     * @param end
                     *            the index of the character following the last character of the
                     *            subsequence appended to the target.
                     * @return this writer.
                     * @throws StringIndexOutOfBoundsException
                     *             if {@code start &gt; end}, {@code start &lt; 0}, {@code end &lt; 0} or
                     *             either {@code start} or {@code end} are greater or equal than
                     *             the length of {@code csq}.</member>
        <member name="T:biz.ritter.javapi.io.DataInputStream">
                 * Wraps an existing {@link InputStream} and reads typed data from it.
                 * Typically, this stream has been written by a DataOutputStream. Types that can
                 * be read include byte, 16-bit short, 32-bit int, 32-bit float, 64-bit long,
                 * 64-bit double, byte strings, and strings encoded in
                 * {@link DataInput modified UTF-8}.
                 *
                 * @see DataOutputStream</member>
        <member name="M:biz.ritter.javapi.io.DataInputStream.#ctor(biz.ritter.javapi.io.InputStream)">
                     * Constructs a new DataInputStream on the InputStream {@code in}. All
                     * reads are then filtered through this stream. Note that data read by this
                     * stream is not in a human readable format and was most likely created by a
                     * DataOutputStream.
                     *
                     * @param in
                     *            the source InputStream the filter reads from.
                     * @see DataOutputStream
                     * @see RandomAccessFile</member>
        <member name="M:biz.ritter.javapi.io.DataInputStream.read(System.Byte[])">
                     * Reads bytes from this stream into the byte array {@code buffer}. Returns
                     * the number of bytes that have been read.
                     *
                     * @param buffer
                     *            the buffer to read bytes into.
                     * @return the number of bytes that have been read or -1 if the end of the
                     *         stream has been reached.
                     * @throws IOException
                     *             if a problem occurs while reading from this stream.
                     * @see DataOutput#write(byte[])
                     * @see DataOutput#write(byte[], int, int)</member>
        <member name="M:biz.ritter.javapi.io.DataInputStream.read(System.Byte[],System.Int32,System.Int32)">
                     * Reads at most {@code length} bytes from this stream and stores them in
                     * the byte array {@code buffer} starting at {@code offset}. Returns the
                     * number of bytes that have been read or -1 if no bytes have been read and
                     * the end of the stream has been reached.
                     *
                     * @param buffer
                     *            the byte array in which to store the bytes read.
                     * @param offset
                     *            the initial position in {@code buffer} to store the bytes
                     *            read from this stream.
                     * @param length
                     *            the maximum number of bytes to store in {@code buffer}.
                     * @return the number of bytes that have been read or -1 if the end of the
                     *         stream has been reached.
                     * @throws IOException
                     *             if a problem occurs while reading from this stream.
                     * @see DataOutput#write(byte[])
                     * @see DataOutput#write(byte[], int, int)</member>
        <member name="M:biz.ritter.javapi.io.DataInputStream.readBoolean">
                     * Reads a boolean from this stream.
                     *
                     * @return the next boolean value from the source stream.
                     * @throws EOFException
                     *             if the end of the filtered stream is reached before one byte
                     *             has been read.
                     * @throws IOException
                     *             if a problem occurs while reading from this stream.
                     * @see DataOutput#writeBoolean(boolean)</member>
        <member name="M:biz.ritter.javapi.io.DataInputStream.readByte">
                     * Reads an 8-bit byte value from this stream.
                     *
                     * @return the next byte value from the source stream.
                     * @throws EOFException
                     *             if the end of the filtered stream is reached before one byte
                     *             has been read.
                     * @throws IOException
                     *             if a problem occurs while reading from this stream.
                     * @see DataOutput#writeByte(int)</member>
        <member name="M:biz.ritter.javapi.io.DataInputStream.readToBuff(System.Int32)">
                     * Reads a 16-bit character value from this stream.
                     *
                     * @return the next char value from the source stream.
                     * @throws EOFException
                     *             if the end of the filtered stream is reached before two bytes
                     *             have been read.
                     * @throws IOException
                     *             if a problem occurs while reading from this stream.
                     * @see DataOutput#writeChar(int)</member>
        <member name="M:biz.ritter.javapi.io.DataInputStream.readDouble">
                     * Reads a 64-bit double value from this stream.
                     *
                     * @return the next double value from the source stream.
                     * @throws EOFException
                     *             if the end of the filtered stream is reached before eight
                     *             bytes have been read.
                     * @throws IOException
                     *             if a problem occurs while reading from this stream.
                     * @see DataOutput#writeDouble(double)</member>
        <member name="M:biz.ritter.javapi.io.DataInputStream.readFloat">
                     * Reads a 32-bit float value from this stream.
                     *
                     * @return the next float value from the source stream.
                     * @throws EOFException
                     *             if the end of the filtered stream is reached before four
                     *             bytes have been read.
                     * @throws IOException
                     *             if a problem occurs while reading from this stream.
                     * @see DataOutput#writeFloat(float)</member>
        <member name="M:biz.ritter.javapi.io.DataInputStream.readFully(System.Byte[])">
                     * Reads bytes from this stream into the byte array {@code buffer}. This
                     * method will block until {@code buffer.length} number of bytes have been
                     * read.
                     *
                     * @param buffer
                     *            to read bytes into.
                     * @throws EOFException
                     *             if the end of the source stream is reached before enough
                     *             bytes have been read.
                     * @throws IOException
                     *             if a problem occurs while reading from this stream.
                     * @see DataOutput#write(byte[])
                     * @see DataOutput#write(byte[], int, int)</member>
        <member name="M:biz.ritter.javapi.io.DataInputStream.readFully(System.Byte[],System.Int32,System.Int32)">
                     * Reads bytes from this stream and stores them in the byte array {@code
                     * buffer} starting at the position {@code offset}. This method blocks until
                     * {@code length} bytes have been read. If {@code length} is zero, then this
                     * method returns without reading any bytes.
                     *
                     * @param buffer
                     *            the byte array into which the data is read.
                     * @param offset
                     *            the offset in {@code buffer} from where to store the bytes
                     *            read.
                     * @param length
                     *            the maximum number of bytes to read.
                     * @throws EOFException
                     *             if the end of the source stream is reached before enough
                     *             bytes have been read.
                     * @throws IndexOutOfBoundsException
                     *             if {@code offset &lt; 0} or {@code length &lt; 0}, or if {@code
                     *             offset + length} is greater than the size of {@code buffer}.
                     * @throws IOException
                     *             if a problem occurs while reading from this stream.
                     * @throws NullPointerException
                     *             if {@code buffer} or the source stream are null.
                     * @see java.io.DataInput#readFully(byte[], int, int)</member>
        <member name="M:biz.ritter.javapi.io.DataInputStream.readInt">
                     * Reads a 32-bit integer value from this stream.
                     *
                     * @return the next int value from the source stream.
                     * @throws EOFException
                     *             if the end of the filtered stream is reached before four
                     *             bytes have been read.
                     * @throws IOException
                     *             if a problem occurs while reading from this stream.
                     * @see DataOutput#writeInt(int)</member>
        <member name="M:biz.ritter.javapi.io.DataInputStream.readLine">
                     * Returns a string that contains the next line of text available from the
                     * source stream. A line is represented by zero or more characters followed
                     * by {@code '\n'}, {@code '\r'}, {@code "\r\n"} or the end of the stream.
                     * The string does not include the newline sequence.
                     *
                     * @return the contents of the line or {@code null} if no characters were
                     *         read before the end of the source stream has been reached.
                     * @throws IOException
                     *             if a problem occurs while reading from this stream.
                     * @deprecated Use {@link BufferedReader}</member>
        <member name="M:biz.ritter.javapi.io.DataInputStream.readLong">
                     * Reads a 64-bit long value from this stream.
                     *
                     * @return the next long value from the source stream.
                     * @throws EOFException
                     *             if the end of the filtered stream is reached before eight
                     *             bytes have been read.
                     * @throws IOException
                     *             if a problem occurs while reading from this stream.
                     * @see DataOutput#writeLong(long)</member>
        <member name="M:biz.ritter.javapi.io.DataInputStream.readShort">
                     * Reads a 16-bit short value from this stream.
                     *
                     * @return the next short value from the source stream.
                     * @throws EOFException
                     *             if the end of the filtered stream is reached before two bytes
                     *             have been read.
                     * @throws IOException
                     *             if a problem occurs while reading from this stream.
                     * @see DataOutput#writeShort(int)</member>
        <member name="M:biz.ritter.javapi.io.DataInputStream.readUnsignedByte">
                     * Reads an unsigned 8-bit byte value from this stream and returns it as an
                     * int.
                     *
                     * @return the next unsigned byte value from the source stream.
                     * @throws EOFException
                     *             if the end of the filtered stream has been reached before one
                     *             byte has been read.
                     * @throws IOException
                     *             if a problem occurs while reading from this stream.
                     * @see DataOutput#writeByte(int)</member>
        <member name="M:biz.ritter.javapi.io.DataInputStream.readUnsignedShort">
                     * Reads a 16-bit unsigned short value from this stream and returns it as an
                     * int.
                     *
                     * @return the next unsigned short value from the source stream.
                     * @throws EOFException
                     *             if the end of the filtered stream is reached before two bytes
                     *             have been read.
                     * @throws IOException
                     *             if a problem occurs while reading from this stream.
                     * @see DataOutput#writeShort(int)</member>
        <member name="M:biz.ritter.javapi.io.DataInputStream.readUTF">
                     * Reads an string encoded in {@link DataInput modified UTF-8} from this
                     * stream.
                     *
                     * @return the next {@link DataInput MUTF-8} encoded string read from the
                     *         source stream.
                     * @throws EOFException if the end of the input is reached before the read
                     *         request can be satisfied.
                     * @throws IOException
                     *             if a problem occurs while reading from this stream.
                     * @see DataOutput#writeUTF(java.lang.String)</member>
        <member name="M:biz.ritter.javapi.io.DataInputStream.readUTF(biz.ritter.javapi.io.DataInput)">
                     * Reads a string encoded in {@link DataInput modified UTF-8} from the
                     * {@code DataInput} stream {@code in}.
                     *
                     * @param in
                     *            the input stream to read from.
                     * @return the next {@link DataInput MUTF-8} encoded string from the source
                     *         stream.
                     * @throws IOException
                     *             if a problem occurs while reading from this stream.
                     * @see DataOutputStream#writeUTF(java.lang.String)</member>
        <member name="M:biz.ritter.javapi.io.DataInputStream.skipBytes(System.Int32)">
                     * Skips {@code count} number of bytes in this stream. Subsequent {@code
                     * read()}s will not return these bytes unless {@code reset()} is used.
                     *
                     * This method will not throw an {@link EOFException} if the end of the
                     * input is reached before {@code count} bytes where skipped.
                     *
                     * @param count
                     *            the number of bytes to skip.
                     * @return the number of bytes actually skipped.
                     * @throws IOException
                     *             if a problem occurs during skipping.
                     * @see #mark(int)
                     * @see #reset()</member>
        <member name="T:biz.ritter.javapi.io.DataOutputStream">
            	 * Wraps an existing {@link OutputStream} and writes typed data to it.
            	 * Typically, this stream can be read in by DataInputStream. Types that can be
            	 * written include byte, 16-bit short, 32-bit int, 32-bit float, 64-bit long,
            	 * 64-bit double, byte strings, and {@link DataInput MUTF-8} encoded strings.
            	 *
            	 * @see DataInputStream</member>
        <member name="F:biz.ritter.javapi.io.DataOutputStream.written">
            	     * The number of bytes written out so far.</member>
        <member name="M:biz.ritter.javapi.io.DataOutputStream.#ctor(biz.ritter.javapi.io.OutputStream)">
            	     * Constructs a new {@code DataOutputStream} on the {@code OutputStream}
            	     * {@code out}. Note that data written by this stream is not in a human
            	     * readable form but can be reconstructed by using a {@link DataInputStream}
            	     * on the resulting output.
            	     *
            	     * @param out
            	     *            the target stream for writing.</member>
        <member name="M:biz.ritter.javapi.io.DataOutputStream.flush">
            	     * Flushes this stream to ensure all pending data is sent out to the target
            	     * stream. This implementation then also flushes the target stream.
            	     *
            	     * @throws IOException
            	     *             if an error occurs attempting to flush this stream.</member>
        <member name="M:biz.ritter.javapi.io.DataOutputStream.size">
            	     * Returns the total number of bytes written to the target stream so far.
            	     *
            	     * @return the number of bytes written to the target stream.</member>
        <member name="M:biz.ritter.javapi.io.DataOutputStream.write(System.Byte[],System.Int32,System.Int32)">
            	     * Writes {@code count} bytes from the byte array {@code buffer} starting at
            	     * {@code offset} to the target stream.
            	     *
            	     * @param buffer
            	     *            the buffer to write to the target stream.
            	     * @param offset
            	     *            the index of the first byte in {@code buffer} to write.
            	     * @param count
            	     *            the number of bytes from the {@code buffer} to write.
            	     * @throws IOException
            	     *             if an error occurs while writing to the target stream.
            	     * @throws NullPointerException
            	     *             if {@code buffer} is {@code null}.
            	     * @see DataInputStream#readFully(byte[])
            	     * @see DataInputStream#readFully(byte[], int, int)</member>
        <member name="M:biz.ritter.javapi.io.DataOutputStream.write(System.Int32)">
            	     * Writes a byte to the target stream. Only the least significant byte of
            	     * the integer {@code oneByte} is written.
            	     *
            	     * @param oneByte
            	     *            the byte to write to the target stream.
            	     * @throws IOException
            	     *             if an error occurs while writing to the target stream.
            	     * @see DataInputStream#readByte()</member>
        <member name="M:biz.ritter.javapi.io.DataOutputStream.writeBoolean(System.Boolean)">
            	     * Writes a boolean to the target stream.
            	     *
            	     * @param val
            	     *            the boolean value to write to the target stream.
            	     * @throws IOException
            	     *             if an error occurs while writing to the target stream.
            	     * @see DataInputStream#readBoolean()</member>
        <member name="M:biz.ritter.javapi.io.DataOutputStream.writeByte(System.Int32)">
            	     * Writes an 8-bit byte to the target stream. Only the least significant
            	     * byte of the integer {@code val} is written.
            	     *
            	     * @param val
            	     *            the byte value to write to the target stream.
            	     * @throws IOException
            	     *             if an error occurs while writing to the target stream.
            	     * @see DataInputStream#readByte()
            	     * @see DataInputStream#readUnsignedByte()</member>
        <member name="M:biz.ritter.javapi.io.DataOutputStream.writeBytes(System.String)">
            	     * Writes the low order bytes from a string to the target stream.
            	     *
            	     * @param str
            	     *            the string containing the bytes to write to the target stream.
            	     * @throws IOException
            	     *             if an error occurs while writing to the target stream.
            	     * @see DataInputStream#readFully(byte[])
            	     * @see DataInputStream#readFully(byte[],int,int)</member>
        <member name="M:biz.ritter.javapi.io.DataOutputStream.writeChar(System.Int32)">
            	     * Writes a 16-bit character to the target stream. Only the two lower bytes
            	     * of the integer {@code val} are written, with the higher one written
            	     * first. This corresponds to the Unicode value of {@code val}.
            	     *
            	     * @param val
            	     *            the character to write to the target stream
            	     * @throws IOException
            	     *             if an error occurs while writing to the target stream.
            	     * @see DataInputStream#readChar()</member>
        <member name="M:biz.ritter.javapi.io.DataOutputStream.writeChars(System.String)">
            	     * Writes the 16-bit characters contained in {@code str} to the target
            	     * stream.
            	     *
            	     * @param str
            	     *            the string that contains the characters to write to this
            	     *            stream.
            	     * @throws IOException
            	     *             if an error occurs while writing to the target stream.
            	     * @see DataInputStream#readChar()</member>
        <member name="M:biz.ritter.javapi.io.DataOutputStream.writeDouble(System.Double)">
            	     * Writes a 64-bit double to the target stream. The resulting output is the
            	     * eight bytes resulting from calling Double.doubleToLongBits().
            	     *
            	     * @param val
            	     *            the double to write to the target stream.
            	     * @throws IOException
            	     *             if an error occurs while writing to the target stream.
            	     * @see DataInputStream#readDouble()</member>
        <member name="M:biz.ritter.javapi.io.DataOutputStream.writeFloat(System.Single)">
            	     * Writes a 32-bit float to the target stream. The resulting output is the
            	     * four bytes resulting from calling Float.floatToIntBits().
            	     *
            	     * @param val
            	     *            the float to write to the target stream.
            	     * @throws IOException
            	     *             if an error occurs while writing to the target stream.
            	     * @see DataInputStream#readFloat()</member>
        <member name="M:biz.ritter.javapi.io.DataOutputStream.writeInt(System.Int32)">
            	     * Writes a 32-bit int to the target stream. The resulting output is the
            	     * four bytes, highest order first, of {@code val}.
            	     *
            	     * @param val
            	     *            the int to write to the target stream.
            	     * @throws IOException
            	     *             if an error occurs while writing to the target stream.
            	     * @see DataInputStream#readInt()</member>
        <member name="M:biz.ritter.javapi.io.DataOutputStream.writeLong(System.Int64)">
            	     * Writes a 64-bit long to the target stream. The resulting output is the
            	     * eight bytes, highest order first, of {@code val}.
            	     *
            	     * @param val
            	     *            the long to write to the target stream.
            	     * @throws IOException
            	     *             if an error occurs while writing to the target stream.
            	     * @see DataInputStream#readLong()</member>
        <member name="M:biz.ritter.javapi.io.DataOutputStream.writeShort(System.Int32)">
            	     * Writes the specified 16-bit short to the target stream. Only the lower
            	     * two bytes of the integer {@code val} are written, with the higher one
            	     * written first.
            	     *
            	     * @param val
            	     *            the short to write to the target stream.
            	     * @throws IOException
            	     *             if an error occurs while writing to the target stream.
            	     * @see DataInputStream#readShort()
            	     * @see DataInputStream#readUnsignedShort()</member>
        <member name="M:biz.ritter.javapi.io.DataOutputStream.writeUTF(System.String)">
            	     * Writes the specified encoded in {@link DataInput modified UTF-8} to this
            	     * stream.
            	     *
            	     * @param str
            	     *            the string to write to the target stream encoded in
            	     *            {@link DataInput modified UTF-8}.
            	     * @throws IOException
            	     *             if an error occurs while writing to the target stream.
            	     * @throws UTFDataFormatException
            	     *             if the encoded string is longer than 65535 bytes.
            	     * @see DataInputStream#readUTF()</member>
        <member name="T:biz.ritter.javapi.io.UTFDataFormatException">
                 * Signals that an incorrectly encoded UTF-8 string has been encountered, most
                 * likely while reading some {@link DataInputStream}.
                 *
                 * @see DataInputStream#readUTF()</member>
        <member name="M:biz.ritter.javapi.io.UTFDataFormatException.#ctor">
                     * Constructs a new {@code UTFDataFormatException} with its stack trace
                     * filled in.</member>
        <member name="M:biz.ritter.javapi.io.UTFDataFormatException.#ctor(System.String)">
                     * Constructs a new {@code UTFDataFormatException} with its stack trace and
                     * detail message filled in.
                     *
                     * @param detailMessage
                     *            the detail message for this exception.</member>
        <member name="T:biz.ritter.javapi.lang.AbstractStringBuilder">
                 * A modifiable {@link CharSequence sequence of characters} for use in creating
                 * and modifying Strings. This class is intended as a base class for
                 * {@link StringBuffer} and {@link StringBuilder}.
                 *
                 * @see StringBuffer
                 * @see StringBuilder
                 * @since 1.5</member>
        <member name="M:biz.ritter.javapi.lang.AbstractStringBuilder.#ctor(System.String)">
            <summary>
            Create new AbstractStringBuilder
            </summary>
            <param name="s">
            </param>
        </member>
        <member name="M:biz.ritter.javapi.lang.AbstractStringBuilder.capacity">
                     * Returns the number of characters that can be held without growing.
                     *
                     * @return the capacity
                     * @see #ensureCapacity
                     * @see #length</member>
        <member name="M:biz.ritter.javapi.lang.AbstractStringBuilder.charAt(System.Int32)">
                     * Retrieves the character at the {@code index}.
                     *
                     * @param index
                     *            the index of the character to retrieve.
                     * @return the char value.
                     * @throws IndexOutOfBoundsException
                     *             if {@code index} is negative or greater than or equal to the
                     *             current {@link #length()}.</member>
        <member name="M:biz.ritter.javapi.lang.AbstractStringBuilder.ensureCapacity(System.Int32)">
                     * Ensures that this object has a minimum capacity available before
                     * requiring the internal buffer to be enlarged. The general policy of this
                     * method is that if the {@code minimumCapacity} is larger than the current
                     * {@link #capacity()}, then the capacity will be increased to the largest
                     * value of either the {@code minimumCapacity} or the current capacity
                     * multiplied by two plus two. Although this is the general policy, there is
                     * no guarantee that the capacity will change.
                     *
                     * @param min
                     *            the new minimum capacity to set.</member>
        <member name="M:biz.ritter.javapi.lang.AbstractStringBuilder.getChars(System.Int32,System.Int32,System.Char[],System.Int32)">
                     * Copies the requested sequence of characters to the {@code char[]} passed
                     * starting at {@code destStart}.
                     *
                     * @param start
                     *            the inclusive start index of the characters to copy.
                     * @param end
                     *            the exclusive end index of the characters to copy.
                     * @param dest
                     *            the {@code char[]} to copy the characters to.
                     * @param destStart
                     *            the inclusive start index of {@code dest} to begin copying to.
                     * @throws IndexOutOfBoundsException
                     *             if the {@code start} is negative, the {@code destStart} is
                     *             negative, the {@code start} is greater than {@code end}, the
                     *             {@code end} is greater than the current {@link #length()} or
                     *             {@code destStart + end - begin} is greater than
                     *             {@code dest.length}.</member>
        <member name="M:biz.ritter.javapi.lang.AbstractStringBuilder.length">
                     * The current length.
                     *
                     * @return the number of characters contained in this instance.</member>
        <member name="M:biz.ritter.javapi.lang.AbstractStringBuilder.setCharAt(System.Int32,System.Char)">
                     * Sets the character at the {@code index}.
                     *
                     * @param index
                     *            the zero-based index of the character to replace.
                     * @param ch
                     *            the character to set.
                     * @throws IndexOutOfBoundsException
                     *             if {@code index} is negative or greater than or equal to the
                     *             current {@link #length()}.</member>
        <member name="M:biz.ritter.javapi.lang.AbstractStringBuilder.setLength(System.Int32)">
                     * Sets the current length to a new value. If the new length is larger than
                     * the current length, then the new characters at the end of this object
                     * will contain the {@code char} value of {@code \u0000}.
                     *
                     * @param length
                     *            the new length of this StringBuffer.
                     * @exception IndexOutOfBoundsException
                     *                if {@code length &lt; 0}.
                     * @see #length</member>
        <member name="M:biz.ritter.javapi.lang.AbstractStringBuilder.substring(System.Int32)">
                     * Returns the String value of the subsequence from the {@code start} index
                     * to the current end.
                     *
                     * @param start
                     *            the inclusive start index to begin the subsequence.
                     * @return a String containing the subsequence.
                     * @throws StringIndexOutOfBoundsException
                     *             if {@code start} is negative or greater than the current
                     *             {@link #length()}.</member>
        <member name="M:biz.ritter.javapi.lang.AbstractStringBuilder.substring(System.Int32,System.Int32)">
                     * Returns the String value of the subsequence from the {@code start} index
                     * to the {@code end} index.
                     *
                     * @param start
                     *            the inclusive start index to begin the subsequence.
                     * @param end
                     *            the exclusive end index to end the subsequence.
                     * @return a String containing the subsequence.
                     * @throws StringIndexOutOfBoundsException
                     *             if {@code start} is negative, greater than {@code end} or if
                     *             {@code end} is greater than the current {@link #length()}.</member>
        <member name="M:biz.ritter.javapi.lang.AbstractStringBuilder.ToString">
                     * Returns the current String representation.
                     *
                     * @return a String containing the characters in this instance.</member>
        <member name="M:biz.ritter.javapi.lang.AbstractStringBuilder.subSequence(System.Int32,System.Int32)">
                     * Returns a {@code CharSequence} of the subsequence from the {@code start}
                     * index to the {@code end} index.
                     *
                     * @param start
                     *            the inclusive start index to begin the subsequence.
                     * @param end
                     *            the exclusive end index to end the subsequence.
                     * @return a CharSequence containing the subsequence.
                     * @throws IndexOutOfBoundsException
                     *             if {@code start} is negative, greater than {@code end} or if
                     *             {@code end} is greater than the current {@link #length()}.
                     * @since 1.4</member>
        <member name="M:biz.ritter.javapi.lang.AbstractStringBuilder.indexOf(System.String)">
                     * Searches for the first index of the specified character. The search for
                     * the character starts at the beginning and moves towards the end.
                     *
                     * @param string
                     *            the string to find.
                     * @return the index of the specified character, -1 if the character isn't
                     *         found.
                     * @see #lastIndexOf(String)
                     * @since 1.4</member>
        <member name="M:biz.ritter.javapi.lang.AbstractStringBuilder.indexOf(System.String,System.Int32)">
                     * Searches for the index of the specified character. The search for the
                     * character starts at the specified offset and moves towards the end.
                     *
                     * @param subString
                     *            the string to find.
                     * @param start
                     *            the starting offset.
                     * @return the index of the specified character, -1 if the character isn't
                     *         found
                     * @see #lastIndexOf(String,int)
                     * @since 1.4</member>
        <member name="M:biz.ritter.javapi.lang.AbstractStringBuilder.lastIndexOf(System.String)">
                     * Searches for the last index of the specified character. The search for
                     * the character starts at the end and moves towards the beginning.
                     *
                     * @param string
                     *            the string to find.
                     * @return the index of the specified character, -1 if the character isn't
                     *         found.
                     * @throws NullPointerException
                     *             if {@code string} is {@code null}.
                     * @see String#lastIndexOf(java.lang.String)
                     * @since 1.4</member>
        <member name="M:biz.ritter.javapi.lang.AbstractStringBuilder.lastIndexOf(System.String,System.Int32)">
                     * Searches for the index of the specified character. The search for the
                     * character starts at the specified offset and moves towards the beginning.
                     *
                     * @param subString
                     *            the string to find.
                     * @param start
                     *            the starting offset.
                     * @return the index of the specified character, -1 if the character isn't
                     *         found.
                     * @throws NullPointerException
                     *             if {@code subString} is {@code null}.
                     * @see String#lastIndexOf(String,int)
                     * @since 1.4</member>
        <member name="M:biz.ritter.javapi.lang.AbstractStringBuilder.trimToSize">
                     * Trims off any extra capacity beyond the current length. Note, this method
                     * is NOT guaranteed to change the capacity of this object.
                     *
                     * @since 1.5</member>
        <member name="M:biz.ritter.javapi.lang.AbstractStringBuilder.codePointAt(System.Int32)">
                     * Retrieves the Unicode code point value at the {@code index}.
                     *
                     * @param index
                     *            the index to the {@code char} code unit.
                     * @return the Unicode code point value.
                     * @throws IndexOutOfBoundsException
                     *             if {@code index} is negative or greater than or equal to
                     *             {@link #length()}.
                     * @see Character
                     * @see Character#codePointAt(char[], int, int)
                     * @since 1.5</member>
        <member name="M:biz.ritter.javapi.lang.AbstractStringBuilder.codePointBefore(System.Int32)">
                     * Retrieves the Unicode code point value that precedes the {@code index}.
                     *
                     * @param index
                     *            the index to the {@code char} code unit within this object.
                     * @return the Unicode code point value.
                     * @throws IndexOutOfBoundsException
                     *             if {@code index} is less than 1 or greater than
                     *             {@link #length()}.
                     * @see Character
                     * @see Character#codePointBefore(char[], int, int)
                     * @since 1.5</member>
        <member name="M:biz.ritter.javapi.lang.AbstractStringBuilder.codePointCount(System.Int32,System.Int32)">
                     * Calculates the number of Unicode code points between {@code beginIndex}
                     * and {@code endIndex}.
                     *
                     * @param beginIndex
                     *            the inclusive beginning index of the subsequence.
                     * @param endIndex
                     *            the exclusive end index of the subsequence.
                     * @return the number of Unicode code points in the subsequence.
                     * @throws IndexOutOfBoundsException
                     *             if {@code beginIndex} is negative or greater than
                     *             {@code endIndex} or {@code endIndex} is greater than
                     *             {@link #length()}.
                     * @see Character
                     * @see Character#codePointCount(char[], int, int)
                     * @since 1.5</member>
        <member name="M:biz.ritter.javapi.lang.AbstractStringBuilder.offsetByCodePoints(System.Int32,System.Int32)">
                     * Returns the index that is offset {@code codePointOffset} code points from
                     * {@code index}.
                     *
                     * @param index
                     *            the index to calculate the offset from.
                     * @param codePointOffset
                     *            the number of code points to count.
                     * @return the index that is {@code codePointOffset} code points away from
                     *         index.
                     * @throws IndexOutOfBoundsException
                     *             if {@code index} is negative or greater than
                     *             {@link #length()} or if there aren't enough code points
                     *             before or after {@code index} to match
                     *             {@code codePointOffset}.
                     * @see Character
                     * @see Character#offsetByCodePoints(char[], int, int, int, int)
                     * @since 1.5</member>
        <member name="T:biz.ritter.javapi.lang.AssertionError">
                 * Thrown when an assertion has failed.
                 *
                 * @since 1.4</member>
        <member name="M:biz.ritter.javapi.lang.AssertionError.#ctor">
                     * Constructs a new {@code AssertionError} with no message.</member>
        <member name="M:biz.ritter.javapi.lang.AssertionError.#ctor(System.Object)">
                     * Constructs a new {@code AssertionError} with a message based on calling
                     * {@link String#valueOf(Object)} with the specified object. If the object
                     * is an instance of {@link Throwable}, then it also becomes the cause of
                     * this error.
                     *
                     * @param detailMessage
                     *            the object to be converted into the detail message and
                     *            optionally the cause.</member>
        <member name="M:biz.ritter.javapi.lang.AssertionError.#ctor(System.Boolean)">
                     * Constructs a new {@code AssertionError} with a message based on calling
                     * {@link String#valueOf(boolean)} with the specified boolean value.
                     *
                     * @param detailMessage
                     *            the value to be converted into the message.</member>
        <member name="M:biz.ritter.javapi.lang.AssertionError.#ctor(System.Char)">
                     * Constructs a new {@code AssertionError} with a message based on calling
                     * {@link String#valueOf(char)} with the specified character value.
                     *
                     * @param detailMessage
                     *            the value to be converted into the message.</member>
        <member name="M:biz.ritter.javapi.lang.AssertionError.#ctor(System.Int32)">
                     * Constructs a new {@code AssertionError} with a message based on calling
                     * {@link String#valueOf(int)} with the specified integer value.
                     *
                     * @param detailMessage
                     *            the value to be converted into the message.</member>
        <member name="M:biz.ritter.javapi.lang.AssertionError.#ctor(System.Int64)">
                     * Constructs a new {@code AssertionError} with a message based on calling
                     * {@link String#valueOf(long)} with the specified long value.
                     *
                     * @param detailMessage
                     *            the value to be converted into the message.</member>
        <member name="M:biz.ritter.javapi.lang.AssertionError.#ctor(System.Single)">
                     * Constructs a new {@code AssertionError} with a message based on calling
                     * {@link String#valueOf(float)} with the specified float value.
                     *
                     * @param detailMessage
                     *            the value to be converted into the message.</member>
        <member name="M:biz.ritter.javapi.lang.AssertionError.#ctor(System.Double)">
                     * Constructs a new {@code AssertionError} with a message based on calling
                     * {@link String#valueOf(double)} with the specified double value.
                     *
                     * @param detailMessage
                     *            the value to be converted into the message.</member>
        <member name="T:biz.ritter.javapi.lang.Boolean">
                 * The wrapper for the primitive type {@code boolean}.
                 *
                 * @since 1.0</member>
        <member name="F:biz.ritter.javapi.lang.Boolean.value">
                     * The boolean value of the receiver.</member>
        <member name="F:biz.ritter.javapi.lang.Boolean.TYPE">
                     * The {@link Class} object that represents the primitive type {@code
                     * boolean}.</member>
        <member name="F:biz.ritter.javapi.lang.Boolean.TRUE">
                     * The {@code Boolean} object that represents the primitive value
                     * {@code true}.</member>
        <member name="F:biz.ritter.javapi.lang.Boolean.FALSE">
                     * The {@code Boolean} object that represents the primitive value
                     * {@code false}.</member>
        <member name="M:biz.ritter.javapi.lang.Boolean.#ctor(System.String)">
                     * Constructs a new {@code Boolean} with its boolean value specified by
                     * {@code string}. If {@code string} is not {@code null} and is equal to
                     * "true" using a non-case sensitive comparison, the result will be a
                     * Boolean representing the primitive value {@code true}, otherwise it will
                     * be a Boolean representing the primitive value {@code false}.
                     *
                     * @param string
                     *            the string representing a boolean value.</member>
        <member name="M:biz.ritter.javapi.lang.Boolean.#ctor(System.Boolean)">
                     * Constructs a new {@code Boolean} with the specified primitive boolean
                     * value.
                     *
                     * @param value
                     *            the primitive boolean value, {@code true} or {@code false}.</member>
        <member name="M:biz.ritter.javapi.lang.Boolean.booleanValue">
                     * Gets the primitive value of this boolean, either {@code true} or
                     * {@code false}.
                     *
                     * @return this object's primitive value, {@code true} or {@code false}.</member>
        <member name="M:biz.ritter.javapi.lang.Boolean.equals(System.Object)">
                     * Compares this instance with the specified object and indicates if they
                     * are equal. In order to be equal, {@code o} must be an instance of
                     * {@code Boolean} and have the same boolean value as this object.
                     *
                     * @param o
                     *            the object to compare this boolean with.
                     * @return {@code true} if the specified object is equal to this
                     *         {@code Boolean}; {@code false} otherwise.</member>
        <member name="M:biz.ritter.javapi.lang.Boolean.compareTo(biz.ritter.javapi.lang.Boolean)">
                     * Compares this object to the specified boolean object to determine their
                     * relative order.
                     *
                     * @param that
                     *            the boolean object to compare this object to.
                     * @return 0 if the value of this boolean and the value of {@code that} are
                     *         equal; a positive value if the value of this boolean is
                     *         {@code true} and the value of {@code that} is {@code false}; a
                     *         negative value if the value if this boolean is {@code false} and
                     *         the value of {@code that} is {@code true}.
                     * @see java.lang.Comparable
                     * @since 1.5</member>
        <member name="M:biz.ritter.javapi.lang.Boolean.GetHashCode">
                     * Returns an integer hash code for this boolean.
                     *
                     * @return this boolean's hash code, which is {@code 1231} for {@code true}
                     *         values and {@code 1237} for {@code false} values.</member>
        <member name="M:biz.ritter.javapi.lang.Boolean.ToString">
                     * Returns a string containing a concise, human-readable description of this
                     * boolean.
                     *
                     * @return "true" if the value of this boolean is {@code true}, "false"
                     *         otherwise.</member>
        <member name="M:biz.ritter.javapi.lang.Boolean.getBoolean(System.String)">
                     * Returns the {@code boolean} value of the system property identified by
                     * {@code string}.
                     *
                     * @param string
                     *            the name of the requested system property.
                     * @return {@code true} if the system property named by {@code string}
                     *         exists and it is equal to "true" using case insensitive
                     *         comparison, {@code false} otherwise.
                     * @see System#getProperty(String)</member>
        <member name="M:biz.ritter.javapi.lang.Boolean.parseBoolean(System.String)">
                     * Parses the specified string as a {@code boolean}.
                     *
                     * @param s
                     *            the string representation of a boolean value.
                     * @return {@code true} if {@code s} is not {@code null} and is equal to
                     *         {@code "true"} using case insensitive comparison, {@code false}
                     *         otherwise.
                     * @since 1.5</member>
        <member name="M:biz.ritter.javapi.lang.Boolean.toString(System.Boolean)">
                     * Converts the specified boolean to its string representation.
                     *
                     * @param value
                     *            the boolean to convert.
                     * @return "true" if {@code value} is {@code true}, "false" otherwise.</member>
        <member name="M:biz.ritter.javapi.lang.Boolean.valueOf(System.String)">
                     * Parses the specified string as a boolean value.
                     *
                     * @param string
                     *            the string representation of a boolean value.
                     * @return {@code Boolean.TRUE} if {@code string} is equal to "true" using
                     *         case insensitive comparison, {@code Boolean.FALSE} otherwise.
                     * @see #parseBoolean(String)</member>
        <member name="M:biz.ritter.javapi.lang.Boolean.valueOf(System.Boolean)">
                     * Returns a {@code Boolean} instance for the specified boolean value.
                     * <p />
                     * If it is not necessary to get a new {@code Boolean} instance, it is
                     * recommended to use this method instead of the constructor, since it
                     * returns its static instances, which results in better performance.
                     *
                     * @param b
                     *            the boolean to convert to a {@code Boolean}.
                     * @return {@code Boolean.TRUE} if {@code b} is equal to {@code true},
                     *         {@code Boolean.FALSE} otherwise.</member>
        <member name="M:biz.ritter.javapi.lang.Boolean.op_Implicit(biz.ritter.javapi.lang.Boolean)~System.Boolean">
            <summary>
            Implicit convert java.lang.Boolean to .net bool type
            </summary>
            <param name="b">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:biz.ritter.javapi.lang.Boolean.op_Implicit(System.Boolean)~biz.ritter.javapi.lang.Boolean">
            <summary>
            Implicit convert java.lang.Boolean to .net bool type
            </summary>
            <param name="b">
            </param>
            <returns>
            </returns>
        </member>
        <member name="T:biz.ritter.javapi.lang.Deprecated">
            <summary>
            Simple Implementation of <code>Deprecated</code> annotation, but
            we cannot extends the .net <code>System.ObsoleteAttribute</code> and
            so use [Obsolete] are better for IDE...
            </summary>
        </member>
        <member name="T:biz.ritter.javapi.lang.IllegalAccessException">
                 * Thrown when a program attempts to access a field or method which is not
                 * accessible from the location where the reference is made.</member>
        <member name="M:biz.ritter.javapi.lang.IllegalAccessException.#ctor">
                     * Constructs a new {@code IllegalAccessException} that includes the current
                     * stack trace.</member>
        <member name="M:biz.ritter.javapi.lang.IllegalAccessException.#ctor(System.String)">
                     * Constructs a new {@code IllegalAccessException} with the current stack
                     * trace and the specified detail message.
                     *
                     * @param detailMessage
                     *            the detail message for this exception.</member>
        <member name="T:biz.ritter.javapi.lang.InstantiationException">
                 * Thrown when a program attempts to access a constructor which is not
                 * accessible from the location where the reference is made.</member>
        <member name="M:biz.ritter.javapi.lang.InstantiationException.#ctor">
                     * Constructs a new {@code InstantiationException} that includes the current
                     * stack trace.</member>
        <member name="M:biz.ritter.javapi.lang.InstantiationException.#ctor(System.String)">
                     * Constructs a new {@code InstantiationException} with the current stack
                     * trace and the specified detail message.
                     *
                     * @param detailMessage
                     *            the detail message for this exception.</member>
        <member name="M:biz.ritter.javapi.lang.InstantiationException.#ctor(System.Type)">
                     * Constructs a new {@code InstantiationException} with the current stack
                     * trace and the class that caused this exception.
                     *
                     * @param clazz
                     *            the class that can not be instantiated.</member>
        <member name="T:biz.ritter.javapi.lang.LinkageError">
                 * {@code LinkageError} is the superclass of all error classes that occur when
                 * loading and linking class files.
                 *
                 * @see Error</member>
        <member name="M:biz.ritter.javapi.lang.LinkageError.#ctor">
                     * Constructs a new {@code LinkageError} that includes the current stack
                     * trace.</member>
        <member name="M:biz.ritter.javapi.lang.LinkageError.#ctor(System.String)">
                     * Constructs a new {@code LinkageError} with the current stack trace and
                     * the specified detail message.
                     *
                     * @param detailMessage
                     *            the detail message for this error.</member>
        <member name="T:biz.ritter.javapi.lang.NegativeArraySizeException">
                 * Thrown when an attempt is made to create an array with a size of less than
                 * zero.</member>
        <member name="M:biz.ritter.javapi.lang.NegativeArraySizeException.#ctor">
                     * Constructs a new {@code NegativeArraySizeException} that includes the
                     * current stack trace.</member>
        <member name="M:biz.ritter.javapi.lang.NegativeArraySizeException.#ctor(System.String)">
                     * Constructs a new {@code NegativeArraySizeException} with the current
                     * stack trace and the specified detail message.
                     *
                     * @param detailMessage
                     *            the detail message for this exception.</member>
        <member name="T:biz.ritter.javapi.lang.NoClassDefFoundError">
                 * Thrown when the virtual machine is unable to locate a class which it has been
                 * asked to load.</member>
        <member name="M:biz.ritter.javapi.lang.NoClassDefFoundError.#ctor">
                     * Constructs a new {@code NoClassDefFoundError} that includes the current
                     * stack trace.</member>
        <member name="M:biz.ritter.javapi.lang.NoClassDefFoundError.#ctor(System.String)">
                     * Constructs a new {@code NoClassDefFoundError} with the current stack
                     * trace and the specified detail message.
                     *
                     * @param detailMessage
                     *            the detail message for this error.</member>
        <member name="T:biz.ritter.javapi.lang.refj.SoftReference`1">
                 * Implements a soft reference, which is the least-weak of the three types of
                 * references. Once the garbage collector has decided that an object {@code obj}
                 * is <a href="package.html#definitions">softly-reachable</a>, the following
                 * may happen, either immediately or at a later point:
                 *
                 * <ul>
                 *   <li>
                 *     A set {@code ref} of references is determined. {@code ref} contains the
                 *     following elements:
                 *     <ul>
                 *       <li>
                 *         All soft references pointing to {@code obj}.
                 *       </li>
                 *       <li>
                 *         All soft references pointing to objects from which {@code obj} is
                 *         strongly reachable.
                 *       </li>
                 *     </ul>
                 *   </li>
                 *   <li>
                 *     All references in {@code ref} are atomically cleared.
                 *   </li>
                 *   <li>
                 *     At the same time or some time in the future, all references in {@code
                 *     ref} will be enqueued with their corresponding reference queues, if any.
                 *   </li>
                 * </ul>
                 *
                 * The system may decide not to clear and enqueue soft references until a later
                 * time, yet all {@code SoftReference}s pointing to softly reachable objects are
                 * guaranteed to be cleared before the VM will throw an {@link
                 * java.lang.OutOfMemoryError}.
                 *
                 * Soft references are useful for caches that should automatically have
                 * their entries removed once they are not referenced any more (from outside),
                 * and there is a need for memory. The difference between a {@code
                 * SoftReference} and a {@code WeakReference} is the point of time at which the
                 * decision is made to clear and enqueue the reference:
                 *
                 * <ul>
                 *   <li>
                 *     A {@code SoftReference} should be cleared and enqueued <em>as late as
                 *     possible</em>, that is, in case the VM is in danger of running out of
                 *     memory.
                 *   </li>
                 *   <li>
                 *     A {@code WeakReference} may be cleared and enqueued as soon as is
                 *     known to be weakly-referenced.
                 *   </li>
                 * </ul>
                 *
                 * @since 1.2</member>
        <member name="M:biz.ritter.javapi.lang.refj.SoftReference`1.#ctor(`0)">
                     * Constructs a new soft reference to the given referent. The newly created
                     * reference is not registered with any reference queue.
                     *
                     * @param r the referent to track</member>
        <member name="M:biz.ritter.javapi.lang.refj.SoftReference`1.#ctor(`0,biz.ritter.javapi.lang.refj.ReferenceQueue{`0})">
                     * Constructs a new soft reference to the given referent. The newly created
                     * reference is registered with the given reference queue.
                     *
                     * @param r the referent to track
                     * @param q the queue to register to the reference object with. A null value
                     *          results in a weak reference that is not associated with any
                     *          queue.</member>
        <member name="M:biz.ritter.javapi.lang.refj.SoftReference`1.get">
                     * Return the referent of the reference object.
                     *
                     * @return the referent to which reference refers, or {@code null} if the
                     *         referent has been cleared.</member>
        <member name="T:biz.ritter.javapi.lang.StringBuffer">
                 * java.lang.StringBuffer is a variable size contiguous indexable array of characters. The
                 * length of the java.lang.StringBuffer is the number of characters it contains. The
                 * capacity of the java.lang.StringBuffer is the number of characters it can hold.
                 * <p />
                 * Characters may be inserted at any position up to the length of the
                 * StringBuffer, increasing the length of the StringBuffer. Characters at any
                 * position in the java.lang.StringBuffer may be replaced, which does not affect the
                 * java.lang.StringBuffer length.
                 * <p />
                 * The capacity of a java.lang.StringBuffer may be specified when the java.lang.StringBuffer is
                 * created. If the capacity of the java.lang.StringBuffer is exceeded, the capacity is
                 * increased.
                 *
                 * @see String
                 * @see StringBuilder
                 * @since 1.0</member>
        <member name="M:biz.ritter.javapi.lang.StringBuffer.#ctor">
                     * Constructs a new java.lang.StringBuffer using the default capacity which is 16.</member>
        <member name="M:biz.ritter.javapi.lang.StringBuffer.#ctor(System.Int32)">
                     * Constructs a new java.lang.StringBuffer using the specified capacity.
                     *
                     * @param capacity
                     *            the initial capacity.</member>
        <member name="M:biz.ritter.javapi.lang.StringBuffer.#ctor(System.String)">
                     * Constructs a new java.lang.StringBuffer containing the characters in the specified
                     * string. The capacity of the new buffer will be the length of the
                     * {@code String} plus the default capacity.
                     *
                     * @param string
                     *            the string content with which to initialize the new instance.
                     * @throws NullPointerException
                     *            if {@code string} is {@code null}.</member>
        <member name="M:biz.ritter.javapi.lang.StringBuffer.#ctor(biz.ritter.javapi.lang.CharSequence)">
                     * Constructs a java.lang.StringBuffer and initializes it with the content from the
                     * specified {@code CharSequence}. The capacity of the new buffer will be
                     * the length of the {@code CharSequence} plus the default capacity.
                     *
                     * @param cs
                     *            the content to initialize the instance.
                     * @throws NullPointerException
                     *            if {@code cs} is {@code null}.
                     * @since 1.5</member>
        <member name="M:biz.ritter.javapi.lang.StringBuffer.append(System.Boolean)">
                     * Adds the string representation of the specified boolean to the end of
                     * this StringBuffer.
                     * <p />
                     * If the argument is {@code true} the string {@code "true"} is appended,
                     * otherwise the string {@code "false"} is appended.
                     *
                     * @param b
                     *            the boolean to append.
                     * @return this StringBuffer.
                     * @see String#valueOf(boolean)</member>
        <member name="M:biz.ritter.javapi.lang.StringBuffer.append(System.Char)">
                     * Adds the specified character to the end of this buffer.
                     *
                     * @param ch
                     *            the character to append.
                     * @return this StringBuffer.
                     * @see String#valueOf(char)</member>
        <member name="M:biz.ritter.javapi.lang.StringBuffer.append(System.Double)">
                     * Adds the string representation of the specified double to the end of this
                     * StringBuffer.
                     *
                     * @param d
                     *            the double to append.
                     * @return this StringBuffer.
                     * @see String#valueOf(double)</member>
        <member name="M:biz.ritter.javapi.lang.StringBuffer.append(System.Single)">
                     * Adds the string representation of the specified float to the end of this
                     * StringBuffer.
                     *
                     * @param f
                     *            the float to append.
                     * @return this StringBuffer.
                     * @see String#valueOf(float)</member>
        <member name="M:biz.ritter.javapi.lang.StringBuffer.append(System.Int32)">
                     * Adds the string representation of the specified integer to the end of
                     * this StringBuffer.
                     *
                     * @param i
                     *            the integer to append.
                     * @return this StringBuffer.
                     * @see String#valueOf(int)</member>
        <member name="M:biz.ritter.javapi.lang.StringBuffer.append(System.Int64)">
                     * Adds the string representation of the specified long to the end of this
                     * StringBuffer.
                     *
                     * @param l
                     *            the long to append.
                     * @return this StringBuffer.
                     * @see String#valueOf(long)</member>
        <member name="M:biz.ritter.javapi.lang.StringBuffer.append(System.Object)">
                     * Adds the string representation of the specified object to the end of this
                     * StringBuffer.
                     * <p />
                     * If the specified object is {@code null} the string {@code "null"} is
                     * appended, otherwise the objects {@code toString} is used to get its
                     * string representation.
                     *
                     * @param obj
                     *            the object to append (may be null).
                     * @return this StringBuffer.
                     * @see String#valueOf(Object)</member>
        <member name="M:biz.ritter.javapi.lang.StringBuffer.append(System.String)">
                     * Adds the specified string to the end of this buffer.
                     * <p />
                     * If the specified string is {@code null} the string {@code "null"} is
                     * appended, otherwise the contents of the specified string is appended.
                     *
                     * @param string
                     *            the string to append (may be null).
                     * @return this StringBuffer.</member>
        <member name="M:biz.ritter.javapi.lang.StringBuffer.append(biz.ritter.javapi.lang.StringBuffer)">
                     * Adds the specified java.lang.StringBuffer to the end of this buffer.
                     * <p />
                     * If the specified java.lang.StringBuffer is {@code null} the string {@code "null"}
                     * is appended, otherwise the contents of the specified java.lang.StringBuffer is
                     * appended.
                     *
                     * @param sb
                     *            the java.lang.StringBuffer to append (may be null).
                     * @return this StringBuffer.
                     *
                     * @since 1.4</member>
        <member name="M:biz.ritter.javapi.lang.StringBuffer.append(System.Char[])">
                     * Adds the character array to the end of this buffer.
                     *
                     * @param chars
                     *            the character array to append.
                     * @return this StringBuffer.
                     * @throws NullPointerException
                     *            if {@code chars} is {@code null}.</member>
        <member name="M:biz.ritter.javapi.lang.StringBuffer.append(System.Char[],System.Int32,System.Int32)">
                     * Adds the specified sequence of characters to the end of this buffer.
                     *
                     * @param chars
                     *            the character array to append.
                     * @param start
                     *            the starting offset.
                     * @param length
                     *            the number of characters.
                     * @return this StringBuffer.
                     * @throws ArrayIndexOutOfBoundsException
                     *             if {@code length &lt; 0} , {@code start &lt; 0} or {@code start +
                     *             length &gt; chars.length}.
                     * @throws NullPointerException
                     *            if {@code chars} is {@code null}.</member>
        <member name="M:biz.ritter.javapi.lang.StringBuffer.append(biz.ritter.javapi.lang.CharSequence)">
                     * Appends the specified CharSequence to this buffer.
                     * <p />
                     * If the specified CharSequence is {@code null} the string {@code "null"}
                     * is appended, otherwise the contents of the specified CharSequence is
                     * appended.
                     *
                     * @param s
                     *            the CharSequence to append.
                     * @return this StringBuffer.
                     * @since 1.5</member>
        <member name="M:biz.ritter.javapi.lang.StringBuffer.append(biz.ritter.javapi.lang.CharSequence,System.Int32,System.Int32)">
                     * Appends the specified subsequence of the CharSequence to this buffer.
                     * <p />
                     * If the specified CharSequence is {@code null}, then the string {@code
                     * "null"} is used to extract a subsequence.
                     *
                     * @param s
                     *            the CharSequence to append.
                     * @param start
                     *            the inclusive start index.
                     * @param end
                     *            the exclusive end index.
                     * @return this StringBuffer.
                     * @throws IndexOutOfBoundsException
                     *             if {@code start} or {@code end} are negative, {@code start}
                     *             is greater than {@code end} or {@code end} is greater than
                     *             the length of {@code s}.
                     * @since 1.5</member>
        <member name="M:biz.ritter.javapi.lang.StringBuffer.appendCodePoint(System.Int32)">
                     * Appends the string representation of the specified Unicode code point to
                     * the end of this buffer.
                     * <p />
                     * The code point is converted to a {@code char[]} as defined by
                     * {@link Character#toChars(int)}.
                     *
                     * @param codePoint
                     *            the Unicode code point to encode and append.
                     * @return this StringBuffer.
                     * @see Character#toChars(int)
                     * @since 1.5</member>
        <member name="M:biz.ritter.javapi.lang.StringBuffer.delete(System.Int32,System.Int32)">
                     * Deletes a range of characters.
                     *
                     * @param start
                     *            the offset of the first character.
                     * @param end
                     *            the offset one past the last character.
                     * @return this StringBuffer.
                     * @throws StringIndexOutOfBoundsException
                     *             if {@code start &lt; 0}, {@code start &gt; end} or {@code end &gt;
                     *             length()}.</member>
        <member name="M:biz.ritter.javapi.lang.StringBuffer.deleteCharAt(System.Int32)">
                     * Deletes the character at the specified offset.
                     *
                     * @param location
                     *            the offset of the character to delete.
                     * @return this StringBuffer.
                     * @throws StringIndexOutOfBoundsException
                     *             if {@code location &lt; 0} or {@code location &gt;= length()}</member>
        <member name="M:biz.ritter.javapi.lang.StringBuffer.getChars(System.Int32,System.Int32,System.Char[],System.Int32)">
                     * Copies the requested sequence of characters to the {@code char[]} passed
                     * starting at {@code idx}.
                     *
                     * @param start
                     *            the starting offset of characters to copy.
                     * @param end
                     *            the ending offset of characters to copy.
                     * @param buffer
                     *            the destination character array.
                     * @param idx
                     *            the starting offset in the character array.
                     * @throws IndexOutOfBoundsException
                     *             if {@code start &lt; 0}, {@code end &gt; length()}, {@code start &gt;
                     *             end}, {@code index &lt; 0}, {@code end - start &gt; buffer.length -
                     *             index}</member>
        <member name="M:biz.ritter.javapi.lang.StringBuffer.insert(System.Int32,System.Char)">
                     * Inserts the character into this buffer at the specified offset.
                     *
                     * @param index
                     *            the index at which to insert.
                     * @param ch
                     *            the character to insert.
                     * @return this buffer.
                     * @throws ArrayIndexOutOfBoundsException
                     *             if {@code index &lt; 0} or {@code index &gt; length()}.</member>
        <member name="M:biz.ritter.javapi.lang.StringBuffer.insert(System.Int32,System.Boolean)">
                     * Inserts the string representation of the specified boolean into this
                     * buffer at the specified offset.
                     *
                     * @param index
                     *            the index at which to insert.
                     * @param b
                     *            the boolean to insert.
                     * @return this buffer.
                     * @throws StringIndexOutOfBoundsException
                     *             if {@code index &lt; 0} or {@code index &gt; length()}.</member>
        <member name="M:biz.ritter.javapi.lang.StringBuffer.insert(System.Int32,System.Int32)">
                     * Inserts the string representation of the specified integer into this
                     * buffer at the specified offset.
                     *
                     * @param index
                     *            the index at which to insert.
                     * @param i
                     *            the integer to insert.
                     * @return this buffer.
                     * @throws StringIndexOutOfBoundsException
                     *             if {@code index &lt; 0} or {@code index &gt; length()}.</member>
        <member name="M:biz.ritter.javapi.lang.StringBuffer.insert(System.Int32,System.Int64)">
                     * Inserts the string representation of the specified long into this buffer
                     * at the specified offset.
                     *
                     * @param index
                     *            the index at which to insert.
                     * @param l
                     *            the long to insert.
                     * @return this buffer.
                     * @throws StringIndexOutOfBoundsException
                     *             if {@code index &lt; 0} or {@code index &gt; length()}.</member>
        <member name="M:biz.ritter.javapi.lang.StringBuffer.insert(System.Int32,System.Double)">
                     * Inserts the string representation of the specified into this buffer
                     * double at the specified offset.
                     *
                     * @param index
                     *            the index at which to insert.
                     * @param d
                     *            the double to insert.
                     * @return this buffer.
                     * @throws StringIndexOutOfBoundsException
                     *             if {@code index &lt; 0} or {@code index &gt; length()}.</member>
        <member name="M:biz.ritter.javapi.lang.StringBuffer.insert(System.Int32,System.Single)">
                     * Inserts the string representation of the specified float into this buffer
                     * at the specified offset.
                     *
                     * @param index
                     *            the index at which to insert.
                     * @param f
                     *            the float to insert.
                     * @return this buffer.
                     * @throws StringIndexOutOfBoundsException
                     *             if {@code index &lt; 0} or {@code index &gt; length()}.</member>
        <member name="M:biz.ritter.javapi.lang.StringBuffer.insert(System.Int32,System.Object)">
                     * Inserts the string representation of the specified object into this
                     * buffer at the specified offset.
                     * <p />
                     * If the specified object is {@code null}, the string {@code "null"} is
                     * inserted, otherwise the objects {@code toString} method is used to get
                     * its string representation.
                     *
                     * @param index
                     *            the index at which to insert.
                     * @param obj
                     *            the object to insert (may be null).
                     * @return this buffer.
                     * @throws StringIndexOutOfBoundsException
                     *             if {@code index &lt; 0} or {@code index &gt; length()}.</member>
        <member name="M:biz.ritter.javapi.lang.StringBuffer.insert(System.Int32,System.String)">
                     * Inserts the string into this buffer at the specified offset.
                     * <p />
                     * If the specified string is {@code null}, the string {@code "null"} is
                     * inserted, otherwise the contents of the string is inserted.
                     *
                     * @param index
                     *            the index at which to insert.
                     * @param string
                     *            the string to insert (may be null).
                     * @return this buffer.
                     * @throws StringIndexOutOfBoundsException
                     *             if {@code index &lt; 0} or {@code index &gt; length()}.</member>
        <member name="M:biz.ritter.javapi.lang.StringBuffer.insert(System.Int32,System.Char[])">
                     * Inserts the character array into this buffer at the specified offset.
                     *
                     * @param index
                     *            the index at which to insert.
                     * @param chars
                     *            the character array to insert.
                     * @return this buffer.
                     * @throws StringIndexOutOfBoundsException
                     *             if {@code index &lt; 0} or {@code index &gt; length()}.
                     * @throws NullPointerException
                     *            if {@code chars} is {@code null}.</member>
        <member name="M:biz.ritter.javapi.lang.StringBuffer.insert(System.Int32,System.Char[],System.Int32,System.Int32)">
                     * Inserts the specified subsequence of characters into this buffer at the
                     * specified index.
                     *
                     * @param index
                     *            the index at which to insert.
                     * @param chars
                     *            the character array to insert.
                     * @param start
                     *            the starting offset.
                     * @param length
                     *            the number of characters.
                     * @return this buffer.
                     * @throws NullPointerException
                     *             if {@code chars} is {@code null}.
                     * @throws StringIndexOutOfBoundsException
                     *             if {@code length &lt; 0}, {@code start &lt; 0}, {@code start +
                     *             length &gt; chars.length}, {@code index &lt; 0} or {@code index &gt;
                     *             length()}</member>
        <member name="M:biz.ritter.javapi.lang.StringBuffer.insert(System.Int32,biz.ritter.javapi.lang.CharSequence)">
                     * Inserts the specified CharSequence into this buffer at the specified
                     * index.
                     * <p />
                     * If the specified CharSequence is {@code null}, the string {@code "null"}
                     * is inserted, otherwise the contents of the CharSequence.
                     *
                     * @param index
                     *            The index at which to insert.
                     * @param s
                     *            The char sequence to insert.
                     * @return this buffer.
                     * @throws IndexOutOfBoundsException
                     *             if {@code index &lt; 0} or {@code index &gt; length()}.
                     * @since 1.5</member>
        <member name="M:biz.ritter.javapi.lang.StringBuffer.insert(System.Int32,biz.ritter.javapi.lang.CharSequence,System.Int32,System.Int32)">
                     * Inserts the specified subsequence into this buffer at the specified
                     * index.
                     * <p />
                     * If the specified CharSequence is {@code null}, the string {@code "null"}
                     * is inserted, otherwise the contents of the CharSequence.
                     *
                     * @param index
                     *            The index at which to insert.
                     * @param s
                     *            The char sequence to insert.
                     * @param start
                     *            The inclusive start index in the char sequence.
                     * @param end
                     *            The exclusive end index in the char sequence.
                     * @return this buffer.
                     * @throws IndexOutOfBoundsException
                     *             if {@code index} is negative or greater than the current
                     *             length, {@code start} or {@code end} are negative, {@code
                     *             start} is greater than {@code end} or {@code end} is greater
                     *             than the length of {@code s}.
                     * @since 1.5</member>
        <member name="M:biz.ritter.javapi.lang.StringBuffer.replace(System.Int32,System.Int32,System.String)">
                     * Replaces the characters in the specified range with the contents of the
                     * specified string.
                     *
                     * @param start
                     *            the inclusive begin index.
                     * @param end
                     *            the exclusive end index.
                     * @param string
                     *            the string that will replace the contents in the range.
                     * @return this buffer.
                     * @throws StringIndexOutOfBoundsException
                     *             if {@code start} or {@code end} are negative, {@code start}
                     *             is greater than {@code end} or {@code end} is greater than
                     *             the length of {@code s}.</member>
        <member name="M:biz.ritter.javapi.lang.StringBuffer.reverse">
                     * Reverses the order of characters in this buffer.
                     *
                     * @return this buffer.</member>
        <member name="T:biz.ritter.javapi.lang.StringBuilder">
                 * A modifiable {@link CharSequence sequence of characters} for use in creating
                 * and modifying Strings. This class is intended as a direct replacement of
                 * {@link StringBuffer} for non-concurrent use; unlike {@code StringBuffer} this
                 * class is not synchronized for thread safety.
                 * <p />
                 * The majority of the modification methods on this class return {@code
                 * StringBuilder}, so that, like {@code StringBuffer}s, they can be used in
                 * chaining method calls together. For example, {@code new StringBuilder("One
                 * should ").append("always strive ").append("to achieve Harmony")}.
                 *
                 * @see CharSequence
                 * @see Appendable
                 * @see StringBuffer
                 * @see String
                 *
                 * @since 1.5</member>
        <member name="M:biz.ritter.javapi.lang.StringBuilder.#ctor">
                     * Constructs an instance with an initial capacity of {@code 16}.
                     *
                     * @see #capacity()</member>
        <member name="M:biz.ritter.javapi.lang.StringBuilder.#ctor(System.Int32)">
                     * Constructs an instance with the specified capacity.
                     *
                     * @param capacity
                     *            the initial capacity to use.
                     * @throws NegativeArraySizeException
                     *             if the specified {@code capacity} is negative.
                     * @see #capacity()</member>
        <member name="M:biz.ritter.javapi.lang.StringBuilder.#ctor(biz.ritter.javapi.lang.CharSequence)">
                     * Constructs an instance that's initialized with the contents of the
                     * specified {@code CharSequence}. The capacity of the new builder will be
                     * the length of the {@code CharSequence} plus 16.
                     *
                     * @param seq
                     *            the {@code CharSequence} to copy into the builder.
                     * @throws NullPointerException
                     *            if {@code seq} is {@code null}.</member>
        <member name="M:biz.ritter.javapi.lang.StringBuilder.#ctor(System.String)">
                     * Constructs an instance that's initialized with the contents of the
                     * specified {@code String}. The capacity of the new builder will be the
                     * length of the {@code String} plus 16.
                     *
                     * @param str
                     *            the {@code String} to copy into the builder.
                     * @throws NullPointerException
                     *            if {@code str} is {@code null}.</member>
        <member name="M:biz.ritter.javapi.lang.StringBuilder.append(System.Boolean)">
                     * Appends the string representation of the specified {@code boolean} value.
                     * The {@code boolean} value is converted to a String according to the rule
                     * defined by {@link String#valueOf(boolean)}.
                     *
                     * @param b
                     *            the {@code boolean} value to append.
                     * @return this builder.
                     * @see String#valueOf(boolean)</member>
        <member name="M:biz.ritter.javapi.lang.StringBuilder.append(System.Char)">
                     * Appends the string representation of the specified {@code char} value.
                     * The {@code char} value is converted to a string according to the rule
                     * defined by {@link String#valueOf(char)}.
                     *
                     * @param c
                     *            the {@code char} value to append.
                     * @return this builder.
                     * @see String#valueOf(char)</member>
        <member name="M:biz.ritter.javapi.lang.StringBuilder.append(System.Int32)">
                     * Appends the string representation of the specified {@code int} value. The
                     * {@code int} value is converted to a string according to the rule defined
                     * by {@link String#valueOf(int)}.
                     *
                     * @param i
                     *            the {@code int} value to append.
                     * @return this builder.
                     * @see String#valueOf(int)</member>
        <member name="M:biz.ritter.javapi.lang.StringBuilder.append(System.Int64)">
                     * Appends the string representation of the specified {@code long} value.
                     * The {@code long} value is converted to a string according to the rule
                     * defined by {@link String#valueOf(long)}.
                     *
                     * @param lng
                     *            the {@code long} value.
                     * @return this builder.
                     * @see String#valueOf(long)</member>
        <member name="M:biz.ritter.javapi.lang.StringBuilder.append(System.Single)">
                     * Appends the string representation of the specified {@code float} value.
                     * The {@code float} value is converted to a string according to the rule
                     * defined by {@link String#valueOf(float)}.
                     *
                     * @param f
                     *            the {@code float} value to append.
                     * @return this builder.
                     * @see String#valueOf(float)</member>
        <member name="M:biz.ritter.javapi.lang.StringBuilder.append(System.Double)">
                     * Appends the string representation of the specified {@code double} value.
                     * The {@code double} value is converted to a string according to the rule
                     * defined by {@link String#valueOf(double)}.
                     *
                     * @param d
                     *            the {@code double} value to append.
                     * @return this builder.
                     * @see String#valueOf(double)</member>
        <member name="M:biz.ritter.javapi.lang.StringBuilder.append(System.Object)">
                     * Appends the string representation of the specified {@code Object}.
                     * The {@code Object} value is converted to a string according to the rule
                     * defined by {@link String#valueOf(Object)}.
                     *
                     * @param obj
                     *            the {@code Object} to append.
                     * @return this builder.
                     * @see String#valueOf(Object)</member>
        <member name="M:biz.ritter.javapi.lang.StringBuilder.append(System.String)">
                     * Appends the contents of the specified string. If the string is {@code
                     * null}, then the string {@code "null"} is appended.
                     *
                     * @param str
                     *            the string to append.
                     * @return this builder.</member>
        <member name="M:biz.ritter.javapi.lang.StringBuilder.append(biz.ritter.javapi.lang.StringBuffer)">
                     * Appends the contents of the specified {@code StringBuffer}. If the
                     * java.lang.StringBuffer is {@code null}, then the string {@code "null"} is
                     * appended.
                     *
                     * @param sb
                     *            the {@code StringBuffer} to append.
                     * @return this builder.</member>
        <member name="M:biz.ritter.javapi.lang.StringBuilder.append(System.Char[])">
                     * Appends the string representation of the specified {@code char[]}.
                     * The {@code char[]} is converted to a string according to the rule
                     * defined by {@link String#valueOf(char[])}.
                     *
                     * @param ch
                     *            the {@code char[]} to append..
                     * @return this builder.
                     * @see String#valueOf(char[])</member>
        <member name="M:biz.ritter.javapi.lang.StringBuilder.append(System.Char[],System.Int32,System.Int32)">
                     * Appends the string representation of the specified subset of the {@code
                     * char[]}. The {@code char[]} value is converted to a String according to
                     * the rule defined by {@link String#valueOf(char[],int,int)}.
                     *
                     * @param str
                     *            the {@code char[]} to append.
                     * @param offset
                     *            the inclusive offset index.
                     * @param len
                     *            the number of characters.
                     * @return this builder.
                     * @throws ArrayIndexOutOfBoundsException
                     *             if {@code offset} and {@code len} do not specify a valid
                     *             subsequence.
                     * @see String#valueOf(char[],int,int)</member>
        <member name="M:biz.ritter.javapi.lang.StringBuilder.append(biz.ritter.javapi.lang.CharSequence)">
                     * Appends the string representation of the specified {@code CharSequence}.
                     * If the {@code CharSequence} is {@code null}, then the string {@code
                     * "null"} is appended.
                     *
                     * @param csq
                     *            the {@code CharSequence} to append.
                     * @return this builder.</member>
        <member name="M:biz.ritter.javapi.lang.StringBuilder.append(biz.ritter.javapi.lang.CharSequence,System.Int32,System.Int32)">
                     * Appends the string representation of the specified subsequence of the
                     * {@code CharSequence}. If the {@code CharSequence} is {@code null}, then
                     * the string {@code "null"} is used to extract the subsequence from.
                     *
                     * @param csq
                     *            the {@code CharSequence} to append.
                     * @param start
                     *            the beginning index.
                     * @param end
                     *            the ending index.
                     * @return this builder.
                     * @throws IndexOutOfBoundsException
                     *             if {@code start} or {@code end} are negative, {@code start}
                     *             is greater than {@code end} or {@code end} is greater than
                     *             the length of {@code csq}.</member>
        <member name="M:biz.ritter.javapi.lang.StringBuilder.appendCodePoint(System.Int32)">
                     * Appends the encoded Unicode code point. The code point is converted to a
                     * {@code char[]} as defined by {@link Character#toChars(int)}.
                     *
                     * @param codePoint
                     *            the Unicode code point to encode and append.
                     * @return this builder.
                     * @see Character#toChars(int)</member>
        <member name="M:biz.ritter.javapi.lang.StringBuilder.delete(System.Int32,System.Int32)">
                     * Deletes a sequence of characters specified by {@code start} and {@code
                     * end}. Shifts any remaining characters to the left.
                     *
                     * @param start
                     *            the inclusive start index.
                     * @param end
                     *            the exclusive end index.
                     * @return this builder.
                     * @throws StringIndexOutOfBoundsException
                     *             if {@code start} is less than zero, greater than the current
                     *             length or greater than {@code end}.</member>
        <member name="M:biz.ritter.javapi.lang.StringBuilder.deleteCharAt(System.Int32)">
                     * Deletes the character at the specified index. shifts any remaining
                     * characters to the left.
                     *
                     * @param index
                     *            the index of the character to delete.
                     * @return this builder.
                     * @throws StringIndexOutOfBoundsException
                     *             if {@code index} is less than zero or is greater than or
                     *             equal to the current length.</member>
        <member name="M:biz.ritter.javapi.lang.StringBuilder.insert(System.Int32,System.Boolean)">
                     * Inserts the string representation of the specified {@code boolean} value
                     * at the specified {@code offset}. The {@code boolean} value is converted
                     * to a string according to the rule defined by
                     * {@link String#valueOf(boolean)}.
                     *
                     * @param offset
                     *            the index to insert at.
                     * @param b
                     *            the {@code boolean} value to insert.
                     * @return this builder.
                     * @throws StringIndexOutOfBoundsException
                     *             if {@code offset} is negative or greater than the current
                     *             {@code length}.
                     * @see String#valueOf(boolean)</member>
        <member name="M:biz.ritter.javapi.lang.StringBuilder.insert(System.Int32,System.Char)">
                     * Inserts the string representation of the specified {@code char} value at
                     * the specified {@code offset}. The {@code char} value is converted to a
                     * string according to the rule defined by {@link String#valueOf(char)}.
                     *
                     * @param offset
                     *            the index to insert at.
                     * @param c
                     *            the {@code char} value to insert.
                     * @return this builder.
                     * @throws IndexOutOfBoundsException
                     *             if {@code offset} is negative or greater than the current
                     *             {@code length()}.
                     * @see String#valueOf(char)</member>
        <member name="M:biz.ritter.javapi.lang.StringBuilder.insert(System.Int32,System.Int32)">
                     * Inserts the string representation of the specified {@code int} value at
                     * the specified {@code offset}. The {@code int} value is converted to a
                     * String according to the rule defined by {@link String#valueOf(int)}.
                     *
                     * @param offset
                     *            the index to insert at.
                     * @param i
                     *            the {@code int} value to insert.
                     * @return this builder.
                     * @throws StringIndexOutOfBoundsException
                     *             if {@code offset} is negative or greater than the current
                     *             {@code length()}.
                     * @see String#valueOf(int)</member>
        <member name="M:biz.ritter.javapi.lang.StringBuilder.insert(System.Int32,System.Int64)">
                     * Inserts the string representation of the specified {@code long} value at
                     * the specified {@code offset}. The {@code long} value is converted to a
                     * String according to the rule defined by {@link String#valueOf(long)}.
                     *
                     * @param offset
                     *            the index to insert at.
                     * @param l
                     *            the {@code long} value to insert.
                     * @return this builder.
                     * @throws StringIndexOutOfBoundsException
                     *             if {@code offset} is negative or greater than the current
                     *             {code length()}.
                     * @see String#valueOf(long)</member>
        <member name="M:biz.ritter.javapi.lang.StringBuilder.insert(System.Int32,System.Single)">
                     * Inserts the string representation of the specified {@code float} value at
                     * the specified {@code offset}. The {@code float} value is converted to a
                     * string according to the rule defined by {@link String#valueOf(float)}.
                     *
                     * @param offset
                     *            the index to insert at.
                     * @param f
                     *            the {@code float} value to insert.
                     * @return this builder.
                     * @throws StringIndexOutOfBoundsException
                     *             if {@code offset} is negative or greater than the current
                     *             {@code length()}.
                     * @see String#valueOf(float)</member>
        <member name="M:biz.ritter.javapi.lang.StringBuilder.insert(System.Int32,System.Double)">
                     * Inserts the string representation of the specified {@code double} value
                     * at the specified {@code offset}. The {@code double} value is converted
                     * to a String according to the rule defined by
                     * {@link String#valueOf(double)}.
                     *
                     * @param offset
                     *            the index to insert at.
                     * @param d
                     *            the {@code double} value to insert.
                     * @return this builder.
                     * @throws StringIndexOutOfBoundsException
                     *             if {@code offset} is negative or greater than the current
                     *             {@code length()}.
                     * @see String#valueOf(double)</member>
        <member name="M:biz.ritter.javapi.lang.StringBuilder.insert(System.Int32,System.Object)">
                     * Inserts the string representation of the specified {@code Object} at the
                     * specified {@code offset}. The {@code Object} value is converted to a
                     * String according to the rule defined by {@link String#valueOf(Object)}.
                     *
                     * @param offset
                     *            the index to insert at.
                     * @param obj
                     *            the {@code Object} to insert.
                     * @return this builder.
                     * @throws StringIndexOutOfBoundsException
                     *             if {@code offset} is negative or greater than the current
                     *             {@code length()}.
                     * @see String#valueOf(Object)</member>
        <member name="M:biz.ritter.javapi.lang.StringBuilder.insert(System.Int32,System.String)">
                     * Inserts the specified string at the specified {@code offset}. If the
                     * specified string is null, then the String {@code "null"} is inserted.
                     *
                     * @param offset
                     *            the index to insert at.
                     * @param str
                     *            the {@code String} to insert.
                     * @return this builder.
                     * @throws StringIndexOutOfBoundsException
                     *             if {@code offset} is negative or greater than the current
                     *             {@code length()}.</member>
        <member name="M:biz.ritter.javapi.lang.StringBuilder.insert(System.Int32,System.Char[])">
                     * Inserts the string representation of the specified {@code char[]} at the
                     * specified {@code offset}. The {@code char[]} value is converted to a
                     * String according to the rule defined by {@link String#valueOf(char[])}.
                     *
                     * @param offset
                     *            the index to insert at.
                     * @param ch
                     *            the {@code char[]} to insert.
                     * @return this builder.
                     * @throws StringIndexOutOfBoundsException
                     *             if {@code offset} is negative or greater than the current
                     *             {@code length()}.
                     * @see String#valueOf(char[])</member>
        <member name="M:biz.ritter.javapi.lang.StringBuilder.insert(System.Int32,System.Char[],System.Int32,System.Int32)">
                     * Inserts the string representation of the specified subsequence of the
                     * {@code char[]} at the specified {@code offset}. The {@code char[]} value
                     * is converted to a String according to the rule defined by
                     * {@link String#valueOf(char[],int,int)}.
                     *
                     * @param offset
                     *            the index to insert at.
                     * @param str
                     *            the {@code char[]} to insert.
                     * @param strOffset
                     *            the inclusive index.
                     * @param strLen
                     *            the number of characters.
                     * @return this builder.
                     * @throws StringIndexOutOfBoundsException
                     *             if {@code offset} is negative or greater than the current
                     *             {@code length()}, or {@code strOffset} and {@code strLen} do
                     *             not specify a valid subsequence.
                     * @see String#valueOf(char[],int,int)</member>
        <member name="M:biz.ritter.javapi.lang.StringBuilder.insert(System.Int32,biz.ritter.javapi.lang.CharSequence)">
                     * Inserts the string representation of the specified {@code CharSequence}
                     * at the specified {@code offset}. The {@code CharSequence} is converted
                     * to a String as defined by {@link CharSequence#toString()}. If {@code s}
                     * is {@code null}, then the String {@code "null"} is inserted.
                     *
                     * @param offset
                     *            the index to insert at.
                     * @param s
                     *            the {@code CharSequence} to insert.
                     * @return this builder.
                     * @throws IndexOutOfBoundsException
                     *             if {@code offset} is negative or greater than the current
                     *             {@code length()}.
                     * @see CharSequence#toString()</member>
        <member name="M:biz.ritter.javapi.lang.StringBuilder.insert(System.Int32,biz.ritter.javapi.lang.CharSequence,System.Int32,System.Int32)">
                     * Inserts the string representation of the specified subsequence of the
                     * {@code CharSequence} at the specified {@code offset}. The {@code
                     * CharSequence} is converted to a String as defined by
                     * {@link CharSequence#subSequence(int, int)}. If the {@code CharSequence}
                     * is {@code null}, then the string {@code "null"} is used to determine the
                     * subsequence.
                     *
                     * @param offset
                     *            the index to insert at.
                     * @param s
                     *            the {@code CharSequence} to insert.
                     * @param start
                     *            the start of the subsequence of the character sequence.
                     * @param end
                     *            the end of the subsequence of the character sequence.
                     * @return this builder.
                     * @throws IndexOutOfBoundsException
                     *             if {@code offset} is negative or greater than the current
                     *             {@code length()}, or {@code start} and {@code end} do not
                     *             specify a valid subsequence.
                     * @see CharSequence#subSequence(int, int)</member>
        <member name="M:biz.ritter.javapi.lang.StringBuilder.replace(System.Int32,System.Int32,System.String)">
                     * Replaces the specified subsequence in this builder with the specified
                     * string.
                     *
                     * @param start
                     *            the inclusive begin index.
                     * @param end
                     *            the exclusive end index.
                     * @param str
                     *            the replacement string.
                     * @return this builder.
                     * @throws StringIndexOutOfBoundsException
                     *             if {@code start} is negative, greater than the current
                     *             {@code length()} or greater than {@code end}.
                     * @throws NullPointerException
                     *            if {@code str} is {@code null}.</member>
        <member name="M:biz.ritter.javapi.lang.StringBuilder.reverse">
                     * Reverses the order of characters in this builder.
                     *
                     * @return this buffer.</member>
        <member name="M:biz.ritter.javapi.lang.StringBuilder.toString">
                     * Returns the contents of this builder.
                     *
                     * @return the string representation of the data in this builder.</member>
        <member name="M:biz.ritter.javapi.lang.StringBuilder.readObject(biz.ritter.javapi.io.ObjectInputStream)">
                     * Reads the state of a {@code StringBuilder} from the passed stream and
                     * restores it to this instance.
                     *
                     * @param in
                     *            the stream to read the state from.
                     * @throws IOException
                     *             if the stream throws it during the read.
                     * @throws ClassNotFoundException
                     *             if the stream throws it during the read.</member>
        <member name="M:biz.ritter.javapi.lang.StringBuilder.writeObject(biz.ritter.javapi.io.ObjectOutputStream)">
                     * Writes the state of this object to the stream passed.
                     *
                     * @param out
                     *            the stream to write the state to.
                     * @throws IOException
                     *             if the stream throws it during the write.
                     * @serialData {@code int} - the length of this object. {@code char[]} - the
                     *             buffer from this object, which may be larger than the length
                     *             field.</member>
        <member name="T:biz.ritter.javapi.text.AttributedCharacterIterator">
                 * Extends the
                 * {@link CharacterIterator} interface, adding support for iterating over
                 * attributes and not only characters. An
                 * {@code AttributedCharacterIterator} also allows the user to find runs and
                 * their limits. Runs are defined as ranges of characters that all have the same
                 * attributes with the same values.</member>
        <member name="M:biz.ritter.javapi.text.AttributedCharacterIterator.getAllAttributeKeys">
                     * Returns a set of attributes present in the {@code
                     * AttributedCharacterIterator}. An empty set is returned if no attributes
                     * were defined.
                     *
                     * @return a set of attribute keys; may be empty.</member>
        <member name="M:biz.ritter.javapi.text.AttributedCharacterIterator.getAttribute(biz.ritter.javapi.text.AttributedCharacterIteratorNS.Attribute)">
                     * Returns the value stored in the attribute for the current character. If
                     * the attribute was not defined then {@code null} is returned.
                     *
                     * @param attribute the attribute for which the value should be returned.
                     * @return the value of the requested attribute for the current character or
                     *         {@code null} if it was not defined.</member>
        <member name="M:biz.ritter.javapi.text.AttributedCharacterIterator.getAttributes">
                     * Returns a map of all attributes of the current character. If no
                     * attributes were defined for the current character then an empty map is
                     * returned.
                     *
                     * @return a map of all attributes for the current character or an empty
                     *         map.</member>
        <member name="M:biz.ritter.javapi.text.AttributedCharacterIterator.getRunLimit">
                     * Returns the index of the last character in the run having the same
                     * attributes as the current character.
                     *
                     * @return the index of the last character of the current run.</member>
        <member name="M:biz.ritter.javapi.text.AttributedCharacterIterator.getRunLimit(biz.ritter.javapi.text.AttributedCharacterIteratorNS.Attribute)">
                     * Returns the index of the last character in the run that has the same
                     * attribute value for the given attribute as the current character.
                     *
                     * @param attribute
                     *            the attribute which the run is based on.
                     * @return the index of the last character of the current run.</member>
        <member name="M:biz.ritter.javapi.text.AttributedCharacterIterator.getRunLimit(biz.ritter.javapi.util.Set{biz.ritter.javapi.text.AttributedCharacterIteratorNS.Attribute})">
                     * Returns the index of the last character in the run that has the same
                     * attribute values for the attributes in the set as the current character.
                     *
                     * @param attributes
                     *            the set of attributes which the run is based on.
                     * @return the index of the last character of the current run.</member>
        <member name="M:biz.ritter.javapi.text.AttributedCharacterIterator.getRunStart">
                     * Returns the index of the first character in the run that has the same
                     * attributes as the current character.
                     *
                     * @return the index of the last character of the current run.</member>
        <member name="M:biz.ritter.javapi.text.AttributedCharacterIterator.getRunStart(biz.ritter.javapi.text.AttributedCharacterIteratorNS.Attribute)">
                     * Returns the index of the first character in the run that has the same
                     * attribute value for the given attribute as the current character.
                     *
                     * @param attribute
                     *            the attribute which the run is based on.
                     * @return the index of the last character of the current run.</member>
        <member name="M:biz.ritter.javapi.text.AttributedCharacterIterator.getRunStart(biz.ritter.javapi.util.Set{biz.ritter.javapi.text.AttributedCharacterIteratorNS.Attribute})">
                     * Returns the index of the first character in the run that has the same
                     * attribute values for the attributes in the set as the current character.
                     *
                     * @param attributes
                     *            the set of attributes which the run is based on.
                     * @return the index of the last character of the current run.</member>
        <member name="T:biz.ritter.javapi.text.AttributedCharacterIteratorNS.Attribute">
                     * Defines keys for text attributes.</member>
        <member name="F:biz.ritter.javapi.text.AttributedCharacterIteratorNS.Attribute.INPUT_METHOD_SEGMENT">
                         * This attribute marks segments from an input method. Most input
                         * methods create these segments for words.
                         *
                         * The value objects are of the type {@code Annotation} which contain
                         * {@code null}.</member>
        <member name="F:biz.ritter.javapi.text.AttributedCharacterIteratorNS.Attribute.LANGUAGE">
                         * The attribute describing the language of a character. The value
                         * objects are of type {@code Locale} or a subtype of it.</member>
        <member name="F:biz.ritter.javapi.text.AttributedCharacterIteratorNS.Attribute.READING">
                         * For languages that have different reading directions of text (like
                         * Japanese), this attribute allows to define which reading should be
                         * used. The value objects are of type {@code Annotation} which
                         * contain a {@code String}.</member>
        <member name="M:biz.ritter.javapi.text.AttributedCharacterIteratorNS.Attribute.#ctor(System.String)">
                         * The constructor for an {@code Attribute} with the name passed.
                         *
                         * @param name
                         *            the name of the new {@code Attribute}.</member>
        <member name="M:biz.ritter.javapi.text.AttributedCharacterIteratorNS.Attribute.Equals(System.Object)">
                         * Compares this attribute with the specified object. Checks if both
                         * objects are the same instance. It is defined final so all subclasses
                         * have the same behavior for this method.
                         *
                         * @param object
                         *            the object to compare against.
                         * @return {@code true} if the object passed is equal to this instance;
                         *         {@code false} otherwise.</member>
        <member name="M:biz.ritter.javapi.text.AttributedCharacterIteratorNS.Attribute.getName">
                         * Returns the name of this attribute.
                         *
                         * @return the name of this attribute.</member>
        <member name="M:biz.ritter.javapi.text.AttributedCharacterIteratorNS.Attribute.GetHashCode">
                         * Calculates the hash code for objects of type {@code Attribute}. It
                         * is defined final so all sub types calculate their hash code
                         * identically.
                         *
                         * @return the hash code for this instance of {@code Attribute}.</member>
        <member name="M:biz.ritter.javapi.text.AttributedCharacterIteratorNS.Attribute.readResolve">
                         * Resolves a deserialized instance to the correct constant attribute.
                         *
                         * @return the {@code Attribute} this instance represents.
                         * @throws InvalidObjectException
                         *             if this instance is not of type {@code Attribute.class}
                         *             or if it is not a known {@code Attribute}.</member>
        <member name="M:biz.ritter.javapi.text.AttributedCharacterIteratorNS.Attribute.ToString">
                         * Returns the name of the class followed by a "(", the name of the
                         * attribute, and a ")".
                         *
                         * @return the string representing this instance.</member>
        <member name="M:biz.ritter.javapi.dotnet.nio.charset.CharsetProviderImpl.charsets">
                     * Answers an iterator over the list of available charsets.
                     *
                     * @return available charsets.</member>
        <member name="M:biz.ritter.javapi.dotnet.nio.charset.CharsetProviderImpl.charsetForName(System.String)">
                     * Answers the charset with the given canonical or alias name.
                     *
                     * Subsequent requests for the same charset will answer the same instance.
                     * If the charset is unavailable the method returns <code>null</code>.
                     *
                     * @param charsetName
                     *            the name of a character set.
                     * @return the charset requested, or <code>null</code> if unavailable.</member>
        <member name="M:biz.ritter.javapi.dotnet.nio.charset.CharsetImpl.contains(biz.ritter.javapi.nio.charset.Charset)">
                     * Determines whether this charset is a super set of the given charset.
                     *
                     * @param charset
                     *            a given charset.
                     * @return true if this charset is a super set of the given charset,
                     *         false if it's unknown or this charset is not a superset of
                     *         the given charset.</member>
        <member name="M:biz.ritter.javapi.dotnet.nio.charset.CharsetImpl.newEncoder">
                     * Gets a new instance of an encoder for this charset.
                     *
                     * @return a new instance of an encoder for this charset.</member>
        <member name="M:biz.ritter.javapi.dotnet.nio.charset.CharsetImpl.newDecoder">
                     * Gets a new instance of a decoder for this charset.
                     *
                     * @return a new instance of a decoder for this charset.</member>
        <member name="T:biz.ritter.javapi.dotnet.util.wrapper.EnumeratorWrapper`1">
            <summary>
            This class take a .net IEnumerator instance inside and use this to delegate the
            java.util.Enumeration method calls.
            </summary>
            <typeparam name="K">Type to enumerate</typeparam>
        </member>
        <member name="T:biz.ritter.javapi.dotnet.util.wrapper.InputStreamWrapper">
            <summary>
            This utility class wrap a .net framework System.IO.Stream instance into a Java java.io.InputStream.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.dotnet.util.wrapper.InputStreamWrapper.delegateInstance">
            <summary>
            The base .net Stream instance
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.dotnet.util.wrapper.InputStreamWrapper.#ctor(System.IO.Stream)">
            <summary>
            Construct new wrapper for given Stream instance
            </summary>
            <param name="dotNetStream">Stream to wrap</param>
        </member>
        <member name="T:biz.ritter.javapi.dotnet.util.wrapper.EnumerableIterator`1">
            <summary>
            This class wrapps the IEnumerator / IEnumerable / Enumeration above an Iterator instance. So foreach loop
            and default .net functionality can be used.
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.dotnet.util.wrapper.EnumerableIterator`1.#ctor(biz.ritter.javapi.lang.Iterable{`0})">
            <summary>
            Create new instance for given Iterable object
            </summary>
            <param name="it">
            </param>
        </member>
        <member name="M:biz.ritter.javapi.dotnet.util.wrapper.EnumerableIterator`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get the IEnumerator instance.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:biz.ritter.javapi.dotnet.util.wrapper.EnumerableIterator`1.GetEnumerator">
            <summary>
            Get the IEnemurator instance for this wrapped java.util.Iterator.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="T:biz.ritter.javapi.io.BufferedInputStream">
                 * Wraps an existing {@link InputStream} and <em>buffers</em> the input.
                 * Expensive interaction with the underlying input stream is minimized, since
                 * most (smaller) requests can be satisfied by accessing the buffer alone. The
                 * drawback is that some extra space is required to hold the buffer and that
                 * copying takes place when filling that buffer, but this is usually outweighed
                 * by the performance benefits.
                 *
                 * <p />A typical application pattern for the class looks like this:<p />
                 *
                 * <pre>
                 * BufferedInputStream buf = new BufferedInputStream(new FileInputStream("file.java"));
                 * </pre>
                 *
                 * @see BufferedOutputStream</member>
        <member name="F:biz.ritter.javapi.io.BufferedInputStream.buf">
                     * The buffer containing the current bytes read from the target InputStream.</member>
        <member name="F:biz.ritter.javapi.io.BufferedInputStream.count">
                     * The total number of bytes inside the byte array {@code buf}.</member>
        <member name="F:biz.ritter.javapi.io.BufferedInputStream.marklimit">
                     * The current limit, which when passed, invalidates the current mark.</member>
        <member name="F:biz.ritter.javapi.io.BufferedInputStream.markpos">
                     * The currently marked position. -1 indicates no mark has been set or the
                     * mark has been invalidated.</member>
        <member name="F:biz.ritter.javapi.io.BufferedInputStream.pos">
                     * The current position within the byte array {@code buf}.</member>
        <member name="M:biz.ritter.javapi.io.BufferedInputStream.#ctor(biz.ritter.javapi.io.InputStream)">
                     * Constructs a new {@code BufferedInputStream} on the {@link InputStream}
                     * {@code in}. The default buffer size (8 KB) is allocated and all reads
                     * can now be filtered through this stream.
                     *
                     * @param in
                     *            the InputStream the buffer reads from.</member>
        <member name="M:biz.ritter.javapi.io.BufferedInputStream.#ctor(biz.ritter.javapi.io.InputStream,System.Int32)">
                     * Constructs a new {@code BufferedInputStream} on the {@link InputStream}
                     * {@code in}. The buffer size is specified by the parameter {@code size}
                     * and all reads are now filtered through this stream.
                     *
                     * @param in
                     *            the input stream the buffer reads from.
                     * @param size
                     *            the size of buffer to allocate.
                     * @throws IllegalArgumentException
                     *             if {@code size &lt; 0}.</member>
        <member name="M:biz.ritter.javapi.io.BufferedInputStream.available">
                     * Returns the number of bytes that are available before this stream will
                     * block. This method returns the number of bytes available in the buffer
                     * plus those available in the source stream.
                     *
                     * @return the number of bytes available before blocking.
                     * @throws IOException
                     *             if this stream is closed.</member>
        <member name="M:biz.ritter.javapi.io.BufferedInputStream.close">
                     * Closes this stream. The source stream is closed and any resources
                     * associated with it are released.
                     *
                     * @throws IOException
                     *             if an error occurs while closing this stream.</member>
        <member name="M:biz.ritter.javapi.io.BufferedInputStream.mark(System.Int32)">
                     * Sets a mark position in this stream. The parameter {@code readlimit}
                     * indicates how many bytes can be read before a mark is invalidated.
                     * Calling {@code reset()} will reposition the stream back to the marked
                     * position if {@code readlimit} has not been surpassed. The underlying
                     * buffer may be increased in size to allow {@code readlimit} number of
                     * bytes to be supported.
                     *
                     * @param readlimit
                     *            the number of bytes that can be read before the mark is
                     *            invalidated.
                     * @see #reset()</member>
        <member name="M:biz.ritter.javapi.io.BufferedInputStream.markSupported">
                     * Indicates whether {@code BufferedInputStream} supports the {@code mark()}
                     * and {@code reset()} methods.
                     *
                     * @return {@code true} for BufferedInputStreams.
                     * @see #mark(int)
                     * @see #reset()</member>
        <member name="M:biz.ritter.javapi.io.BufferedInputStream.read">
                     * Reads a single byte from this stream and returns it as an integer in the
                     * range from 0 to 255. Returns -1 if the end of the source string has been
                     * reached. If the internal buffer does not contain any available bytes then
                     * it is filled from the source stream and the first byte is returned.
                     *
                     * @return the byte read or -1 if the end of the source stream has been
                     *         reached.
                     * @throws IOException
                     *             if this stream is closed or another IOException occurs.</member>
        <member name="M:biz.ritter.javapi.io.BufferedInputStream.read(System.Byte[],System.Int32,System.Int32)">
                     * Reads at most {@code length} bytes from this stream and stores them in
                     * byte array {@code buffer} starting at offset {@code offset}. Returns the
                     * number of bytes actually read or -1 if no bytes were read and the end of
                     * the stream was encountered. If all the buffered bytes have been used, a
                     * mark has not been set and the requested number of bytes is larger than
                     * the receiver's buffer size, this implementation bypasses the buffer and
                     * simply places the results directly into {@code buffer}.
                     *
                     * @param buffer
                     *            the byte array in which to store the bytes read.
                     * @param offset
                     *            the initial position in {@code buffer} to store the bytes read
                     *            from this stream.
                     * @param length
                     *            the maximum number of bytes to store in {@code buffer}.
                     * @return the number of bytes actually read or -1 if end of stream.
                     * @throws IndexOutOfBoundsException
                     *             if {@code offset &lt; 0} or {@code length &lt; 0}, or if
                     *             {@code offset + length} is greater than the size of
                     *             {@code buffer}.
                     * @throws IOException
                     *             if the stream is already closed or another IOException
                     *             occurs.</member>
        <member name="M:biz.ritter.javapi.io.BufferedInputStream.reset">
                     * Resets this stream to the last marked location.
                     *
                     * @throws IOException
                     *             if this stream is closed, no mark has been set or the mark is
                     *             no longer valid because more than {@code readlimit} bytes
                     *             have been read since setting the mark.
                     * @see #mark(int)</member>
        <member name="M:biz.ritter.javapi.io.BufferedInputStream.skip(System.Int64)">
                     * Skips {@code amount} number of bytes in this stream. Subsequent
                     * {@code read()}'s will not return these bytes unless {@code reset()} is
                     * used.
                     *
                     * @param amount
                     *            the number of bytes to skip. {@code skip} does nothing and
                     *            returns 0 if {@code amount} is less than zero.
                     * @return the number of bytes actually skipped.
                     * @throws IOException
                     *             if this stream is closed or another IOException occurs.</member>
        <member name="T:biz.ritter.javapi.io.ByteArrayInputStream">
                 * A specialized {@link InputStream } for reading the contents of a byte array.
                 *
                 * @see ByteArrayOutputStream</member>
        <member name="F:biz.ritter.javapi.io.ByteArrayInputStream.buf">
                     * The {@code byte} array containing the bytes to stream over.</member>
        <member name="F:biz.ritter.javapi.io.ByteArrayInputStream.pos">
                     * The current position within the byte array.</member>
        <member name="F:biz.ritter.javapi.io.ByteArrayInputStream.markJ">
                     * The current mark position. Initially set to 0 or the <code>offset</code>
                     * parameter within the constructor.</member>
        <member name="F:biz.ritter.javapi.io.ByteArrayInputStream.countJ">
                     * The total number of bytes initially available in the byte array
                     * {@code buf}.</member>
        <member name="M:biz.ritter.javapi.io.ByteArrayInputStream.#ctor(System.Byte[])">
                     * Constructs a new {@code ByteArrayInputStream} on the byte array
                     * {@code buf}.
                     *
                     * @param buf
                     *            the byte array to stream over.</member>
        <member name="M:biz.ritter.javapi.io.ByteArrayInputStream.#ctor(System.Byte[],System.Int32,System.Int32)">
                     * Constructs a new {@code ByteArrayInputStream} on the byte array
                     * {@code buf} with the initial position set to {@code offset} and the
                     * number of bytes available set to {@code offset} + {@code length}.
                     *
                     * @param buf
                     *            the byte array to stream over.
                     * @param offset
                     *            the initial position in {@code buf} to start streaming from.
                     * @param length
                     *            the number of bytes available for streaming.</member>
        <member name="M:biz.ritter.javapi.io.ByteArrayInputStream.available">
                     * Returns the number of bytes that are available before this stream will
                     * block. This method returns the number of bytes yet to be read from the
                     * source byte array.
                     *
                     * @return the number of bytes available before blocking.</member>
        <member name="M:biz.ritter.javapi.io.ByteArrayInputStream.close">
                     * Closes this stream and frees resources associated with this stream.
                     *
                     * @throws IOException
                     *             if an I/O error occurs while closing this stream.</member>
        <member name="M:biz.ritter.javapi.io.ByteArrayInputStream.mark(System.Int32)">
                     * Sets a mark position in this ByteArrayInputStream. The parameter
                     * {@code readlimit} is ignored. Sending {@code reset()} will reposition the
                     * stream back to the marked position.
                     *
                     * @param readlimit
                     *            ignored.
                     * @see #markSupported()
                     * @see #reset()</member>
        <member name="M:biz.ritter.javapi.io.ByteArrayInputStream.markSupported">
                     * Indicates whether this stream supports the {@code mark()} and
                     * {@code reset()} methods. Returns {@code true} since this class supports
                     * these methods.
                     *
                     * @return always {@code true}.
                     * @see #mark(int)
                     * @see #reset()</member>
        <member name="M:biz.ritter.javapi.io.ByteArrayInputStream.read">
                     * Reads a single byte from the source byte array and returns it as an
                     * integer in the range from 0 to 255. Returns -1 if the end of the source
                     * array has been reached.
                     *
                     * @return the byte read or -1 if the end of this stream has been reached.</member>
        <member name="M:biz.ritter.javapi.io.ByteArrayInputStream.read(System.Byte[],System.Int32,System.Int32)">
                     * Reads at most {@code len} bytes from this stream and stores
                     * them in byte array {@code b} starting at {@code offset}. This
                     * implementation reads bytes from the source byte array.
                     *
                     * @param b
                     *            the byte array in which to store the bytes read.
                     * @param offset
                     *            the initial position in {@code b} to store the bytes read from
                     *            this stream.
                     * @param length
                     *            the maximum number of bytes to store in {@code b}.
                     * @return the number of bytes actually read or -1 if no bytes were read and
                     *         the end of the stream was encountered.
                     * @throws IndexOutOfBoundsException
                     *             if {@code offset &lt; 0} or {@code length &lt; 0}, or if
                     *             {@code offset + length} is greater than the size of
                     *             {@code b}.
                     * @throws NullPointerException
                     *             if {@code b} is {@code null}.</member>
        <member name="M:biz.ritter.javapi.io.ByteArrayInputStream.reset">
                     * Resets this stream to the last marked location. This implementation
                     * resets the position to either the marked position, the start position
                     * supplied in the constructor or 0 if neither has been provided.
                     *
                     * @see #mark(int)</member>
        <member name="M:biz.ritter.javapi.io.ByteArrayInputStream.skip(System.Int64)">
                     * Skips {@code count} number of bytes in this InputStream. Subsequent
                     * {@code read()}s will not return these bytes unless {@code reset()} is
                     * used. This implementation skips {@code count} number of bytes in the
                     * target stream. It does nothing and returns 0 if {@code n} is negative.
                     *
                     * @param n
                     *            the number of bytes to skip.
                     * @return the number of bytes actually skipped.</member>
        <member name="T:biz.ritter.javapi.io.ByteArrayOutputStream">
                 * A specialized {@link OutputStream} for class for writing content to an
                 * (internal) byte array. As bytes are written to this stream, the byte array
                 * may be expanded to hold more bytes. When the writing is considered to be
                 * finished, a copy of the byte array can be requested from the class.
                 *
                 * @see ByteArrayInputStream</member>
        <member name="F:biz.ritter.javapi.io.ByteArrayOutputStream.buf">
                     * The byte array containing the bytes written.</member>
        <member name="F:biz.ritter.javapi.io.ByteArrayOutputStream.count">
                     * The number of bytes written.</member>
        <member name="M:biz.ritter.javapi.io.ByteArrayOutputStream.#ctor">
                     * Constructs a new ByteArrayOutputStream with a default size of 32 bytes.
                     * If more than 32 bytes are written to this instance, the underlying byte
                     * array will expand.</member>
        <member name="M:biz.ritter.javapi.io.ByteArrayOutputStream.#ctor(System.Int32)">
                     * Constructs a new {@code ByteArrayOutputStream} with a default size of
                     * {@code size} bytes. If more than {@code size} bytes are written to this
                     * instance, the underlying byte array will expand.
                     *
                     * @param size
                     *            initial size for the underlying byte array, must be
                     *            non-negative.
                     * @throws IllegalArgumentException
                     *             if {@code size} &lt; 0.</member>
        <member name="M:biz.ritter.javapi.io.ByteArrayOutputStream.close">
                     * Closes this stream. This releases system resources used for this stream.
                     *
                     * @throws IOException
                     *             if an error occurs while attempting to close this stream.</member>
        <member name="M:biz.ritter.javapi.io.ByteArrayOutputStream.reset">
                     * Resets this stream to the beginning of the underlying byte array. All
                     * subsequent writes will overwrite any bytes previously stored in this
                     * stream.</member>
        <member name="M:biz.ritter.javapi.io.ByteArrayOutputStream.size">
                     * Returns the total number of bytes written to this stream so far.
                     *
                     * @return the number of bytes written to this stream.</member>
        <member name="M:biz.ritter.javapi.io.ByteArrayOutputStream.toByteArray">
                     * Returns the contents of this ByteArrayOutputStream as a byte array. Any
                     * changes made to the receiver after returning will not be reflected in the
                     * byte array returned to the caller.
                     *
                     * @return this stream's current contents as a byte array.</member>
        <member name="M:biz.ritter.javapi.io.ByteArrayOutputStream.ToString">
                     * Returns the contents of this ByteArrayOutputStream as a string. Any
                     * changes made to the receiver after returning will not be reflected in the
                     * string returned to the caller.
                     *
                     * @return this stream's current contents as a string.</member>
        <member name="M:biz.ritter.javapi.io.ByteArrayOutputStream.toString(System.Int32)">
                     * Returns the contents of this ByteArrayOutputStream as a string. Each byte
                     * {@code b} in this stream is converted to a character {@code c} using the
                     * following function:
                     * {@code c == (char)(((hibyte &amp; 0xff) &lt;&lt; 8) | (b &amp; 0xff))}. This method is
                     * deprecated and either {@link #toString()} or {@link #toString(String)}
                     * should be used.
                     *
                     * @param hibyte
                     *            the high byte of each resulting Unicode character.
                     * @return this stream's current contents as a string with the high byte set
                     *         to {@code hibyte}.
                     * @deprecated Use {@link #toString()}.</member>
        <member name="M:biz.ritter.javapi.io.ByteArrayOutputStream.toString(System.String)">
                     * Returns the contents of this ByteArrayOutputStream as a string converted
                     * according to the encoding declared in {@code enc}.
                     *
                     * @param enc
                     *            a string representing the encoding to use when translating
                     *            this stream to a string.
                     * @return this stream's current contents as an encoded string.
                     * @throws UnsupportedEncodingException
                     *             if the provided encoding is not supported.</member>
        <member name="M:biz.ritter.javapi.io.ByteArrayOutputStream.write(System.Byte[],System.Int32,System.Int32)">
                     * Writes {@code count} bytes from the byte array {@code buffer} starting at
                     * offset {@code index} to this stream.
                     *
                     * @param buffer
                     *            the buffer to be written.
                     * @param offset
                     *            the initial position in {@code buffer} to retrieve bytes.
                     * @param len
                     *            the number of bytes of {@code buffer} to write.
                     * @throws NullPointerException
                     *             if {@code buffer} is {@code null}.
                     * @throws IndexOutOfBoundsException
                     *             if {@code offset &lt; 0} or {@code len &lt; 0}, or if
                     *             {@code offset + len} is greater than the length of
                     *             {@code buffer}.</member>
        <member name="M:biz.ritter.javapi.io.ByteArrayOutputStream.write(System.Int32)">
                     * Writes the specified byte {@code oneByte} to the OutputStream. Only the
                     * low order byte of {@code oneByte} is written.
                     *
                     * @param oneByte
                     *            the byte to be written.</member>
        <member name="M:biz.ritter.javapi.io.ByteArrayOutputStream.writeTo(biz.ritter.javapi.io.OutputStream)">
                     * Takes the contents of this stream and writes it to the output stream
                     * {@code out}.
                     *
                     * @param out
                     *            an OutputStream on which to write the contents of this stream.
                     * @throws IOException
                     *             if an error occurs while writing to {@code out}.</member>
        <member name="T:biz.ritter.javapi.io.EOFException">
                 * Thrown when a program encounters the end of a file or stream during an input
                 * operation.</member>
        <member name="M:biz.ritter.javapi.io.EOFException.#ctor">
                     * Constructs a new {@code EOFException} with its stack trace filled in.</member>
        <member name="M:biz.ritter.javapi.io.EOFException.#ctor(System.String)">
                     * Constructs a new {@code EOFException} with its stack trace and detail
                     * message filled in.
                     *
                     * @param detailMessage
                     *            the detail message for this exception.</member>
        <member name="T:biz.ritter.javapi.io.InputStreamReader">
                 * A class for turning a byte stream into a character stream. Data read from the
                 * source input stream is converted into characters by either a default or a
                 * provided character converter. The default encoding is taken from the
                 * "file.encoding" system property. {@code InputStreamReader} contains a buffer
                 * of bytes read from the source stream and converts these into characters as
                 * needed. The buffer size is 8K.
                 *
                 * @see OutputStreamWriter</member>
        <member name="M:biz.ritter.javapi.io.InputStreamReader.#ctor(biz.ritter.javapi.io.InputStream)">
                     * Constructs a new {@code InputStreamReader} on the {@link InputStream}
                     * {@code in}. This constructor sets the character converter to the encoding
                     * specified in the "file.encoding" property and falls back to ISO 8859_1
                     * (ISO-Latin-1) if the property doesn't exist.
                     *
                     * @param in
                     *            the input stream from which to read characters.</member>
        <member name="M:biz.ritter.javapi.io.InputStreamReader.#ctor(biz.ritter.javapi.io.InputStream,System.String)">
                     * Constructs a new InputStreamReader on the InputStream {@code in}. The
                     * character converter that is used to decode bytes into characters is
                     * identified by name by {@code enc}. If the encoding cannot be found, an
                     * UnsupportedEncodingException error is thrown.
                     *
                     * @param in
                     *            the InputStream from which to read characters.
                     * @param enc
                     *            identifies the character converter to use.
                     * @throws NullPointerException
                     *             if {@code enc} is {@code null}.
                     * @throws UnsupportedEncodingException
                     *             if the encoding specified by {@code enc} cannot be found.</member>
        <member name="M:biz.ritter.javapi.io.InputStreamReader.#ctor(biz.ritter.javapi.io.InputStream,biz.ritter.javapi.nio.charset.CharsetDecoder)">
                     * Constructs a new InputStreamReader on the InputStream {@code in} and
                     * CharsetDecoder {@code dec}.
                     *
                     * @param in
                     *            the source InputStream from which to read characters.
                     * @param dec
                     *            the CharsetDecoder used by the character conversion.</member>
        <member name="M:biz.ritter.javapi.io.InputStreamReader.#ctor(biz.ritter.javapi.io.InputStream,biz.ritter.javapi.nio.charset.Charset)">
                     * Constructs a new InputStreamReader on the InputStream {@code in} and
                     * Charset {@code charset}.
                     *
                     * @param in
                     *            the source InputStream from which to read characters.
                     * @param charset
                     *            the Charset that defines the character converter</member>
        <member name="M:biz.ritter.javapi.io.InputStreamReader.close">
                     * Closes this reader. This implementation closes the source InputStream and
                     * releases all local storage.
                     *
                     * @throws IOException
                     *             if an error occurs attempting to close this reader.</member>
        <member name="M:biz.ritter.javapi.io.InputStreamReader.getEncoding">
                     * Returns the name of the encoding used to convert bytes into characters.
                     * The value {@code null} is returned if this reader has been closed.
                     *
                     * @return the name of the character converter or {@code null} if this
                     *         reader is closed.</member>
        <member name="M:biz.ritter.javapi.io.InputStreamReader.read">
                     * Reads a single character from this reader and returns it as an integer
                     * with the two higher-order bytes set to 0. Returns -1 if the end of the
                     * reader has been reached. The byte value is either obtained from
                     * converting bytes in this reader's buffer or by first filling the buffer
                     * from the source InputStream and then reading from the buffer.
                     *
                     * @return the character read or -1 if the end of the reader has been
                     *         reached.
                     * @throws IOException
                     *             if this reader is closed or some other I/O error occurs.</member>
        <member name="M:biz.ritter.javapi.io.InputStreamReader.read(System.Char[],System.Int32,System.Int32)">
                     * Reads at most {@code length} characters from this reader and stores them
                     * at position {@code offset} in the character array {@code buf}. Returns
                     * the number of characters actually read or -1 if the end of the reader has
                     * been reached. The bytes are either obtained from converting bytes in this
                     * reader's buffer or by first filling the buffer from the source
                     * InputStream and then reading from the buffer.
                     *
                     * @param buf
                     *            the array to store the characters read.
                     * @param offset
                     *            the initial position in {@code buf} to store the characters
                     *            read from this reader.
                     * @param length
                     *            the maximum number of characters to read.
                     * @return the number of characters read or -1 if the end of the reader has
                     *         been reached.
                     * @throws IndexOutOfBoundsException
                     *             if {@code offset &lt; 0} or {@code length &lt; 0}, or if
                     *             {@code offset + length} is greater than the length of
                     *             {@code buf}.
                     * @throws IOException
                     *             if this reader is closed or some other I/O error occurs.</member>
        <member name="M:biz.ritter.javapi.io.InputStreamReader.ready">
                     * Indicates whether this reader is ready to be read without blocking. If
                     * the result is {@code true}, the next {@code read()} will not block. If
                     * the result is {@code false} then this reader may or may not block when
                     * {@code read()} is called. This implementation returns {@code true} if
                     * there are bytes available in the buffer or the source stream has bytes
                     * available.
                     *
                     * @return {@code true} if the receiver will not block when {@code read()}
                     *         is called, {@code false} if unknown or blocking will occur.
                     * @throws IOException
                     *             if this reader is closed or some other I/O error occurs.</member>
        <member name="T:biz.ritter.javapi.io.InterruptedIOException">
                 * Signals that a blocking I/O operation has been interrupted. The number of
                 * bytes that were transferred successfully before the interruption took place
                 * is stored in a field of the exception.</member>
        <member name="F:biz.ritter.javapi.io.InterruptedIOException.bytesTransferred">
                     * The number of bytes transferred before the I/O interrupt occurred.</member>
        <member name="M:biz.ritter.javapi.io.InterruptedIOException.#ctor">
                     * Constructs a new {@code InterruptedIOException} with its stack trace
                     * filled in.</member>
        <member name="M:biz.ritter.javapi.io.InterruptedIOException.#ctor(System.String)">
                     * Constructs a new {@code InterruptedIOException} with its stack trace and
                     * detail message filled in.
                     *
                     * @param detailMessage
                     *            the detail message for this exception.</member>
        <member name="M:biz.ritter.javapi.io.RandomAccessFile.write(System.Byte)">
            <summary>
            Write a single byte
            </summary>
            <param name="b">
            </param>
        </member>
        <member name="M:biz.ritter.javapi.io.RandomAccessFile.readFully(System.Byte[])">
                     * Reads bytes from this file into {@code buffer}. Blocks until {@code
                     * buffer.length} number of bytes have been read, the end of the file is
                     * reached or an exception is thrown.
                     *
                     * @param buffer
                     *            the buffer to read bytes into.
                     * @throws EOFException
                     *             if the end of this file is detected.
                     * @throws IOException
                     *             if this file is closed or another I/O error occurs.
                     * @throws NullPointerException
                     *             if {@code buffer} is {@code null}.</member>
        <member name="M:biz.ritter.javapi.io.RandomAccessFile.readFully(System.Byte[],System.Int32,System.Int32)">
                     * Read bytes from this file into {@code buffer} starting at offset {@code
                     * offset}. This method blocks until {@code count} number of bytes have been
                     * read.
                     *
                     * @param buffer
                     *            the buffer to read bytes into.
                     * @param offset
                     *            the initial position in {@code buffer} to store the bytes read
                     *            from this file.
                     * @param count
                     *            the maximum number of bytes to store in {@code buffer}.
                     * @throws EOFException
                     *             if the end of this file is detected.
                     * @throws IndexOutOfBoundsException
                     *             if {@code offset &lt; 0} or {@code count &lt; 0}, or if {@code
                     *             offset + count} is greater than the length of {@code buffer}.
                     * @throws IOException
                     *             if this file is closed or another I/O error occurs.
                     * @throws NullPointerException
                     *             if {@code buffer} is {@code null}.</member>
        <member name="M:biz.ritter.javapi.io.RandomAccessFile.length">
                     * Returns the length of this file in bytes.
                     *
                     * @return the file's length in bytes.
                     * @throws IOException
                     *             if this file is closed or some other I/O error occurs.</member>
        <member name="M:biz.ritter.javapi.io.RandomAccessFile.openCheck">
                     * Checks to see if the file is currently open. Returns silently if it is,
                     * and throws an exception if it is not.
                     *
                     * @throws IOException
                     *             the receiver is closed.</member>
        <member name="M:biz.ritter.javapi.io.RandomAccessFile.skipBytes(System.Int32)">
                     * Skips over {@code count} bytes in this file. Less than {@code count}
                     * bytes are skipped if the end of the file is reached or an exception is
                     * thrown during the operation. Nothing is done if {@code count} is
                     * negative.
                     *
                     * @param count
                     *            the number of bytes to skip.
                     * @return the number of bytes actually skipped.
                     * @throws IOException
                     *             if this file is closed or another I/O error occurs.</member>
        <member name="M:biz.ritter.javapi.io.RandomAccessFile.seek(System.Int64)">
                     * Moves this file's file pointer to a new position, from where following
                     * {@code read}, {@code write} or {@code skip} operations are done. The
                     * position may be greater than the current length of the file, but the
                     * file's length will only change if the moving of the pointer is followed
                     * by a {@code write} operation.
                     *
                     * @param pos
                     *            the new file pointer position.
                     * @throws IOException
                     *             if this file is closed, {@code pos &lt; 0} or another I/O error
                     *             occurs.</member>
        <member name="M:biz.ritter.javapi.io.RandomAccessFile.getFilePointer">
                     * Gets the current position within this file. All reads and
                     * writes take place at the current file pointer position.
                     *
                     * @return the current offset in bytes from the beginning of the file.
                     *
                     * @throws IOException
                     *             if an error occurs while getting the file pointer of this
                     *             file.</member>
        <member name="M:biz.ritter.javapi.io.RandomAccessFile.read(System.Byte[],System.Int32,System.Int32)">
                     * Reads at most {@code count} bytes from the current position in this file
                     * and stores them in the byte array {@code buffer} starting at {@code
                     * offset}. Blocks until {@code count} bytes have been read, the end of the
                     * file is reached or an exception is thrown.
                     *
                     * @param buffer
                     *            the array in which to store the bytes read from this file.
                     * @param offset
                     *            the initial position in {@code buffer} to store the bytes read
                     *            from this file.
                     * @param count
                     *            the maximum number of bytes to store in {@code buffer}.
                     * @return the number of bytes actually read or -1 if the end of the stream
                     *         has been reached.
                     * @throws IndexOutOfBoundsException
                     *             if {@code offset &lt; 0} or {@code count &lt; 0}, or if {@code
                     *             offset + count} is greater than the size of {@code buffer}.
                     * @throws IOException
                     *             if this file is closed or another I/O error occurs.</member>
        <member name="M:biz.ritter.javapi.io.RandomAccessFile.readLine">
                 * Reads a line of text form the current position in this file. A line is
                 * represented by zero or more characters followed by {@code '\n'}, {@code
                 * '\r'}, {@code "\r\n"} or the end of file marker. The string does not
                 * include the line terminating sequence.
                 * <p />
                 * Blocks until a line terminating sequence has been read, the end of the
                 * file is reached or an exception is thrown.
                 *
                 * @return the contents of the line or {@code null} if no characters have
                 *         been read before the end of the file has been reached.
                 * @throws IOException
                 *             if this file is closed or another I/O error occurs.</member>
        <member name="T:biz.ritter.javapi.io.StreamTokenizer">
                 * Parses a stream into a set of defined tokens, one at a time. The different
                 * types of tokens that can be found are numbers, identifiers, quoted strings,
                 * and different comment styles. The class can be used for limited processing
                 * of source code of programming languages like Java, although it is nowhere
                 * near a full parser.</member>
        <member name="F:biz.ritter.javapi.io.StreamTokenizer.nval">
                     * Contains a number if the current token is a number ({@code ttype} ==
                     * {@code TT_NUMBER}).</member>
        <member name="F:biz.ritter.javapi.io.StreamTokenizer.sval">
                     * Contains a string if the current token is a word ({@code ttype} ==
                     * {@code TT_WORD}).</member>
        <member name="F:biz.ritter.javapi.io.StreamTokenizer.TT_EOF">
                     * The constant representing the end of the stream.</member>
        <member name="F:biz.ritter.javapi.io.StreamTokenizer.TT_EOL">
                     * The constant representing the end of the line.</member>
        <member name="F:biz.ritter.javapi.io.StreamTokenizer.TT_NUMBER">
                     * The constant representing a number token.</member>
        <member name="F:biz.ritter.javapi.io.StreamTokenizer.TT_WORD">
                     * The constant representing a word token.</member>
        <member name="F:biz.ritter.javapi.io.StreamTokenizer.TT_UNKNOWN">
                     * Internal representation of unknown state.</member>
        <member name="F:biz.ritter.javapi.io.StreamTokenizer.ttype">
                     * After calling {@code nextToken()}, {@code ttype} contains the type of
                     * token that has been read. When a single character is read, its value
                     * converted to an integer is stored in {@code ttype}. For a quoted string,
                     * the value is the quoted character. Otherwise, its value is one of the
                     * following:
                     * <ul>
                     * <li> {@code TT_WORD} - the token is a word.</li>
                     * <li> {@code TT_NUMBER} - the token is a number.</li>
                     * <li> {@code TT_EOL} - the end of line has been reached. Depends on
                     * whether {@code eolIsSignificant} is {@code true}.</li>
                     * <li> {@code TT_EOF} - the end of the stream has been reached.</li>
                     * </ul></member>
        <member name="F:biz.ritter.javapi.io.StreamTokenizer.tokenTypes">
                     * Internal character meanings, 0 implies TOKEN_ORDINARY</member>
        <member name="M:biz.ritter.javapi.io.StreamTokenizer.#ctor">
                     * Private constructor to initialize the default values according to the
                     * specification.</member>
        <member name="M:biz.ritter.javapi.io.StreamTokenizer.#ctor(biz.ritter.javapi.io.InputStream)">
                     * Constructs a new {@code StreamTokenizer} with {@code is} as source input
                     * stream. This constructor is deprecated; instead, the constructor that
                     * takes a {@code Reader} as an arugment should be used.
                     *
                     * @param is
                     *            the source stream from which to parse tokens.
                     * @throws NullPointerException
                     *             if {@code is} is {@code null}.
                     * @deprecated Use {@link #StreamTokenizer(Reader)}</member>
        <member name="M:biz.ritter.javapi.io.StreamTokenizer.#ctor(biz.ritter.javapi.io.Reader)">
                     * Constructs a new {@code StreamTokenizer} with {@code r} as source reader.
                     * The tokenizer's initial state is as follows:
                     * <ul>
                     * <li>All byte values 'A' through 'Z', 'a' through 'z', and '\u00A0'
                     * through '\u00FF' are considered to be alphabetic.</li>
                     * <li>All byte values '\u0000' through '\u0020' are considered to
                     * be white space. '/' is a comment character.</li>
                     * <li>Single quote '\'' and double quote '"' are string quote characters.
                     * </li>
                     * <li>Numbers are parsed.</li>
                     * <li>End of lines are considered to be white space rather than separate
                     * tokens.</li>
                     * <li>C-style and C++-style comments are not recognized.</li>
                     * </ul>
                     *
                     * @param r
                     *            the source reader from which to parse tokens.</member>
        <member name="M:biz.ritter.javapi.io.StreamTokenizer.commentChar(System.Int32)">
                     * Specifies that the character {@code ch} shall be treated as a comment
                     * character.
                     *
                     * @param ch
                     *            the character to be considered a comment character.</member>
        <member name="M:biz.ritter.javapi.io.StreamTokenizer.eolIsSignificant(System.Boolean)">
                     * Specifies whether the end of a line is significant and should be returned
                     * as {@code TT_EOF} in {@code ttype} by this tokenizer.
                     *
                     * @param flag
                     *            {@code true} if EOL is significant, {@code false} otherwise.</member>
        <member name="M:biz.ritter.javapi.io.StreamTokenizer.lineno">
                     * Returns the current line number.
                     *
                     * @return this tokenizer's current line number.</member>
        <member name="M:biz.ritter.javapi.io.StreamTokenizer.lowerCaseMode(System.Boolean)">
                     * Specifies whether word tokens should be converted to lower case when they
                     * are stored in {@code sval}.
                     *
                     * @param flag
                     *            {@code true} if {@code sval} should be converted to lower
                     *            case, {@code false} otherwise.</member>
        <member name="M:biz.ritter.javapi.io.StreamTokenizer.nextToken">
                     * Parses the next token from this tokenizer's source stream or reader. The
                     * type of the token is stored in the {@code ttype} field, additional
                     * information may be stored in the {@code nval} or {@code sval} fields.
                     *
                     * @return the value of {@code ttype}.
                     * @throws IOException
                     *             if an I/O error occurs while parsing the next token.</member>
        <member name="M:biz.ritter.javapi.io.StreamTokenizer.ordinaryChar(System.Int32)">
                     * Specifies that the character {@code ch} shall be treated as an ordinary
                     * character by this tokenizer. That is, it has no special meaning as a
                     * comment character, word component, white space, string delimiter or
                     * number.
                     *
                     * @param ch
                     *            the character to be considered an ordinary character.</member>
        <member name="M:biz.ritter.javapi.io.StreamTokenizer.ordinaryChars(System.Int32,System.Int32)">
                     * Specifies that the characters in the range from {@code low} to {@code hi}
                     * shall be treated as an ordinary character by this tokenizer. That is,
                     * they have no special meaning as a comment character, word component,
                     * white space, string delimiter or number.
                     *
                     * @param low
                     *            the first character in the range of ordinary characters.
                     * @param hi
                     *            the last character in the range of ordinary characters.</member>
        <member name="M:biz.ritter.javapi.io.StreamTokenizer.parseNumbers">
                     * Specifies that this tokenizer shall parse numbers.</member>
        <member name="M:biz.ritter.javapi.io.StreamTokenizer.pushBack">
                     * Indicates that the current token should be pushed back and returned again
                     * the next time {@code nextToken()} is called.</member>
        <member name="M:biz.ritter.javapi.io.StreamTokenizer.quoteChar(System.Int32)">
                     * Specifies that the character {@code ch} shall be treated as a quote
                     * character.
                     *
                     * @param ch
                     *            the character to be considered a quote character.</member>
        <member name="M:biz.ritter.javapi.io.StreamTokenizer.resetSyntax">
                     * Specifies that all characters shall be treated as ordinary characters.</member>
        <member name="M:biz.ritter.javapi.io.StreamTokenizer.slashSlashComments(System.Boolean)">
                     * Specifies whether "slash-slash" (C++-style) comments shall be recognized.
                     * This kind of comment ends at the end of the line.
                     *
                     * @param flag
                     *            {@code true} if {@code //} should be recognized as the start
                     *            of a comment, {@code false} otherwise.</member>
        <member name="M:biz.ritter.javapi.io.StreamTokenizer.slashStarComments(System.Boolean)">
                     * Specifies whether "slash-star" (C-style) comments shall be recognized.
                     * Slash-star comments cannot be nested and end when a star-slash
                     * combination is found.
                     *
                     * @param flag
                     *            {@code true} if {@code /*} should be recognized as the start
                     *            of a comment, {@code false} otherwise.</member>
        <member name="M:biz.ritter.javapi.io.StreamTokenizer.ToString">
                     * Returns the state of this tokenizer in a readable format.
                     *
                     * @return the current state of this tokenizer.</member>
        <member name="M:biz.ritter.javapi.io.StreamTokenizer.whitespaceChars(System.Int32,System.Int32)">
                     * Specifies that the characters in the range from {@code low} to {@code hi}
                     * shall be treated as whitespace characters by this tokenizer.
                     *
                     * @param low
                     *            the first character in the range of whitespace characters.
                     * @param hi
                     *            the last character in the range of whitespace characters.</member>
        <member name="M:biz.ritter.javapi.io.StreamTokenizer.wordChars(System.Int32,System.Int32)">
                     * Specifies that the characters in the range from {@code low} to {@code hi}
                     * shall be treated as word characters by this tokenizer. A word consists of
                     * a word character followed by zero or more word or number characters.
                     *
                     * @param low
                     *            the first character in the range of word characters.
                     * @param hi
                     *            the last character in the range of word characters.</member>
        <member name="T:biz.ritter.javapi.lang.ArithmeticException">
                 * Thrown when the an invalid arithmetic operation is attempted.</member>
        <member name="M:biz.ritter.javapi.lang.ArithmeticException.#ctor">
                     * Constructs a new {@code ArithmeticException} that includes the current
                     * stack trace.</member>
        <member name="M:biz.ritter.javapi.lang.ArithmeticException.#ctor(System.String)">
                     * Constructs a new {@code ArithmeticException} with the current stack trace
                     * and the specified detail message.
                     *
                     * @param detailMessage
                     *            the detail message for this exception.</member>
        <member name="F:biz.ritter.javapi.lang.Character.UPPERCASE_LETTER">
                     * Unicode category constant Lu.</member>
        <member name="F:biz.ritter.javapi.lang.Character.OTHER_LETTER">
                     * Unicode category constant Lo.</member>
        <member name="M:biz.ritter.javapi.lang.Character.toLowerCase(System.Char)">
                     * Returns the lower case equivalent for the specified character if the
                     * character is an upper case letter. Otherwise, the specified character is
                     * returned unchanged.
                     *
                     * @param c
                     *            the character
                     * @return if {@code c} is an upper case character then its lower case
                     *         counterpart, otherwise just {@code c}.</member>
        <member name="M:biz.ritter.javapi.lang.Character.isUpperCase(System.Char)">
                     * Indicates whether the specified character is an upper case letter.
                     *
                     * @param c
                     *            the character to check.
                     * @return {@code true} if {@code c} is a upper case letter; {@code false}
                     *         otherwise.</member>
        <member name="M:biz.ritter.javapi.lang.Character.#ctor(System.Char)">
                     * Constructs a new {@code Character} with the specified primitive char
                     * value.
                     *
                     * @param value
                     *            the primitive char value to store in the new instance.</member>
        <member name="M:biz.ritter.javapi.lang.Character.charValue">
                     * Gets the primitive value of this character.
                     *
                     * @return this object's primitive value.</member>
        <member name="F:biz.ritter.javapi.lang.Character.TYPE">
                     * The {@link Class} object that represents the primitive type {@code char}.</member>
        <member name="F:biz.ritter.javapi.lang.Character.UNASSIGNED">
                     * Unicode category constant Cn.</member>
        <member name="F:biz.ritter.javapi.lang.Character.DECIMAL_DIGIT_NUMBER">
                     * Unicode category constant Nd.</member>
        <member name="F:biz.ritter.javapi.lang.Character.MIN_SUPPLEMENTARY_CODE_POINT">
                     * The minimum value of a supplementary code point, {@code U+010000}.
                     *
                     * @since 1.5</member>
        <member name="F:biz.ritter.javapi.lang.Character.MIN_CODE_POINT">
                     * The minimum code point value, {@code U+0000}.
                     *
                     * @since 1.5</member>
        <member name="F:biz.ritter.javapi.lang.Character.MAX_CODE_POINT">
                     * The maximum code point value, {@code U+10FFFF}.
                     *
                     * @since 1.5</member>
        <member name="F:biz.ritter.javapi.lang.Character.MIN_HIGH_SURROGATE">
                     * The minimum value of a high surrogate or leading surrogate unit in UTF-16
                     * encoding, {@code '\uD800'}.
                     *
                     * @since 1.5</member>
        <member name="F:biz.ritter.javapi.lang.Character.MAX_HIGH_SURROGATE">
                     * The maximum value of a high surrogate or leading surrogate unit in UTF-16
                     * encoding, {@code '\uDBFF'}.
                     *
                     * @since 1.5</member>
        <member name="F:biz.ritter.javapi.lang.Character.MIN_LOW_SURROGATE">
                     * The minimum value of a low surrogate or trailing surrogate unit in UTF-16
                     * encoding, {@code '\uDC00'}.
                     *
                     * @since 1.5</member>
        <member name="F:biz.ritter.javapi.lang.Character.MAX_LOW_SURROGATE">
                     * The maximum value of a low surrogate or trailing surrogate unit in UTF-16
                     * encoding, {@code '\uDFFF'}.
                     *
                     * @since 1.5</member>
        <member name="F:biz.ritter.javapi.lang.Character.MIN_SURROGATE">
                     * The minimum value of a surrogate unit in UTF-16 encoding, {@code '\uD800'}.
                     *
                     * @since 1.5</member>
        <member name="F:biz.ritter.javapi.lang.Character.MIN_VALUE">
                     * The minimum {@code Character} value.</member>
        <member name="F:biz.ritter.javapi.lang.Character.MAX_VALUE">
                     * The maximum {@code Character} value.</member>
        <member name="F:biz.ritter.javapi.lang.Character.MIN_RADIX">
                     * The minimum radix used for conversions between characters and integers.</member>
        <member name="F:biz.ritter.javapi.lang.Character.MAX_RADIX">
                     * The maximum radix used for conversions between characters and integers.</member>
        <member name="M:biz.ritter.javapi.lang.Character.forDigit(System.Int32,System.Int32)">
                     * Returns the character which represents the specified digit in the
                     * specified radix. The {@code radix} must be between {@code MIN_RADIX} and
                     * {@code MAX_RADIX} inclusive; {@code digit} must not be negative and
                     * smaller than {@code radix}. If any of these conditions does not hold, 0
                     * is returned.
                     *
                     * @param digit
                     *            the integer value.
                     * @param radix
                     *            the radix.
                     * @return the character which represents the {@code digit} in the
                     *         {@code radix}.</member>
        <member name="M:biz.ritter.javapi.lang.Character.digit(System.Char,System.Int32)">
                     * Convenience method to determine the value of the specified character
                     * {@code c} in the supplied radix. The value of {@code radix} must be
                     * between MIN_RADIX and MAX_RADIX.
                     *
                     * @param c
                     *            the character to determine the value of.
                     * @param radix
                     *            the radix.
                     * @return the value of {@code c} in {@code radix} if {@code radix} lies
                     *         between {@link #MIN_RADIX} and {@link #MAX_RADIX}; -1 otherwise.</member>
        <member name="M:biz.ritter.javapi.lang.Character.isSpace(System.Char)">
                     * Indicates whether the specified character is a Java space.
                     *
                     * @param c
                     *            the character to check.
                     * @return {@code true} if {@code c} is a Java space; {@code false}
                     *         otherwise.
                     * @deprecated Use {@link #isWhitespace(char)}</member>
        <member name="M:biz.ritter.javapi.lang.Character.isSpaceChar(System.Char)">
                     * Indicates whether the specified character is a Unicode space character.
                     * That is, if it is a member of one of the Unicode categories Space
                     * Separator, Line Separator, or Paragraph Separator.
                     *
                     * @param c
                     *            the character to check.
                     * @return {@code true} if {@code c} is a Unicode space character,
                     *         {@code false} otherwise.</member>
        <member name="M:biz.ritter.javapi.lang.Character.isWhitespace(System.Char)">
                     * Indicates whether the specified character is a whitespace character in
                     * Java.
                     *
                     * @param c
                     *            the character to check.
                     * @return {@code true} if the supplied {@code c} is a whitespace character
                     *         in Java; {@code false} otherwise.</member>
        <member name="M:biz.ritter.javapi.lang.Character.isISOControl(System.Char)">
                     * Indicates whether the specified character is an ISO control character.
                     *
                     * @param c
                     *            the character to check.
                     * @return {@code true} if {@code c} is an ISO control character;
                     *         {@code false} otherwise.</member>
        <member name="M:biz.ritter.javapi.lang.Character.isISOControl(System.Int32)">
                     * Indicates whether the specified code point is an ISO control character.
                     *
                     * @param c
                     *            the code point to check.
                     * @return {@code true} if {@code c} is an ISO control character;
                     *         {@code false} otherwise.</member>
        <member name="M:biz.ritter.javapi.lang.Character.codePointAt(biz.ritter.javapi.lang.CharSequence,System.Int32)">
                     * Returns the code point at {@code index} in the specified sequence of
                     * character units. If the unit at {@code index} is a high-surrogate unit,
                     * {@code index + 1} is less than the length of the sequence and the unit at
                     * {@code index + 1} is a low-surrogate unit, then the supplementary code
                     * point represented by the pair is returned; otherwise the {@code char}
                     * value at {@code index} is returned.
                     *
                     * @param seq
                     *            the source sequence of {@code char} units.
                     * @param index
                     *            the position in {@code seq} from which to retrieve the code
                     *            point.
                     * @return the Unicode code point or {@code char} value at {@code index} in
                     *         {@code seq}.
                     * @throws NullPointerException
                     *             if {@code seq} is {@code null}.
                     * @throws IndexOutOfBoundsException
                     *             if the {@code index} is negative or greater than or equal to
                     *             the length of {@code seq}.
                     * @since 1.5</member>
        <member name="M:biz.ritter.javapi.lang.Character.codePointAt(System.Char[],System.Int32)">
                     * Returns the code point at {@code index} in the specified array of
                     * character units. If the unit at {@code index} is a high-surrogate unit,
                     * {@code index + 1} is less than the length of the array and the unit at
                     * {@code index + 1} is a low-surrogate unit, then the supplementary code
                     * point represented by the pair is returned; otherwise the {@code char}
                     * value at {@code index} is returned.
                     *
                     * @param seq
                     *            the source array of {@code char} units.
                     * @param index
                     *            the position in {@code seq} from which to retrieve the code
                     *            point.
                     * @return the Unicode code point or {@code char} value at {@code index} in
                     *         {@code seq}.
                     * @throws NullPointerException
                     *             if {@code seq} is {@code null}.
                     * @throws IndexOutOfBoundsException
                     *             if the {@code index} is negative or greater than or equal to
                     *             the length of {@code seq}.
                     * @since 1.5</member>
        <member name="M:biz.ritter.javapi.lang.Character.codePointAt(System.Char[],System.Int32,System.Int32)">
                     * Returns the code point at {@code index} in the specified array of
                     * character units, where {@code index} has to be less than {@code limit}.
                     * If the unit at {@code index} is a high-surrogate unit, {@code index + 1}
                     * is less than {@code limit} and the unit at {@code index + 1} is a
                     * low-surrogate unit, then the supplementary code point represented by the
                     * pair is returned; otherwise the {@code char} value at {@code index} is
                     * returned.
                     *
                     * @param seq
                     *            the source array of {@code char} units.
                     * @param index
                     *            the position in {@code seq} from which to get the code point.
                     * @param limit
                     *            the index after the last unit in {@code seq} that can be used.
                     * @return the Unicode code point or {@code char} value at {@code index} in
                     *         {@code seq}.
                     * @throws NullPointerException
                     *             if {@code seq} is {@code null}.
                     * @throws IndexOutOfBoundsException
                     *             if {@code index &lt; 0}, {@code index &gt;= limit},
                     *             {@code limit &lt; 0} or if {@code limit} is greater than the
                     *             length of {@code seq}.
                     * @since 1.5</member>
        <member name="M:biz.ritter.javapi.lang.Character.isSurrogatePair(System.Char,System.Char)">
                     * Indicates whether the specified character pair is a valid surrogate pair.
                     *
                     * @param high
                     *            the high surrogate unit to test.
                     * @param low
                     *            the low surrogate unit to test.
                     * @return {@code true} if {@code high} is a high-surrogate code unit and
                     *         {@code low} is a low-surrogate code unit; {@code false}
                     *         otherwise.
                     * @see #isHighSurrogate(char)
                     * @see #isLowSurrogate(char)
                     * @since 1.5</member>
        <member name="M:biz.ritter.javapi.lang.Character.isHighSurrogate(System.Char)">
                     * Indicates whether {@code ch} is a high- (or leading-) surrogate code unit
                     * that is used for representing supplementary characters in UTF-16
                     * encoding.
                     *
                     * @param ch
                     *            the character to test.
                     * @return {@code true} if {@code ch} is a high-surrogate code unit;
                     *         {@code false} otherwise.
                     * @see #isLowSurrogate(char)
                     * @since 1.5</member>
        <member name="M:biz.ritter.javapi.lang.Character.isLowSurrogate(System.Char)">
                     * Indicates whether {@code ch} is a low- (or trailing-) surrogate code unit
                     * that is used for representing supplementary characters in UTF-16
                     * encoding.
                     *
                     * @param ch
                     *            the character to test.
                     * @return {@code true} if {@code ch} is a low-surrogate code unit;
                     *         {@code false} otherwise.
                     * @see #isHighSurrogate(char)
                     * @since 1.5</member>
        <member name="M:biz.ritter.javapi.lang.Character.toCodePoint(System.Char,System.Char)">
                     * Converts a surrogate pair into a Unicode code point. This method assumes
                     * that the pair are valid surrogates. If the pair are <i>not</i> valid
                     * surrogates, then the result is indeterminate. The
                     * {@link #isSurrogatePair(char, char)} method should be used prior to this
                     * method to validate the pair.
                     *
                     * @param high
                     *            the high surrogate unit.
                     * @param low
                     *            the low surrogate unit.
                     * @return the Unicode code point corresponding to the surrogate unit pair.
                     * @see #isSurrogatePair(char, char)
                     * @since 1.5</member>
        <member name="M:biz.ritter.javapi.lang.Character.codePointBefore(biz.ritter.javapi.lang.CharSequence,System.Int32)">
                     * Returns the code point that preceds {@code index} in the specified
                     * sequence of character units. If the unit at {@code index - 1} is a
                     * low-surrogate unit, {@code index - 2} is not negative and the unit at
                     * {@code index - 2} is a high-surrogate unit, then the supplementary code
                     * point represented by the pair is returned; otherwise the {@code char}
                     * value at {@code index - 1} is returned.
                     *
                     * @param seq
                     *            the source sequence of {@code char} units.
                     * @param index
                     *            the position in {@code seq} following the code
                     *            point that should be returned.
                     * @return the Unicode code point or {@code char} value before {@code index}
                     *         in {@code seq}.
                     * @throws NullPointerException
                     *             if {@code seq} is {@code null}.
                     * @throws IndexOutOfBoundsException
                     *             if the {@code index} is less than 1 or greater than the
                     *             length of {@code seq}.
                     * @since 1.5</member>
        <member name="M:biz.ritter.javapi.lang.Character.codePointBefore(System.Char[],System.Int32)">
                     * Returns the code point that preceds {@code index} in the specified
                     * array of character units. If the unit at {@code index - 1} is a
                     * low-surrogate unit, {@code index - 2} is not negative and the unit at
                     * {@code index - 2} is a high-surrogate unit, then the supplementary code
                     * point represented by the pair is returned; otherwise the {@code char}
                     * value at {@code index - 1} is returned.
                     *
                     * @param seq
                     *            the source array of {@code char} units.
                     * @param index
                     *            the position in {@code seq} following the code
                     *            point that should be returned.
                     * @return the Unicode code point or {@code char} value before {@code index}
                     *         in {@code seq}.
                     * @throws NullPointerException
                     *             if {@code seq} is {@code null}.
                     * @throws IndexOutOfBoundsException
                     *             if the {@code index} is less than 1 or greater than the
                     *             length of {@code seq}.
                     * @since 1.5</member>
        <member name="M:biz.ritter.javapi.lang.Character.codePointBefore(System.Char[],System.Int32,System.Int32)">
                     * Returns the code point that preceds the {@code index} in the specified
                     * array of character units and is not less than {@code start}. If the unit
                     * at {@code index - 1} is a low-surrogate unit, {@code index - 2} is not
                     * less than {@code start} and the unit at {@code index - 2} is a
                     * high-surrogate unit, then the supplementary code point represented by the
                     * pair is returned; otherwise the {@code char} value at {@code index - 1}
                     * is returned.
                     *
                     * @param seq
                     *            the source array of {@code char} units.
                     * @param index
                     *            the position in {@code seq} following the code point that
                     *            should be returned.
                     * @param start
                     *            the index of the first element in {@code seq}.
                     * @return the Unicode code point or {@code char} value before {@code index}
                     *         in {@code seq}.
                     * @throws NullPointerException
                     *             if {@code seq} is {@code null}.
                     * @throws IndexOutOfBoundsException
                     *             if the {@code index &lt;= start}, {@code start &lt; 0},
                     *             {@code index} is greater than the length of {@code seq}, or
                     *             if {@code start} is equal or greater than the length of
                     *             {@code seq}.
                     * @since 1.5</member>
        <member name="M:biz.ritter.javapi.lang.Character.codePointCount(biz.ritter.javapi.lang.CharSequence,System.Int32,System.Int32)">
                     * Counts the number of Unicode code points in the subsequence of the
                     * specified character sequence, as delineated by {@code beginIndex} and
                     * {@code endIndex}. Any surrogate values with missing pair values will be
                     * counted as one code point.
                     *
                     * @param seq
                     *            the {@code CharSequence} to look through.
                     * @param beginIndex
                     *            the inclusive index to begin counting at.
                     * @param endIndex
                     *            the exclusive index to stop counting at.
                     * @return the number of Unicode code points.
                     * @throws NullPointerException
                     *             if {@code seq} is {@code null}.
                     * @throws IndexOutOfBoundsException
                     *             if {@code beginIndex &lt; 0}, {@code beginIndex &gt; endIndex} or
                     *             if {@code endIndex} is greater than the length of {@code seq}.
                     * @since 1.5</member>
        <member name="M:biz.ritter.javapi.lang.Character.codePointCount(System.Char[],System.Int32,System.Int32)">
                     * Counts the number of Unicode code points in the subsequence of the
                     * specified char array, as delineated by {@code offset} and {@code count}.
                     * Any surrogate values with missing pair values will be counted as one code
                     * point.
                     *
                     * @param seq
                     *            the char array to look through
                     * @param offset
                     *            the inclusive index to begin counting at.
                     * @param count
                     *            the number of {@code char} values to look through in
                     *            {@code seq}.
                     * @return the number of Unicode code points.
                     * @throws NullPointerException
                     *             if {@code seq} is {@code null}.
                     * @throws IndexOutOfBoundsException
                     *             if {@code offset &lt; 0}, {@code count &lt; 0} or if
                     *             {@code offset + count} is greater than the length of
                     *             {@code seq}.
                     * @since 1.5</member>
        <member name="M:biz.ritter.javapi.lang.Character.offsetByCodePoints(biz.ritter.javapi.lang.CharSequence,System.Int32,System.Int32)">
                     * Determines the index in the specified character sequence that is offset
                     * {@code codePointOffset} code points from {@code index}.
                     *
                     * @param seq
                     *            the character sequence to find the index in.
                     * @param index
                     *            the start index in {@code seq}.
                     * @param codePointOffset
                     *            the number of code points to look backwards or forwards; may
                     *            be a negative or positive value.
                     * @return the index in {@code seq} that is {@code codePointOffset} code
                     *         points away from {@code index}.
                     * @throws NullPointerException
                     *             if {@code seq} is {@code null}.
                     * @throws IndexOutOfBoundsException
                     *             if {@code index &lt; 0}, {@code index} is greater than the
                     *             length of {@code seq}, or if there are not enough values in
                     *             {@code seq} to skip {@code codePointOffset} code points
                     *             forwards or backwards (if {@code codePointOffset} is
                     *             negative) from {@code index}.
                     * @since 1.5</member>
        <member name="M:biz.ritter.javapi.lang.Character.offsetByCodePoints(System.Char[],System.Int32,System.Int32,System.Int32,System.Int32)">
                     * Determines the index in a subsequence of the specified character array
                     * that is offset {@code codePointOffset} code points from {@code index}.
                     * The subsequence is delineated by {@code start} and {@code count}.
                     *
                     * @param seq
                     *            the character array to find the index in.
                     * @param start
                     *            the inclusive index that marks the beginning of the
                     *            subsequence.
                     * @param count
                     *            the number of {@code char} values to include within the
                     *            subsequence.
                     * @param index
                     *            the start index in the subsequence of the char array.
                     * @param codePointOffset
                     *            the number of code points to look backwards or forwards; may
                     *            be a negative or positive value.
                     * @return the index in {@code seq} that is {@code codePointOffset} code
                     *         points away from {@code index}.
                     * @throws NullPointerException
                     *             if {@code seq} is {@code null}.
                     * @throws IndexOutOfBoundsException
                     *             if {@code start &lt; 0}, {@code count &lt; 0},
                     *             {@code index &lt; start}, {@code index &gt; start + count},
                     *             {@code start + count} is greater than the length of
                     *             {@code seq}, or if there are not enough values in
                     *             {@code seq} to skip {@code codePointOffset} code points
                     *             forward or backward (if {@code codePointOffset} is
                     *             negative) from {@code index}.
                     * @since 1.5</member>
        <member name="M:biz.ritter.javapi.lang.Character.toChars(System.Int32)">
                     * Converts the specified Unicode code point into a UTF-16 encoded sequence
                     * and returns it as a char array.
                     *
                     * @param codePoint
                     *            the Unicode code point to encode.
                     * @return the UTF-16 encoded char sequence. If {@code codePoint} is a
                     *         {@link #isSupplementaryCodePoint(int) supplementary code point},
                     *         then the returned array contains two characters, otherwise it
                     *         contains just one character.
                     * @throws IllegalArgumentException
                     *             if {@code codePoint} is not a valid Unicode code point.
                     * @since 1.5</member>
        <member name="M:biz.ritter.javapi.lang.Character.isValidCodePoint(System.Int32)">
                     * Indicates whether {@code codePoint} is a valid Unicode code point.
                     *
                     * @param codePoint
                     *            the code point to test.
                     * @return {@code true} if {@code codePoint} is a valid Unicode code point;
                     *         {@code false} otherwise.
                     * @since 1.5</member>
        <member name="M:biz.ritter.javapi.lang.Character.isSupplementaryCodePoint(System.Int32)">
                     * Indicates whether {@code codePoint} is within the supplementary code
                     * point range.
                     *
                     * @param codePoint
                     *            the code point to test.
                     * @return {@code true} if {@code codePoint} is within the supplementary
                     *         code point range; {@code false} otherwise.
                     * @since 1.5</member>
        <member name="M:biz.ritter.javapi.lang.Character.isDigit(System.Char)">
                     * Indicates whether the specified character is a digit.
                     *
                     * @param c
                     *            the character to check.
                     * @return {@code true} if {@code c} is a digit; {@code false}
                     *         otherwise.</member>
        <member name="M:biz.ritter.javapi.lang.Character.getType(System.Char)">
                     * Gets the general Unicode category of the specified character.
                     *
                     * @param c
                     *            the character to get the category of.
                     * @return the Unicode category of {@code c}.</member>
        <member name="M:biz.ritter.javapi.lang.Character.isLetter(System.Char)">
                     * Indicates whether the specified character is a letter.
                     *
                     * @param c
                     *            the character to check.
                     * @return {@code true} if {@code c} is a letter; {@code false} otherwise.</member>
        <member name="M:biz.ritter.javapi.lang.Character.valueOf(System.Char)">
                     * Returns a {@code Character} instance for the {@code char} value passed.
                     * For ASCII/Latin-1 characters (and generally all characters with a Unicode
                     * value up to 512), this method should be used instead of the constructor,
                     * as it maintains a cache of corresponding {@code Character} instances.
                     *
                     * @param c
                     *            the char value for which to get a {@code Character} instance.
                     * @return the {@code Character} instance for {@code c}.
                     * @since 1.5</member>
        <member name="T:biz.ritter.javapi.lang.ClassCastException">
                 * Thrown when a program attempts to cast a an object to a type with which it is
                 * not compatible.</member>
        <member name="M:biz.ritter.javapi.lang.ClassCastException.#ctor">
                     * Constructs a new {@code ClassCastException} that includes the current
                     * stack trace.</member>
        <member name="M:biz.ritter.javapi.lang.ClassCastException.#ctor(System.String)">
                     * Constructs a new {@code ClassCastException} with the current stack trace
                     * and the specified detail message.
                     *
                     * @param detailMessage
                     *            the detail message for this exception.</member>
        <member name="M:biz.ritter.javapi.lang.ClassCastException.#ctor(System.Type,System.Type)">
                     * Constructs a new {@code ClassCastException} with the current stack trace
                     * and a detail message based on the source and target class.
                     *
                     * @param instanceClass
                     *            the class being cast from.
                     * @param castClass
                     *            the class being cast to.</member>
        <member name="F:biz.ritter.javapi.lang.Double.TYPE">
                     * The {@link Class} object that represents the primitive type {@code
                     * double}.
                     *
                     * @since 1.1</member>
        <member name="F:biz.ritter.javapi.lang.Double.MAX_VALUE">
                     * Constant for the maximum {@code double} value, (2 - 2<sup>-52</sup>) *
                     * 2<sup>1023</sup>.</member>
        <member name="F:biz.ritter.javapi.lang.Double.MIN_VALUE">
                     * Constant for the minimum {@code double} value, 2<sup>-1074</sup>.</member>
        <member name="F:biz.ritter.javapi.lang.Double.NaN">
                     * Constant for the Not-a-Number (NaN) value of the {@code double} type.</member>
        <member name="F:biz.ritter.javapi.lang.Double.POSITIVE_INFINITY">
                     * Constant for the Positive Infinity value of the {@code double} type.</member>
        <member name="F:biz.ritter.javapi.lang.Double.MAX_EXPONENT">
                     * <p>
                     * Maximum exponent that a finite double variable may have.
                     * </p>
                     * @since 1.6</member>
        <member name="F:biz.ritter.javapi.lang.Double.MIN_EXPONENT">
                     * <p>
                     * Minimum exponent that a finite double variable may have.
                     * </p>
                     * @since 1.6</member>
        <member name="F:biz.ritter.javapi.lang.Double.NEGATIVE_INFINITY">
                     * Constant for the Negative Infinity value of the {@code double} type.</member>
        <member name="M:biz.ritter.javapi.lang.Double.isNaN">
                     * Indicates whether this object is a <em>Not-a-Number (NaN)</em> value.
                     *
                     * @return {@code true} if this double is <em>Not-a-Number</em>;
                     *         {@code false} if it is a (potentially infinite) double number.</member>
        <member name="M:biz.ritter.javapi.lang.Double.longBitsToDouble(System.Int64)">
                     * Converts the specified IEEE 754 floating-point double precision bit
                     * pattern to a Java double value.
                     *
                     * @param bits
                     *            the IEEE 754 floating-point double precision representation of
                     *            a double value.
                     * @return the double value converted from {@code bits}.
                     * @see #doubleToLongBits(double)
                     * @see #doubleToRawLongBits(double)</member>
        <member name="M:biz.ritter.javapi.lang.Double.doubleToLongBits(System.Double)">
                     * Converts the specified double value to a binary representation conforming
                     * to the IEEE 754 floating-point double precision bit layout. All
                     * <em>Not-a-Number (NaN)</em> values are converted to a single NaN
                     * representation ({@code 0x7ff8000000000000L}).
                     *
                     * @param value
                     *            the double value to convert.
                     * @return the IEEE 754 floating-point double precision representation of
                     *         {@code value}.
                     * @see #doubleToRawLongBits(double)
                     * @see #longBitsToDouble(long)</member>
        <member name="M:biz.ritter.javapi.lang.Double.isNaN(System.Double)">
                     * Indicates whether the specified double is a <em>Not-a-Number (NaN)</em>
                     * value.
                     *
                     * @param d
                     *            the double value to check.
                     * @return {@code true} if {@code d} is <em>Not-a-Number</em>;
                     *         {@code false} if it is a (potentially infinite) double number.</member>
        <member name="M:biz.ritter.javapi.lang.Double.isInfinite">
                     * Indicates whether this object represents an infinite value.
                     *
                     * @return {@code true} if the value of this double is positive or negative
                     *         infinity; {@code false} otherwise.</member>
        <member name="M:biz.ritter.javapi.lang.Double.isInfinite(System.Double)">
                     * Indicates whether the specified double represents an infinite value.
                     *
                     * @param d
                     *            the double to check.
                     * @return {@code true} if the value of {@code d} is positive or negative
                     *         infinity; {@code false} otherwise.</member>
        <member name="M:biz.ritter.javapi.lang.Double.toString(System.Double)">
                     * Returns a string containing a concise, human-readable description of the
                     * specified double value.
                     *
                     * @param d
                     *             the double to convert to a string.
                     * @return a printable representation of {@code d}.</member>
        <member name="M:biz.ritter.javapi.lang.Double.parseDouble(System.String)">
            <summary>
            Return new double value from given String. Calls the valueOf method.
            </summary>
            <param name="d">String with double value</param>
            <returns>double value</returns>
        </member>
        <member name="M:biz.ritter.javapi.lang.Double.valueOf(System.String)">
            <summary>
            Return a new <code>java.lang.Double</code> instance form given String
            </summary>
            <param name="d">String with double value</param>
            <returns>java.lang.Double instance</returns>
        </member>
        <member name="M:biz.ritter.javapi.lang.Double.toHexString(System.Double)">
            <summary>
            Convert double value to Hex-String
            </summary>
            <param name="d">double vale</param>
            <returns>Hex string</returns>
        </member>
        <member name="M:biz.ritter.javapi.lang.Double.op_Implicit(biz.ritter.javapi.lang.Double)~System.Double">
            <summary>
            Implicit convert java.lang.Double to .net double type
            </summary>
            <param name="d">
            </param>
            <returns>
            </returns>
        </member>
        <member name="T:biz.ritter.javapi.lang.Error">
                 * {@code Error} is the superclass of all classes that represent unrecoverable
                 * errors. When errors are thrown, they should not be caught by application
                 * code.
                 *
                 * @see Throwable
                 * @see Exception
                 * @see RuntimeException</member>
        <member name="M:biz.ritter.javapi.lang.Error.#ctor">
                     * Constructs a new {@code Error} that includes the current stack trace.</member>
        <member name="M:biz.ritter.javapi.lang.Error.#ctor(System.String)">
                     * Constructs a new {@code Error} with the current stack trace and the
                     * specified detail message.
                     *
                     * @param detailMessage
                     *            the detail message for this error.</member>
        <member name="M:biz.ritter.javapi.lang.Error.#ctor(System.String,biz.ritter.javapi.lang.Throwable)">
                     * Constructs a new {@code Error} with the current stack trace, the
                     * specified detail message and the specified cause.
                     *
                     * @param detailMessage
                     *            the detail message for this error.
                     * @param throwable
                     *            the cause of this error.</member>
        <member name="M:biz.ritter.javapi.lang.Error.#ctor(biz.ritter.javapi.lang.Throwable)">
                     * Constructs a new {@code Error} with the current stack trace and the
                     * specified cause.
                     *
                     * @param throwable
                     *            the cause of this error.</member>
        <member name="T:biz.ritter.javapi.lang.Float">
                 * The wrapper for the primitive type {@code float}.
                 *
                 * @see java.lang.Number
                 * @since 1.0</member>
        <member name="F:biz.ritter.javapi.lang.Float.TYPE">
                     * The {@link Class} object that represents the primitive type {@code
                     * float}.
                     *
                     * @since 1.1</member>
        <member name="F:biz.ritter.javapi.lang.Float.value">
                     * The value which the receiver represents.</member>
        <member name="F:biz.ritter.javapi.lang.Float.MAX_VALUE">
                     * Constant for the maximum {@code float} value, (2 - 2<sup>-23</sup>) * 2<sup>127</sup>.</member>
        <member name="F:biz.ritter.javapi.lang.Float.MIN_VALUE">
                     * Constant for the minimum {@code float} value, 2<sup>-149</sup>.</member>
        <member name="F:biz.ritter.javapi.lang.Float.MIN_NORMAL">
                     * <p>
                     * Constant for the smallest positive normal value of <code>float</code>.
                     * </p>
                     * @since 1.6</member>
        <member name="F:biz.ritter.javapi.lang.Float.NaN">
                     * Constant for the Not-a-Number (NaN) value of the {@code float} type.</member>
        <member name="F:biz.ritter.javapi.lang.Float.POSITIVE_INFINITY">
                     * Constant for the Positive Infinity value of the {@code float} type.</member>
        <member name="F:biz.ritter.javapi.lang.Float.NEGATIVE_INFINITY">
                     * Constant for the Negative Infinity value of the {@code float} type.</member>
        <member name="M:biz.ritter.javapi.lang.Float.isNaN">
                     * Indicates whether this object is a <em>Not-a-Number (NaN)</em> value.
                     *
                     * @return {@code true} if this float is <em>Not-a-Number</em>;
                     *         {@code false} if it is a (potentially infinite) float number.</member>
        <member name="M:biz.ritter.javapi.lang.Float.isNaN(System.Single)">
                     * Indicates whether the specified float is a <em>Not-a-Number (NaN)</em>
                     * value.
                     *
                     * @param f
                     *            the float value to check.
                     * @return {@code true} if {@code f} is <em>Not-a-Number</em>;
                     *         {@code false} if it is a (potentially infinite) float number.</member>
        <member name="M:biz.ritter.javapi.lang.Float.toHexString(System.Single)">
            <summary>
            Return an Hex-String representation of float value
            </summary>
            <param name="f">float value</param>
            <returns>Hex-String</returns>
        </member>
        <member name="M:biz.ritter.javapi.lang.Float.op_Implicit(biz.ritter.javapi.lang.Float)~System.Single">
            <summary>
            Implicit convert java.lang.Float to .net float type
            </summary>
            <param name="f">
            </param>
            <returns>
            </returns>
        </member>
        <member name="T:biz.ritter.javapi.lang.IllegalMonitorStateException">
                 * Thrown when a monitor operation is attempted when the monitor is not in the
                 * correct state, for example when a thread attempts to exit a monitor which it
                 * does not own.</member>
        <member name="M:biz.ritter.javapi.lang.IllegalMonitorStateException.#ctor">
                     * Constructs a new {@code IllegalMonitorStateException} that includes the
                     * current stack trace.</member>
        <member name="M:biz.ritter.javapi.lang.IllegalMonitorStateException.#ctor(System.String)">
                     * Constructs a new {@code IllegalArgumentException} with the current stack
                     * trace and the specified detail message.
                     *
                     * @param detailMessage
                     *            the detail message for this exception.</member>
        <member name="T:biz.ritter.javapi.lang.InternalError">
                 * Thrown when the virtual machine notices that it has gotten into an undefined
                 * state.</member>
        <member name="M:biz.ritter.javapi.lang.InternalError.#ctor">
                     * Constructs a new {@code InternalError} that includes the current stack
                     * trace.</member>
        <member name="M:biz.ritter.javapi.lang.InternalError.#ctor(System.String)">
                     * Constructs a new {@code InternalError} with the current stack trace and
                     * the specified detail message.
                     *
                     * @param detailMessage
                     *            the detail message for this error.</member>
        <member name="T:biz.ritter.javapi.lang.InterruptedException">
                 * Thrown when a waiting thread is activated before the condition it was waiting
                 * for has been satisfied.</member>
        <member name="M:biz.ritter.javapi.lang.InterruptedException.#ctor">
                     * Constructs a new {@code InterruptedException} that includes the current
                     * stack trace.</member>
        <member name="M:biz.ritter.javapi.lang.InterruptedException.#ctor(System.String)">
                     * Constructs a new {@code InterruptedException} with the current stack
                     * trace and the specified detail message.
                     *
                     * @param detailMessage
                     *            the detail message for this exception.</member>
        <member name="T:biz.ritter.javapi.lang.NumberFormatException">
                 * Thrown when an invalid value is passed to a string-to-number conversion
                 * method.</member>
        <member name="M:biz.ritter.javapi.lang.NumberFormatException.#ctor">
                     * Constructs a new {@code NumberFormatException} that includes the current
                     * stack trace.</member>
        <member name="M:biz.ritter.javapi.lang.NumberFormatException.#ctor(System.String)">
                     * Constructs a new {@code NumberFormatException} with the current stack
                     * trace and the specified detail message.
                     *
                     * @param detailMessage
                     *            the detail message for this exception.</member>
        <member name="T:biz.ritter.javapi.lang.refj.ReferenceQueue`1">
                 * The {@code ReferenceQueue} is the container on which reference objects are
                 * enqueued when the garbage collector detects the reachability type specified
                 * for the referent.
                 *
                 * @since 1.2</member>
        <member name="M:biz.ritter.javapi.lang.refj.ReferenceQueue`1.#ctor">
                     * Constructs a new instance of this class.</member>
        <member name="M:biz.ritter.javapi.lang.refj.ReferenceQueue`1.poll">
                     * Returns the next available reference from the queue, removing it in the
                     * process. Does not wait for a reference to become available.
                     *
                     * @return the next available reference, or {@code null} if no reference is
                     *         immediately available</member>
        <member name="M:biz.ritter.javapi.lang.refj.ReferenceQueue`1.remove">
                     * Returns the next available reference from the queue, removing it in the
                     * process. Waits indefinitely for a reference to become available.
                     *
                     * @return the next available reference
                     *
                     * @throws InterruptedException
                     *             if the blocking call was interrupted for some reason</member>
        <member name="M:biz.ritter.javapi.lang.refj.ReferenceQueue`1.remove(System.Int64)">
                     * Returns the next available reference from the queue, removing it in the
                     * process. Waits for a reference to become available or the given timeout
                     * period to elapse, whichever happens first.
                     *
                     * @param timeout
                     *            maximum time (in ms) to spend waiting for a reference object
                     *            to become available. A value of zero results in the method
                     *            waiting indefinitely.
                     * @return the next available reference, or {@code null} if no reference
                     *         becomes available within the timeout period
                     * @throws IllegalArgumentException
                     *             if the wait period is negative.
                     * @throws InterruptedException
                     *             if the blocking call was interrupted for some reason</member>
        <member name="M:biz.ritter.javapi.lang.refj.ReferenceQueue`1.enqueue(biz.ritter.javapi.lang.refj.Reference{`0})">
                     * Enqueue the reference object on the receiver.
                     *
                     * @param reference
                     *            reference object to be enqueued.
                     * @return boolean true if reference is enqueued. false if reference failed
                     *         to enqueue.</member>
        <member name="T:biz.ritter.javapi.lang.refj.Reference`1">
                 * Provides an abstract class which describes behavior common to all reference
                 * objects. It is not possible to create immediate subclasses of
                 * {@code Reference} in addition to the ones provided by this package. It is
                 * also not desirable to do so, since references require very close cooperation
                 * with the system's garbage collector. The existing, specialized reference
                 * classes should be used instead.
                 *
                 * @since 1.2</member>
        <member name="M:biz.ritter.javapi.lang.refj.Reference`1.#ctor">
                     * Constructs a new instance of this class.
                     *</member>
        <member name="M:biz.ritter.javapi.lang.refj.Reference`1.clear">
                     * Makes the referent {@code null}. This does not force the reference
                     * object to be enqueued.</member>
        <member name="M:biz.ritter.javapi.lang.refj.Reference`1.enqueue">
                     * Forces the reference object to be enqueued if it has been associated with
                     * a queue.
                     *
                     * @return {@code true} if this call has caused the {@code Reference} to
                     * become enqueued, or {@code false} otherwise</member>
        <member name="M:biz.ritter.javapi.lang.refj.Reference`1.get">
                   * Returns the referent of the reference object.
                   *
                   * @return the referent to which reference refers, or {@code null} if the
                   *         object has been cleared.</member>
        <member name="M:biz.ritter.javapi.lang.refj.Reference`1.isEnqueued">
                     * Checks whether the reference object has been enqueued.
                     *
                     * @return {@code true} if the {@code Reference} has been enqueued, {@code
                     *         false} otherwise</member>
        <member name="M:biz.ritter.javapi.lang.refj.Reference`1.initReference(System.Object)">
                     * Implement this method to support the provided subclass implementations.
                     * Initialize a newly created reference object. Associate the reference
                     * object with the referent.
                     *
                     * @param r the referent</member>
        <member name="M:biz.ritter.javapi.lang.refj.Reference`1.initReference(System.Object,biz.ritter.javapi.lang.refj.ReferenceQueue{`0})">
                     * Implement this method to support the provided subclass implementations.
                     * Initialize a newly created reference object. Associate the reference
                     * object with the referent, and the specified ReferenceQueue.
                     *
                     * @param r the referent
                     * @param q the ReferenceQueue</member>
        <member name="M:biz.ritter.javapi.lang.refj.Reference`1.enqueueImpl">
                     * Enqueue the reference object on the associated queue.
                     *
                     * @return boolean true if the Reference was successfully enqueued. false
                     *         otherwise.</member>
        <member name="M:biz.ritter.javapi.lang.refj.Reference`1.dequeue">
                     * Called when a Reference has been removed from its ReferenceQueue. Set the
                     * enqueued field to false.</member>
        <member name="T:biz.ritter.javapi.lang.refj.WeakReference`1">
                 * Implements a weak reference, which is the middle of the three types of
                 * references. Once the garbage collector decides that an object {@code obj} is
                 * is <a href="package.html#definitions">weakly-reachable</a>, the following
                 * happens:
                 *
                 * <ul>
                 *   <li>
                 *     A set {@code ref} of references is determined. {@code ref} contains the
                 *     following elements:
                 *     <ul>
                 *       <li>
                 *         All weak references pointing to {@code obj}.
                 *       </li>
                 *       <li>
                 *         All weak references pointing to objects from which {@code obj} is
                 *         either strongly or softly reachable.
                 *       </li>
                 *     </ul>
                 *   </li>
                 *   <li>
                 *     All references in {@code ref} are atomically cleared.
                 *   </li>
                 *   <li>
                 *     All objects formerly being referenced by {@code ref} become eligible for
                 *     finalization.
                 *   </li>
                 *   <li>
                 *     At some future point, all references in {@code ref} will be enqueued
                 *     with their corresponding reference queues, if any.
                 *   </li>
                 * </ul>
                 *
                 * Weak references are useful for mappings that should have their entries
                 * removed automatically once they are not referenced any more (from outside).
                 * The difference between a {@code SoftReference} and a {@code WeakReference} is
                 * the point of time at which the decision is made to clear and enqueue the
                 * reference:
                 *
                 * <ul>
                 *   <li>
                 *     A {@code SoftReference} should be cleared and enqueued <em>as late as
                 *     possible</em>, that is, in case the VM is in danger of running out of
                 *     memory.
                 *   </li>
                 *   <li>
                 *     A {@code WeakReference} may be cleared and enqueued as soon as is
                 *     known to be weakly-referenced.
                 *   </li>
                 * </ul>
                 *
                 * @since 1.2</member>
        <member name="M:biz.ritter.javapi.lang.refj.WeakReference`1.#ctor(`0)">
                     * Constructs a new weak reference to the given referent. The newly created
                     * reference is not registered with any reference queue.
                     *
                     * @param r the referent to track</member>
        <member name="M:biz.ritter.javapi.lang.refj.WeakReference`1.#ctor(`0,biz.ritter.javapi.lang.refj.ReferenceQueue{`0})">
                     * Constructs a new weak reference to the given referent. The newly created
                     * reference is registered with the given reference queue.
                     *
                     * @param r the referent to track
                     * @param q the queue to register to the reference object with. A null value
                     *          results in a weak reference that is not associated with any
                     *          queue.</member>
        <member name="T:biz.ritter.javapi.lang.VirtualMachineError">
                 * {@code VirtualMachineError} is the superclass of all error classes that occur
                 * during the operation of the virtual machine.
                 *
                 * @see Error</member>
        <member name="M:biz.ritter.javapi.lang.VirtualMachineError.#ctor">
                     * Constructs a new {@code VirtualMachineError} that includes the current
                     * stack trace.</member>
        <member name="M:biz.ritter.javapi.lang.VirtualMachineError.#ctor(System.String)">
                     * Constructs a new {@code VirtualMachineError} with the current stack trace
                     * and the specified detail message.
                     *
                     * @param detailMessage
                     *            the detail message for this exception.</member>
        <member name="T:biz.ritter.javapi.math.BigDecimal">
                 * This class represents immutable arbitrary precision decimal numbers. Each
                 * {@code BigDecimal} instance is represented with a unscaled arbitrary
                 * precision mantissa (the unscaled value) and a scale. The value of the {@code
                 * BigDecimal} is {@code unscaledValue} 10^(-{@code scale}).</member>
        <member name="F:biz.ritter.javapi.math.BigDecimal.ZERO">
                     * The constant zero as a {@code BigDecimal}.</member>
        <member name="F:biz.ritter.javapi.math.BigDecimal.ONE">
                     * The constant one as a {@code BigDecimal}.</member>
        <member name="F:biz.ritter.javapi.math.BigDecimal.TEN">
                     * The constant ten as a {@code BigDecimal}.</member>
        <member name="F:biz.ritter.javapi.math.BigDecimal.ROUND_UP">
                     * Rounding mode where positive values are rounded towards positive infinity
                     * and negative values towards negative infinity.
                     *
                     * @see RoundingMode#UP</member>
        <member name="F:biz.ritter.javapi.math.BigDecimal.ROUND_DOWN">
                     * Rounding mode where the values are rounded towards zero.
                     *
                     * @see RoundingMode#DOWN</member>
        <member name="F:biz.ritter.javapi.math.BigDecimal.ROUND_CEILING">
                     * Rounding mode to round towards positive infinity. For positive values
                     * this rounding mode behaves as {@link #ROUND_UP}, for negative values as
                     * {@link #ROUND_DOWN}.
                     *
                     * @see RoundingMode#CEILING</member>
        <member name="F:biz.ritter.javapi.math.BigDecimal.ROUND_FLOOR">
                     * Rounding mode to round towards negative infinity. For positive values
                     * this rounding mode behaves as {@link #ROUND_DOWN}, for negative values as
                     * {@link #ROUND_UP}.
                     *
                     * @see RoundingMode#FLOOR</member>
        <member name="F:biz.ritter.javapi.math.BigDecimal.ROUND_HALF_UP">
                     * Rounding mode where values are rounded towards the nearest neighbor.
                     * Ties are broken by rounding up.
                     *
                     * @see RoundingMode#HALF_UP</member>
        <member name="F:biz.ritter.javapi.math.BigDecimal.ROUND_HALF_DOWN">
                     * Rounding mode where values are rounded towards the nearest neighbor.
                     * Ties are broken by rounding down.
                     *
                     * @see RoundingMode#HALF_DOWN</member>
        <member name="F:biz.ritter.javapi.math.BigDecimal.ROUND_HALF_EVEN">
                     * Rounding mode where values are rounded towards the nearest neighbor.
                     * Ties are broken by rounding to the even neighbor.
                     *
                     * @see RoundingMode#HALF_EVEN</member>
        <member name="F:biz.ritter.javapi.math.BigDecimal.ROUND_UNNECESSARY">
                     * Rounding mode where the rounding operations throws an {@code
                     * ArithmeticException} for the case that rounding is necessary, i.e. for
                     * the case that the value cannot be represented exactly.
                     *
                     * @see RoundingMode#UNNECESSARY</member>
        <member name="F:biz.ritter.javapi.math.BigDecimal.serialVersionUID">
             This is the serialVersionUID used by the sun implementation.</member>
        <member name="F:biz.ritter.javapi.math.BigDecimal.LOG10_2">
             The double closer to <code>Log10(2)</code>.</member>
        <member name="F:biz.ritter.javapi.math.BigDecimal.toStringImage">
             The <code>String</code> representation is cached.</member>
        <member name="F:biz.ritter.javapi.math.BigDecimal.hashCode">
             Cache for the hash code.</member>
        <member name="F:biz.ritter.javapi.math.BigDecimal.FIVE_POW">
                     * An array with powers of five that fit in the type <code>long</code>
                     * (<code>5^0,5^1,...,5^27</code>).</member>
        <member name="F:biz.ritter.javapi.math.BigDecimal.TEN_POW">
                     * An array with powers of ten that fit in the type <code>long</code>
                     * (<code>10^0,10^1,...,10^18</code>).</member>
        <member name="F:biz.ritter.javapi.math.BigDecimal.LONG_TEN_POW">
                     * An array with powers of ten that fit in the type <code>long</code>
                     * (<code>10^0,10^1,...,10^18</code>).</member>
        <member name="F:biz.ritter.javapi.math.BigDecimal.BI_SCALED_BY_ZERO">
                     * An array with the first <code>BigInteger</code> scaled by zero.
                     * (<code>[0,0],[1,0],...,[10,0]</code>).</member>
        <member name="F:biz.ritter.javapi.math.BigDecimal.ZERO_SCALED_BY">
                     * An array with the zero number scaled by the first positive scales.
                     * (<code>0*10^0, 0*10^1, ..., 0*10^10</code>).</member>
        <member name="F:biz.ritter.javapi.math.BigDecimal.CH_ZEROS">
             An array filled with characters <code>'0'</code>.</member>
        <member name="F:biz.ritter.javapi.math.BigDecimal.intVal">
                     * The arbitrary precision integer (unscaled value) in the internal
                     * representation of {@code BigDecimal}.</member>
        <member name="F:biz.ritter.javapi.math.BigDecimal.scaleJ">
                     * The 32-bit integer scale in the internal representation of {@code BigDecimal}.</member>
        <member name="F:biz.ritter.javapi.math.BigDecimal.precisionJ">
                     * Represent the number of decimal digits in the unscaled value. This
                     * precision is calculated the first time, and used in the following calls
                     * of method <code>precision()</code>. Note that some call to the private
                     * method <code>inplaceRound()</code> could update this field.
                     *
                     * @see #precision()
                     * @see #inplaceRound(MathContext)</member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.#ctor(System.Char[],System.Int32,System.Int32)">
                     * Constructs a new {@code BigDecimal} instance from a string representation
                     * given as a character array.
                     *
                     * @param in
                     *            array of characters containing the string representation of
                     *            this {@code BigDecimal}.
                     * @param offset
                     *            first index to be copied.
                     * @param len
                     *            number of characters to be used.
                     * @throws NullPointerException
                     *             if {@code in == null}.
                     * @throws NumberFormatException
                     *             if {@code offset &lt; 0} or {@code len &lt;= 0} or {@code
                     *             offset+len-1 &lt; 0} or {@code offset+len-1 &gt;= in.length}.
                     * @throws NumberFormatException
                     *             if in does not contain a valid string representation of a big
                     *             decimal.</member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.#ctor(System.Char[],System.Int32,System.Int32,biz.ritter.javapi.math.MathContext)">
                     * Constructs a new {@code BigDecimal} instance from a string representation
                     * given as a character array.
                     *
                     * @param in
                     *            array of characters containing the string representation of
                     *            this {@code BigDecimal}.
                     * @param offset
                     *            first index to be copied.
                     * @param len
                     *            number of characters to be used.
                     * @param mc
                     *            rounding mode and precision for the result of this operation.
                     * @throws NullPointerException
                     *             if {@code in == null}.
                     * @throws NumberFormatException
                     *             if {@code offset &lt; 0} or {@code len &lt;= 0} or {@code
                     *             offset+len-1 &lt; 0} or {@code offset+len-1 &gt;= in.length}.
                     * @throws NumberFormatException
                     *             if {@code in} does not contain a valid string representation
                     *             of a big decimal.
                     * @throws ArithmeticException
                     *             if {@code mc.precision &gt; 0} and {@code mc.roundingMode ==
                     *             UNNECESSARY} and the new big decimal cannot be represented
                     *             within the given precision without rounding.</member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.#ctor(System.Char[])">
                     * Constructs a new {@code BigDecimal} instance from a string representation
                     * given as a character array.
                     *
                     * @param in
                     *            array of characters containing the string representation of
                     *            this {@code BigDecimal}.
                     * @throws NullPointerException
                     *             if {@code in == null}.
                     * @throws NumberFormatException
                     *             if {@code in} does not contain a valid string representation
                     *             of a big decimal.</member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.#ctor(System.Char[],biz.ritter.javapi.math.MathContext)">
                     * Constructs a new {@code BigDecimal} instance from a string representation
                     * given as a character array. The result is rounded according to the
                     * specified math context.
                     *
                     * @param in
                     *            array of characters containing the string representation of
                     *            this {@code BigDecimal}.
                     * @param mc
                     *            rounding mode and precision for the result of this operation.
                     * @throws NullPointerException
                     *             if {@code in == null}.
                     * @throws NumberFormatException
                     *             if {@code in} does not contain a valid string representation
                     *             of a big decimal.
                     * @throws ArithmeticException
                     *             if {@code mc.precision &gt; 0} and {@code mc.roundingMode ==
                     *             UNNECESSARY} and the new big decimal cannot be represented
                     *             within the given precision without rounding.</member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.#ctor(System.String)">
                     * Constructs a new {@code BigDecimal} instance from a string
                     * representation.
                     *
                     * @param val
                     *            string containing the string representation of this {@code
                     *            BigDecimal}.
                     * @throws NumberFormatException
                     *             if {@code val} does not contain a valid string representation
                     *             of a big decimal.</member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.#ctor(System.String,biz.ritter.javapi.math.MathContext)">
                     * Constructs a new {@code BigDecimal} instance from a string
                     * representation. The result is rounded according to the specified math
                     * context.
                     *
                     * @param val
                     *            string containing the string representation of this {@code
                     *            BigDecimal}.
                     * @param mc
                     *            rounding mode and precision for the result of this operation.
                     * @throws NumberFormatException
                     *             if {@code val} does not contain a valid string representation
                     *             of a big decimal.
                     * @throws ArithmeticException
                     *             if {@code mc.precision &gt; 0} and {@code mc.roundingMode ==
                     *             UNNECESSARY} and the new big decimal cannot be represented
                     *             within the given precision without rounding.</member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.#ctor(System.Double)">
                     * Constructs a new {@code BigDecimal} instance from the 64bit double
                     * {@code val}. The constructed big decimal is equivalent to the given
                     * double. For example, {@code new BigDecimal(0.1)} is equal to {@code
                     * 0.1000000000000000055511151231257827021181583404541015625}. This happens
                     * as {@code 0.1} cannot be represented exactly in binary.
                     * <p />
                     * To generate a big decimal instance which is equivalent to {@code 0.1} use
                     * the {@code BigDecimal(String)} constructor.
                     *
                     * @param val
                     *            double value to be converted to a {@code BigDecimal} instance.
                     * @throws NumberFormatException
                     *             if {@code val} is infinity or not a number.</member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.#ctor(System.Double,biz.ritter.javapi.math.MathContext)">
                     * Constructs a new {@code BigDecimal} instance from the 64bit double
                     * {@code val}. The constructed big decimal is equivalent to the given
                     * double. For example, {@code new BigDecimal(0.1)} is equal to {@code
                     * 0.1000000000000000055511151231257827021181583404541015625}. This happens
                     * as {@code 0.1} cannot be represented exactly in binary.
                     * <p />
                     * To generate a big decimal instance which is equivalent to {@code 0.1} use
                     * the {@code BigDecimal(String)} constructor.
                     *
                     * @param val
                     *            double value to be converted to a {@code BigDecimal} instance.
                     * @param mc
                     *            rounding mode and precision for the result of this operation.
                     * @throws NumberFormatException
                     *             if {@code val} is infinity or not a number.
                     * @throws ArithmeticException
                     *             if {@code mc.precision &gt; 0} and {@code mc.roundingMode ==
                     *             UNNECESSARY} and the new big decimal cannot be represented
                     *             within the given precision without rounding.</member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.#ctor(biz.ritter.javapi.math.BigInteger)">
                     * Constructs a new {@code BigDecimal} instance from the given big integer
                     * {@code val}. The scale of the result is {@code 0}.
                     *
                     * @param val
                     *            {@code BigInteger} value to be converted to a {@code
                     *            BigDecimal} instance.</member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.#ctor(biz.ritter.javapi.math.BigInteger,biz.ritter.javapi.math.MathContext)">
                     * Constructs a new {@code BigDecimal} instance from the given big integer
                     * {@code val}. The scale of the result is {@code 0}.
                     *
                     * @param val
                     *            {@code BigInteger} value to be converted to a {@code
                     *            BigDecimal} instance.
                     * @param mc
                     *            rounding mode and precision for the result of this operation.
                     * @throws ArithmeticException
                     *             if {@code mc.precision &gt; 0} and {@code mc.roundingMode ==
                     *             UNNECESSARY} and the new big decimal cannot be represented
                     *             within the given precision without rounding.</member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.#ctor(biz.ritter.javapi.math.BigInteger,System.Int32)">
                     * Constructs a new {@code BigDecimal} instance from a given unscaled value
                     * {@code unscaledVal} and a given scale. The value of this instance is
                     * {@code unscaledVal} 10^(-{@code scale}).
                     *
                     * @param unscaledVal
                     *            {@code BigInteger} representing the unscaled value of this
                     *            {@code BigDecimal} instance.
                     * @param scale
                     *            scale of this {@code BigDecimal} instance.
                     * @throws NullPointerException
                     *             if {@code unscaledVal == null}.</member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.#ctor(biz.ritter.javapi.math.BigInteger,System.Int32,biz.ritter.javapi.math.MathContext)">
                     * Constructs a new {@code BigDecimal} instance from a given unscaled value
                     * {@code unscaledVal} and a given scale. The value of this instance is
                     * {@code unscaledVal} 10^(-{@code scale}). The result is rounded according
                     * to the specified math context.
                     *
                     * @param unscaledVal
                     *            {@code BigInteger} representing the unscaled value of this
                     *            {@code BigDecimal} instance.
                     * @param scale
                     *            scale of this {@code BigDecimal} instance.
                     * @param mc
                     *            rounding mode and precision for the result of this operation.
                     * @throws ArithmeticException
                     *             if {@code mc.precision &gt; 0} and {@code mc.roundingMode ==
                     *             UNNECESSARY} and the new big decimal cannot be represented
                     *             within the given precision without rounding.
                     * @throws NullPointerException
                     *             if {@code unscaledVal == null}.</member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.#ctor(System.Int32)">
                     * Constructs a new {@code BigDecimal} instance from the given int
                     * {@code val}. The scale of the result is 0.
                     *
                     * @param val
                     *            int value to be converted to a {@code BigDecimal} instance.</member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.#ctor(System.Int32,biz.ritter.javapi.math.MathContext)">
                     * Constructs a new {@code BigDecimal} instance from the given int {@code
                     * val}. The scale of the result is {@code 0}. The result is rounded
                     * according to the specified math context.
                     *
                     * @param val
                     *            int value to be converted to a {@code BigDecimal} instance.
                     * @param mc
                     *            rounding mode and precision for the result of this operation.
                     * @throws ArithmeticException
                     *             if {@code mc.precision &gt; 0} and {@code c.roundingMode ==
                     *             UNNECESSARY} and the new big decimal cannot be represented
                     *             within the given precision without rounding.</member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.#ctor(System.Int64)">
                     * Constructs a new {@code BigDecimal} instance from the given long {@code
                     * val}. The scale of the result is {@code 0}.
                     *
                     * @param val
                     *            long value to be converted to a {@code BigDecimal} instance.</member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.#ctor(System.Int64,biz.ritter.javapi.math.MathContext)">
                     * Constructs a new {@code BigDecimal} instance from the given long {@code
                     * val}. The scale of the result is {@code 0}. The result is rounded
                     * according to the specified math context.
                     *
                     * @param val
                     *            long value to be converted to a {@code BigDecimal} instance.
                     * @param mc
                     *            rounding mode and precision for the result of this operation.
                     * @throws ArithmeticException
                     *             if {@code mc.precision &gt; 0} and {@code mc.roundingMode ==
                     *             UNNECESSARY} and the new big decimal cannot be represented
                     *             within the given precision without rounding.</member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.valueOf(System.Int64,System.Int32)">
                     * Returns a new {@code BigDecimal} instance whose value is equal to {@code
                     * unscaledVal} 10^(-{@code scale}). The scale of the result is {@code
                     * scale}, and its unscaled value is {@code unscaledVal}.
                     *
                     * @param unscaledVal
                     *            unscaled value to be used to construct the new {@code
                     *            BigDecimal}.
                     * @param scale
                     *            scale to be used to construct the new {@code BigDecimal}.
                     * @return {@code BigDecimal} instance with the value {@code unscaledVal}*
                     *         10^(-{@code unscaledVal}).</member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.valueOf(System.Int64)">
                     * Returns a new {@code BigDecimal} instance whose value is equal to {@code
                     * unscaledVal}. The scale of the result is {@code 0}, and its unscaled
                     * value is {@code unscaledVal}.
                     *
                     * @param unscaledVal
                     *            value to be converted to a {@code BigDecimal}.
                     * @return {@code BigDecimal} instance with the value {@code unscaledVal}.</member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.valueOf(System.Double)">
                     * Returns a new {@code BigDecimal} instance whose value is equal to {@code
                     * val}. The new decimal is constructed as if the {@code BigDecimal(String)}
                     * constructor is called with an argument which is equal to {@code
                     * Double.toString(val)}. For example, {@code valueOf("0.1")} is converted to
                     * (unscaled=1, scale=1), although the double {@code 0.1} cannot be
                     * represented exactly as a double value. In contrast to that, a new {@code
                     * BigDecimal(0.1)} instance has the value {@code
                     * 0.1000000000000000055511151231257827021181583404541015625} with an
                     * unscaled value {@code 1000000000000000055511151231257827021181583404541015625}
                     * and the scale {@code 55}.
                     *
                     * @param val
                     *            double value to be converted to a {@code BigDecimal}.
                     * @return {@code BigDecimal} instance with the value {@code val}.
                     * @throws NumberFormatException
                     *             if {@code val} is infinite or {@code val} is not a number</member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.add(biz.ritter.javapi.math.BigDecimal)">
                     * Returns a new {@code BigDecimal} whose value is {@code this + augend}.
                     * The scale of the result is the maximum of the scales of the two
                     * arguments.
                     *
                     * @param augend
                     *            value to be added to {@code this}.
                     * @return {@code this + augend}.
                     * @throws NullPointerException
                     *             if {@code augend == null}.</member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.add(biz.ritter.javapi.math.BigDecimal,biz.ritter.javapi.math.MathContext)">
                     * Returns a new {@code BigDecimal} whose value is {@code this + augend}.
                     * The result is rounded according to the passed context {@code mc}.
                     *
                     * @param augend
                     *            value to be added to {@code this}.
                     * @param mc
                     *            rounding mode and precision for the result of this operation.
                     * @return {@code this + augend}.
                     * @throws NullPointerException
                     *             if {@code augend == null} or {@code mc == null}.</member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.subtract(biz.ritter.javapi.math.BigDecimal)">
                     * Returns a new {@code BigDecimal} whose value is {@code this - subtrahend}.
                     * The scale of the result is the maximum of the scales of the two arguments.
                     *
                     * @param subtrahend
                     *            value to be subtracted from {@code this}.
                     * @return {@code this - subtrahend}.
                     * @throws NullPointerException
                     *             if {@code subtrahend == null}.</member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.subtract(biz.ritter.javapi.math.BigDecimal,biz.ritter.javapi.math.MathContext)">
                     * Returns a new {@code BigDecimal} whose value is {@code this - subtrahend}.
                     * The result is rounded according to the passed context {@code mc}.
                     *
                     * @param subtrahend
                     *            value to be subtracted from {@code this}.
                     * @param mc
                     *            rounding mode and precision for the result of this operation.
                     * @return {@code this - subtrahend}.
                     * @throws NullPointerException
                     *             if {@code subtrahend == null} or {@code mc == null}.</member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.multiply(biz.ritter.javapi.math.BigDecimal)">
                     * Returns a new {@code BigDecimal} whose value is {@code this *
                     * multiplicand}. The scale of the result is the sum of the scales of the
                     * two arguments.
                     *
                     * @param multiplicand
                     *            value to be multiplied with {@code this}.
                     * @return {@code this * multiplicand}.
                     * @throws NullPointerException
                     *             if {@code multiplicand == null}.</member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.multiply(biz.ritter.javapi.math.BigDecimal,biz.ritter.javapi.math.MathContext)">
                     * Returns a new {@code BigDecimal} whose value is {@code this *
                     * multiplicand}. The result is rounded according to the passed context
                     * {@code mc}.
                     *
                     * @param multiplicand
                     *            value to be multiplied with {@code this}.
                     * @param mc
                     *            rounding mode and precision for the result of this operation.
                     * @return {@code this * multiplicand}.
                     * @throws NullPointerException
                     *             if {@code multiplicand == null} or {@code mc == null}.</member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.divide(biz.ritter.javapi.math.BigDecimal,System.Int32,System.Int32)">
                     * Returns a new {@code BigDecimal} whose value is {@code this / divisor}.
                     * As scale of the result the parameter {@code scale} is used. If rounding
                     * is required to meet the specified scale, then the specified rounding mode
                     * {@code roundingMode} is applied.
                     *
                     * @param divisor
                     *            value by which {@code this} is divided.
                     * @param scale
                     *            the scale of the result returned.
                     * @param roundingMode
                     *            rounding mode to be used to round the result.
                     * @return {@code this / divisor} rounded according to the given rounding
                     *         mode.
                     * @throws NullPointerException
                     *             if {@code divisor == null}.
                     * @throws IllegalArgumentException
                     *             if {@code roundingMode} is not a valid rounding mode.
                     * @throws ArithmeticException
                     *             if {@code divisor == 0}.
                     * @throws ArithmeticException
                     *             if {@code roundingMode == ROUND_UNNECESSARY} and rounding is
                     *             necessary according to the given scale.</member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.divide(biz.ritter.javapi.math.BigDecimal,System.Int32,biz.ritter.javapi.math.RoundingMode)">
                     * Returns a new {@code BigDecimal} whose value is {@code this / divisor}.
                     * As scale of the result the parameter {@code scale} is used. If rounding
                     * is required to meet the specified scale, then the specified rounding mode
                     * {@code roundingMode} is applied.
                     *
                     * @param divisor
                     *            value by which {@code this} is divided.
                     * @param scale
                     *            the scale of the result returned.
                     * @param roundingMode
                     *            rounding mode to be used to round the result.
                     * @return {@code this / divisor} rounded according to the given rounding
                     *         mode.
                     * @throws NullPointerException
                     *             if {@code divisor == null} or {@code roundingMode == null}.
                     * @throws ArithmeticException
                     *             if {@code divisor == 0}.
                     * @throws ArithmeticException
                     *             if {@code roundingMode == RoundingMode.UNNECESSAR}Y and
                     *             rounding is necessary according to the given scale and given
                     *             precision.</member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.divide(biz.ritter.javapi.math.BigDecimal,System.Int32)">
                     * Returns a new {@code BigDecimal} whose value is {@code this / divisor}.
                     * The scale of the result is the scale of {@code this}. If rounding is
                     * required to meet the specified scale, then the specified rounding mode
                     * {@code roundingMode} is applied.
                     *
                     * @param divisor
                     *            value by which {@code this} is divided.
                     * @param roundingMode
                     *            rounding mode to be used to round the result.
                     * @return {@code this / divisor} rounded according to the given rounding
                     *         mode.
                     * @throws NullPointerException
                     *             if {@code divisor == null}.
                     * @throws IllegalArgumentException
                     *             if {@code roundingMode} is not a valid rounding mode.
                     * @throws ArithmeticException
                     *             if {@code divisor == 0}.
                     * @throws ArithmeticException
                     *             if {@code roundingMode == ROUND_UNNECESSARY} and rounding is
                     *             necessary according to the scale of this.</member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.divide(biz.ritter.javapi.math.BigDecimal,biz.ritter.javapi.math.RoundingMode)">
                     * Returns a new {@code BigDecimal} whose value is {@code this / divisor}.
                     * The scale of the result is the scale of {@code this}. If rounding is
                     * required to meet the specified scale, then the specified rounding mode
                     * {@code roundingMode} is applied.
                     *
                     * @param divisor
                     *            value by which {@code this} is divided.
                     * @param roundingMode
                     *            rounding mode to be used to round the result.
                     * @return {@code this / divisor} rounded according to the given rounding
                     *         mode.
                     * @throws NullPointerException
                     *             if {@code divisor == null} or {@code roundingMode == null}.
                     * @throws ArithmeticException
                     *             if {@code divisor == 0}.
                     * @throws ArithmeticException
                     *             if {@code roundingMode == RoundingMode.UNNECESSARY} and
                     *             rounding is necessary according to the scale of this.</member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.divide(biz.ritter.javapi.math.BigDecimal)">
                     * Returns a new {@code BigDecimal} whose value is {@code this / divisor}.
                     * The scale of the result is the difference of the scales of {@code this}
                     * and {@code divisor}. If the exact result requires more digits, then the
                     * scale is adjusted accordingly. For example, {@code 1/128 = 0.0078125}
                     * which has a scale of {@code 7} and precision {@code 5}.
                     *
                     * @param divisor
                     *            value by which {@code this} is divided.
                     * @return {@code this / divisor}.
                     * @throws NullPointerException
                     *             if {@code divisor == null}.
                     * @throws ArithmeticException
                     *             if {@code divisor == 0}.
                     * @throws ArithmeticException
                     *             if the result cannot be represented exactly.</member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.divide(biz.ritter.javapi.math.BigDecimal,biz.ritter.javapi.math.MathContext)">
                     * Returns a new {@code BigDecimal} whose value is {@code this / divisor}.
                     * The result is rounded according to the passed context {@code mc}. If the
                     * passed math context specifies precision {@code 0}, then this call is
                     * equivalent to {@code this.divide(divisor)}.
                     *
                     * @param divisor
                     *            value by which {@code this} is divided.
                     * @param mc
                     *            rounding mode and precision for the result of this operation.
                     * @return {@code this / divisor}.
                     * @throws NullPointerException
                     *             if {@code divisor == null} or {@code mc == null}.
                     * @throws ArithmeticException
                     *             if {@code divisor == 0}.
                     * @throws ArithmeticException
                     *             if {@code mc.getRoundingMode() == UNNECESSARY} and rounding
                     *             is necessary according {@code mc.getPrecision()}.</member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.divideToIntegralValue(biz.ritter.javapi.math.BigDecimal)">
                     * Returns a new {@code BigDecimal} whose value is the integral part of
                     * {@code this / divisor}. The quotient is rounded down towards zero to the
                     * next integer. For example, {@code 0.5/0.2 = 2}.
                     *
                     * @param divisor
                     *            value by which {@code this} is divided.
                     * @return integral part of {@code this / divisor}.
                     * @throws NullPointerException
                     *             if {@code divisor == null}.
                     * @throws ArithmeticException
                     *             if {@code divisor == 0}.</member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.divideToIntegralValue(biz.ritter.javapi.math.BigDecimal,biz.ritter.javapi.math.MathContext)">
                     * Returns a new {@code BigDecimal} whose value is the integral part of
                     * {@code this / divisor}. The quotient is rounded down towards zero to the
                     * next integer. The rounding mode passed with the parameter {@code mc} is
                     * not considered. But if the precision of {@code mc &gt; 0} and the integral
                     * part requires more digits, then an {@code ArithmeticException} is thrown.
                     *
                     * @param divisor
                     *            value by which {@code this} is divided.
                     * @param mc
                     *            math context which determines the maximal precision of the
                     *            result.
                     * @return integral part of {@code this / divisor}.
                     * @throws NullPointerException
                     *             if {@code divisor == null} or {@code mc == null}.
                     * @throws ArithmeticException
                     *             if {@code divisor == 0}.
                     * @throws ArithmeticException
                     *             if {@code mc.getPrecision() &gt; 0} and the result requires more
                     *             digits to be represented.</member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.remainder(biz.ritter.javapi.math.BigDecimal)">
                     * Returns a new {@code BigDecimal} whose value is {@code this % divisor}.
                     * <p />
                     * The remainder is defined as {@code this -
                     * this.divideToIntegralValue(divisor) * divisor}.
                     *
                     * @param divisor
                     *            value by which {@code this} is divided.
                     * @return {@code this % divisor}.
                     * @throws NullPointerException
                     *             if {@code divisor == null}.
                     * @throws ArithmeticException
                     *             if {@code divisor == 0}.</member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.remainder(biz.ritter.javapi.math.BigDecimal,biz.ritter.javapi.math.MathContext)">
                     * Returns a new {@code BigDecimal} whose value is {@code this % divisor}.
                     * <p />
                     * The remainder is defined as {@code this -
                     * this.divideToIntegralValue(divisor) * divisor}.
                     * <p />
                     * The specified rounding mode {@code mc} is used for the division only.
                     *
                     * @param divisor
                     *            value by which {@code this} is divided.
                     * @param mc
                     *            rounding mode and precision to be used.
                     * @return {@code this % divisor}.
                     * @throws NullPointerException
                     *             if {@code divisor == null}.
                     * @throws ArithmeticException
                     *             if {@code divisor == 0}.
                     * @throws ArithmeticException
                     *             if {@code mc.getPrecision() &gt; 0} and the result of {@code
                     *             this.divideToIntegralValue(divisor, mc)} requires more digits
                     *             to be represented.</member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.divideAndRemainder(biz.ritter.javapi.math.BigDecimal)">
                     * Returns a {@code BigDecimal} array which contains the integral part of
                     * {@code this / divisor} at index 0 and the remainder {@code this %
                     * divisor} at index 1. The quotient is rounded down towards zero to the
                     * next integer.
                     *
                     * @param divisor
                     *            value by which {@code this} is divided.
                     * @return {@code [this.divideToIntegralValue(divisor),
                     *         this.remainder(divisor)]}.
                     * @throws NullPointerException
                     *             if {@code divisor == null}.
                     * @throws ArithmeticException
                     *             if {@code divisor == 0}.
                     * @see #divideToIntegralValue
                     * @see #remainder</member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.divideAndRemainder(biz.ritter.javapi.math.BigDecimal,biz.ritter.javapi.math.MathContext)">
                     * Returns a {@code BigDecimal} array which contains the integral part of
                     * {@code this / divisor} at index 0 and the remainder {@code this %
                     * divisor} at index 1. The quotient is rounded down towards zero to the
                     * next integer. The rounding mode passed with the parameter {@code mc} is
                     * not considered. But if the precision of {@code mc &gt; 0} and the integral
                     * part requires more digits, then an {@code ArithmeticException} is thrown.
                     *
                     * @param divisor
                     *            value by which {@code this} is divided.
                     * @param mc
                     *            math context which determines the maximal precision of the
                     *            result.
                     * @return {@code [this.divideToIntegralValue(divisor),
                     *         this.remainder(divisor)]}.
                     * @throws NullPointerException
                     *             if {@code divisor == null}.
                     * @throws ArithmeticException
                     *             if {@code divisor == 0}.
                     * @see #divideToIntegralValue
                     * @see #remainder</member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.pow(System.Int32)">
                     * Returns a new {@code BigDecimal} whose value is {@code this ^ n}. The
                     * scale of the result is {@code n} times the scales of {@code this}.
                     * <p />
                     * {@code x.pow(0)} returns {@code 1}, even if {@code x == 0}.
                     * <p />
                     * Implementation Note: The implementation is based on the ANSI standard
                     * X3.274-1996 algorithm.
                     *
                     * @param n
                     *            exponent to which {@code this} is raised.
                     * @return {@code this ^ n}.
                     * @throws ArithmeticException
                     *             if {@code n &lt; 0} or {@code n &gt; 999999999}.</member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.pow(System.Int32,biz.ritter.javapi.math.MathContext)">
                     * Returns a new {@code BigDecimal} whose value is {@code this ^ n}. The
                     * result is rounded according to the passed context {@code mc}.
                     * <p />
                     * Implementation Note: The implementation is based on the ANSI standard
                     * X3.274-1996 algorithm.
                     *
                     * @param n
                     *            exponent to which {@code this} is raised.
                     * @param mc
                     *            rounding mode and precision for the result of this operation.
                     * @return {@code this ^ n}.
                     * @throws ArithmeticException
                     *             if {@code n &lt; 0} or {@code n &gt; 999999999}.</member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.abs">
                     * Returns a new {@code BigDecimal} whose value is the absolute value of
                     * {@code this}. The scale of the result is the same as the scale of this.
                     *
                     * @return {@code abs(this)}</member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.abs(biz.ritter.javapi.math.MathContext)">
                     * Returns a new {@code BigDecimal} whose value is the absolute value of
                     * {@code this}. The result is rounded according to the passed context
                     * {@code mc}.
                     *
                     * @param mc
                     *            rounding mode and precision for the result of this operation.
                     * @return {@code abs(this)}</member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.negate">
                     * Returns a new {@code BigDecimal} whose value is the {@code -this}. The
                     * scale of the result is the same as the scale of this.
                     *
                     * @return {@code -this}</member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.negate(biz.ritter.javapi.math.MathContext)">
                     * Returns a new {@code BigDecimal} whose value is the {@code -this}. The
                     * result is rounded according to the passed context {@code mc}.
                     *
                     * @param mc
                     *            rounding mode and precision for the result of this operation.
                     * @return {@code -this}</member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.plus">
                     * Returns a new {@code BigDecimal} whose value is {@code +this}. The scale
                     * of the result is the same as the scale of this.
                     *
                     * @return {@code this}</member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.plus(biz.ritter.javapi.math.MathContext)">
                     * Returns a new {@code BigDecimal} whose value is {@code +this}. The result
                     * is rounded according to the passed context {@code mc}.
                     *
                     * @param mc
                     *            rounding mode and precision for the result of this operation.
                     * @return {@code this}, rounded</member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.signum">
                     * Returns the sign of this {@code BigDecimal}.
                     *
                     * @return {@code -1} if {@code this &lt; 0},
                     *         {@code 0} if {@code this == 0},
                     *         {@code 1} if {@code this &gt; 0}.</member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.scale">
                     * Returns the scale of this {@code BigDecimal}. The scale is the number of
                     * digits behind the decimal point. The value of this {@code BigDecimal} is
                     * the unsignedValue * 10^(-scale). If the scale is negative, then this
                     * {@code BigDecimal} represents a big integer.
                     *
                     * @return the scale of this {@code BigDecimal}.</member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.precision">
                     * Returns the precision of this {@code BigDecimal}. The precision is the
                     * number of decimal digits used to represent this decimal. It is equivalent
                     * to the number of digits of the unscaled value. The precision of {@code 0}
                     * is {@code 1} (independent of the scale).
                     *
                     * @return the precision of this {@code BigDecimal}.</member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.unscaledValue">
                     * Returns the unscaled value (mantissa) of this {@code BigDecimal} instance
                     * as a {@code BigInteger}. The unscaled value can be computed as {@code
                     * this} 10^(scale).
                     *
                     * @return unscaled value (this * 10^(scale)).</member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.round(biz.ritter.javapi.math.MathContext)">
                     * Returns a new {@code BigDecimal} whose value is {@code this}, rounded
                     * according to the passed context {@code mc}.
                     * <p />
                     * If {@code mc.precision = 0}, then no rounding is performed.
                     * <p />
                     * If {@code mc.precision &gt; 0} and {@code mc.roundingMode == UNNECESSARY},
                     * then an {@code ArithmeticException} is thrown if the result cannot be
                     * represented exactly within the given precision.
                     *
                     * @param mc
                     *            rounding mode and precision for the result of this operation.
                     * @return {@code this} rounded according to the passed context.
                     * @throws ArithmeticException
                     *             if {@code mc.precision &gt; 0} and {@code mc.roundingMode ==
                     *             UNNECESSARY} and this cannot be represented within the given
                     *             precision.</member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.setScale(System.Int32,biz.ritter.javapi.math.RoundingMode)">
                     * Returns a new {@code BigDecimal} instance with the specified scale.
                     * <p />
                     * If the new scale is greater than the old scale, then additional zeros are
                     * added to the unscaled value. In this case no rounding is necessary.
                     * <p />
                     * If the new scale is smaller than the old scale, then trailing digits are
                     * removed. If these trailing digits are not zero, then the remaining
                     * unscaled value has to be rounded. For this rounding operation the
                     * specified rounding mode is used.
                     *
                     * @param newScale
                     *            scale of the result returned.
                     * @param roundingMode
                     *            rounding mode to be used to round the result.
                     * @return a new {@code BigDecimal} instance with the specified scale.
                     * @throws NullPointerException
                     *             if {@code roundingMode == null}.
                     * @throws ArithmeticException
                     *             if {@code roundingMode == ROUND_UNNECESSARY} and rounding is
                     *             necessary according to the given scale.</member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.setScale(System.Int32,System.Int32)">
                     * Returns a new {@code BigDecimal} instance with the specified scale.
                     * <p />
                     * If the new scale is greater than the old scale, then additional zeros are
                     * added to the unscaled value. In this case no rounding is necessary.
                     * <p />
                     * If the new scale is smaller than the old scale, then trailing digits are
                     * removed. If these trailing digits are not zero, then the remaining
                     * unscaled value has to be rounded. For this rounding operation the
                     * specified rounding mode is used.
                     *
                     * @param newScale
                     *            scale of the result returned.
                     * @param roundingMode
                     *            rounding mode to be used to round the result.
                     * @return a new {@code BigDecimal} instance with the specified scale.
                     * @throws IllegalArgumentException
                     *             if {@code roundingMode} is not a valid rounding mode.
                     * @throws ArithmeticException
                     *             if {@code roundingMode == ROUND_UNNECESSARY} and rounding is
                     *             necessary according to the given scale.</member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.setScale(System.Int32)">
                     * Returns a new {@code BigDecimal} instance with the specified scale. If
                     * the new scale is greater than the old scale, then additional zeros are
                     * added to the unscaled value. If the new scale is smaller than the old
                     * scale, then trailing zeros are removed. If the trailing digits are not
                     * zeros then an ArithmeticException is thrown.
                     * <p />
                     * If no exception is thrown, then the following equation holds: {@code
                     * x.setScale(s).compareTo(x) == 0}.
                     *
                     * @param newScale
                     *            scale of the result returned.
                     * @return a new {@code BigDecimal} instance with the specified scale.
                     * @throws ArithmeticException
                     *             if rounding would be necessary.</member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.movePointLeft(System.Int32)">
                     * Returns a new {@code BigDecimal} instance where the decimal point has
            		 * been moved {@code n} places to the left. If {@code n &lt; 0} then the
                     * decimal point is moved {@code -n} places to the right.
                     * <p />
                     * The result is obtained by changing its scale. If the scale of the result
                     * becomes negative, then its precision is increased such that the scale is
                     * zero.
                     * <p />
                     * Note, that {@code movePointLeft(0)} returns a result which is
                     * mathematically equivalent, but which has {@code scale &gt;= 0}.
                     *
                     * @param n
                     *            number of placed the decimal point has to be moved.
                     * @return {@code this * 10^(-n}).</member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.movePointRight(System.Int32)">
                     * Returns a new {@code BigDecimal} instance where the decimal point has
                     * been moved {@code n} places to the right. If {@code n &lt; 0} then the
                     * decimal point is moved {@code -n} places to the left.
                     * <p />
                     * The result is obtained by changing its scale. If the scale of the result
                     * becomes negative, then its precision is increased such that the scale is
                     * zero.
                     * <p />
                     * Note, that {@code movePointRight(0)} returns a result which is
                     * mathematically equivalent, but which has scale &gt;= 0.
                     *
                     * @param n
                     *            number of placed the decimal point has to be moved.
                     * @return {@code this * 10^n}.</member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.scaleByPowerOfTen(System.Int32)">
                     * Returns a new {@code BigDecimal} whose value is {@code this} 10^{@code n}.
                     * The scale of the result is {@code this.scale()} - {@code n}.
                     * The precision of the result is the precision of {@code this}.
                     * <p />
                     * This method has the same effect as {@link #movePointRight}, except that
                     * the precision is not changed.
                     *
                     * @param n
                     *            number of places the decimal point has to be moved.
                     * @return {@code this * 10^n}</member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.stripTrailingZeros">
                     * Returns a new {@code BigDecimal} instance with the same value as {@code
                     * this} but with a unscaled value where the trailing zeros have been
                     * removed. If the unscaled value of {@code this} has n trailing zeros, then
                     * the scale and the precision of the result has been reduced by n.
                     *
                     * @return a new {@code BigDecimal} instance equivalent to this where the
                     *         trailing zeros of the unscaled value have been removed.</member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.compareTo(biz.ritter.javapi.math.BigDecimal)">
                     * Compares this {@code BigDecimal} with {@code val}. Returns one of the
                     * three values {@code 1}, {@code 0}, or {@code -1}. The method behaves as
                     * if {@code this.subtract(val)} is computed. If this difference is &gt; 0 then
                     * 1 is returned, if the difference is &lt; 0 then -1 is returned, and if the
                     * difference is 0 then 0 is returned. This means, that if two decimal
                     * instances are compared which are equal in value but differ in scale, then
                     * these two instances are considered as equal.
                     *
                     * @param val
                     *            value to be compared with {@code this}.
            		 * @return {@code 1} if {@code this &gt; val}, {@code -1} if {@code this &lt; val},
                     *         {@code 0} if {@code this == val}.
                     * @throws NullPointerException
                     *             if {@code val == null}.</member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.Equals(System.Object)">
                     * Returns {@code true} if {@code x} is a {@code BigDecimal} instance and if
                     * this instance is equal to this big decimal. Two big decimals are equal if
                     * their unscaled value and their scale is equal. For example, 1.0
                     * (10*10^(-1)) is not equal to 1.00 (100*10^(-2)). Similarly, zero
                     * instances are not equal if their scale differs.
                     *
                     * @param x
                     *            object to be compared with {@code this}.
                     * @return true if {@code x} is a {@code BigDecimal} and {@code this == x}.</member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.min(biz.ritter.javapi.math.BigDecimal)">
                     * Returns the minimum of this {@code BigDecimal} and {@code val}.
                     *
                     * @param val
                     *            value to be used to compute the minimum with this.
                     * @return {@code min(this, val}.
                     * @throws NullPointerException
                     *             if {@code val == null}.</member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.max(biz.ritter.javapi.math.BigDecimal)">
                     * Returns the maximum of this {@code BigDecimal} and {@code val}.
                     *
                     * @param val
                     *            value to be used to compute the maximum with this.
                     * @return {@code max(this, val}.
                     * @throws NullPointerException
                     *             if {@code val == null}.</member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.GetHashCode">
                     * Returns a hash code for this {@code BigDecimal}.
                     *
                     * @return hash code for {@code this}.</member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.ToString">
                     * Returns a canonical string representation of this {@code BigDecimal}. If
                     * necessary, scientific notation is used. This representation always prints
                     * all significant digits of this value.
                     * <p />
                     * If the scale is negative or if {@code scale - precision &gt;= 6} then
                     * scientific notation is used.
                     *
                     * @return a string representation of {@code this} in scientific notation if
                     *         necessary.</member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.toEngineeringString">
                     * Returns a string representation of this {@code BigDecimal}. This
                     * representation always prints all significant digits of this value.
                     * <p />
                     * If the scale is negative or if {@code scale - precision &gt;= 6} then
                     * engineering notation is used. Engineering notation is similar to the
                     * scientific notation except that the exponent is made to be a multiple of
                     * 3 such that the integer part is &gt;= 1 and &lt; 1000.
                     *
                     * @return a string representation of {@code this} in engineering notation
                     *         if necessary.</member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.toPlainString">
                     * Returns a string representation of this {@code BigDecimal}. No scientific
                     * notation is used. This methods adds zeros where necessary.
                     * <p />
                     * If this string representation is used to create a new instance, this
                     * instance is generally not identical to {@code this} as the precision
                     * changes.
                     * <p />
                     * {@code x.equals(new BigDecimal(x.toPlainString())} usually returns
                     * {@code false}.
                     * <p />
                     * {@code x.compareTo(new BigDecimal(x.toPlainString())} returns {@code 0}.
                     *
                     * @return a string representation of {@code this} without exponent part.</member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.toBigInteger">
                     * Returns this {@code BigDecimal} as a big integer instance. A fractional
                     * part is discarded.
                     *
                     * @return this {@code BigDecimal} as a big integer instance.</member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.toBigIntegerExact">
                     * Returns this {@code BigDecimal} as a big integer instance if it has no
                     * fractional part. If this {@code BigDecimal} has a fractional part, i.e.
                     * if rounding would be necessary, an {@code ArithmeticException} is thrown.
                     *
                     * @return this {@code BigDecimal} as a big integer value.
                     * @throws ArithmeticException
                     *             if rounding is necessary.</member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.longValue">
                     * Returns this {@code BigDecimal} as an long value. Any fractional part is
                     * discarded. If the integral part of {@code this} is too big to be
                     * represented as an long, then {@code this} % 2^64 is returned.
                     *
                     * @return this {@code BigDecimal} as a long value.</member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.longValueExact">
                     * Returns this {@code BigDecimal} as a long value if it has no fractional
                     * part and if its value fits to the int range ([-2^{63}..2^{63}-1]). If
                     * these conditions are not met, an {@code ArithmeticException} is thrown.
                     *
                     * @return this {@code BigDecimal} as a long value.
                     * @throws ArithmeticException
                     *             if rounding is necessary or the number doesn't fit in a long.</member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.intValue">
                     * Returns this {@code BigDecimal} as an int value. Any fractional part is
                     * discarded. If the integral part of {@code this} is too big to be
                     * represented as an int, then {@code this} % 2^32 is returned.
                     *
                     * @return this {@code BigDecimal} as a int value.</member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.intValueExact">
                     * Returns this {@code BigDecimal} as a int value if it has no fractional
                     * part and if its value fits to the int range ([-2^{31}..2^{31}-1]). If
                     * these conditions are not met, an {@code ArithmeticException} is thrown.
                     *
                     * @return this {@code BigDecimal} as a int value.
                     * @throws ArithmeticException
                     *             if rounding is necessary or the number doesn't fit in a int.</member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.shortValueExact">
                     * Returns this {@code BigDecimal} as a short value if it has no fractional
                     * part and if its value fits to the short range ([-2^{15}..2^{15}-1]). If
                     * these conditions are not met, an {@code ArithmeticException} is thrown.
                     *
                     * @return this {@code BigDecimal} as a short value.
                     * @throws ArithmeticException
                     *             if rounding is necessary of the number doesn't fit in a
                     *             short.</member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.byteValueExact">
                     * Returns this {@code BigDecimal} as a byte value if it has no fractional
                     * part and if its value fits to the byte range ([-128..127]). If these
                     * conditions are not met, an {@code ArithmeticException} is thrown.
                     *
                     * @return this {@code BigDecimal} as a byte value.
                     * @throws ArithmeticException
                     *             if rounding is necessary or the number doesn't fit in a byte.</member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.floatValue">
                     * Returns this {@code BigDecimal} as a float value. If {@code this} is too
                     * big to be represented as an float, then {@code Float.POSITIVE_INFINITY}
                     * or {@code Float.NEGATIVE_INFINITY} is returned.
                     * <p />
                     * Note, that if the unscaled value has more than 24 significant digits,
                     * then this decimal cannot be represented exactly in a float variable. In
                     * this case the result is rounded.
                     * <p />
                     * For example, if the instance {@code x1 = new BigDecimal("0.1")} cannot be
                     * represented exactly as a float, and thus {@code x1.equals(new
                     * BigDecimal(x1.folatValue())} returns {@code false} for this case.
                     * <p />
                     * Similarly, if the instance {@code new BigDecimal(16777217)} is converted
                     * to a float, the result is {@code 1.6777216E}7.
                     *
                     * @return this {@code BigDecimal} as a float value.</member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.doubleValue">
                     * Returns this {@code BigDecimal} as a double value. If {@code this} is too
                     * big to be represented as an float, then {@code Double.POSITIVE_INFINITY}
                     * or {@code Double.NEGATIVE_INFINITY} is returned.
                     * <p />
                     * Note, that if the unscaled value has more than 53 significant digits,
                     * then this decimal cannot be represented exactly in a double variable. In
                     * this case the result is rounded.
                     * <p />
                     * For example, if the instance {@code x1 = new BigDecimal("0.1")} cannot be
                     * represented exactly as a double, and thus {@code x1.equals(new
                     * BigDecimal(x1.doubleValue())} returns {@code false} for this case.
                     * <p />
                     * Similarly, if the instance {@code new BigDecimal(9007199254740993L)} is
                     * converted to a double, the result is {@code 9.007199254740992E15}.
                     * <p />
                     *
                     * @return this {@code BigDecimal} as a double value.</member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.ulp">
                     * Returns the unit in the last place (ULP) of this {@code BigDecimal}
                     * instance. An ULP is the distance to the nearest big decimal with the same
                     * precision.
                     * <p />
                     * The amount of a rounding error in the evaluation of a floating-point
                     * operation is often expressed in ULPs. An error of 1 ULP is often seen as
                     * a tolerable error.
                     * <p />
                     * For class {@code BigDecimal}, the ULP of a number is simply 10^(-scale).
                     * <p />
                     * For example, {@code new BigDecimal(0.1).ulp()} returns {@code 1E-55}.
                     *
                     * @return unit in the last place (ULP) of this {@code BigDecimal} instance.</member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.inplaceRound(biz.ritter.javapi.math.MathContext)">
                     * It does all rounding work of the public method
                     * {@code round(MathContext)}, performing an inplace rounding
                     * without creating a new object.
                     *
                     * @param mc
                     *            the {@code MathContext} for perform the rounding.
                     * @see #round(MathContext)</member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.smallRound(biz.ritter.javapi.math.MathContext,System.Int32)">
                     * This method implements an efficient rounding for numbers which unscaled
                     * value fits in the type {@code long}.
                     *
                     * @param mc
                     *            the context to use
                     * @param discardedPrecision
                     *            the number of decimal digits that are discarded
                     * @see #round(MathContext)</member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.roundingBehavior(System.Int32,System.Int32,biz.ritter.javapi.math.RoundingMode)">
                     * Return an increment that can be -1,0 or 1, depending of
                     * {@code roundingMode}.
                     *
                     * @param parityBit
                     *            can be 0 or 1, it's only used in the case
                     *            {@code HALF_EVEN}
                     * @param fraction
                     *            the mantisa to be analyzed
                     * @param roundingMode
                     *            the type of rounding
                     * @return the carry propagated after rounding</member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.valueExact(System.Int32)">
                     * If {@code intVal} has a fractional part throws an exception,
                     * otherwise it counts the number of bits of value and checks if it's out of
                     * the range of the primitive type. If the number fits in the primitive type
                     * returns this number as {@code long}, otherwise throws an
                     * exception.
                     *
                     * @param bitLengthJOfType
                     *            number of bits of the type whose value will be calculated
                     *            exactly
                     * @return the exact value of the integer part of {@code BigDecimal}
                     *         when is possible
                     * @throws ArithmeticException when rounding is necessary or the
                     *             number don't fit in the primitive type</member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.aproxPrecision">
                     * If the precision already was calculated it returns that value, otherwise
                     * it calculates a very good approximation efficiently . Note that this
                     * value will be {@code precision()} or {@code precision()-1}
                     * in the worst case.
                     *
                     * @return an approximation of {@code precision()} value</member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.toIntScale(System.Int64)">
                     * It tests if a scale of type {@code long} fits in 32 bits. It
                     * returns the same scale being casted to {@code int} type when is
                     * possible, otherwise throws an exception.
                     *
                     * @param longScale
                     *            a 64 bit scale
                     * @return a 32 bit scale when is possible
                     * @throws ArithmeticException when {@code scale} doesn't
                     *             fit in {@code int} type
                     * @see #scale</member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.zeroScaledBy(System.Int64)">
                     * It returns the value 0 with the most approximated scale of type
                     * {@code int}. if {@code longScale &gt; Integer.MAX_VALUE} the
                     * scale will be {@code Integer.MAX_VALUE}; if
                     * {@code longScale &lt; Integer.MIN_VALUE} the scale will be
                     * {@code Integer.MIN_VALUE}; otherwise {@code longScale} is
                     * casted to the type {@code int}.
                     *
                     * @param longScale
                     *            the scale to which the value 0 will be scaled.
                     * @return the value 0 scaled by the closer scale of type {@code int}.
                     * @see #scale</member>
        <member name="T:biz.ritter.javapi.math.BigInteger">
            <summary>
            This class represents immutable integer numbers of arbitrary length. Large
            numbers are typically used in security applications and therefore BigIntegers
            offer dedicated functionality like the generation of large prime numbers or
            the computation of modular inverse.
            <p />
            Since the class was modeled to offer all the functionality as the {@link Integer}
            class does, it provides even methods that operate bitwise on a two's
            complement representation of large integers. Note however that the
            implementations favors an internal representation where magnitude and sign
            are treated separately. Hence such operations are inefficient and should be
            discouraged. In simple words: Do NOT implement any bit fields based on
            BigInteger.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.math.BigInteger.serialVersionUID">
            This is the serialVersionUID used by the sun implementation. */</member>
        <member name="F:biz.ritter.javapi.math.BigInteger.digits">
            The magnitude of this big integer. This array holds unsigned little
            endian digits. For example:
            {@code 13} is represented as [ 13 ]
            {@code -13} is represented as [ 13 ]
            {@code 2^32 + 13} is represented as [ 13, 1 ]
            {@code 2^64 + 13} is represented as [ 13, 0, 1 ]
            {@code 2^31} is represented as [ Integer.MIN_VALUE ]
            The magnitude array may be longer than strictly necessary, which results
            in additional trailing zeros.</member>
        <member name="F:biz.ritter.javapi.math.BigInteger.numberLength">
            The length of this in measured in ints. Can be less than digits.length(). */</member>
        <member name="F:biz.ritter.javapi.math.BigInteger.sign">
            The sign of this. */</member>
        <member name="F:biz.ritter.javapi.math.BigInteger.ZERO">
            The {@code BigInteger} constant 0.</member>
        <member name="F:biz.ritter.javapi.math.BigInteger.ONE">
            The {@code BigInteger} constant 1.</member>
        <member name="F:biz.ritter.javapi.math.BigInteger.TEN">
            The {@code BigInteger} constant 10.</member>
        <member name="F:biz.ritter.javapi.math.BigInteger.MINUS_ONE">
            The {@code BigInteger} constant -1. */</member>
        <member name="F:biz.ritter.javapi.math.BigInteger.EQUALS">
            The {@code BigInteger} constant 0 used for comparison. */</member>
        <member name="F:biz.ritter.javapi.math.BigInteger.GREATER">
            The {@code BigInteger} constant 1 used for comparison. */</member>
        <member name="F:biz.ritter.javapi.math.BigInteger.LESS">
            The {@code BigInteger} constant -1 used for comparison. */</member>
        <member name="F:biz.ritter.javapi.math.BigInteger.SMALL_VALUES">
            All the {@code BigInteger} numbers in the range [0,10] are cached. */</member>
        <member name="F:biz.ritter.javapi.math.BigInteger.signumJ">
            sign field, used for serialization. */</member>
        <member name="F:biz.ritter.javapi.math.BigInteger.magnitude">
            absolute value field, used for serialization */</member>
        <member name="F:biz.ritter.javapi.math.BigInteger.hashCode">
            Cache for the hash code. */</member>
        <member name="M:biz.ritter.javapi.math.BigInteger.#ctor(System.Int32,biz.ritter.javapi.util.Random)">
            <summary>
            Constructs a random non-negative {@code BigInteger} instance in the range
            [0, 2^(numBits)-1].
            @param numBits
            maximum length of the new {@code BigInteger} in bits.
            @param rnd
            is an optional random generator to be used.
            @throws IllegalArgumentException
            if {@code numBits} &lt; 0.
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.#ctor(System.Int32,System.Int32,biz.ritter.javapi.util.Random)">
            <summary>
            Constructs a random {@code BigInteger} instance in the range [0,
            2^(bitLength)-1] which is probably prime. The probability that the
            returned {@code BigInteger} is prime is beyond (1-1/2^certainty).
            @param bitLength
            length of the new {@code BigInteger} in bits.
            @param certainty
            tolerated primality uncertainty.
            @param rnd
            is an optional random generator to be used.
            @throws ArithmeticException
            if {@code bitLength} &lt; 2.
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.#ctor(System.String)">
            <summary>
            Constructs a new {@code BigInteger} instance from the string
            representation. The string representation consists of an optional minus
            sign followed by a non-empty sequence of decimal digits.
            @param val
            string representation of the new {@code BigInteger}.
            @throws NullPointerException
            if {@code val == null}.
            @throws NumberFormatException
            if {@code val} is not a valid representation of a {@code
            BigInteger}.
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.#ctor(System.String,System.Int32)">
            <summary>
            Constructs a new {@code BigInteger} instance from the string
            representation. The string representation consists of an optional minus
            sign followed by a non-empty sequence of digits in the specified radix.
            For the conversion the method {@code Character.digit(char, radix)} is
            used.
            @param val
            string representation of the new {@code BigInteger}.
            @param radix
            the base to be used for the conversion.
            @throws NullPointerException
            if {@code val == null}.
            @throws NumberFormatException
            if {@code val} is not a valid representation of a {@code
            BigInteger} or if {@code radix &lt; Character.MIN_RADIX} or
            {@code radix &gt; Character.MAX_RADIX}.
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.#ctor(System.Int32,System.Byte[])">
            <summary>
            Constructs a new {@code BigInteger} instance with the given sign and the
            given magnitude. The sign is given as an integer (-1 for negative, 0 for
            zero, 1 for positive). The magnitude is specified as a byte array. The
            most significant byte is the entry at index 0.
            @param signum
            sign of the new {@code BigInteger} (-1 for negative, 0 for
            zero, 1 for positive).
            @param magnitude
            magnitude of the new {@code BigInteger} with the most
            significant byte first.
            @throws NullPointerException
            if {@code magnitude == null}.
            @throws NumberFormatException
            if the sign is not one of -1, 0, 1 or if the sign is zero and
            the magnitude contains non-zero entries.
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.#ctor(System.Byte[])">
            <summary>
            Constructs a new {@code BigInteger} from the given two's complement
            representation. The most significant byte is the entry at index 0. The
            most significant bit of this entry determines the sign of the new {@code
            BigInteger} instance. The given array must not be empty.
            @param val
            two's complement representation of the new {@code BigInteger}.
            @throws NullPointerException
            if {@code val == null}.
            @throws NumberFormatException
            if the length of {@code val} is zero.
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a number which array is of size 1.
            @param sign
            the sign of the number
            @param value
            the only one digit of array
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.#ctor(System.Int32,System.Int32,System.Int32[])">
            <summary>
            Constructs a number without to create new space. This construct should be
            used only if the three fields of representation are known.
            @param sign
            the sign of the number
            @param numberLength
            the length of the internal array
            @param digits
            a reference of some array created before
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.#ctor(System.Int32,System.Int64)">
            <summary>
            Creates a new {@code BigInteger} whose value is equal to the specified
            {@code long}.
            @param sign
            the sign of the number
            @param val
            the value of the new {@code BigInteger}.
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.#ctor(System.Int32,System.Int32[])">
            <summary>
            Creates a new {@code BigInteger} with the given sign and magnitude. This
            constructor does not create a copy, so any changes to the reference will
            affect the new number.
            @param signum
            The sign of the number represented by {@code digits}
            @param digits
            The magnitude of the number
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.toByteArray">
            Returns the two's complement representation of this BigInteger in a byte
            array.
            @return two's complement representation of {@code this}.</member>
        <member name="M:biz.ritter.javapi.math.BigInteger.setFromString(biz.ritter.javapi.math.BigInteger,System.String,System.Int32)">
            @see BigInteger#BigInteger(String, int) */</member>
        <member name="M:biz.ritter.javapi.math.BigInteger.abs">
            Returns a (new) {@code BigInteger} whose value is the absolute value of
            {@code this}.
            @return {@code abs(this)}.</member>
        <member name="M:biz.ritter.javapi.math.BigInteger.negate">
            Returns a new {@code BigInteger} whose value is the {@code -this}.
            @return {@code -this}.</member>
        <member name="M:biz.ritter.javapi.math.BigInteger.add(biz.ritter.javapi.math.BigInteger)">
            Returns a new {@code BigInteger} whose value is {@code this + val}.
            @param val
            value to be added to {@code this}.
            @return {@code this + val}.
            @throws NullPointerException
            if {@code val == null}.</member>
        <member name="M:biz.ritter.javapi.math.BigInteger.subtract(biz.ritter.javapi.math.BigInteger)">
            Returns a new {@code BigInteger} whose value is {@code this - val}.
            @param val
            value to be subtracted from {@code this}.
            @return {@code this - val}.
            @throws NullPointerException
            if {@code val == null}.</member>
        <member name="M:biz.ritter.javapi.math.BigInteger.signum">
            Returns the sign of this {@code BigInteger}.
            @return {@code -1} if {@code this &lt; 0},
            {@code 0} if {@code this == 0},
            {@code 1} if {@code this &gt; 0}.</member>
        <member name="M:biz.ritter.javapi.math.BigInteger.shiftRight(System.Int32)">
            Returns a new {@code BigInteger} whose value is {@code this &gt;&gt; n}. For
            negative arguments, the result is also negative. The shift distance may
            be negative which means that {@code this} is shifted left.
            <p /><b>Implementation Note:</b> Usage of this method on negative values is
            not recommended as the current implementation is not efficient.
            @param n
            shift distance
            @return {@code this &lt;&lt; n} if {@code n &gt;= 0}; {@code this &lt;&lt;s (-n)}
            otherwise</member>
        <member name="M:biz.ritter.javapi.math.BigInteger.shiftLeft(System.Int32)">
            Returns a new {@code BigInteger} whose value is {@code this &gt;&gt; n}. The
            result is equivalent to {@code this * 2^n} if n &gt;= 0. The shift distance
            may be negative which means that {@code this} is shifted right. The
            result then corresponds to {@code floor(this / 2^(-n))}.
            <p /><b>Implementation Note:</b> Usage of this method on negative values is
            not recommended as the current implementation is not efficient.
            @param n
            shift distance.
            @return {@code this &lt;&lt; n} if {@code n &gt;= 0}; {@code this &gt;&gt; (-n)}.
            otherwise</member>
        <member name="M:biz.ritter.javapi.math.BigInteger.bitLength">
            Returns the length of the value's two's complement representation without
            leading zeros for positive numbers / without leading ones for negative
            values.
            <p />
            The two's complement representation of {@code this} will be at least
            {@code bitLength() + 1} bits long.
            <p />
            The value will fit into an {@code int} if {@code bitLength() &lt; 32} or
            into a {@code long} if {@code bitLength() &lt; 64}.
            @return the length of the minimal two's complement representation for
            {@code this} without the sign bit.</member>
        <member name="M:biz.ritter.javapi.math.BigInteger.testBit(System.Int32)">
            Tests whether the bit at position n in {@code this} is set. The result is
            equivalent to {@code this &amp; (2^n) != 0}.
            <p /><b>Implementation Note:</b> Usage of this method is not recommended as
            the current implementation is not efficient.
            @param n
            position where the bit in {@code this} has to be inspected.
            @return {@code this &amp; (2^n) != 0}.
            @throws ArithmeticException
            if {@code n &lt; 0}.</member>
        <member name="M:biz.ritter.javapi.math.BigInteger.setBit(System.Int32)">
            Returns a new {@code BigInteger} which has the same binary representation
            as {@code this} but with the bit at position n set. The result is
            equivalent to {@code this | 2^n}.
            <p /><b>Implementation Note:</b> Usage of this method is not recommended as
            the current implementation is not efficient.
            @param n
            position where the bit in {@code this} has to be set.
            @return {@code this | 2^n}.
            @throws ArithmeticException
            if {@code n &lt; 0}.</member>
        <member name="M:biz.ritter.javapi.math.BigInteger.clearBit(System.Int32)">
            Returns a new {@code BigInteger} which has the same binary representation
            as {@code this} but with the bit at position n cleared. The result is
            equivalent to {@code this &amp; ~(2^n)}.
            <p /><b>Implementation Note:</b> Usage of this method is not recommended as
            the current implementation is not efficient.
            @param n
            position where the bit in {@code this} has to be cleared.
            @return {@code this &amp; ~(2^n)}.
            @throws ArithmeticException
            if {@code n &gt; 0}.</member>
        <member name="M:biz.ritter.javapi.math.BigInteger.flipBit(System.Int32)">
            Returns a new {@code BigInteger} which has the same binary representation
            as {@code this} but with the bit at position n flipped. The result is
            equivalent to {@code this ^ 2^n}.
            <p /><b>Implementation Note:</b> Usage of this method is not recommended as
            the current implementation is not efficient.
            @param n
            position where the bit in {@code this} has to be flipped.
            @return {@code this ^ 2^n}.
            @throws ArithmeticException
            if {@code n &lt; 0}.</member>
        <member name="M:biz.ritter.javapi.math.BigInteger.getLowestSetBit">
            Returns the position of the lowest set bit in the two's complement
            representation of this {@code BigInteger}. If all bits are zero (this=0)
            then -1 is returned as result.
            <p /><b>Implementation Note:</b> Usage of this method is not recommended as
            the current implementation is not efficient.
            @return position of lowest bit if {@code this != 0}, {@code -1} otherwise</member>
        <member name="M:biz.ritter.javapi.math.BigInteger.bitCount">
            Use {@code bitLength(0)} if you want to know the length of the binary
            value in bits.
            <p />
            Returns the number of bits in the binary representation of {@code this}
            which differ from the sign bit. If {@code this} is positive the result is
            equivalent to the number of bits set in the binary representation of
            {@code this}. If {@code this} is negative the result is equivalent to the
            number of bits set in the binary representation of {@code -this-1}.
            <p /><b>Implementation Note:</b> Usage of this method is not recommended as
            the current implementation is not efficient.
            @return number of bits in the binary representation of {@code this} which
            differ from the sign bit</member>
        <member name="M:biz.ritter.javapi.math.BigInteger.not">
            Returns a new {@code BigInteger} whose value is {@code ~this}. The result
            of this operation is {@code -this-1}.
            <p /><b>Implementation Note:</b> Usage of this method is not recommended as
            the current implementation is not efficient.
            @return {@code ~this}.</member>
        <member name="M:biz.ritter.javapi.math.BigInteger.and(biz.ritter.javapi.math.BigInteger)">
            Returns a new {@code BigInteger} whose value is {@code this &amp; val}.
            <p /><b>Implementation Note:</b> Usage of this method is not recommended as
            the current implementation is not efficient.
            @param val
            value to be and'ed with {@code this}.
            @return {@code this &amp; val}.
            @throws NullPointerException
            if {@code val == null}.</member>
        <member name="M:biz.ritter.javapi.math.BigInteger.or(biz.ritter.javapi.math.BigInteger)">
            Returns a new {@code BigInteger} whose value is {@code this | val}.
            <p /><b>Implementation Note:</b> Usage of this method is not recommended as
            the current implementation is not efficient.
            @param val
            value to be or'ed with {@code this}.
            @return {@code this | val}.
            @throws NullPointerException
            if {@code val == null}.</member>
        <member name="M:biz.ritter.javapi.math.BigInteger.xor(biz.ritter.javapi.math.BigInteger)">
            Returns a new {@code BigInteger} whose value is {@code this ^ val}.
            <p /><b>Implementation Note:</b> Usage of this method is not recommended as
            the current implementation is not efficient.
            @param val
            value to be xor'ed with {@code this}
            @return {@code this ^ val}
            @throws NullPointerException
            if {@code val == null}</member>
        <member name="M:biz.ritter.javapi.math.BigInteger.andNot(biz.ritter.javapi.math.BigInteger)">
            Returns a new {@code BigInteger} whose value is {@code this &amp; ~val}.
            Evaluating {@code x.andNot(val)} returns the same result as {@code
            x.and(val.not())}.
            <p /><b>Implementation Note:</b> Usage of this method is not recommended as
            the current implementation is not efficient.
            @param val
            value to be not'ed and then and'ed with {@code this}.
            @return {@code this &amp; ~val}.
            @throws NullPointerException
            if {@code val == null}.</member>
        <member name="M:biz.ritter.javapi.math.BigInteger.intValue">
            Returns this {@code BigInteger} as an int value. If {@code this} is too
            big to be represented as an int, then {@code this} % 2^32 is returned.
            @return this {@code BigInteger} as an int value.</member>
        <member name="M:biz.ritter.javapi.math.BigInteger.longValue">
            Returns this {@code BigInteger} as an long value. If {@code this} is too
            big to be represented as an long, then {@code this} % 2^64 is returned.
            @return this {@code BigInteger} as a long value.</member>
        <member name="M:biz.ritter.javapi.math.BigInteger.floatValue">
            Returns this {@code BigInteger} as an float value. If {@code this} is too
            big to be represented as an float, then {@code Float.POSITIVE_INFINITY}
            or {@code Float.NEGATIVE_INFINITY} is returned. Note, that not all
            integers x in the range [-Float.MAX_VALUE, Float.MAX_VALUE] can be
            represented as a float. The float representation has a mantissa of length
            24. For example, 2^24+1 = 16777217 is returned as float 16777216.0.
            @return this {@code BigInteger} as a float value.</member>
        <member name="M:biz.ritter.javapi.math.BigInteger.doubleValue">
            Returns this {@code BigInteger} as an double value. If {@code this} is
            too big to be represented as an double, then {@code
            Double.POSITIVE_INFINITY} or {@code Double.NEGATIVE_INFINITY} is
            returned. Note, that not all integers x in the range [-Double.MAX_VALUE,
            Double.MAX_VALUE] can be represented as a double. The double
            representation has a mantissa of length 53. For example, 2^53+1 =
            9007199254740993 is returned as double 9007199254740992.0.
            @return this {@code BigInteger} as a double value</member>
        <member name="M:biz.ritter.javapi.math.BigInteger.compareTo(biz.ritter.javapi.math.BigInteger)">
            Compares this {@code BigInteger} with {@code val}. Returns one of the
            three values 1, 0, or -1.
            @param val
            value to be compared with {@code this}.
            @return {@code 1} if {@code this &gt; val}, {@code -1} if {@code this &lt; val}
            , {@code 0} if {@code this == val}.
            @throws NullPointerException
            if {@code val == null}.</member>
        <member name="M:biz.ritter.javapi.math.BigInteger.min(biz.ritter.javapi.math.BigInteger)">
            Returns the minimum of this {@code BigInteger} and {@code val}.
            @param val
            value to be used to compute the minimum with {@code this}.
            @return {@code min(this, val)}.
            @throws NullPointerException
            if {@code val == null}.</member>
        <member name="M:biz.ritter.javapi.math.BigInteger.max(biz.ritter.javapi.math.BigInteger)">
            Returns the maximum of this {@code BigInteger} and {@code val}.
            @param val
            value to be used to compute the maximum with {@code this}
            @return {@code max(this, val)}
            @throws NullPointerException
            if {@code val == null}</member>
        <member name="M:biz.ritter.javapi.math.BigInteger.GetHashCode">
            Returns a hash code for this {@code BigInteger}.
            @return hash code for {@code this}.</member>
        <member name="M:biz.ritter.javapi.math.BigInteger.Equals(System.Object)">
            Returns {@code true} if {@code x} is a BigInteger instance and if this
            instance is equal to this {@code BigInteger}.
            @param x
            object to be compared with {@code this}.
            @return true if {@code x} is a BigInteger and {@code this == x},
            {@code false} otherwise.</member>
        <member name="M:biz.ritter.javapi.math.BigInteger.ToString">
            Returns a string representation of this {@code BigInteger} in decimal
            form.
            @return a string representation of {@code this} in decimal form.</member>
        <member name="M:biz.ritter.javapi.math.BigInteger.toString(System.Int32)">
            Returns a string containing a string representation of this {@code
            BigInteger} with base radix. If {@code radix &lt; Character.MIN_RADIX} or
            {@code radix &gt; Character.MAX_RADIX} then a decimal representation is
            returned. The characters of the string representation are generated with
            method {@code Character.forDigit}.
            @param radix
            base to be used for the string representation.
            @return a string representation of this with radix 10.</member>
        <member name="M:biz.ritter.javapi.math.BigInteger.gcd(biz.ritter.javapi.math.BigInteger)">
            Returns a new {@code BigInteger} whose value is greatest common divisor
            of {@code this} and {@code val}. If {@code this==0} and {@code val==0}
            then zero is returned, otherwise the result is positive.
            @param val
            value with which the greatest common divisor is computed.
            @return {@code gcd(this, val)}.
            @throws NullPointerException
            if {@code val == null}.</member>
        <member name="M:biz.ritter.javapi.math.BigInteger.multiply(biz.ritter.javapi.math.BigInteger)">
            Returns a new {@code BigInteger} whose value is {@code this * val}.
            @param val
            value to be multiplied with {@code this}.
            @return {@code this * val}.
            @throws NullPointerException
            if {@code val == null}.</member>
        <member name="M:biz.ritter.javapi.math.BigInteger.pow(System.Int32)">
            Returns a new {@code BigInteger} whose value is {@code this ^ exp}.
            @param exp
            exponent to which {@code this} is raised.
            @return {@code this ^ exp}.
            @throws ArithmeticException
            if {@code exp &lt; 0}.</member>
        <member name="M:biz.ritter.javapi.math.BigInteger.divideAndRemainder(biz.ritter.javapi.math.BigInteger)">
            Returns a {@code BigInteger} array which contains {@code this / divisor}
            at index 0 and {@code this % divisor} at index 1.
            @param divisor
            value by which {@code this} is divided.
            @return {@code [this / divisor, this % divisor]}.
            @throws NullPointerException
            if {@code divisor == null}.
            @throws ArithmeticException
            if {@code divisor == 0}.
            @see #divide
            @see #remainder</member>
        <member name="M:biz.ritter.javapi.math.BigInteger.divide(biz.ritter.javapi.math.BigInteger)">
            Returns a new {@code BigInteger} whose value is {@code this / divisor}.
            @param divisor
            value by which {@code this} is divided.
            @return {@code this / divisor}.
            @throws NullPointerException
            if {@code divisor == null}.
            @throws ArithmeticException
            if {@code divisor == 0}.</member>
        <member name="M:biz.ritter.javapi.math.BigInteger.remainder(biz.ritter.javapi.math.BigInteger)">
            Returns a new {@code BigInteger} whose value is {@code this % divisor}.
            Regarding signs this methods has the same behavior as the % operator on
            int's, i.e. the sign of the remainder is the same as the sign of this.
            @param divisor
            value by which {@code this} is divided.
            @return {@code this % divisor}.
            @throws NullPointerException
            if {@code divisor == null}.
            @throws ArithmeticException
            if {@code divisor == 0}.</member>
        <member name="M:biz.ritter.javapi.math.BigInteger.modInverse(biz.ritter.javapi.math.BigInteger)">
            Returns a new {@code BigInteger} whose value is {@code 1/this mod m}. The
            modulus {@code m} must be positive. The result is guaranteed to be in the
            interval {@code [0, m)} (0 inclusive, m exclusive). If {@code this} is
            not relatively prime to m, then an exception is thrown.
            @param m
            the modulus.
            @return {@code 1/this mod m}.
            @throws NullPointerException
            if {@code m == null}
            @throws ArithmeticException
            if {@code m &lt; 0 or} if {@code this} is not relatively prime
            to {@code m}</member>
        <member name="M:biz.ritter.javapi.math.BigInteger.modPow(biz.ritter.javapi.math.BigInteger,biz.ritter.javapi.math.BigInteger)">
            Returns a new {@code BigInteger} whose value is {@code this^exponent mod
            m}. The modulus {@code m} must be positive. The result is guaranteed to
            be in the interval {@code [0, m)} (0 inclusive, m exclusive). If the
            exponent is negative, then {@code this.modInverse(m)^(-exponent) mod m)}
            is computed. The inverse of this only exists if {@code this} is
            relatively prime to m, otherwise an exception is thrown.
            @param exponent
            the exponent.
            @param m
            the modulus.
            @return {@code this^exponent mod val}.
            @throws NullPointerException
            if {@code m == null} or {@code exponent == null}.
            @throws ArithmeticException
            if {@code m &lt; 0} or if {@code exponent&lt;0} and this is not
            relatively prime to {@code m}.</member>
        <member name="M:biz.ritter.javapi.math.BigInteger.mod(biz.ritter.javapi.math.BigInteger)">
            Returns a new {@code BigInteger} whose value is {@code this mod m}. The
            modulus {@code m} must be positive. The result is guaranteed to be in the
            interval {@code [0, m)} (0 inclusive, m exclusive). The behavior of this
            function is not equivalent to the behavior of the % operator defined for
            the built-in {@code int}'s.
            @param m
            the modulus.
            @return {@code this mod m}.
            @throws NullPointerException
            if {@code m == null}.
            @throws ArithmeticException
            if {@code m &lt; 0}.</member>
        <member name="M:biz.ritter.javapi.math.BigInteger.isProbablePrime(System.Int32)">
            Tests whether this {@code BigInteger} is probably prime. If {@code true}
            is returned, then this is prime with a probability beyond
            (1-1/2^certainty). If {@code false} is returned, then this is definitely
            composite. If the argument {@code certainty} &lt;= 0, then this method
            returns true.
            @param certainty
            tolerated primality uncertainty.
            @return {@code true}, if {@code this} is probably prime, {@code false}
            otherwise.</member>
        <member name="M:biz.ritter.javapi.math.BigInteger.nextProbablePrime">
            Returns the smallest integer x &gt; {@code this} which is probably prime as
            a {@code BigInteger} instance. The probability that the returned {@code
            BigInteger} is prime is beyond (1-1/2^80).
            @return smallest integer &gt; {@code this} which is robably prime.
            @throws ArithmeticException
            if {@code this &lt; 0}.</member>
        <member name="M:biz.ritter.javapi.math.BigInteger.probablePrime(System.Int32,biz.ritter.javapi.util.Random)">
            Returns a random positive {@code BigInteger} instance in the range [0,
            2^(bitLength)-1] which is probably prime. The probability that the
            returned {@code BigInteger} is prime is beyond (1-1/2^80).
            <p /><b>Implementation Note:</b> Currently {@code rnd} is ignored.
            @param bitLength
            length of the new {@code BigInteger} in bits.
            @param rnd
            random generator used to generate the new {@code BigInteger}.
            @return probably prime random {@code BigInteger} instance.
            @throws IllegalArgumentException
            if {@code bitLength &lt; 2}.</member>
        <member name="M:biz.ritter.javapi.math.BigInteger.cutOffLeadingZeroes">
            Decreases {@code numberLength} if there are zero high elements. */</member>
        <member name="M:biz.ritter.javapi.math.BigInteger.isOne">
            Tests if {@code this.abs()} is equals to {@code ONE} */</member>
        <member name="M:biz.ritter.javapi.math.BigInteger.putBytesPositiveToIntegers(System.Byte[])">
            Puts a big-endian byte array into a little-endian int array.</member>
        <member name="M:biz.ritter.javapi.math.BigInteger.putBytesNegativeToIntegers(System.Byte[])">
            Puts a big-endian byte array into a little-endian applying two
            complement.</member>
        <member name="M:biz.ritter.javapi.math.BigInteger.copy">
            Returns a copy of the current instance to achieve immutability</member>
        <member name="T:biz.ritter.javapi.math.BitLevel">
                 * Static library that provides all the <b>bit level</b> operations for
                 * {@link BigInteger}. The operations are:
                 * <ul type="circle">
                 * <li>Left Shifting</li>
                 * <li>Right Shifting</li>
                 * <li>Bit clearing</li>
                 * <li>Bit setting</li>
                 * <li>Bit counting</li>
                 * <li>Bit testing</li>
                 * <li>Getting of the lowest bit set</li>
                 * </ul>
                 * All operations are provided in immutable way, and some in both mutable and
                 * immutable.</member>
        <member name="M:biz.ritter.javapi.math.BitLevel.#ctor">
             Just to denote that this class can't be instantiated.</member>
        <member name="M:biz.ritter.javapi.math.BitLevel.bitLength(biz.ritter.javapi.math.BigInteger)">
             @see BigInteger#bitLength()</member>
        <member name="M:biz.ritter.javapi.math.BitLevel.bitCount(biz.ritter.javapi.math.BigInteger)">
             @see BigInteger#bitCount()</member>
        <member name="M:biz.ritter.javapi.math.BitLevel.testBit(biz.ritter.javapi.math.BigInteger,System.Int32)">
                     * Performs a fast bit testing for positive numbers. The bit to to be tested
                     * must be in the range {@code [0, val.bitLength()-1]}</member>
        <member name="M:biz.ritter.javapi.math.BitLevel.nonZeroDroppedBits(System.Int32,System.Int32[])">
                     * Check if there are 1s in the lowest bits of this BigInteger
                     *
                     * @param numberOfBits the number of the lowest bits to check
                     * @return false if all bits are 0s, true otherwise</member>
        <member name="M:biz.ritter.javapi.math.BitLevel.shiftLeft(biz.ritter.javapi.math.BigInteger,System.Int32)">
             @see BigInteger#shiftLeft(int)</member>
        <member name="M:biz.ritter.javapi.math.BitLevel.inplaceShiftLeft(biz.ritter.javapi.math.BigInteger,System.Int32)">
                     * Performs {@code val &lt;&lt;= count}.</member>
        <member name="M:biz.ritter.javapi.math.BitLevel.shiftLeft(System.Int32[],System.Int32[],System.Int32,System.Int32)">
                     * Abstractly shifts left an array of integers in little endian (i.e. shift
                     * it right). Total shift distance in bits is intCount * 32 + count
                     *
                     * @param result the destination array
                     * @param source the source array
                     * @param intCount the shift distance in integers
                     * @param count an additional shift distance in bits</member>
        <member name="M:biz.ritter.javapi.math.BitLevel.shiftLeftOneBit(System.Int32[],System.Int32[],System.Int32)">
                     * Shifts the source digits left one bit, creating a value whose magnitude
                     * is doubled.
                     *
                     * @param result an array of digits that will hold the computed result when
                     *      this method returns. The size of this array is {@code srcLen + 1},
                     *      and the format is the same as {@link BigInteger#digits}.
                     * @param source the array of digits to shift left, in the same format as
                     *      {@link BigInteger#digits}.
                     * @param srcLen the length of {@code source}; may be less than {@code
                     *      source.length}</member>
        <member name="M:biz.ritter.javapi.math.BitLevel.shiftRight(biz.ritter.javapi.math.BigInteger,System.Int32)">
             @see BigInteger#shiftRight(int)</member>
        <member name="M:biz.ritter.javapi.math.BitLevel.inplaceShiftRight(biz.ritter.javapi.math.BigInteger,System.Int32)">
                     * Performs {@code val &gt;&gt;= count} where {@code val} is a positive number.</member>
        <member name="M:biz.ritter.javapi.math.BitLevel.shiftRight(System.Int32[],System.Int32,System.Int32[],System.Int32,System.Int32)">
                     * Shifts right an array of integers. Total shift distance in bits is
                     * intCount * 32 + count.
                     *
                     * @param result
                     *            the destination array
                     * @param resultLen
                     *            the destination array's length
                     * @param source
                     *            the source array
                     * @param intCount
                     *            the number of elements to be shifted
                     * @param count
                     *            the number of bits to be shifted
                     * @return dropped bit's are all zero (i.e. remaider is zero)</member>
        <member name="M:biz.ritter.javapi.math.BitLevel.flipBit(biz.ritter.javapi.math.BigInteger,System.Int32)">
                     * Performs a flipBit on the BigInteger, returning a BigInteger with the the
                     * specified bit flipped.
                     * @param intCount: the index of the element of the digits array where the operation will be performed
                     * @param bitNumber: the bit's position in the intCount element</member>
        <member name="T:biz.ritter.javapi.math.Conversion">
                 * Static library that provides {@link BigInteger} base conversion from/to any
                 * integer represented in an {@link java.lang.String} Object.</member>
        <member name="M:biz.ritter.javapi.math.Conversion.#ctor">
             Just to denote that this class can't be instantiated</member>
        <member name="F:biz.ritter.javapi.math.Conversion.digitFitInInt">
                     * Holds the maximal exponent for each radix, so that radix<sup>digitFitInInt[radix]</sup>
                     * fit in an {@code int} (32 bits).</member>
        <member name="F:biz.ritter.javapi.math.Conversion.bigRadices">
                     * bigRadices values are precomputed maximal powers of radices (integer
                     * numbers from 2 to 36) that fit into unsigned int (32 bits). bigRadices[0] =
                     * 2 ^ 31, bigRadices[8] = 10 ^ 9, etc.</member>
        <member name="M:biz.ritter.javapi.math.Conversion.bigInteger2String(biz.ritter.javapi.math.BigInteger,System.Int32)">
             @see BigInteger#toString(int)</member>
        <member name="M:biz.ritter.javapi.math.Conversion.toDecimalScaledString(biz.ritter.javapi.math.BigInteger,System.Int32)">
                     * Builds the correspondent {@code String} representation of {@code val}
                     * being scaled by {@code scale}.
                     *
                     * @see BigInteger#toString()
                     * @see BigDecimal#toString()</member>
        <member name="M:biz.ritter.javapi.math.Conversion.bigInteger2Double(biz.ritter.javapi.math.BigInteger)">
             @see BigInteger#doubleValue()</member>
        <member name="T:biz.ritter.javapi.math.Division">
                 * Static library that provides all operations related with division and modular
                 * arithmetic to {@link BigInteger}. Some methods are provided in both mutable
                 * and immutable way. There are several variants provided listed below:
                 *
                 * <ul type="circle">
                 * <li><b>Division</b>
                 * <ul type="circle">
                 * <li>{@link BigInteger} division and remainder by {@link BigInteger}.</li>
                 * <li>{@link BigInteger} division and remainder by {@code int}.</li>
                 * <li><i>gcd</i> between {@link BigInteger} numbers.</li>
                 * </ul>
                 * </li>
                 * <li><b>Modular arithmetic </b>
                 * <ul type="circle">
                 * <li>Modular exponentiation between {@link BigInteger} numbers.</li>
                 * <li>Modular inverse of a {@link BigInteger} numbers.</li>
                 * </ul>
                 * </li>
                 *</ul></member>
        <member name="M:biz.ritter.javapi.math.Division.divide(System.Int32[],System.Int32,System.Int32[],System.Int32,System.Int32[],System.Int32)">
                     * Divides the array 'a' by the array 'b' and gets the quotient and the
                     * remainder. Implements the Knuth's division algorithm. See D. Knuth, The
                     * Art of Computer Programming, vol. 2. Steps D1-D8 correspond the steps in
                     * the algorithm description.
                     *
                     * @param quot the quotient
                     * @param quotLength the quotient's length
                     * @param a the dividend
                     * @param aLength the dividend's length
                     * @param b the divisor
                     * @param bLength the divisor's length
                     * @return the remainder</member>
        <member name="M:biz.ritter.javapi.math.Division.divideArrayByInt(System.Int32[],System.Int32[],System.Int32,System.Int32)">
                     * Divides an array by an integer value. Implements the Knuth's division
                     * algorithm. See D. Knuth, The Art of Computer Programming, vol. 2.
                     *
                     * @param dest the quotient
                     * @param src the dividend
                     * @param srcLength the length of the dividend
                     * @param divisor the divisor
                     * @return remainder</member>
        <member name="M:biz.ritter.javapi.math.Division.remainderArrayByInt(System.Int32[],System.Int32,System.Int32)">
                     * Divides an array by an integer value. Implements the Knuth's division
                     * algorithm. See D. Knuth, The Art of Computer Programming, vol. 2.
                     *
                     * @param src the dividend
                     * @param srcLength the length of the dividend
                     * @param divisor the divisor
                     * @return remainder</member>
        <member name="M:biz.ritter.javapi.math.Division.remainder(biz.ritter.javapi.math.BigInteger,System.Int32)">
                     * Divides a <code>BigInteger</code> by a signed <code>int</code> and
                     * returns the remainder.
                     *
                     * @param dividend the BigInteger to be divided. Must be non-negative.
                     * @param divisor a signed int
                     * @return divide % divisor</member>
        <member name="M:biz.ritter.javapi.math.Division.divideLongByInt(System.Int64,System.Int32)">
                     * Divides an unsigned long a by an unsigned int b. It is supposed that the
                     * most significant bit of b is set to 1, i.e. b &lt; 0
                     *
                     * @param a the dividend
                     * @param b the divisor
                     * @return the long value containing the unsigned integer remainder in the
                     *         left half and the unsigned integer quotient in the right half</member>
        <member name="M:biz.ritter.javapi.math.Division.divideAndRemainderByInteger(biz.ritter.javapi.math.BigInteger,System.Int32,System.Int32)">
                     * Computes the quotient and the remainder after a division by an {@code int}
                     * number.
                     *
                     * @return an array of the form {@code [quotient, remainder]}.</member>
        <member name="M:biz.ritter.javapi.math.Division.multiplyAndSubtract(System.Int32[],System.Int32,System.Int32[],System.Int32,System.Int32)">
                     * Multiplies an array by int and subtracts it from a subarray of another
                     * array.
                     *
                     * @param a the array to subtract from
                     * @param start the start element of the subarray of a
                     * @param b the array to be multiplied and subtracted
                     * @param bLen the length of b
                     * @param c the multiplier of b
                     * @return the carry element of subtraction</member>
        <member name="M:biz.ritter.javapi.math.Division.gcdBinary(biz.ritter.javapi.math.BigInteger,biz.ritter.javapi.math.BigInteger)">
                     * @param m a positive modulus
                     * Return the greatest common divisor of op1 and op2,
                     *
                     * @param op1
                     *            must be greater than zero
                     * @param op2
                     *            must be greater than zero
                     * @see BigInteger#gcd(BigInteger)
                     * @return {@code GCD(op1, op2)}</member>
        <member name="M:biz.ritter.javapi.math.Division.gcdBinary(System.Int64,System.Int64)">
                     * Performs the same as {@link #gcdBinary(BigInteger, BigInteger)}, but
                     * with numbers of 63 bits, represented in positives values of {@code long}
                     * type.
                     *
                     * @param op1
                     *            a positive number
                     * @param op2
                     *            a positive number
                     * @see #gcdBinary(BigInteger, BigInteger)
                     * @return <code>GCD(op1, op2)</code></member>
        <member name="M:biz.ritter.javapi.math.Division.modInverseMontgomery(biz.ritter.javapi.math.BigInteger,biz.ritter.javapi.math.BigInteger)">
                     * Calculates a.modInverse(p) Based on: Savas, E; Koc, C "The Montgomery Modular
                     * Inverse - Revised"</member>
        <member name="M:biz.ritter.javapi.math.Division.calcN(biz.ritter.javapi.math.BigInteger)">
                     * Calculate the first digit of the inverse</member>
        <member name="M:biz.ritter.javapi.math.Division.modInverseHars(biz.ritter.javapi.math.BigInteger,biz.ritter.javapi.math.BigInteger)">
                     * Implements the "Shifting Euclidean modular inverse algorithm".
                     * "Laszlo Hars - Modular Inverse Algorithms Without Multiplications
                     * for Cryptographic Applications"
                     *
                     * @see BigInteger#modInverse(BigInteger)
                     * @param a
                     *            a positive number
                     * @param m
                     *            a positive modulus</member>
        <member name="M:biz.ritter.javapi.math.Division.oddModPow(biz.ritter.javapi.math.BigInteger,biz.ritter.javapi.math.BigInteger,biz.ritter.javapi.math.BigInteger)">
                     * Performs modular exponentiation using the Montgomery Reduction. It
                     * requires that all parameters be positive and the modulus be odd. &gt;
                     *
                     * @see BigInteger#modPow(BigInteger, BigInteger)
                     * @see #monPro(BigInteger, BigInteger, BigInteger, int)
                     * @see #slidingWindow(BigInteger, BigInteger, BigInteger, BigInteger,
                     *                      int)
                     * @see #squareAndMultiply(BigInteger, BigInteger, BigInteger, BigInteger,
                     *                      int)</member>
        <member name="M:biz.ritter.javapi.math.Division.evenModPow(biz.ritter.javapi.math.BigInteger,biz.ritter.javapi.math.BigInteger,biz.ritter.javapi.math.BigInteger)">
                     * Performs modular exponentiation using the Montgomery Reduction. It
                     * requires that all parameters be positive and the modulus be even. Based
                     * <i>The square and multiply algorithm and the Montgomery Reduction C. K.
                     * Koc - Montgomery Reduction with Even Modulus</i>. The square and
                     * multiply algorithm and the Montgomery Reduction.
                     *
                     * @ar.org.fitc.ref "C. K. Koc - Montgomery Reduction with Even Modulus"
                     * @see BigInteger#modPow(BigInteger, BigInteger)</member>
        <member name="M:biz.ritter.javapi.math.Division.pow2ModPow(biz.ritter.javapi.math.BigInteger,biz.ritter.javapi.math.BigInteger,System.Int32)">
                     * It requires that all parameters be positive.
                     *
                     * @return {@code base<sup>exponent</sup> mod (2<sup>j</sup>)}.
                     * @see BigInteger#modPow(BigInteger, BigInteger)</member>
        <member name="M:biz.ritter.javapi.math.Division.monPro(biz.ritter.javapi.math.BigInteger,biz.ritter.javapi.math.BigInteger,biz.ritter.javapi.math.BigInteger,System.Int32)">
                     * Implements the Montgomery Product of two integers represented by
                     * {@code int} arrays. The arrays are supposed in <i>little
                     * endian</i> notation.
                     *
                     * @param a The first factor of the product.
                     * @param b The second factor of the product.
                     * @param modulus The modulus of the operations. Z<sub>modulus</sub>.
                     * @param n2 The digit modulus'[0].
                     * @ar.org.fitc.ref "C. K. Koc - Analyzing and Comparing Montgomery
                     *                  Multiplication Algorithms"
                     * @see #modPowOdd(BigInteger, BigInteger, BigInteger)</member>
        <member name="M:biz.ritter.javapi.math.Division.finalSubtraction(System.Int32[],biz.ritter.javapi.math.BigInteger)">
                     * Performs the final reduction of the Montgomery algorithm.
                     * @see monPro(BigInteger, BigInteger, BigInteger, long)
                     * @see monSquare(BigInteger, BigInteger, long)</member>
        <member name="M:biz.ritter.javapi.math.Division.modPow2Inverse(biz.ritter.javapi.math.BigInteger,System.Int32)">
                     * @param x an odd positive number.
                     * @param n the exponent by which 2 is raised.
                     * @return {@code x<sup>-1</sup> (mod 2<sup>n</sup>)}.</member>
        <member name="M:biz.ritter.javapi.math.Division.inplaceModPow2(biz.ritter.javapi.math.BigInteger,System.Int32)">
                     * Performs {@code x = x mod (2<sup>n</sup>)}.
                     *
                     * @param x a positive number, it will store the result.
                     * @param n a positive exponent of {@code 2}.</member>
        <member name="T:biz.ritter.javapi.math.Elementary">
                 * Static library that provides the basic arithmetic mutable operations for
                 * {@link BigInteger}. The operations provided are listed below.
                 * <ul type="circle">
                 * <li>Addition.</li>
                 * <li>Subtraction.</li>
                 * <li>Comparison.</li>
                 * </ul>
                 * In addition to this, some <i><b>Inplace</b></i> (mutable) methods are provided.</member>
        <member name="M:biz.ritter.javapi.math.Elementary.#ctor">
             Just to denote that this class can't be instantiated</member>
        <member name="M:biz.ritter.javapi.math.Elementary.compareArrays(System.Int32[],System.Int32[],System.Int32)">
                     * Compares two arrays. All elements are treated as unsigned integers. The
                     * magnitude is the bit chain of elements in big-endian order.
                     *
                     * @param a the first array
                     * @param b the second array
                     * @param size the size of arrays
                     * @return 1 if a &gt; b, -1 if a &lt; b, 0 if a == b</member>
        <member name="M:biz.ritter.javapi.math.Elementary.add(biz.ritter.javapi.math.BigInteger,biz.ritter.javapi.math.BigInteger)">
             @see BigInteger#add(BigInteger)</member>
        <member name="M:biz.ritter.javapi.math.Elementary.add(System.Int32[],System.Int32[],System.Int32,System.Int32[],System.Int32)">
                     * Performs {@code res = a + b}.</member>
        <member name="M:biz.ritter.javapi.math.Elementary.subtract(biz.ritter.javapi.math.BigInteger,biz.ritter.javapi.math.BigInteger)">
             @see BigInteger#subtract(BigInteger)</member>
        <member name="M:biz.ritter.javapi.math.Elementary.subtract(System.Int32[],System.Int32[],System.Int32,System.Int32[],System.Int32)">
                     * Performs {@code res = a - b}. It is assumed the magnitude of a is not
                     * less than the magnitude of b.</member>
        <member name="M:biz.ritter.javapi.math.Elementary.add(System.Int32[],System.Int32,System.Int32[],System.Int32)">
                     * Addss the value represented by {@code b} to the value represented by
                     * {@code a}. It is assumed the magnitude of a is not less than the
                     * magnitude of b.
                     *
                     * @return {@code a + b}</member>
        <member name="M:biz.ritter.javapi.math.Elementary.inplaceAdd(biz.ritter.javapi.math.BigInteger,biz.ritter.javapi.math.BigInteger)">
                     * Performs {@code op1 += op2}. {@code op1} must have enough place to store
                     * the result (i.e. {@code op1.bitLength() &gt;= op2.bitLength()}). Both
                     * should be positive (i.e. {@code op1 &gt;= op2}).
                     *
                     * @param op1 the input minuend, and the output result.
                     * @param op2 the addend</member>
        <member name="M:biz.ritter.javapi.math.Elementary.inplaceAdd(System.Int32[],System.Int32,System.Int32)">
                     * Adds an integer value to the array of integers remembering carry.
                     *
                     * @return a possible generated carry (0 or 1)</member>
        <member name="M:biz.ritter.javapi.math.Elementary.inplaceAdd(biz.ritter.javapi.math.BigInteger,System.Int32)">
                     * Performs: {@code op1 += addend}. The number must to have place to hold a
                     * possible carry.</member>
        <member name="M:biz.ritter.javapi.math.Elementary.inplaceSubtract(biz.ritter.javapi.math.BigInteger,biz.ritter.javapi.math.BigInteger)">
                     * Performs {@code op1 -= op2}. {@code op1} must have enough place to store
                     * the result (i.e. {@code op1.bitLength() &gt;= op2.bitLength()}). Both
                     * should be positive (what implies that {@code op1 &gt;= op2}).
                     *
                     * @param op1
                     *            the input minuend, and the output result.
                     * @param op2
                     *            the subtrahend</member>
        <member name="M:biz.ritter.javapi.math.Elementary.inverseSubtract(System.Int32[],System.Int32[],System.Int32,System.Int32[],System.Int32)">
                     * Performs {@code res = b - a}</member>
        <member name="M:biz.ritter.javapi.math.Elementary.subtract(System.Int32[],System.Int32,System.Int32[],System.Int32)">
                     * Subtracts the value represented by {@code b} from the value represented
                     * by {@code a}. It is assumed the magnitude of a is not less than the
                     * magnitude of b.
                     *
                     * @return {@code a - b}</member>
        <member name="M:biz.ritter.javapi.math.Elementary.completeInPlaceSubtract(biz.ritter.javapi.math.BigInteger,biz.ritter.javapi.math.BigInteger)">
                     * Same as
                     *
                     * @link #inplaceSubtract(BigInteger, BigInteger), but without the
                     *       restriction of non-positive values
                     * @param op1
                     *            should have enough space to save the result
                     * @param op2</member>
        <member name="M:biz.ritter.javapi.math.Elementary.completeInPlaceAdd(biz.ritter.javapi.math.BigInteger,biz.ritter.javapi.math.BigInteger)">
                     * Same as @link #inplaceAdd(BigInteger, BigInteger), but without the restriction of
                     *       non-positive values
                     * @param op1 any number
                     * @param op2 any number</member>
        <member name="M:biz.ritter.javapi.math.Elementary.unsignedArraysCompare(System.Int32[],System.Int32[],System.Int32,System.Int32)">
                     * Compares two arrays, representing unsigned integer in little-endian order.
                     * Returns +1,0,-1 if a is - respective - greater, equal or lesser then b</member>
        <member name="T:biz.ritter.javapi.math.Logical">
                 * The library implements some logical operations over {@code BigInteger}. The
                 * operations provided are listed below.
                 * <ul type="circle">
                 * <li>not</li>
                 * <li>and</li>
                 * <li>andNot</li>
                 * <li>or</li>
                 * <li>xor</li>
                 * </ul></member>
        <member name="M:biz.ritter.javapi.math.Logical.#ctor">
             Just to denote that this class can't be instantiated.</member>
        <member name="M:biz.ritter.javapi.math.Logical.not(biz.ritter.javapi.math.BigInteger)">
             @see BigInteger#not()</member>
        <member name="M:biz.ritter.javapi.math.Logical.and(biz.ritter.javapi.math.BigInteger,biz.ritter.javapi.math.BigInteger)">
             @see BigInteger#and(BigInteger)</member>
        <member name="M:biz.ritter.javapi.math.Logical.andPositive(biz.ritter.javapi.math.BigInteger,biz.ritter.javapi.math.BigInteger)">
             @return sign = 1, magnitude = val.magnitude &amp; that.magnitude</member>
        <member name="M:biz.ritter.javapi.math.Logical.andDiffSigns(biz.ritter.javapi.math.BigInteger,biz.ritter.javapi.math.BigInteger)">
             @return sign = positive.magnitude &amp; magnitude = -negative.magnitude</member>
        <member name="M:biz.ritter.javapi.math.Logical.andNegative(biz.ritter.javapi.math.BigInteger,biz.ritter.javapi.math.BigInteger)">
             @return sign = -1, magnitude = -(-longer.magnitude &amp; -shorter.magnitude)</member>
        <member name="M:biz.ritter.javapi.math.Logical.andNot(biz.ritter.javapi.math.BigInteger,biz.ritter.javapi.math.BigInteger)">
             @see BigInteger#andNot(BigInteger)</member>
        <member name="M:biz.ritter.javapi.math.Logical.andNotPositive(biz.ritter.javapi.math.BigInteger,biz.ritter.javapi.math.BigInteger)">
             @return sign = 1, magnitude = val.magnitude &amp; ~that.magnitude</member>
        <member name="M:biz.ritter.javapi.math.Logical.andNotPositiveNegative(biz.ritter.javapi.math.BigInteger,biz.ritter.javapi.math.BigInteger)">
             @return sign = 1, magnitude = positive.magnitude &amp; ~(-negative.magnitude)</member>
        <member name="M:biz.ritter.javapi.math.Logical.andNotNegativePositive(biz.ritter.javapi.math.BigInteger,biz.ritter.javapi.math.BigInteger)">
             @return sign = -1, magnitude = -(-negative.magnitude &amp; ~positive.magnitude)</member>
        <member name="M:biz.ritter.javapi.math.Logical.andNotNegative(biz.ritter.javapi.math.BigInteger,biz.ritter.javapi.math.BigInteger)">
             @return sign = 1, magnitude = -val.magnitude &amp; ~(-that.magnitude)</member>
        <member name="M:biz.ritter.javapi.math.Logical.or(biz.ritter.javapi.math.BigInteger,biz.ritter.javapi.math.BigInteger)">
             @see BigInteger#or(BigInteger)</member>
        <member name="M:biz.ritter.javapi.math.Logical.orPositive(biz.ritter.javapi.math.BigInteger,biz.ritter.javapi.math.BigInteger)">
             @return sign = 1, magnitude = longer.magnitude | shorter.magnitude</member>
        <member name="M:biz.ritter.javapi.math.Logical.orNegative(biz.ritter.javapi.math.BigInteger,biz.ritter.javapi.math.BigInteger)">
             @return sign = -1, magnitude = -(-val.magnitude | -that.magnitude)</member>
        <member name="M:biz.ritter.javapi.math.Logical.orDiffSigns(biz.ritter.javapi.math.BigInteger,biz.ritter.javapi.math.BigInteger)">
             @return sign = -1, magnitude = -(positive.magnitude | -negative.magnitude)</member>
        <member name="M:biz.ritter.javapi.math.Logical.xor(biz.ritter.javapi.math.BigInteger,biz.ritter.javapi.math.BigInteger)">
             @see BigInteger#xor(BigInteger)</member>
        <member name="M:biz.ritter.javapi.math.Logical.xorPositive(biz.ritter.javapi.math.BigInteger,biz.ritter.javapi.math.BigInteger)">
             @return sign = 0, magnitude = longer.magnitude | shorter.magnitude</member>
        <member name="M:biz.ritter.javapi.math.Logical.xorNegative(biz.ritter.javapi.math.BigInteger,biz.ritter.javapi.math.BigInteger)">
             @return sign = 0, magnitude = -val.magnitude ^ -that.magnitude</member>
        <member name="M:biz.ritter.javapi.math.Logical.xorDiffSigns(biz.ritter.javapi.math.BigInteger,biz.ritter.javapi.math.BigInteger)">
             @return sign = 1, magnitude = -(positive.magnitude ^ -negative.magnitude)</member>
        <member name="T:biz.ritter.javapi.math.MathContext">
                 * Immutable objects describing settings such as rounding mode and digit
                 * precision for the numerical operations provided by class {@link BigDecimal}.</member>
        <member name="F:biz.ritter.javapi.math.MathContext.DECIMAL128">
                     * A {@code MathContext} which corresponds to the IEEE 754r quadruple
                     * decimal precision format: 34 digit precision and
                     * {@link RoundingMode#HALF_EVEN} rounding.</member>
        <member name="F:biz.ritter.javapi.math.MathContext.DECIMAL32">
                     * A {@code MathContext} which corresponds to the IEEE 754r single decimal
                     * precision format: 7 digit precision and {@link RoundingMode#HALF_EVEN}
                     * rounding.</member>
        <member name="F:biz.ritter.javapi.math.MathContext.DECIMAL64">
                     * A {@code MathContext} which corresponds to the IEEE 754r double decimal
                     * precision format: 16 digit precision and {@link RoundingMode#HALF_EVEN}
                     * rounding.</member>
        <member name="F:biz.ritter.javapi.math.MathContext.UNLIMITED">
                     * A {@code MathContext} for unlimited precision with
                     * {@link RoundingMode#HALF_UP} rounding.</member>
        <member name="F:biz.ritter.javapi.math.MathContext.serialVersionUID">
             This is the serialVersionUID used by the sun implementation</member>
        <member name="F:biz.ritter.javapi.math.MathContext.precision">
                     * The number of digits to be used for an operation; results are rounded to
                     * this precision.</member>
        <member name="F:biz.ritter.javapi.math.MathContext.roundingMode">
                     * A {@code RoundingMode} object which specifies the algorithm to be used
                     * for rounding.</member>
        <member name="F:biz.ritter.javapi.math.MathContext.chPrecision">
                     * An array of {@code char} containing: {@code
                     * 'p','r','e','c','i','s','i','o','n','='}. It's used to improve the
                     * methods related to {@code String} conversion.
                     *
                     * @see #MathContext(String)
                     * @see #toString()</member>
        <member name="F:biz.ritter.javapi.math.MathContext.chRoundingMode">
                     * An array of {@code char} containing: {@code
                     * 'r','o','u','n','d','i','n','g','M','o','d','e','='}. It's used to
                     * improve the methods related to {@code String} conversion.
                     *
                     * @see #MathContext(String)
                     * @see #toString()</member>
        <member name="M:biz.ritter.javapi.math.MathContext.#ctor(System.Int32)">
                     * Constructs a new {@code MathContext} with the specified precision and
                     * with the rounding mode {@link RoundingMode#HALF_UP HALF_UP}. If the
                     * precision passed is zero, then this implies that the computations have to
                     * be performed exact, the rounding mode in this case is irrelevant.
                     *
                     * @param precision
                     *            the precision for the new {@code MathContext}.
                     * @throws IllegalArgumentException
                     *             if {@code precision &lt; 0}.</member>
        <member name="M:biz.ritter.javapi.math.MathContext.#ctor(System.Int32,biz.ritter.javapi.math.RoundingMode)">
                     * Constructs a new {@code MathContext} with the specified precision and
                     * with the specified rounding mode. If the precision passed is zero, then
                     * this implies that the computations have to be performed exact, the
                     * rounding mode in this case is irrelevant.
                     *
                     * @param precision
                     *            the precision for the new {@code MathContext}.
                     * @param roundingMode
                     *            the rounding mode for the new {@code MathContext}.
                     * @throws IllegalArgumentException
                     *             if {@code precision &lt; 0}.
                     * @throws NullPointerException
                     *             if {@code roundingMode} is {@code null}.</member>
        <member name="M:biz.ritter.javapi.math.MathContext.#ctor(System.String)">
                     * Constructs a new {@code MathContext} from a string. The string has to
                     * specify the precision and the rounding mode to be used and has to follow
                     * the following syntax: "precision=&lt;precision&gt; roundingMode=&lt;roundingMode&gt;"
                     * This is the same form as the one returned by the {@link #toString}
                     * method.
                     *
                     * @param val
                     *            a string describing the precision and rounding mode for the
                     *            new {@code MathContext}.
                     * @throws IllegalArgumentException
                     *             if the string is not in the correct format or if the
                     *             precision specified is &lt; 0.</member>
        <member name="M:biz.ritter.javapi.math.MathContext.getPrecision">
                     * Returns the precision. The precision is the number of digits used for an
                     * operation. Results are rounded to this precision. The precision is
                     * guaranteed to be non negative. If the precision is zero, then the
                     * computations have to be performed exact, results are not rounded in this
                     * case.
                     *
                     * @return the precision.</member>
        <member name="M:biz.ritter.javapi.math.MathContext.getRoundingMode">
                     * Returns the rounding mode. The rounding mode is the strategy to be used
                     * to round results.
                     * <p />
                     * The rounding mode is one of
                     * {@link RoundingMode#UP},
                     * {@link RoundingMode#DOWN},
                     * {@link RoundingMode#CEILING},
                     * {@link RoundingMode#FLOOR},
                     * {@link RoundingMode#HALF_UP},
                     * {@link RoundingMode#HALF_DOWN},
                     * {@link RoundingMode#HALF_EVEN}, or
                     * {@link RoundingMode#UNNECESSARY}.
                     *
                     * @return the rounding mode.</member>
        <member name="M:biz.ritter.javapi.math.MathContext.Equals(System.Object)">
                     * Returns true if x is a {@code MathContext} with the same precision
                     * setting and the same rounding mode as this {@code MathContext} instance.
                     *
                     * @param x
                     *            object to be compared.
                     * @return {@code true} if this {@code MathContext} instance is equal to the
                     *         {@code x} argument; {@code false} otherwise.</member>
        <member name="M:biz.ritter.javapi.math.MathContext.GetHashCode">
                     * Returns the hash code for this {@code MathContext} instance.
                     *
                     * @return the hash code for this {@code MathContext}.</member>
        <member name="M:biz.ritter.javapi.math.MathContext.ToString">
                     * Returns the string representation for this {@code MathContext} instance.
                     * The string has the form
                     * {@code
                     * "precision=&lt;precision&gt; roundingMode=&lt;roundingMode&gt;"
                     * } where {@code &lt;precision&gt;} is an integer describing the number
                     * of digits used for operations and {@code &lt;roundingMode&gt;} is the
                     * string representation of the rounding mode.
                     *
                     * @return a string representation for this {@code MathContext} instance</member>
        <member name="T:biz.ritter.javapi.math.Multiplication">
                 * Static library that provides all multiplication of {@link BigInteger} methods.</member>
        <member name="M:biz.ritter.javapi.math.Multiplication.#ctor">
             Just to denote that this class can't be instantiated.</member>
        <member name="F:biz.ritter.javapi.math.Multiplication.whenUseKaratsuba">
                     * Break point in digits (number of {@code int} elements)
                     * between Karatsuba and Pencil and Paper multiply.</member>
        <member name="F:biz.ritter.javapi.math.Multiplication.tenPows">
                     * An array with powers of ten that fit in the type {@code int}.
                     * ({@code 10^0,10^1,...,10^9})</member>
        <member name="F:biz.ritter.javapi.math.Multiplication.fivePows">
                     * An array with powers of five that fit in the type {@code int}.
                     * ({@code 5^0,5^1,...,5^13})</member>
        <member name="F:biz.ritter.javapi.math.Multiplication.bigTenPows">
                     * An array with the first powers of ten in {@code BigInteger} version.
                     * ({@code 10^0,10^1,...,10^31})</member>
        <member name="F:biz.ritter.javapi.math.Multiplication.bigFivePows">
                     * An array with the first powers of five in {@code BigInteger} version.
                     * ({@code 5^0,5^1,...,5^31})</member>
        <member name="M:biz.ritter.javapi.math.Multiplication.multiply(biz.ritter.javapi.math.BigInteger,biz.ritter.javapi.math.BigInteger)">
                     * Performs a multiplication of two BigInteger and hides the algorithm used.
                     * @see BigInteger#multiply(BigInteger)</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.math.Multiplication.karatsuba(biz.ritter.javapi.math.BigInteger,biz.ritter.javapi.math.BigInteger)-->
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.math.Multiplication.multiplyPAP(biz.ritter.javapi.math.BigInteger,biz.ritter.javapi.math.BigInteger)-->
        <member name="M:biz.ritter.javapi.math.Multiplication.multiplyByInt(System.Int32[],System.Int32[],System.Int32,System.Int32)">
                     * Multiplies an array of integers by an integer value
                     * and saves the result in {@code res}.
                     * @param a the array of integers
                     * @param aSize the number of elements of intArray to be multiplied
                     * @param factor the multiplier
                     * @return the top digit of production</member>
        <member name="M:biz.ritter.javapi.math.Multiplication.multiplyByInt(System.Int32[],System.Int32,System.Int32)">
                     * Multiplies an array of integers by an integer value.
                     * @param a the array of integers
                     * @param aSize the number of elements of intArray to be multiplied
                     * @param factor the multiplier
                     * @return the top digit of production</member>
        <member name="M:biz.ritter.javapi.math.Multiplication.multiplyByPositiveInt(biz.ritter.javapi.math.BigInteger,System.Int32)">
                     * Multiplies a number by a positive integer.
                     * @param val an arbitrary {@code BigInteger}
                     * @param factor a positive {@code int} number
                     * @return {@code val * factor}</member>
        <member name="M:biz.ritter.javapi.math.Multiplication.square(System.Int32[],System.Int32,System.Int32[])">
                     *  Performs a<sup>2</sup>
                     *  @param a The number to square.
                     *  @param aLen The length of the number to square.</member>
        <member name="M:biz.ritter.javapi.math.Multiplication.multiplyByTenPow(biz.ritter.javapi.math.BigInteger,System.Int64)">
                     * Multiplies a number by a power of ten.
                     * This method is used in {@code BigDecimal} class.
                     * @param val the number to be multiplied
                     * @param exp a positive {@code long} exponent
                     * @return {@code val * 10<sup>exp</sup>}</member>
        <member name="M:biz.ritter.javapi.math.Multiplication.powerOf10(System.Int64)">
                     * It calculates a power of ten, which exponent could be out of 32-bit range.
                     * Note that internally this method will be used in the worst case with
                     * an exponent equals to: {@code Integer.MAX_VALUE - Integer.MIN_VALUE}.
                     * @param exp the exponent of power of ten, it must be positive.
                     * @return a {@code BigInteger} with value {@code 10<sup>exp</sup>}.</member>
        <member name="M:biz.ritter.javapi.math.Multiplication.multiplyByFivePow(biz.ritter.javapi.math.BigInteger,System.Int32)">
                     * Multiplies a number by a power of five.
                     * This method is used in {@code BigDecimal} class.
                     * @param val the number to be multiplied
                     * @param exp a positive {@code int} exponent
                     * @return {@code val * 5<sup>exp</sup>}</member>
        <member name="M:biz.ritter.javapi.math.Multiplication.unsignedMultAddAdd(System.Int32,System.Int32,System.Int32,System.Int32)">
                     * Computes the value unsigned ((uint)a*(uint)b + (uint)c + (uint)d). This
                     * method could improve the readability and performance of the code.
                     *
                     * @param a
                     *            parameter 1
                     * @param b
                     *            parameter 2
                     * @param c
                     *            parameter 3
                     * @param d
                     *            parameter 4
                     * @return value of expression</member>
        <member name="T:biz.ritter.javapi.math.Primality">
                 * Provides primality probabilistic methods.</member>
        <member name="M:biz.ritter.javapi.math.Primality.#ctor">
             Just to denote that this class can't be instantiated.</member>
        <member name="F:biz.ritter.javapi.math.Primality.primes">
             All prime numbers with bit length lesser than 10 bits.</member>
        <member name="F:biz.ritter.javapi.math.Primality.BIprimes">
             All {@code BigInteger} prime numbers with bit length lesser than 8 bits.</member>
        <!--FIXME: Invalid documentation markup was found for member F:biz.ritter.javapi.math.Primality.BITS-->
        <member name="F:biz.ritter.javapi.math.Primality.offsetPrimes">
                     * It encodes how many i-bit primes there are in the table for
                     * {@code i=2,...,10}. For example {@code offsetPrimes[6]} says that from
                     * index {@code 11} exists {@code 7} consecutive {@code 6}-bit prime
                     * numbers in the array.</member>
        <member name="M:biz.ritter.javapi.math.Primality.nextProbablePrime(biz.ritter.javapi.math.BigInteger)">
                     * It uses the sieve of Eratosthenes to discard several composite numbers in
                     * some appropriate range (at the moment {@code [this, this + 1024]}). After
                     * this process it applies the Miller-Rabin test to the numbers that were
                     * not discarded in the sieve.
                     *
                     * @see BigInteger#nextProbablePrime()
                     * @see #millerRabin(BigInteger, int)</member>
        <member name="M:biz.ritter.javapi.math.Primality.consBigInteger(System.Int32,System.Int32,biz.ritter.javapi.util.Random)">
                     * A random number is generated until a probable prime number is found.
                     *
                     * @see BigInteger#BigInteger(int,int,Random)
                     * @see BigInteger#probablePrime(int,Random)
                     * @see #isProbablePrime(BigInteger, int)</member>
        <member name="M:biz.ritter.javapi.math.Primality.isProbablePrime(biz.ritter.javapi.math.BigInteger,System.Int32)">
                     * @see BigInteger#isProbablePrime(int)
                     * @see #millerRabin(BigInteger, int)
                     * @ar.org.fitc.ref Optimizations: "A. Menezes - Handbook of applied
                     *                  Cryptography, Chapter 4".</member>
        <member name="M:biz.ritter.javapi.math.Primality.millerRabin(biz.ritter.javapi.math.BigInteger,System.Int32)">
                     * The Miller-Rabin primality test.
                     *
                     * @param n the input number to be tested.
                     * @param t the number of trials.
                     * @return {@code false} if the number is definitely compose, otherwise
                     *         {@code true} with probability {@code 1 - 4<sup>(-t)</sup>}.
                     * @ar.org.fitc.ref "D. Knuth, The Art of Computer Programming Vo.2, Section
                     *                  4.5.4., Algorithm P"</member>
        <member name="T:biz.ritter.javapi.math.RoundingMode">
                 * Specifies the rounding behavior for operations whose results cannot be
                 * represented exactly.</member>
        <member name="F:biz.ritter.javapi.math.RoundingMode.UP">
                     * Rounding mode where positive values are rounded towards positive infinity
                     * and negative values towards negative infinity.
                     * <br />
                     * Rule: {@code x.round().abs() &gt;= x.abs()}</member>
        <member name="F:biz.ritter.javapi.math.RoundingMode.DOWN">
                     * Rounding mode where the values are rounded towards zero.
                     * <br />
                     * Rule: {@code x.round().abs() &lt;= x.abs()}</member>
        <member name="F:biz.ritter.javapi.math.RoundingMode.CEILING">
                     * Rounding mode to round towards positive infinity. For positive values
                     * this rounding mode behaves as {@link #UP}, for negative values as
                     * {@link #DOWN}.
                     * <br />
                     * Rule: {@code x.round() &gt;= x}</member>
        <member name="F:biz.ritter.javapi.math.RoundingMode.FLOOR">
                     * Rounding mode to round towards negative infinity. For positive values
                     * this rounding mode behaves as {@link #DOWN}, for negative values as
                     * {@link #UP}.
                     * <br />
            		 * Rule: {@code x.round() &lt;= x}</member>
        <member name="F:biz.ritter.javapi.math.RoundingMode.HALF_UP">
                     * Rounding mode where values are rounded towards the nearest neighbor. Ties
                     * are broken by rounding up.</member>
        <member name="F:biz.ritter.javapi.math.RoundingMode.HALF_DOWN">
                     * Rounding mode where values are rounded towards the nearest neighbor. Ties
                     * are broken by rounding down.</member>
        <member name="F:biz.ritter.javapi.math.RoundingMode.HALF_EVEN">
                     * Rounding mode where values are rounded towards the nearest neighbor. Ties
                     * are broken by rounding to the even neighbor.</member>
        <member name="F:biz.ritter.javapi.math.RoundingMode.UNNECESSARY">
            <summary>
            Rounding mode where the rounding operations throws an ArithmeticException
            for the case that rounding is necessary, i.e. for the case that the value
            cannot be represented exactly.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.math.RoundingMode.bigDecimalRM">
             The old constant of <code>BigDecimal</code>.</member>
        <member name="M:biz.ritter.javapi.math.RoundingMode.#ctor(System.Int32)">
             It sets the old constant.</member>
        <member name="M:biz.ritter.javapi.math.RoundingMode.valueOf(System.Int32)">
                     * Converts rounding mode constants from class {@code BigDecimal} into
                     * {@code RoundingMode} values.
                     *
                     * @param mode
                     *            rounding mode constant as defined in class {@code BigDecimal}
                     * @return corresponding rounding mode object</member>
        <member name="M:biz.ritter.javapi.math.RoundingMode.valueOf(System.String)">
                     * Converts rounding mode constants from class {@code BigDecimal} into
                     * {@code RoundingMode} values.
                     *
                     * @param mode
                     *            rounding mode constant as defined in class {@code BigDecimal}
                     * @return corresponding rounding mode object</member>
        <member name="T:biz.ritter.javapi.net.URIEncoderDecoder">
                 * This class is used to encode a string using the format required by {@code
                 * application/x-www-form-urlencoded} MIME content type. It contains helper
                 * methods used by the URI class, and performs encoding and decoding in a
                 * slightly different way than {@code URLEncoder} and {@code URLDecoder}.</member>
        <member name="M:biz.ritter.javapi.net.URIEncoderDecoder.validate(System.String,System.String)">
                     * Validate a string by checking if it contains any characters other than:
                     * 1. letters ('a'..'z', 'A'..'Z') 2. numbers ('0'..'9') 3. characters in
                     * the legalset parameter 4. others (unicode characters that are not in
                     * US-ASCII set, and are not ISO Control or are not ISO Space characters)
                     * <p />
                     * called from {@code URI.Helper.parseURI()} to validate each component
                     *
                     * @param s
                     *            {@code java.lang.String} the string to be validated
                     * @param legal
                     *            {@code java.lang.String} the characters allowed in the String
                     *            s</member>
        <member name="M:biz.ritter.javapi.net.URIEncoderDecoder.quoteIllegal(System.String,System.String)">
                     * All characters except letters ('a'..'z', 'A'..'Z') and numbers ('0'..'9')
                     * and legal characters are converted into their hexidecimal value prepended
                     * by '%'.
                     * <p />
                     * For example: '#' -&gt; %23
                     * Other characters, which are unicode chars that are not US-ASCII, and are
                     * not ISO Control or are not ISO Space chars, are preserved.
                     * <p />
                     * Called from {@code URI.quoteComponent()} (for multiple argument
                     * constructors)
                     *
                     * @param s
                     *            java.lang.String the string to be converted
                     * @param legal
                     *            java.lang.String the characters allowed to be preserved in the
                     *            string s
                     * @return java.lang.String the converted string</member>
        <member name="M:biz.ritter.javapi.net.URIEncoderDecoder.encodeOthers(System.String)">
                     * Other characters, which are Unicode chars that are not US-ASCII, and are
                     * not ISO Control or are not ISO Space chars are not preserved. They are
                     * converted into their hexidecimal value prepended by '%'.
                     * <p />
                     * For example: Euro currency symbol -&gt; "%E2%82%AC".
                     * <p />
                     * Called from URI.toASCIIString()
                     *
                     * @param s
                     *            java.lang.String the string to be converted
                     * @return java.lang.String the converted string</member>
        <member name="M:biz.ritter.javapi.net.URIEncoderDecoder.decode(System.String)">
                     * Decodes the string argument which is assumed to be encoded in the {@code
                     * x-www-form-urlencoded} MIME content type using the UTF-8 encoding scheme.
                     * <p />
                     *'%' and two following hex digit characters are converted to the
                     * equivalent byte value. All other characters are passed through
                     * unmodified.
                     * <p />
                     * e.g. "A%20B%20C %24%25" -&gt; "A B C $%"
                     * <p />
                     * Called from URI.getXYZ() methods
                     *
                     * @param s
                     *            java.lang.String The encoded string.
                     * @return java.lang.String The decoded version.</member>
        <member name="T:biz.ritter.javapi.net.URISyntaxException">
                 * A {@code URISyntaxException} will be thrown if some information could not be parsed
                 * while creating a URI.</member>
        <member name="M:biz.ritter.javapi.net.URISyntaxException.#ctor(System.String,System.String,System.Int32)">
                     * Constructs a new {@code URISyntaxException} instance containing the
                     * string that caused the exception, a description of the problem and the
                     * index at which the error occurred.
                     *
                     * @param input
                     *            the string that caused the exception.
                     * @param reason
                     *            the reason why the exception occurred.
                     * @param index
                     *            the position where the exception occurred.
                     * @throws NullPointerException
                     *             if one of the arguments {@code input} or {@code reason} is
                     *             {@code null}.
                     * @throws IllegalArgumentException
                     *             if the value for {@code index} is lesser than {@code -1}.</member>
        <member name="M:biz.ritter.javapi.net.URISyntaxException.#ctor(System.String,System.String)">
                     * Constructs a new {@code URISyntaxException} instance containing the
                     * string that caused the exception and a description of the problem.
                     *
                     *@param input
                     *            the string that caused the exception.
                     * @param reason
                     *            the reason why the exception occurred.
                     * @throws NullPointerException
                     *             if one of the arguments {@code input} or {@code reason} is
                     *             {@code null}.</member>
        <member name="M:biz.ritter.javapi.net.URISyntaxException.getIndex">
                     * Gets the index at which the syntax error was found or {@code -1} if the
                     * index is unknown/unavailable.
                     *
                     * @return the index of the syntax error.</member>
        <member name="M:biz.ritter.javapi.net.URISyntaxException.getReason">
                     * Gets a description of the syntax error.
                     *
                     * @return the string describing the syntax error.</member>
        <member name="M:biz.ritter.javapi.net.URISyntaxException.getInput">
                     * Gets the initial string that contains an invalid syntax.
                     *
                     * @return the string that caused the exception.</member>
        <member name="M:biz.ritter.javapi.net.URISyntaxException.getMessage">
                     * Gets a description of the exception, including the reason, the string
                     * that caused the syntax error and the position of the syntax error if
                     * available.
                     *
                     * @return a sting containing information about the exception.
                     * @see java.lang.Throwable#getMessage()</member>
        <member name="F:biz.ritter.javapi.net.URL.streamHandlers">
                     * Cache for storing protocol handler</member>
        <member name="F:biz.ritter.javapi.net.URL.streamHandlerFactory">
                     * The factory responsible for producing URL Stream (protocol) Handler</member>
        <member name="F:biz.ritter.javapi.net.URL.file">
                     * The receiver's filename.
                     *
                     * @serial the file of this URL
                     *</member>
        <member name="F:biz.ritter.javapi.net.URL.protocol">
                     * The receiver's protocol identifier.
                     *
                     * @serial the protocol of this URL (http, file)
                     *</member>
        <member name="F:biz.ritter.javapi.net.URL.host">
                     * The receiver's host name.
                     *
                     * @serial the host of this URL
                     *</member>
        <member name="F:biz.ritter.javapi.net.URL.port">
                     * The receiver's port number.
                     *
                     * @serial the port of this URL
                     *</member>
        <member name="F:biz.ritter.javapi.net.URL.authority">
                     * The receiver's authority.
                     *
                     * @serial the authority of this URL
                     *</member>
        <member name="F:biz.ritter.javapi.net.URL.userInfo">
                     * The receiver's userInfo.</member>
        <member name="F:biz.ritter.javapi.net.URL.path">
                     * The receiver's path.</member>
        <member name="F:biz.ritter.javapi.net.URL.query">
                     * The receiver's query.</member>
        <member name="F:biz.ritter.javapi.net.URL.refJ">
                     * The receiver's reference.
                     *
                     * @serial the reference of this URL
                     *</member>
        <member name="M:biz.ritter.javapi.net.URL.#ctor(System.String)">
                     * Creates a new URL instance by parsing the string {@code spec}.
                     *
                     * @param spec
                     *            the URL string representation which has to be parsed.
                     * @throws MalformedURLException
                     *             if the given string {@code spec} could not be parsed as a
                     *             URL.</member>
        <member name="M:biz.ritter.javapi.net.URL.#ctor(biz.ritter.javapi.net.URL,System.String)">
                     * Creates a new URL to the specified resource {@code spec}. This URL is
                     * relative to the given {@code context}. If the protocol of the parsed URL
                     * does not match with the protocol of the context URL, then the newly
                     * created URL is absolute and bases only on the given URL represented by
                     * {@code spec}. Otherwise the protocol is defined by the context URL.
                     *
                     * @param context
                     *            the URL which is used as the context.
                     * @param spec
                     *            the URL string representation which has to be parsed.
                     * @throws MalformedURLException
                     *             if the given string {@code spec} could not be parsed as a URL
                     *             or an invalid protocol has been found.</member>
        <member name="M:biz.ritter.javapi.net.URL.#ctor(biz.ritter.javapi.net.URL,System.String,biz.ritter.javapi.net.URLStreamHandler)">
                     * Creates a new URL to the specified resource {@code spec}. This URL is
                     * relative to the given {@code context}. The {@code handler} will be used
                     * to parse the URL string representation. If this argument is {@code null}
                     * the default {@code URLStreamHandler} will be used. If the protocol of the
                     * parsed URL does not match with the protocol of the context URL, then the
                     * newly created URL is absolute and bases only on the given URL represented
                     * by {@code spec}. Otherwise the protocol is defined by the context URL.
                     *
                     * @param context
                     *            the URL which is used as the context.
                     * @param spec
                     *            the URL string representation which has to be parsed.
                     * @param handler
                     *            the specific stream handler to be used by this URL.
                     * @throws MalformedURLException
                     *             if the given string {@code spec} could not be parsed as a URL
                     *             or an invalid protocol has been found.</member>
        <member name="M:biz.ritter.javapi.net.URL.#ctor(System.String,System.String,System.String)">
                     * Creates a new URL instance using the given arguments. The URL uses the
                     * default port for the specified protocol.
                     *
                     * @param protocol
                     *            the protocol of the new URL.
                     * @param host
                     *            the host name or IP address of the new URL.
                     * @param file
                     *            the name of the resource.
                     * @throws MalformedURLException
                     *             if the combination of all arguments do not represent a valid
                     *             URL or the protocol is invalid.</member>
        <member name="M:biz.ritter.javapi.net.URL.#ctor(System.String,System.String,System.Int32,System.String)">
                     * Creates a new URL instance using the given arguments. The URL uses the
                     * specified port instead of the default port for the given protocol.
                     *
                     * @param protocol
                     *            the protocol of the new URL.
                     * @param host
                     *            the host name or IP address of the new URL.
                     * @param port
                     *            the specific port number of the URL. {@code -1} represents the
                     *            default port of the protocol.
                     * @param file
                     *            the name of the resource.
                     * @throws MalformedURLException
                     *             if the combination of all arguments do not represent a valid
                     *             URL or the protocol is invalid.</member>
        <member name="M:biz.ritter.javapi.net.URL.#ctor(System.String,System.String,System.Int32,System.String,biz.ritter.javapi.net.URLStreamHandler)">
                     * Creates a new URL instance using the given arguments. The URL uses the
                     * specified port instead of the default port for the given protocol.
                     *
                     * @param protocol
                     *            the protocol of the new URL.
                     * @param host
                     *            the host name or IP address of the new URL.
                     * @param port
                     *            the specific port number of the URL. {@code -1} represents the
                     *            default port of the protocol.
                     * @param file
                     *            the name of the resource.
                     * @param handler
                     *            the stream handler to be used by this URL.
                     * @throws MalformedURLException
                     *             if the combination of all arguments do not represent a valid
                     *             URL or the protocol is invalid.
                     * @throws SecurityException
                     *             if {@code handler} is non-{@code null}, and a security
                     *             manager is installed that disallows user-defined protocol
                     *             handlers.</member>
        <member name="M:biz.ritter.javapi.net.URL.openStream">
            <summary>
            Same as openConnection.getInputStream ()
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:biz.ritter.javapi.net.URL.set(System.String,System.String,System.Int32,System.String,System.String,System.String,System.String,System.String)">
                    * Sets the properties of this URL using the provided arguments. Only a
                    * {@code URLStreamHandler} can use this method to set fields of the
                    * existing URL instance. A URL is generally constant.
                    *
                    * @param protocol
                    *            the protocol to be set.
                    * @param host
                    *            the host name to be set.
                    * @param port
                    *            the port number to be set.
                    * @param authority
                    *            the authority to be set.
                    * @param userInfo
                    *            the user-info to be set.
                    * @param path
                    *            the path to be set.
                    * @param query
                    *            the query to be set.
                    * @param ref
                    *            the reference to be set.</member>
        <member name="M:biz.ritter.javapi.net.URL.setupStreamHandler">
                     * Sets the receiver's stream handler to one which is appropriate for its
                     * protocol. Throws a MalformedURLException if no reasonable handler is
                     * available.
                     * <p />
                     * Note that this will overwrite any existing stream handler with the new
                     * one. Senders must check if the strmHandler is null before calling the
                     * method if they do not want this behavior (a speed optimization).</member>
        <member name="M:biz.ritter.javapi.net.URL.ToString">
                     * Returns a string containing a concise, human-readable representation of
                     * this URL. The returned string is the same as the result of the method
                     * {@code toExternalForm()}.
                     *
                     * @return the string representation of this URL.</member>
        <member name="M:biz.ritter.javapi.net.URL.toExternalForm">
                     * Returns a string containing a concise, human-readable representation of
                     * this URL.
                     *
                     * @return the string representation of this URL.</member>
        <member name="T:biz.ritter.javapi.nio.charset.CharacterCodingException">
                 * A {@code CharacterCodingException} is thrown when an encoding or decoding
                 * error occurs.</member>
        <member name="M:biz.ritter.javapi.nio.charset.CharacterCodingException.#ctor">
                     * Constructs a new {@code CharacterCodingException}.</member>
        <!--FIXME: Invalid documentation markup was found for member T:biz.ritter.javapi.nio.charset.Charset-->
        <member name="M:biz.ritter.javapi.nio.charset.Charset.#ctor(System.String,System.String[])">
                     * Constructs a <code>Charset</code> object. Duplicated aliases are
                     * ignored.
                     *
                     * @param canonicalName
                     *            the canonical name of the charset.
                     * @param aliases
                     *            an array containing all aliases of the charset. May be null.
                     * @throws IllegalCharsetNameException
                     *             on an illegal value being supplied for either
                     *             <code>canonicalName</code> or for any element of
                     *             <code>aliases</code>.</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.nio.charset.Charset.availableCharsets-->
        <member name="M:biz.ritter.javapi.nio.charset.Charset.forName(System.String)">
                     * Gets a <code>Charset</code> instance for the specified charset name.
                     *
                     * @param charsetName
                     *            the canonical name of the charset or an alias.
                     * @return a <code>Charset</code> instance for the specified charset name.
                     * @throws IllegalCharsetNameException
                     *             if the specified charset name is illegal.
                     * @throws UnsupportedCharsetException
                     *             if the desired charset is not supported by this runtime.</member>
        <member name="M:biz.ritter.javapi.nio.charset.Charset.isSupported(System.String)">
                     * Determines whether the specified charset is supported by this runtime.
                     *
                     * @param charsetName
                     *            the name of the charset.
                     * @return true if the specified charset is supported, otherwise false.
                     * @throws IllegalCharsetNameException
                     *             if the specified charset name is illegal.</member>
        <member name="M:biz.ritter.javapi.nio.charset.Charset.getCharsetFromBuiltInProvider(System.String)">
            <summary>
            Check charset name for build in implementation
            </summary>
            <param name="charset">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:biz.ritter.javapi.nio.charset.Charset.contains(biz.ritter.javapi.nio.charset.Charset)">
                     * Determines whether this charset is a super set of the given charset.
                     *
                     * @param charset
                     *            a given charset.
                     * @return true if this charset is a super set of the given charset,
                     *         false if it's unknown or this charset is not a superset of
                     *         the given charset.</member>
        <member name="M:biz.ritter.javapi.nio.charset.Charset.newEncoder">
                     * Gets a new instance of an encoder for this charset.
                     *
                     * @return a new instance of an encoder for this charset.</member>
        <member name="M:biz.ritter.javapi.nio.charset.Charset.newDecoder">
                     * Gets a new instance of a decoder for this charset.
                     *
                     * @return a new instance of a decoder for this charset.</member>
        <member name="M:biz.ritter.javapi.nio.charset.Charset.name">
                     * Gets the canonical name of this charset.
                     *
                     * @return this charset's name in canonical form.</member>
        <member name="M:biz.ritter.javapi.nio.charset.Charset.aliases">
                     * Gets the set of this charset's aliases.
                     *
                     * @return an unmodifiable set of this charset's aliases.</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.nio.charset.Charset.displayName-->
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.nio.charset.Charset.displayName(biz.ritter.javapi.util.Locale)-->
        <member name="M:biz.ritter.javapi.nio.charset.Charset.isRegistered">
                     * Indicates whether this charset is known to be registered in the IANA
                     * Charset Registry.
                     *
                     * @return true if the charset is known to be registered, otherwise returns
                     *         false.</member>
        <member name="M:biz.ritter.javapi.nio.charset.Charset.canEncode">
                     * Returns true if this charset supports encoding, false otherwise.
                     *
                     * @return true if this charset supports encoding, false otherwise.</member>
        <member name="M:biz.ritter.javapi.nio.charset.Charset.encode(biz.ritter.javapi.nio.CharBuffer)">
            <summary>
                <para>
            Encodes the content of the give character buffer and outputs to a byte
            buffer that is to be returned.
            </para>
                <para>The default action in case of encoding errors is <c>CodingErrorAction.REPLACE</c>.</para>
            </summary>
            <param name="buffer">the character buffer containing the content to be encoded.</param>
            <returns>the result of the encoding.</returns>
        </member>
        <member name="M:biz.ritter.javapi.nio.charset.Charset.encode(System.String)">
            <summary>
                <para>Encodes a string and outputs to a byte buffer that is to be returned.</para>
                <para>The default action in case of encoding errors is <c>CodingErrorAction.REPLACE</c>.</para>
            </summary>
            <param name="s">the string to be encoded.</param>
            <returns>the result of the encoding.</returns>
        </member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.nio.charset.Charset.decode(biz.ritter.javapi.nio.ByteBuffer)-->
        <member name="M:biz.ritter.javapi.nio.charset.Charset.compareTo(biz.ritter.javapi.nio.charset.Charset)">
                     * Compares this charset with the given charset. This comparation is
                     * based on the case insensitive canonical names of the charsets.
                     *
                     * @param charset
                     *            the given object to be compared with.
                     * @return a negative integer if less than the given object, a positive
                     *         integer if larger than it, or 0 if equal to it.</member>
        <member name="M:biz.ritter.javapi.nio.charset.Charset.Equals(System.Object)">
                     * Determines whether this charset equals to the given object. They are
                     * considered to be equal if they have the same canonical name.
                     *
                     * @param obj
                     *            the given object to be compared with.
                     * @return true if they have the same canonical name, otherwise false.</member>
        <member name="M:biz.ritter.javapi.nio.charset.Charset.GetHashCode">
                     * Gets the hash code of this charset.
                     *
                     * @return the hash code of this charset.</member>
        <member name="M:biz.ritter.javapi.nio.charset.Charset.ToString">
                     * Gets a string representation of this charset. Usually this contains the
                     * canonical name of the charset.
                     *
                     * @return a string representation of this charset.</member>
        <member name="M:biz.ritter.javapi.nio.charset.Charset.defaultCharset">
                     * Gets the system default charset from the virtual machine.
                     *
                     * @return the default charset.</member>
        <member name="T:biz.ritter.javapi.nio.charset.IgnoreCaseComparator`1">
                    * A comparator that ignores case.</member>
        <!--FIXME: Invalid documentation markup was found for member T:biz.ritter.javapi.nio.charset.CharsetDecoder-->
        <member name="M:biz.ritter.javapi.nio.charset.CharsetDecoder.#ctor(biz.ritter.javapi.nio.charset.Charset,System.Single,System.Single)">
                     * Constructs a new <code>CharsetDecoder</code> using the given
                     * <code>Charset</code>, average number and maximum number of characters
                     * created by this decoder for one input byte, and the default replacement
                     * string "\uFFFD".
                     *
                     * @param charset
                     *            the <code>Charset</code> to be used by this decoder.
                     * @param averageCharsPerByte
                     *            the average number of characters created by this decoder for
                     *            one input byte, must be positive.
                     * @param maxCharsPerByte
                     *            the maximum number of characters created by this decoder for
                     *            one input byte, must be positive.
                     * @throws IllegalArgumentException
                     *             if <code>averageCharsPerByte</code> or
                     *             <code>maxCharsPerByte</code> is negative.</member>
        <member name="M:biz.ritter.javapi.nio.charset.CharsetDecoder.averageCharsPerByte">
                     * Gets the average number of characters created by this decoder for a
                     * single input byte.
                     *
                     * @return the average number of characters created by this decoder for a
                     *         single input byte.</member>
        <member name="M:biz.ritter.javapi.nio.charset.CharsetDecoder.charset">
                     * Gets the <code>Charset</code> which this decoder uses.
                     *
                     * @return the <code>Charset</code> which this decoder uses.</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.nio.charset.CharsetDecoder.decode(biz.ritter.javapi.nio.ByteBuffer)-->
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.nio.charset.CharsetDecoder.decode(biz.ritter.javapi.nio.ByteBuffer,biz.ritter.javapi.nio.CharBuffer,System.Boolean)-->
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.nio.charset.CharsetDecoder.decodeLoop(biz.ritter.javapi.nio.ByteBuffer,biz.ritter.javapi.nio.CharBuffer)-->
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.nio.charset.CharsetDecoder.detectedCharset-->
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.nio.charset.CharsetDecoder.flush(biz.ritter.javapi.nio.CharBuffer)-->
        <member name="M:biz.ritter.javapi.nio.charset.CharsetDecoder.implFlush(biz.ritter.javapi.nio.CharBuffer)">
                     * Flushes this decoder. The default implementation does nothing and always
                     * returns <code>CoderResult.UNDERFLOW</code>; this method can be
                     * overridden if needed.
                     *
                     * @param out
                     *            the output buffer.
                     * @return <code>CoderResult.UNDERFLOW</code> or
                     *         <code>CoderResult.OVERFLOW</code>.</member>
        <member name="M:biz.ritter.javapi.nio.charset.CharsetDecoder.implOnMalformedInput(biz.ritter.javapi.nio.charset.CodingErrorAction)">
                     * Notifies that this decoder's <code>CodingErrorAction</code> specified
                     * for malformed input error has been changed. The default implementation
                     * does nothing; this method can be overridden if needed.
                     *
                     * @param newAction
                     *            the new action.</member>
        <member name="M:biz.ritter.javapi.nio.charset.CharsetDecoder.implOnUnmappableCharacter(biz.ritter.javapi.nio.charset.CodingErrorAction)">
                     * Notifies that this decoder's <code>CodingErrorAction</code> specified
                     * for unmappable character error has been changed. The default
                     * implementation does nothing; this method can be overridden if needed.
                     *
                     * @param newAction
                     *            the new action.</member>
        <member name="M:biz.ritter.javapi.nio.charset.CharsetDecoder.implReplaceWith(System.String)">
                     * Notifies that this decoder's replacement has been changed. The default
                     * implementation does nothing; this method can be overridden if needed.
                     *
                     * @param newReplacement
                     *            the new replacement string.</member>
        <member name="M:biz.ritter.javapi.nio.charset.CharsetDecoder.implReset">
                     * Reset this decoder's charset related state. The default implementation
                     * does nothing; this method can be overridden if needed.</member>
        <member name="M:biz.ritter.javapi.nio.charset.CharsetDecoder.isAutoDetecting">
                     * Indicates whether this decoder implements an auto-detecting charset.
                     *
                     * @return <code>true</code> if this decoder implements an auto-detecting
                     *         charset.</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.nio.charset.CharsetDecoder.isCharsetDetected-->
        <member name="M:biz.ritter.javapi.nio.charset.CharsetDecoder.malformedInputAction">
                     * Gets this decoder's <code>CodingErrorAction</code> when malformed input
                     * occurred during the decoding process.
                     *
                     * @return this decoder's <code>CodingErrorAction</code> when malformed
                     *         input occurred during the decoding process.</member>
        <member name="M:biz.ritter.javapi.nio.charset.CharsetDecoder.maxCharsPerByte">
                     * Gets the maximum number of characters which can be created by this
                     * decoder for one input byte, must be positive.
                     *
                     * @return the maximum number of characters which can be created by this
                     *         decoder for one input byte, must be positive.</member>
        <member name="M:biz.ritter.javapi.nio.charset.CharsetDecoder.onMalformedInput(biz.ritter.javapi.nio.charset.CodingErrorAction)">
                     * Sets this decoder's action on malformed input errors.
                     *
                     * This method will call the
                     * {@link #implOnMalformedInput(CodingErrorAction) implOnMalformedInput}
                     * method with the given new action as argument.
                     *
                     * @param newAction
                     *            the new action on malformed input error.
                     * @return this decoder.
                     * @throws IllegalArgumentException
                     *             if {@code newAction} is {@code null}.</member>
        <member name="M:biz.ritter.javapi.nio.charset.CharsetDecoder.onUnmappableCharacter(biz.ritter.javapi.nio.charset.CodingErrorAction)">
                     * Sets this decoder's action on unmappable character errors.
                     *
                     * This method will call the
                     * {@link #implOnUnmappableCharacter(CodingErrorAction) implOnUnmappableCharacter}
                     * method with the given new action as argument.
                     *
                     * @param newAction
                     *            the new action on unmappable character error.
                     * @return this decoder.
                     * @throws IllegalArgumentException
                     *             if {@code newAction} is {@code null}.</member>
        <member name="M:biz.ritter.javapi.nio.charset.CharsetDecoder.replacement">
                     * Gets the replacement string, which is never null or empty.
                     *
                     * @return the replacement string, cannot be null or empty.</member>
        <member name="M:biz.ritter.javapi.nio.charset.CharsetDecoder.replaceWith(System.String)">
                     * Sets the new replacement string.
                     *
                     * This method first checks the given replacement's validity, then changes
                     * the replacement value, and at last calls the
                     * {@link #implReplaceWith(String) implReplaceWith} method with the given
                     * new replacement as argument.
                     *
                     * @param newReplacement
                     *            the replacement string, cannot be null or empty. Its length
                     *            cannot be larger than {@link #maxCharsPerByte()}.
                     * @return this decoder.
                     * @throws IllegalArgumentException
                     *             if the given replacement cannot satisfy the requirement
                     *             mentioned above.</member>
        <member name="M:biz.ritter.javapi.nio.charset.CharsetDecoder.reset">
                     * Resets this decoder. This method will reset the internal status, and then
                     * calls <code>implReset()</code> to reset any status related to the
                     * specific charset.
                     *
                     * @return this decoder.</member>
        <member name="M:biz.ritter.javapi.nio.charset.CharsetDecoder.unmappableCharacterAction">
                     * Gets this decoder's <code>CodingErrorAction</code> when an unmappable
                     * character error occurred during the decoding process.
                     *
                     * @return this decoder's <code>CodingErrorAction</code> when an
                     *         unmappable character error occurred during the decoding process.</member>
        <member name="T:biz.ritter.javapi.nio.charset.CharsetEncoder">
                 * A converter that can converts a 16-bit Unicode character sequence to a byte
                 * sequence in some charset.
                 * <p />
                 * The input character sequence is wrapped by a
                 * {@link java.nio.CharBuffer CharBuffer} and the output character sequence is a
                 * {@link java.nio.ByteBuffer ByteBuffer}. An encoder instance should be used
                 * in the following sequence, which is referred to as a encoding operation:
                 * <ol>
                 * <li>invoking the {@link #reset() reset} method to reset the encoder if the
                 * encoder has been used;</li>
                 * <li>invoking the {@link #encode(CharBuffer, ByteBuffer, boolean) encode}
                 * method until the additional input is not needed, the <code>endOfInput</code>
                 * parameter must be set to false, the input buffer must be filled and the
                 * output buffer must be flushed between invocations;</li>
                 * <li>invoking the {@link #encode(CharBuffer, ByteBuffer, boolean) encode}
                 * method for the last time and the <code>endOfInput</code> parameter must be
                 * set to {@code true}</li>
                 * <li>invoking the {@link #flush(ByteBuffer) flush} method to flush the
                 * output.</li>
                 * </ol>
                 * <p />
                 * The {@link #encode(CharBuffer, ByteBuffer, boolean) encode} method will
                 * convert as many characters as possible, and the process won't stop until the
                 * input characters have run out, the output buffer has been filled or some
                 * error has happened. A {@link CoderResult CoderResult} instance will be
                 * returned to indicate the stop reason, and the invoker can identify the result
                 * and choose further action, which includes filling the input buffer, flushing
                 * the output buffer or recovering from an error and trying again.
                 * <p />
                 * There are two common encoding errors. One is named malformed and it is
                 * returned when the input content is an illegal 16-bit Unicode character
                 * sequence, the other is named unmappable character and occurs when there is a
                 * problem mapping the input to a valid byte sequence in the specified charset.
                 * <p />
                 * Both errors can be handled in three ways, the default one is to report the
                 * error to the invoker by a {@link CoderResult CoderResult} instance, and the
                 * alternatives are to ignore it or to replace the erroneous input with the
                 * replacement byte array. The replacement byte array is '{@code ?}' by
                 * default and can be changed by invoking the
                 * {@link #replaceWith(byte[]) replaceWith} method. The invoker of this encoder
                 * can choose one way by specifying a
                 * {@link CodingErrorAction CodingErrorAction} instance for each error type via
                 * the {@link #onMalformedInput(CodingErrorAction) onMalformedInput} method and
                 * the {@link #onUnmappableCharacter(CodingErrorAction) onUnmappableCharacter}
                 * method.
                 * <p />
                 * This class is abstract and encapsulates many common operations of the
                 * encoding process for all charsets. Encoders for a specific charset should
                 * extend this class and need only to implement the
                 * {@link #encodeLoop(CharBuffer, ByteBuffer) encodeLoop} method for basic
                 * encoding. If a subclass maintains an internal state, it should override the
                 * {@link #implFlush(ByteBuffer) implFlush} method and the
                 * {@link #implReset() implReset} method in addition.
                 * <p />
                 * This class is not thread-safe.
                 *
                 * @see java.nio.charset.Charset
                 * @see java.nio.charset.CharsetDecoder</member>
        <member name="M:biz.ritter.javapi.nio.charset.CharsetEncoder.#ctor(biz.ritter.javapi.nio.charset.Charset,System.Single,System.Single)">
                     * Constructs a new <code>CharsetEncoder</code> using the given
                     * <code>Charset</code>, average number and maximum number of bytes
                     * created by this encoder for one input character.
                     *
                     * @param cs
                     *            the <code>Charset</code> to be used by this encoder.
                     * @param averageBytesPerChar
                     *            average number of bytes created by this encoder for one input
                     *            character, must be positive.
                     * @param maxBytesPerChar
                     *            maximum number of bytes which can be created by this encoder
                     *            for one input character, must be positive.
                     * @throws IllegalArgumentException
                     *             if <code>maxBytesPerChar</code> or
                     *             <code>averageBytesPerChar</code> is negative.</member>
        <member name="M:biz.ritter.javapi.nio.charset.CharsetEncoder.#ctor(biz.ritter.javapi.nio.charset.Charset,System.Single,System.Single,System.Byte[])">
                     * Constructs a new <code>CharsetEncoder</code> using the given
                     * <code>Charset</code>, replacement byte array, average number and
                     * maximum number of bytes created by this encoder for one input character.
                     *
                     * @param cs
                     *            the <code>Charset</code> to be used by this encoder.
                     * @param averageBytesPerChar
                     *            average number of bytes created by this encoder for one single
                     *            input character, must be positive.
                     * @param maxBytesPerChar
                     *            maximum number of bytes which can be created by this encoder
                     *            for one single input character, must be positive.
                     * @param replacement
                     *            the replacement byte array, cannot be null or empty, its
                     *            length cannot be larger than <code>maxBytesPerChar</code>,
                     *            and must be a legal replacement, which can be justified by
                     *            {@link #isLegalReplacement(byte[]) isLegalReplacement}.
                     * @throws IllegalArgumentException
                     *             if any parameters are invalid.</member>
        <member name="M:biz.ritter.javapi.nio.charset.CharsetEncoder.averageBytesPerChar">
                     * Gets the average number of bytes created by this encoder for a single
                     * input character.
                     *
                     * @return the average number of bytes created by this encoder for a single
                     *         input character.</member>
        <member name="M:biz.ritter.javapi.nio.charset.CharsetEncoder.canEncode(System.Char)">
                     * Checks if the given character can be encoded by this encoder.
                     * <p />
                     * Note that this method can change the internal status of this encoder, so
                     * it should not be called when another encoding process is ongoing,
                     * otherwise it will throw an <code>IllegalStateException</code>.
                     * <p />
                     * This method can be overridden for performance improvement.
                     *
                     * @param c
                     *            the given encoder.
                     * @return true if given character can be encoded by this encoder.
                     * @throws IllegalStateException
                     *             if another encode process is ongoing so that the current
                     *             internal status is neither RESET or FLUSH.</member>
        <member name="M:biz.ritter.javapi.nio.charset.CharsetEncoder.canEncode(biz.ritter.javapi.lang.CharSequence)">
                     * Checks if a given <code>CharSequence</code> can be encoded by this
                     * encoder.
                     *
                     * Note that this method can change the internal status of this encoder, so
                     * it should not be called when another encode process is ongoing, otherwise
                     * it will throw an <code>IllegalStateException</code>.
                     *
                     * This method can be overridden for performance improvement.
                     *
                     * @param sequence
                     *            the given <code>CharSequence</code>.
                     * @return true if the given <code>CharSequence</code> can be encoded by
                     *         this encoder.
                     * @throws IllegalStateException
                     *             if current internal status is neither RESET or FLUSH.</member>
        <member name="M:biz.ritter.javapi.nio.charset.CharsetEncoder.canEncode(System.String)">
            <summary>
            Helper method for System.String instances wrapping
            </summary>
            <param name="sequence">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:biz.ritter.javapi.nio.charset.CharsetEncoder.charset">
                     * Gets the <code>Charset</code> which this encoder uses.
                     *
                     * @return the <code>Charset</code> which this encoder uses.</member>
        <member name="M:biz.ritter.javapi.nio.charset.CharsetEncoder.encode(biz.ritter.javapi.nio.CharBuffer)">
                     * This is a facade method for the encoding operation.
                     * <p />
                     * This method encodes the remaining character sequence of the given
                     * character buffer into a new byte buffer. This method performs a complete
                     * encoding operation, resets at first, then encodes, and flushes at last.
                     * <p />
                     * This method should not be invoked if another encode operation is ongoing.
                     *
                     * @param in
                     *            the input buffer.
                     * @return a new <code>ByteBuffer</code> containing the bytes produced by
                     *         this encoding operation. The buffer's limit will be the position
                     *         of the last byte in the buffer, and the position will be zero.
                     * @throws IllegalStateException
                     *             if another encoding operation is ongoing.
                     * @throws MalformedInputException
                     *             if an illegal input character sequence for this charset is
                     *             encountered, and the action for malformed error is
                     *             {@link CodingErrorAction#REPORT CodingErrorAction.REPORT}
                     * @throws UnmappableCharacterException
                     *             if a legal but unmappable input character sequence for this
                     *             charset is encountered, and the action for unmappable
                     *             character error is
                     *             {@link CodingErrorAction#REPORT CodingErrorAction.REPORT}.
                     *             Unmappable means the Unicode character sequence at the input
                     *             buffer's current position cannot be mapped to a equivalent
                     *             byte sequence.
                     * @throws CharacterCodingException
                     *             if other exception happened during the encode operation.</member>
        <member name="M:biz.ritter.javapi.nio.charset.CharsetEncoder.encode(biz.ritter.javapi.nio.CharBuffer,biz.ritter.javapi.nio.ByteBuffer,System.Boolean)">
                     * Encodes characters starting at the current position of the given input
                     * buffer, and writes the equivalent byte sequence into the given output
                     * buffer from its current position.
                     * <p />
                     * The buffers' position will be changed with the reading and writing
                     * operation, but their limits and marks will be kept intact.
                     * <p />
                     * A <code>CoderResult</code> instance will be returned according to
                     * following rules:
                     * <ul>
                     * <li>A {@link CoderResult#malformedForLength(int) malformed input} result
                     * indicates that some malformed input error was encountered, and the
                     * erroneous characters start at the input buffer's position and their
                     * number can be got by result's {@link CoderResult#length() length}. This
                     * kind of result can be returned only if the malformed action is
                     * {@link CodingErrorAction#REPORT CodingErrorAction.REPORT}.</li>
                     * <li>{@link CoderResult#UNDERFLOW CoderResult.UNDERFLOW} indicates that
                     * as many characters as possible in the input buffer have been encoded. If
                     * there is no further input and no characters left in the input buffer then
                     * this task is complete. If this is not the case then the client should
                     * call this method again supplying some more input characters.</li>
                     * <li>{@link CoderResult#OVERFLOW CoderResult.OVERFLOW} indicates that the
                     * output buffer has been filled, while there are still some characters
                     * remaining in the input buffer. This method should be invoked again with a
                     * non-full output buffer.</li>
                     * <li>A {@link CoderResult#unmappableForLength(int) unmappable character}
                     * result indicates that some unmappable character error was encountered,
                     * and the erroneous characters start at the input buffer's position and
                     * their number can be got by result's {@link CoderResult#length() length}.
                     * This kind of result can be returned only on
                     * {@link CodingErrorAction#REPORT CodingErrorAction.REPORT}.</li>
                     * </ul>
                     * <p />
                     * The <code>endOfInput</code> parameter indicates if the invoker can
                     * provider further input. This parameter is true if and only if the
                     * characters in the current input buffer are all inputs for this encoding
                     * operation. Note that it is common and won't cause an error if the invoker
                     * sets false and then has no more input available, while it may cause an
                     * error if the invoker always sets true in several consecutive invocations.
                     * This would make the remaining input to be treated as malformed input.
                     * input.
                     * <p />
                     * This method invokes the
                     * {@link #encodeLoop(CharBuffer, ByteBuffer) encodeLoop} method to
                     * implement the basic encode logic for a specific charset.
                     *
                     * @param in
                     *            the input buffer.
                     * @param out
                     *            the output buffer.
                     * @param endOfInput
                     *            true if all the input characters have been provided.
                     * @return a <code>CoderResult</code> instance indicating the result.
                     * @throws IllegalStateException
                     *             if the encoding operation has already started or no more
                     *             input is needed in this encoding process.
                     * @throws CoderMalfunctionError
                     *             If the {@link #encodeLoop(CharBuffer, ByteBuffer) encodeLoop}
                     *             method threw an <code>BufferUnderflowException</code> or
                     *             <code>BufferUnderflowException</code>.</member>
        <member name="M:biz.ritter.javapi.nio.charset.CharsetEncoder.encodeLoop(biz.ritter.javapi.nio.CharBuffer,biz.ritter.javapi.nio.ByteBuffer)">
                     * Encodes characters into bytes. This method is called by
                     * {@link #encode(CharBuffer, ByteBuffer, boolean) encode}.
                     * <p />
                     * This method will implement the essential encoding operation, and it won't
                     * stop encoding until either all the input characters are read, the output
                     * buffer is filled, or some exception is encountered. Then it will
                     * return a <code>CoderResult</code> object indicating the result of the
                     * current encoding operation. The rule to construct the
                     * <code>CoderResult</code> is the same as for
                     * {@link #encode(CharBuffer, ByteBuffer, boolean) encode}. When an
                     * exception is encountered in the encoding operation, most implementations
                     * of this method will return a relevant result object to the
                     * {@link #encode(CharBuffer, ByteBuffer, boolean) encode} method, and some
                     * performance optimized implementation may handle the exception and
                     * implement the error action itself.
                     * <p />
                     * The buffers are scanned from their current positions, and their positions
                     * will be modified accordingly, while their marks and limits will be
                     * intact. At most {@link CharBuffer#remaining() in.remaining()} characters
                     * will be read, and {@link ByteBuffer#remaining() out.remaining()} bytes
                     * will be written.
                     * <p />
                     * Note that some implementations may pre-scan the input buffer and return
                     * <code>CoderResult.UNDERFLOW</code> until it receives sufficient input.
                     * <p />
                     * @param in
                     *            the input buffer.
                     * @param out
                     *            the output buffer.
                     * @return a <code>CoderResult</code> instance indicating the result.</member>
        <member name="M:biz.ritter.javapi.nio.charset.CharsetEncoder.flush(biz.ritter.javapi.nio.ByteBuffer)">
                     * Flushes this encoder.
                     * <p />
                     * This method will call {@link #implFlush(ByteBuffer) implFlush}. Some
                     * encoders may need to write some bytes to the output buffer when they have
                     * read all input characters, subclasses can overridden
                     * {@link #implFlush(ByteBuffer) implFlush} to perform writing action.
                     * <p />
                     * The maximum number of written bytes won't larger than
                     * {@link ByteBuffer#remaining() out.remaining()}. If some encoder wants to
                     * write more bytes than the output buffer's available remaining space, then
                     * <code>CoderResult.OVERFLOW</code> will be returned, and this method
                     * must be called again with a byte buffer that has free space. Otherwise
                     * this method will return <code>CoderResult.UNDERFLOW</code>, which
                     * means one encoding process has been completed successfully.
                     * <p />
                     * During the flush, the output buffer's position will be changed
                     * accordingly, while its mark and limit will be intact.
                     *
                     * @param out
                     *            the given output buffer.
                     * @return <code>CoderResult.UNDERFLOW</code> or
                     *         <code>CoderResult.OVERFLOW</code>.
                     * @throws IllegalStateException
                     *             if this encoder hasn't read all input characters during one
                     *             encoding process, which means neither after calling
                     *             {@link #encode(CharBuffer) encode(CharBuffer)} nor after
                     *             calling {@link #encode(CharBuffer, ByteBuffer, boolean)
                     *             encode(CharBuffer, ByteBuffer, boolean)} with {@code true}
                     *             for the last boolean parameter.</member>
        <member name="M:biz.ritter.javapi.nio.charset.CharsetEncoder.implFlush(biz.ritter.javapi.nio.ByteBuffer)">
                     * Flushes this encoder. The default implementation does nothing and always
                     * returns <code>CoderResult.UNDERFLOW</code>; this method can be
                     * overridden if needed.
                     *
                     * @param out
                     *            the output buffer.
                     * @return <code>CoderResult.UNDERFLOW</code> or
                     *         <code>CoderResult.OVERFLOW</code>.</member>
        <member name="M:biz.ritter.javapi.nio.charset.CharsetEncoder.implOnMalformedInput(biz.ritter.javapi.nio.charset.CodingErrorAction)">
                     * Notifies that this encoder's <code>CodingErrorAction</code> specified
                     * for malformed input error has been changed. The default implementation
                     * does nothing; this method can be overridden if needed.
                     *
                     * @param newAction
                     *            the new action.</member>
        <member name="M:biz.ritter.javapi.nio.charset.CharsetEncoder.implOnUnmappableCharacter(biz.ritter.javapi.nio.charset.CodingErrorAction)">
                     * Notifies that this encoder's <code>CodingErrorAction</code> specified
                     * for unmappable character error has been changed. The default
                     * implementation does nothing; this method can be overridden if needed.
                     *
                     * @param newAction
                     *            the new action.</member>
        <member name="M:biz.ritter.javapi.nio.charset.CharsetEncoder.implReplaceWith(System.Byte[])">
                     * Notifies that this encoder's replacement has been changed. The default
                     * implementation does nothing; this method can be overridden if needed.
                     *
                     * @param newReplacement
                     *            the new replacement string.</member>
        <member name="M:biz.ritter.javapi.nio.charset.CharsetEncoder.implReset">
                     * Resets this encoder's charset related state. The default implementation
                     * does nothing; this method can be overridden if needed.</member>
        <member name="M:biz.ritter.javapi.nio.charset.CharsetEncoder.isLegalReplacement(System.Byte[])">
                     * Checks if the given argument is legal as this encoder's replacement byte
                     * array.
                     *
                     * The given byte array is legal if and only if it can be decode into
                     * sixteen bits Unicode characters.
                     *
                     * This method can be overridden for performance improvement.
                     *
                     * @param repl
                     *            the given byte array to be checked.
                     * @return true if the the given argument is legal as this encoder's
                     *         replacement byte array.</member>
        <member name="M:biz.ritter.javapi.nio.charset.CharsetEncoder.malformedInputAction">
                     * Gets this encoder's <code>CodingErrorAction</code> when a malformed
                     * input error occurred during the encoding process.
                     *
                     * @return this encoder's <code>CodingErrorAction</code> when a malformed
                     *         input error occurred during the encoding process.</member>
        <member name="M:biz.ritter.javapi.nio.charset.CharsetEncoder.maxBytesPerChar">
                     * Gets the maximum number of bytes which can be created by this encoder for
                     * one input character, must be positive.
                     *
                     * @return the maximum number of bytes which can be created by this encoder
                     *         for one input character, must be positive.</member>
        <member name="M:biz.ritter.javapi.nio.charset.CharsetEncoder.onMalformedInput(biz.ritter.javapi.nio.charset.CodingErrorAction)">
                     * Sets this encoder's action on malformed input error.
                     *
                     * This method will call the
                     * {@link #implOnMalformedInput(CodingErrorAction) implOnMalformedInput}
                     * method with the given new action as argument.
                     *
                     * @param newAction
                     *            the new action on malformed input error.
                     * @return this encoder.
                     * @throws IllegalArgumentException
                     *             if the given newAction is null.</member>
        <member name="M:biz.ritter.javapi.nio.charset.CharsetEncoder.onUnmappableCharacter(biz.ritter.javapi.nio.charset.CodingErrorAction)">
                     * Sets this encoder's action on unmappable character error.
                     *
                     * This method will call the
                     * {@link #implOnUnmappableCharacter(CodingErrorAction) implOnUnmappableCharacter}
                     * method with the given new action as argument.
                     *
                     * @param newAction
                     *            the new action on unmappable character error.
                     * @return this encoder.
                     * @throws IllegalArgumentException
                     *             if the given newAction is null.</member>
        <member name="M:biz.ritter.javapi.nio.charset.CharsetEncoder.replacement">
                     * Gets the replacement byte array, which is never null or empty.
                     *
                     * @return the replacement byte array, cannot be null or empty.</member>
        <member name="M:biz.ritter.javapi.nio.charset.CharsetEncoder.replaceWith(System.Byte[])">
                     * Sets the new replacement value.
                     *
                     * This method first checks the given replacement's validity, then changes
                     * the replacement value and finally calls the
                     * {@link #implReplaceWith(byte[]) implReplaceWith} method with the given
                     * new replacement as argument.
                     *
                     * @param replacement
                     *            the replacement byte array, cannot be null or empty, its
                     *            length cannot be larger than <code>maxBytesPerChar</code>,
                     *            and it must be legal replacement, which can be justified by
                     *            calling <code>isLegalReplacement(byte[] repl)</code>.
                     * @return this encoder.
                     * @throws IllegalArgumentException
                     *             if the given replacement cannot satisfy the requirement
                     *             mentioned above.</member>
        <member name="M:biz.ritter.javapi.nio.charset.CharsetEncoder.reset">
                     * Resets this encoder. This method will reset the internal status and then
                     * calla <code>implReset()</code> to reset any status related to the
                     * specific charset.
                     *
                     * @return this encoder.</member>
        <member name="M:biz.ritter.javapi.nio.charset.CharsetEncoder.unmappableCharacterAction">
                     * Gets this encoder's <code>CodingErrorAction</code> when unmappable
                     * character occurred during encoding process.
                     *
                     * @return this encoder's <code>CodingErrorAction</code> when unmappable
                     *         character occurred during encoding process.</member>
        <member name="T:biz.ritter.javapi.nio.charset.CoderMalfunctionError">
                 * A {@code CoderMalfunctionError} is thrown when the encoder/decoder is
                 * malfunctioning.</member>
        <member name="M:biz.ritter.javapi.nio.charset.CoderMalfunctionError.#ctor(biz.ritter.javapi.lang.Exception)">
                     * Constructs a new {@code CoderMalfunctionError}.
                     *
                     * @param ex
                     *            the original exception thrown by the encoder/decoder.</member>
        <member name="T:biz.ritter.javapi.nio.charset.CoderResult">
            <summary>
            Used to indicate the result of encoding/decoding. There are four types of
            results:
            <para>UNDERFLOW indicates that all input has been processed but more input is
            required. It is represented by the unique object <code>CoderResult.UNDERFLOW</code>.</para><para>OVERFLOW indicates an insufficient output buffer size. It is represented
            by the unique object <code>CoderResult.OVERFLOW</code>.
            </para><para>A malformed-input error indicates that an unrecognizable sequence of
            input units has been encountered. Get an instance of this type of result by
            calling <code>CoderResult.malformedForLength(int)</code> with the length of
            the malformed-input.
            </para><para>An unmappable-character error indicates that a sequence of input units
            can not be mapped to the output charset. Get an instance of this type of
            result by calling <code>CoderResult.unmappableForLength(int)</code> with
            the input sequence size indicating the identity of the unmappable character.
            </para></summary>
        </member>
        <member name="F:biz.ritter.javapi.nio.charset.CoderResult.UNDERFLOW">
            <summary>
            Result object indicating that there is insufficient data in the
            encoding/decoding buffer or that additional data is required.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.nio.charset.CoderResult.OVERFLOW">
            <summary>
            Result object used to indicate that the output buffer does not have
            enough space available to store the result of the encoding/decoding.
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.nio.charset.CoderResult.#ctor(System.Int32,System.Int32)">
                     * Constructs a <code>CoderResult</code> object with its text description.
                     *
                     * @param type
                     *            the type of this result
                     * @param length
                     *            the length of the erroneous input</member>
        <member name="M:biz.ritter.javapi.nio.charset.CoderResult.malformedForLength(System.Int32)">
                     * Gets a <code>CoderResult</code> object indicating a malformed-input
                     * error.
                     *
                     * @param length
                     *            the length of the malformed-input.
                     * @return a <code>CoderResult</code> object indicating a malformed-input
                     *         error.
                     * @throws IllegalArgumentException
                     *             if <code>length</code> is non-positive.</member>
        <member name="M:biz.ritter.javapi.nio.charset.CoderResult.unmappableForLength(System.Int32)">
                     * Gets a <code>CoderResult</code> object indicating an unmappable
                     * character error.
                     *
                     * @param length
                     *            the length of the input unit sequence denoting the unmappable
                     *            character.
                     * @return a <code>CoderResult</code> object indicating an unmappable
                     *         character error.
                     * @throws IllegalArgumentException
                     *             if <code>length</code> is non-positive.</member>
        <member name="M:biz.ritter.javapi.nio.charset.CoderResult.isUnderflow">
                     * Returns true if this result is an underflow condition.
                     *
                     * @return true if an underflow, otherwise false.</member>
        <member name="M:biz.ritter.javapi.nio.charset.CoderResult.isError">
                     * Returns true if this result represents a malformed-input error or an
                     * unmappable-character error.
                     *
                     * @return true if this is a malformed-input error or an
                     *         unmappable-character error, otherwise false.</member>
        <member name="M:biz.ritter.javapi.nio.charset.CoderResult.isMalformed">
                     * Returns true if this result represents a malformed-input error.
                     *
                     * @return true if this is a malformed-input error, otherwise false.</member>
        <member name="M:biz.ritter.javapi.nio.charset.CoderResult.isOverflow">
                     * Returns true if this result is an overflow condition.
                     *
                     * @return true if this is an overflow, otherwise false.</member>
        <member name="M:biz.ritter.javapi.nio.charset.CoderResult.isUnmappable">
                     * Returns true if this result represents an unmappable-character error.
                     *
                     * @return true if this is an unmappable-character error, otherwise false.</member>
        <member name="M:biz.ritter.javapi.nio.charset.CoderResult.length">
                     * Gets the length of the erroneous input. The length is only meaningful to
                     * a malformed-input error or an unmappble character error.
                     *
                     * @return the length, as an integer, of this object's erroneous input.
                     * @throws UnsupportedOperationException
                     *             if this result is an overflow or underflow.</member>
        <member name="M:biz.ritter.javapi.nio.charset.CoderResult.throwException">
                     * Throws an exception corresponding to this coder result.
                     *
                     * @throws BufferUnderflowException
                     *             in case this is an underflow.
                     * @throws BufferOverflowException
                     *             in case this is an overflow.
                     * @throws UnmappableCharacterException
                     *             in case this is an unmappable-character error.
                     * @throws MalformedInputException
                     *             in case this is a malformed-input error.
                     * @throws CharacterCodingException
                     *             the default exception.</member>
        <member name="M:biz.ritter.javapi.nio.charset.CoderResult.ToString">
                     * Returns a text description of this result.
                     *
                     * @return a text description of this result.</member>
        <member name="T:biz.ritter.javapi.nio.charset.CodingErrorAction">
                 * Used to indicate what kind of actions to take in case of encoding/decoding
                 * errors. Currently three actions are defined: {@code IGNORE}, {@code REPLACE}
                 * and {@code REPORT}.</member>
        <member name="F:biz.ritter.javapi.nio.charset.CodingErrorAction.IGNORE">
                     * Denotes the action to ignore any errors.</member>
        <member name="F:biz.ritter.javapi.nio.charset.CodingErrorAction.REPLACE">
                     * Denotes the action to fill in the output with a replacement character
                     * when malformed input or an unmappable character is encountered.</member>
        <member name="F:biz.ritter.javapi.nio.charset.CodingErrorAction.REPORT">
                     * Denotes the action to report the encountered error in an appropriate
                     * manner, for example to throw an exception or return an informative
                     * result.</member>
        <member name="M:biz.ritter.javapi.nio.charset.CodingErrorAction.ToString">
                     * Returns a text description of this action indication.
                     *
                     * @return a text description of this action indication.</member>
        <member name="T:biz.ritter.javapi.nio.charset.IllegalCharsetNameException">
                 * An {@code IllegalCharsetNameException} is thrown when an illegal charset name
                 * is encountered.</member>
        <member name="M:biz.ritter.javapi.nio.charset.IllegalCharsetNameException.#ctor(System.String)">
                     * Constructs a new {@code IllegalCharsetNameException} with the supplied
                     * charset name.
                     *
                     * @param charset
                     *            the encountered illegal charset name.</member>
        <member name="M:biz.ritter.javapi.nio.charset.IllegalCharsetNameException.getCharsetName">
                     * Gets the encountered illegal charset name.
                     *
                     * @return the encountered illegal charset name.</member>
        <member name="T:biz.ritter.javapi.nio.charset.MalformedInputException">
                 * A {@code MalformedInputException} is thrown when a malformed input is
                 * encountered, for example if a byte sequence is illegal for the given charset.</member>
        <member name="M:biz.ritter.javapi.nio.charset.MalformedInputException.#ctor(System.Int32)">
                     * Constructs a new {@code MalformedInputException}.
                     *
                     * @param length
                     *            the length of the malformed input.</member>
        <member name="M:biz.ritter.javapi.nio.charset.MalformedInputException.getInputLength">
                     * Gets the length of the malformed input.
                     *
                     * @return the length of the malformed input.</member>
        <member name="M:biz.ritter.javapi.nio.charset.MalformedInputException.getMessage">
                     * Gets a message describing this exception.
                     *
                     * @return a message describing this exception.</member>
        <member name="T:biz.ritter.javapi.nio.charset.spi.CharsetProvider">
                 * The service provider class for character sets.</member>
        <member name="M:biz.ritter.javapi.nio.charset.spi.CharsetProvider.#ctor">
                     * Constructor for subclassing with concrete types.
                     *
                     * @throws SecurityException
                     *             if there is a security manager installed that does not permit
                     *             the runtime permission labeled "charsetProvider".</member>
        <member name="M:biz.ritter.javapi.nio.charset.spi.CharsetProvider.charsets">
                     * Returns an iterator over all the available charsets.
                     *
                     * @return the iterator.</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.nio.charset.spi.CharsetProvider.charsetForName(System.String)-->
        <member name="T:biz.ritter.javapi.nio.charset.UnmappableCharacterException">
                 * An {@code UnmappableCharacterException} is thrown when an unmappable
                 * character for the given charset is encountered.</member>
        <member name="M:biz.ritter.javapi.nio.charset.UnmappableCharacterException.#ctor(System.Int32)">
                     * Constructs a new {@code UnmappableCharacterException}.
                     *
                     * @param length
                     *            the length of the unmappable character.</member>
        <member name="M:biz.ritter.javapi.nio.charset.UnmappableCharacterException.getInputLength">
                     * Gets the length of the unmappable character.
                     *
                     * @return the length of the unmappable character.</member>
        <member name="M:biz.ritter.javapi.nio.charset.UnmappableCharacterException.getMessage">
                     * Gets a message describing this exception.
                     *
                     * @return a message describing this exception.</member>
        <member name="T:biz.ritter.javapi.nio.charset.UnsupportedCharsetException">
                 * An {@code UnsupportedCharsetException} is thrown when an unsupported charset
                 * name is encountered.</member>
        <member name="M:biz.ritter.javapi.nio.charset.UnsupportedCharsetException.#ctor(System.String)">
                     * Constructs a new {@code UnsupportedCharsetException} with the supplied
                     * charset name.
                     *
                     * @param charset
                     *            the encountered unsupported charset name.</member>
        <member name="M:biz.ritter.javapi.nio.charset.UnsupportedCharsetException.getCharsetName">
                     * Gets the encountered unsupported charset name.
                     *
                     * @return the encountered unsupported charset name.</member>
        <member name="T:biz.ritter.javapi.security.Key">
                 * {@code Key} is the common interface for all keys.
                 *
                 * @see PublicKey
                 * @see PrivateKey</member>
        <member name="M:biz.ritter.javapi.security.Key.getAlgorithm">
                     * Returns the name of the algorithm of this key. If the algorithm is
                     * unknown, {@code null} is returned.
                     *
                     * @return the name of the algorithm of this key or {@code null} if the
                     *         algorithm is unknown.</member>
        <member name="M:biz.ritter.javapi.security.Key.getFormat">
                     * Returns the name of the format used to encode this key, or {@code null}
                     * if it can not be encoded.
                     *
                     * @return the name of the format used to encode this key, or {@code null}
                     *         if it can not be encoded.</member>
        <member name="M:biz.ritter.javapi.security.Key.getEncoded">
                     * Returns the encoded form of this key, or {@code null} if encoding is not
                     * supported by this key.
                     *
                     * @return the encoded form of this key, or {@code null} if encoding is not
                     *         supported by this key.</member>
        <member name="T:biz.ritter.javapi.security.PublicKey">
                 * {@code PublicKey} is the common interface for public keys.
                 *
                 * @see PrivateKey</member>
        <member name="T:biz.ritter.javapi.text.AttributedString">
                 * Holds a string with attributes describing the characters of
                 * this string.</member>
        <member name="M:biz.ritter.javapi.text.AttributedString.#ctor(biz.ritter.javapi.text.AttributedCharacterIterator)">
                     * Constructs an {@code AttributedString} from an {@code
                     * AttributedCharacterIterator}, which represents attributed text.
                     *
                     * @param iterator
                     *            the {@code AttributedCharacterIterator} that contains the text
                     *            for this attributed string.</member>
        <member name="M:biz.ritter.javapi.text.AttributedString.#ctor(biz.ritter.javapi.text.AttributedCharacterIterator,System.Int32,System.Int32)">
                     * Constructs an {@code AttributedString} from a range of the text contained
                     * in the specified {@code AttributedCharacterIterator}, starting at {@code
                     * start} and ending at {@code end}. All attributes will be copied to this
                     * attributed string.
                     *
                     * @param iterator
                     *            the {@code AttributedCharacterIterator} that contains the text
                     *            for this attributed string.
                     * @param start
                     *            the start index of the range of the copied text.
                     * @param end
                     *            the end index of the range of the copied text.
                     * @throws IllegalArgumentException
                     *             if {@code start} is less than first index of
                     *             {@code iterator}, {@code end} is greater than the last
                     *             index + 1 in {@code iterator} or if {@code start &gt; end}.</member>
        <member name="M:biz.ritter.javapi.text.AttributedString.#ctor(biz.ritter.javapi.text.AttributedCharacterIterator,System.Int32,System.Int32,biz.ritter.javapi.text.AttributedCharacterIteratorNS.Attribute[])">
                     * Constructs an {@code AttributedString} from a range of the text contained
                     * in the specified {@code AttributedCharacterIterator}, starting at {@code
                     * start}, ending at {@code end} and it will copy the attributes defined in
                     * the specified set. If the set is {@code null} then all attributes are
                     * copied.
                     *
                     * @param iterator
                     *            the {@code AttributedCharacterIterator} that contains the text
                     *            for this attributed string.
                     * @param start
                     *            the start index of the range of the copied text.
                     * @param end
                     *            the end index of the range of the copied text.
                     * @param attributes
                     *            the set of attributes that will be copied, or all if it is
                     *            {@code null}.
                     * @throws IllegalArgumentException
                     *             if {@code start} is less than first index of
                     *             {@code iterator}, {@code end} is greater than the last index +
                     *             1 in {@code iterator} or if {@code start &gt; end}.</member>
        <member name="M:biz.ritter.javapi.text.AttributedString.#ctor(System.String)">
                     * Creates an {@code AttributedString} from the given text.
                     *
                     * @param value
                     *            the text to take as base for this attributed string.</member>
        <member name="M:biz.ritter.javapi.text.AttributedString.#ctor(System.String,biz.ritter.javapi.util.Map{biz.ritter.javapi.text.AttributedCharacterIteratorNS.Attribute,System.Object})">
                     * Creates an {@code AttributedString} from the given text and the
                     * attributes. The whole text has the given attributes applied.
                     *
                     * @param value
                     *            the text to take as base for this attributed string.
                     * @param attributes
                     *            the attributes that the text is associated with.
                     * @throws IllegalArgumentException
                     *             if the length of {@code value} is 0 but the size of {@code
                     *             attributes} is greater than 0.
                     * @throws NullPointerException
                     *             if {@code value} is {@code null}.</member>
        <member name="M:biz.ritter.javapi.text.AttributedString.addAttribute(biz.ritter.javapi.text.AttributedCharacterIteratorNS.Attribute,System.Object)">
                     * Applies a given attribute to this string.
                     *
                     * @param attribute
                     *            the attribute that will be applied to this string.
                     * @param value
                     *            the value of the attribute that will be applied to this
                     *            string.
                     * @throws IllegalArgumentException
                     *             if the length of this attributed string is 0.
                     * @throws NullPointerException
                     *             if {@code attribute} is {@code null}.</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.text.AttributedString.addAttribute(biz.ritter.javapi.text.AttributedCharacterIteratorNS.Attribute,System.Object,System.Int32,System.Int32)-->
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.text.AttributedString.addAttributes(biz.ritter.javapi.util.Map{biz.ritter.javapi.text.AttributedCharacterIteratorNS.Attribute,System.Object},System.Int32,System.Int32)-->
        <member name="M:biz.ritter.javapi.text.AttributedString.getIterator">
                     * Returns an {@code AttributedCharacterIterator} that gives access to the
                     * complete content of this attributed string.
                     *
                     * @return the newly created {@code AttributedCharacterIterator}.</member>
        <member name="M:biz.ritter.javapi.text.AttributedString.getIterator(biz.ritter.javapi.text.AttributedCharacterIteratorNS.Attribute[])">
                     * Returns an {@code AttributedCharacterIterator} that gives access to the
                     * complete content of this attributed string. Only attributes contained in
                     * {@code attributes} are available from this iterator if they are defined
                     * for this text.
                     *
                     * @param attributes
                     *            the array containing attributes that will be in the new
                     *            iterator if they are defined for this text.
                     * @return the newly created {@code AttributedCharacterIterator}.</member>
        <member name="M:biz.ritter.javapi.text.AttributedString.getIterator(biz.ritter.javapi.text.AttributedCharacterIteratorNS.Attribute[],System.Int32,System.Int32)">
                     * Returns an {@code AttributedCharacterIterator} that gives access to the
                     * contents of this attributed string starting at index {@code start} up to
                     * index {@code end}. Only attributes contained in {@code attributes} are
                     * available from this iterator if they are defined for this text.
                     *
                     * @param attributes
                     *            the array containing attributes that will be in the new
                     *            iterator if they are defined for this text.
                     * @param start
                     *            the start index of the iterator on the underlying text.
                     * @param end
                     *            the end index of the iterator on the underlying text.
                     * @return the newly created {@code AttributedCharacterIterator}.</member>
        <member name="M:biz.ritter.javapi.text.AttributedIterator.clone">
                        * Returns a new {@code AttributedIterator} with the same source string,
                        * begin, end, and current index as this attributed iterator.
                        *
                        * @return a shallow copy of this attributed iterator.
                        * @see java.lang.Cloneable</member>
        <member name="M:biz.ritter.javapi.text.AttributedIterator.getBeginIndex">
                        * Returns the begin index in the source string.
                        *
                        * @return the index of the first character to iterate.</member>
        <member name="M:biz.ritter.javapi.text.AttributedIterator.getEndIndex">
                        * Returns the end index in the source String.
                        *
                        * @return the index one past the last character to iterate.</member>
        <member name="M:biz.ritter.javapi.text.AttributedIterator.getIndex">
                        * Returns the current index in the source String.
                        *
                        * @return the current index.</member>
        <member name="M:biz.ritter.javapi.text.AttributedIterator.getAllAttributeKeys">
                        * Returns a set of attributes present in the {@code AttributedString}.
                        * An empty set returned indicates that no attributes where defined.
                        *
                        * @return a set of attribute keys that may be empty.</member>
        <member name="F:biz.ritter.javapi.text.CharacterIteratorConstants.DONE">
                     * A constant which indicates that there is no character at the current
                     * index.</member>
        <member name="T:biz.ritter.javapi.text.CharacterIterator">
            <summary>
            An interface for the bidirectional iteration over a group of characters. The
            iteration starts at the begin index in the group of characters and continues
            to one index before the end index.
            <strong>Note: DONE field is moved to </strong></summary>
        </member>
        <member name="M:biz.ritter.javapi.text.CharacterIterator.current">
                     * Returns the character at the current index.
                     *
                     * @return the current character, or {@code DONE} if the current index is
                     *         past the beginning or end of the sequence.</member>
        <member name="M:biz.ritter.javapi.text.CharacterIterator.first">
                     * Sets the current position to the begin index and returns the character at
                     * the new position.
                     *
                     * @return the character at the begin index.</member>
        <member name="M:biz.ritter.javapi.text.CharacterIterator.getBeginIndex">
                     * Returns the begin index.
                     *
                     * @return the index of the first character of the iteration.</member>
        <member name="M:biz.ritter.javapi.text.CharacterIterator.getEndIndex">
                     * Returns the end index.
                     *
                     * @return the index one past the last character of the iteration.</member>
        <member name="M:biz.ritter.javapi.text.CharacterIterator.getIndex">
                     * Returns the current index.
                     *
                     * @return the current index.</member>
        <member name="M:biz.ritter.javapi.text.CharacterIterator.last">
                     * Sets the current position to the end index - 1 and returns the character
                     * at the new position.
                     *
                     * @return the character before the end index.</member>
        <member name="M:biz.ritter.javapi.text.CharacterIterator.next">
                     * Increments the current index and returns the character at the new index.
                     *
                     * @return the character at the next index, or {@code DONE} if the next
                     *         index would be past the end.</member>
        <member name="M:biz.ritter.javapi.text.CharacterIterator.previous">
                     * Decrements the current index and returns the character at the new index.
                     *
                     * @return the character at the previous index, or {@code DONE} if the
                     *         previous index would be past the beginning.</member>
        <member name="M:biz.ritter.javapi.text.CharacterIterator.setIndex(System.Int32)">
                     * Sets the current index to a new position and returns the character at the
                     * new index.
                     *
                     * @param location
                     *            the new index that this character iterator is set to.
                     * @return the character at the new index, or {@code DONE} if the index is
                     *         past the end.
                     * @throws IllegalArgumentException
                     *         if {@code location} is less than the begin index or greater than
                     *         the end index.</member>
        <!--FIXME: Invalid documentation markup was found for member T:biz.ritter.javapi.text.FieldPosition-->
        <member name="M:biz.ritter.javapi.text.FieldPosition.#ctor(System.Int32)">
                     * Constructs a new {@code FieldPosition} for the specified field.
                     *
                     * @param field
                     *            the field to identify.</member>
        <member name="M:biz.ritter.javapi.text.FieldPosition.#ctor(biz.ritter.javapi.text.FormatNS.Field)">
                     * Constructs a new {@code FieldPosition} for the specified {@code Field}
                     * attribute.
                     *
                     * @param attribute
                     *            the field attribute to identify.</member>
        <member name="M:biz.ritter.javapi.text.FieldPosition.#ctor(biz.ritter.javapi.text.FormatNS.Field,System.Int32)">
                     * Constructs a new {@code FieldPosition} for the specified {@code Field}
                     * attribute and field id.
                     *
                     * @param attribute
                     *            the field attribute to identify.
                     * @param field
                     *            the field to identify.</member>
        <member name="M:biz.ritter.javapi.text.FieldPosition.Equals(System.Object)">
                     * Compares the specified object to this field position and indicates if
                     * they are equal. In order to be equal, {@code object} must be an instance
                     * of {@code FieldPosition} with the same field, begin index and end index.
                     *
                     * @param object
                     *            the object to compare with this object.
                     * @return {@code true} if the specified object is equal to this field
                     *         position; {@code false} otherwise.
                     * @see #hashCode</member>
        <member name="M:biz.ritter.javapi.text.FieldPosition.getBeginIndex">
                     * Returns the index of the beginning of the field.
                     *
                     * @return the first index of the field.</member>
        <member name="M:biz.ritter.javapi.text.FieldPosition.getEndIndex">
                     * Returns the index one past the end of the field.
                     *
                     * @return one past the index of the last character in the field.</member>
        <member name="M:biz.ritter.javapi.text.FieldPosition.getField">
                     * Returns the field which is being identified.
                     *
                     * @return the field constant.</member>
        <member name="M:biz.ritter.javapi.text.FieldPosition.getFieldAttribute">
                     * Returns the attribute which is being identified.
                     *
                     * @return the field.</member>
        <member name="M:biz.ritter.javapi.text.FieldPosition.setBeginIndex(System.Int32)">
                     * Sets the index of the beginning of the field.
                     *
                     * @param index
                     *            the index of the first character in the field.</member>
        <member name="M:biz.ritter.javapi.text.FieldPosition.setEndIndex(System.Int32)">
                     * Sets the index of the end of the field.
                     *
                     * @param index
                     *            one past the index of the last character in the field.</member>
        <member name="M:biz.ritter.javapi.text.FieldPosition.ToString">
                     * Returns the string representation of this field position.
                     *
                     * @return the string representation of this field position.</member>
        <!--FIXME: Invalid documentation markup was found for member T:biz.ritter.javapi.text.Format-->
        <member name="M:biz.ritter.javapi.text.Format.#ctor">
                     * Constructs a new {@code Format} instance.</member>
        <member name="M:biz.ritter.javapi.text.Format.clone">
                     * Returns a copy of this {@code Format} instance.
                     *
                     * @return a shallow copy of this format.
                     *
                     * @see java.lang.Cloneable</member>
        <member name="M:biz.ritter.javapi.text.Format.format(System.Object)">
                     * Formats the specified object using the rules of this format.
                     *
                     * @param object
                     *            the object to format.
                     * @return the formatted string.
                     * @throws IllegalArgumentException
                     *         if the object cannot be formatted by this format.</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.text.Format.format(System.Object,biz.ritter.javapi.lang.StringBuffer,biz.ritter.javapi.text.FieldPosition)-->
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.text.Format.formatToCharacterIterator(System.Object)-->
        <member name="M:biz.ritter.javapi.text.Format.parseObject(System.String)">
                     * Parses the specified string using the rules of this format.
                     *
                     * @param string
                     *            the string to parse.
                     * @return the object resulting from the parse.
                     * @throws ParseException
                     *            if an error occurs during parsing.</member>
        <member name="M:biz.ritter.javapi.text.Format.parseObject(System.String,biz.ritter.javapi.text.ParsePosition)">
                     * Parses the specified string starting at the index specified by
                     * {@code position}. If the string is successfully parsed then the index of
                     * the {@code ParsePosition} is updated to the index following the parsed
                     * text. On error, the index is unchanged and the error index of
                     * {@code ParsePosition} is set to the index where the error occurred.
                     *
                     * @param string
                     *            the string to parse.
                     * @param position
                     *            input/output parameter, specifies the start index in
                     *            {@code string} from where to start parsing. If parsing is
                     *            successful, it is updated with the index following the parsed
                     *            text; on error, the index is unchanged and the error index is
                     *            set to the index where the error occurred.
                     * @return the object resulting from the parse or {@code null} if there is
                     *         an error.</member>
        <member name="T:biz.ritter.javapi.text.FormatNS.Field">
                * Inner class used to represent {@code Format} attributes in the
                * {@code AttributedCharacterIterator} that the
                * {@code formatToCharacterIterator()} method returns in {@code Format}
                * subclasses.</member>
        <member name="M:biz.ritter.javapi.text.FormatNS.Field.#ctor(System.String)">
                        * Constructs a new instance of {@code Field} with the given field name.
                        *
                        * @param fieldName
                        *            the field name.</member>
        <member name="T:biz.ritter.javapi.text.ParseException">
                 * Thrown when the string being parsed is not in the correct form.</member>
        <member name="M:biz.ritter.javapi.text.ParseException.#ctor(System.String,System.Int32)">
                     * Constructs a new instance of this class with its stack trace, detail
                     * message and the location of the error filled in.
                     *
                     * @param detailMessage
                     *            the detail message for this exception.
                     * @param location
                     *            the index at which the parse exception occurred.</member>
        <member name="M:biz.ritter.javapi.text.ParseException.getErrorOffset">
                     * Returns the index at which this parse exception occurred.
                     *
                     * @return the location of this exception in the parsed string.</member>
        <member name="T:biz.ritter.javapi.text.ParsePosition">
                 * Tracks the current position in a parsed string. In case of an error the error
                 * index can be set to the position where the error occurred without having to
                 * change the parse position.</member>
        <member name="M:biz.ritter.javapi.text.ParsePosition.#ctor(System.Int32)">
                     * Constructs a new {@code ParsePosition} with the specified index.
                     *
                     * @param index
                     *            the index to begin parsing.</member>
        <member name="M:biz.ritter.javapi.text.ParsePosition.Equals(System.Object)">
                     * Compares the specified object to this {@code ParsePosition} and indicates
                     * if they are equal. In order to be equal, {@code object} must be an
                     * instance of {@code ParsePosition} and it must have the same index and
                     * error index.
                     *
                     * @param object
                     *            the object to compare with this object.
                     * @return {@code true} if the specified object is equal to this
                     *         {@code ParsePosition}; {@code false} otherwise.
                     * @see #hashCode</member>
        <member name="M:biz.ritter.javapi.text.ParsePosition.getErrorIndex">
                     * Returns the index at which the parse could not continue.
                     *
                     * @return the index of the parse error or -1 if there is no error.</member>
        <member name="M:biz.ritter.javapi.text.ParsePosition.getIndex">
                     * Returns the current parse position.
                     *
                     * @return the current position.</member>
        <member name="M:biz.ritter.javapi.text.ParsePosition.setErrorIndex(System.Int32)">
                     * Sets the index at which the parse could not continue.
                     *
                     * @param index
                     *            the index of the parse error.</member>
        <member name="M:biz.ritter.javapi.text.ParsePosition.setIndex(System.Int32)">
                     * Sets the current parse position.
                     *
                     * @param index
                     *            the current parse position.</member>
        <member name="M:biz.ritter.javapi.text.ParsePosition.ToString">
                     * Returns the string representation of this parse position.
                     *
                     * @return the string representation of this parse position.</member>
        <member name="T:biz.ritter.javapi.util.AbstractCollection`1">
                 * Class {@code AbstractCollection} is an abstract implementation of the {@code
                 * Collection} interface. A subclass must implement the abstract methods {@code
                 * iterator()} and {@code size()} to create an immutable collection. To create a
                 * modifiable collection it's necessary to override the {@code add()} method that
                 * currently throws an {@code UnsupportedOperationException}.
                 *
                 * @since 1.2</member>
        <member name="M:biz.ritter.javapi.util.AbstractCollection`1.#ctor">
                     * Constructs a new instance of this AbstractCollection.</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.util.AbstractCollection`1.addAll(biz.ritter.javapi.util.Collection{`0})-->
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.util.AbstractCollection`1.clear-->
        <member name="M:biz.ritter.javapi.util.AbstractCollection`1.contains(System.Object)">
                     * Tests whether this {@code Collection} contains the specified object. This
                     * implementation iterates over this {@code Collection} and tests, whether any
                     * element is equal to the given object. If {@code object != null} then
                     * {@code object.equals(e)} is called for each element {@code e} returned by
                     * the iterator until the element is found. If {@code object == null} then
                     * each element {@code e} returned by the iterator is compared with the test
                     * {@code e == null}.
                     *
                     * @param object
                     *            the object to search for.
                     * @return {@code true} if object is an element of this {@code Collection}, {@code
                     *         false} otherwise.
                     * @throws ClassCastException
                     *                if the object to look for isn't of the correct type.
                     * @throws NullPointerException
                     *                if the object to look for is {@code null} and this
                     *                {@code Collection} doesn't support {@code null} elements.</member>
        <member name="M:biz.ritter.javapi.util.AbstractCollection`1.containsAll(biz.ritter.javapi.util.Collection{`0})">
                     * Tests whether this {@code Collection} contains all objects contained in the
                     * specified {@code Collection}. This implementation iterates over the specified
                     * {@code Collection}. If one element returned by the iterator is not contained in
                     * this {@code Collection}, then {@code false} is returned; {@code true} otherwise.
                     *
                     * @param collection
                     *            the collection of objects.
                     * @return {@code true} if all objects in the specified {@code Collection} are
                     *         elements of this {@code Collection}, {@code false} otherwise.
                     * @throws ClassCastException
                     *                if one or more elements of {@code collection} isn't of the
                     *                correct type.
                     * @throws NullPointerException
                     *                if {@code collection} contains at least one {@code null}
                     *                element and this {@code Collection} doesn't support {@code null}
                     *                elements.
                     * @throws NullPointerException
                     *                if {@code collection} is {@code null}.</member>
        <member name="M:biz.ritter.javapi.util.AbstractCollection`1.isEmpty">
                     * Returns if this {@code Collection} contains no elements. This implementation
                     * tests, whether {@code size} returns 0.
                     *
                     * @return {@code true} if this {@code Collection} has no elements, {@code false}
                     *         otherwise.
                     *
                     * @see #size</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.util.AbstractCollection`1.iterator-->
        <member name="M:biz.ritter.javapi.util.AbstractCollection`1.remove(System.Object)">
                     * Removes one instance of the specified object from this {@code Collection} if one
                     * is contained (optional). This implementation iterates over this
                     * {@code Collection} and tests for each element {@code e} returned by the iterator,
                     * whether {@code e} is equal to the given object. If {@code object != null}
                     * then this test is performed using {@code object.equals(e)}, otherwise
                     * using {@code object == null}. If an element equal to the given object is
                     * found, then the {@code remove} method is called on the iterator and
                     * {@code true} is returned, {@code false} otherwise. If the iterator does
                     * not support removing elements, an {@code UnsupportedOperationException}
                     * is thrown.
                     *
                     * @param object
                     *            the object to remove.
                     * @return {@code true} if this {@code Collection} is modified, {@code false}
                     *         otherwise.
                     * @throws UnsupportedOperationException
                     *                if removing from this {@code Collection} is not supported.
                     * @throws ClassCastException
                     *                if the object passed is not of the correct type.
                     * @throws NullPointerException
                     *                if {@code object} is {@code null} and this {@code Collection}
                     *                doesn't support {@code null} elements.</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.util.AbstractCollection`1.removeAll(biz.ritter.javapi.util.Collection{`0})-->
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.util.AbstractCollection`1.retainAll(biz.ritter.javapi.util.Collection{`0})-->
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.util.AbstractCollection`1.size-->
        <member name="M:biz.ritter.javapi.util.AbstractCollection`1.ToString">
                     * Returns the string representation of this {@code Collection}. The presentation
                     * has a specific format. It is enclosed by square brackets ("[]"). Elements
                     * are separated by ', ' (comma and space).
                     *
                     * @return the string representation of this {@code Collection}.</member>
        <member name="T:biz.ritter.javapi.io.FilterReader">
                 * Wraps an existing {@link Reader} and performs some transformation on the
                 * input data while it is being read. Transformations can be anything from a
                 * simple byte-wise filtering input data to an on-the-fly compression or
                 * decompression of the underlying reader. Readers that wrap another reader and
                 * provide some additional functionality on top of it usually inherit from this
                 * class.
                 *
                 * @see FilterWriter</member>
        <member name="F:biz.ritter.javapi.io.FilterReader.inJ">
                     * The target Reader which is being filtered.</member>
        <member name="M:biz.ritter.javapi.io.FilterReader.#ctor(biz.ritter.javapi.io.Reader)">
                     * Constructs a new FilterReader on the Reader {@code in}.
                     *
                     * @param in
                     *            The non-null Reader to filter reads on.</member>
        <member name="M:biz.ritter.javapi.io.FilterReader.close">
                     * Closes this reader. This implementation closes the filtered reader.
                     *
                     * @throws IOException
                     *             if an error occurs while closing this reader.</member>
        <member name="M:biz.ritter.javapi.io.FilterReader.mark(System.Int32)">
                     * Sets a mark position in this reader. The parameter {@code readlimit}
                     * indicates how many bytes can be read before the mark is invalidated.
                     * Sending {@code reset()} will reposition this reader back to the marked
                     * position, provided that {@code readlimit} has not been surpassed.
                     * <p>
                     * This implementation sets a mark in the filtered reader.
                     * </p>
                     * @param readlimit
                     *            the number of bytes that can be read from this reader before
                     *            the mark is invalidated.
                     * @throws IOException
                     *             if an error occurs while marking this reader.
                     * @see #markSupported()
                     * @see #reset()</member>
        <member name="M:biz.ritter.javapi.io.FilterReader.markSupported">
                     * Indicates whether this reader supports {@code mark()} and {@code reset()}.
                     * This implementation returns whether the filtered reader supports marking.
                     *
                     * @return {@code true} if {@code mark()} and {@code reset()} are supported
                     *         by the filtered reader, {@code false} otherwise.
                     * @see #mark(int)
                     * @see #reset()
                     * @see #skip(long)</member>
        <member name="M:biz.ritter.javapi.io.FilterReader.read">
                     * Reads a single character from the filtered reader and returns it as an
                     * integer with the two higher-order bytes set to 0. Returns -1 if the end
                     * of the filtered reader has been reached.
                     *
                     * @return The character read or -1 if the end of the filtered reader has
                     *         been reached.
                     * @throws IOException
                     *             if an error occurs while reading from this reader.</member>
        <member name="M:biz.ritter.javapi.io.FilterReader.read(System.Char[],System.Int32,System.Int32)">
                     * Reads at most {@code count} characters from the filtered reader and stores them
                     * in the byte array {@code buffer} starting at {@code offset}. Returns the
                     * number of characters actually read or -1 if no characters were read and
                     * the end of the filtered reader was encountered.
                     *
                     * @param buffer
                     *            the char array in which to store the characters read.
                     * @param offset
                     *            the initial position in {@code buffer} to store the characters
                     *            read from this reader.
                     * @param count
                     *            the maximum number of characters to store in {@code buffer}.
                     * @return the number of characters actually read or -1 if the end of the
                     *         filtered reader has been reached while reading.
                     * @throws IOException
                     *             if an error occurs while reading from this reader.</member>
        <member name="M:biz.ritter.javapi.io.FilterReader.ready">
                     * Indicates whether this reader is ready to be read without blocking. If
                     * the result is {@code true}, the next {@code read()} will not block. If
                     * the result is {@code false}, this reader may or may not block when
                     * {@code read()} is sent.
                     *
                     * @return {@code true} if this reader will not block when {@code read()}
                     *         is called, {@code false} if unknown or blocking will occur.
                     * @throws IOException
                     *             if the reader is closed or some other I/O error occurs.</member>
        <member name="M:biz.ritter.javapi.io.FilterReader.reset">
                     * Resets this reader's position to the last marked location. Invocations of
                     * {@code read()} and {@code skip()} will occur from this new location. If
                     * this reader was not marked, the behavior depends on the implementation of
                     * {@code reset()} in the Reader subclass that is filtered by this reader.
                     * The default behavior for Reader is to throw an {@code IOException}.
                     *
                     * @throws IOException
                     *             if a problem occurred or the filtered reader does not support
                     *             {@code mark()} and {@code reset()}.
                     * @see #mark(int)
                     * @see #markSupported()</member>
        <member name="M:biz.ritter.javapi.io.FilterReader.skip(System.Int64)">
                     * Skips {@code count} characters in this reader. Subsequent {@code read()}'s
                     * will not return these characters unless {@code reset()} is used. The
                     * default implementation is to skip characters in the filtered reader.
                     *
                     * @param count
                     *            the maximum number of characters to skip.
                     * @return the number of characters actually skipped.
                     * @throws IOException
                     *             if the filtered reader is closed or some other I/O error
                     *             occurs.
                     * @see #mark(int)
                     * @see #markSupported()
                     * @see #reset()</member>
        <member name="T:biz.ritter.javapi.io.BufferedReader">
                 * Wraps an existing {@link Reader} and <em>buffers</em> the input. Expensive
                 * interaction with the underlying reader is minimized, since most (smaller)
                 * requests can be satisfied by accessing the buffer alone. The drawback is that
                 * some extra space is required to hold the buffer and that copying takes place
                 * when filling that buffer, but this is usually outweighed by the performance
                 * benefits.
                 *
                 * <p />A typical application pattern for the class looks like this:<p />
                 *
                 * <pre>
                 * BufferedReader buf = new BufferedReader(new FileReader("file.java"));
                 * </pre>
                 *
                 * @see BufferedWriter
                 * @since 1.1</member>
        <member name="F:biz.ritter.javapi.io.BufferedReader.buf">
                     * The characters that can be read and refilled in bulk. We maintain three
                     * indices into this buffer:<pre>
                     *     { X X X X X X X X X X X X - - }
                     *           ^     ^             ^
                     *           |     |             |
                     *         mark   pos           end</pre>
                     * Pos points to the next readable character. End is one greater than the
                     * last readable character. When {@code pos == end}, the buffer is empty and
                     * must be {@link #fillBuf() filled} before characters can be read.
                     *
                     * <p>Mark is the value pos will be set to on calls to {@link #reset}. Its
                     * value is in the range {@code [0...pos]}. If the mark is {@code -1}, the
                     * buffer cannot be reset.</p>
                     *
                     * <p>MarkLimit limits the distance between the mark and the pos. When this
                     * limit is exceeded, {@link #reset} is permitted (but not required) to
                     * throw an exception. For shorter distances, {@link #reset} shall not throw
                     * (unless the reader is closed).</p></member>
        <member name="M:biz.ritter.javapi.io.BufferedReader.#ctor(biz.ritter.javapi.io.Reader)">
                     * Constructs a new BufferedReader on the Reader {@code in}. The
                     * buffer gets the default size (8 KB).
                     *
                     * @param in
                     *            the Reader that is buffered.</member>
        <member name="M:biz.ritter.javapi.io.BufferedReader.#ctor(biz.ritter.javapi.io.Reader,System.Int32)">
                     * Constructs a new BufferedReader on the Reader {@code in}. The buffer
                     * size is specified by the parameter {@code size}.
                     *
                     * @param in
                     *            the Reader that is buffered.
                     * @param size
                     *            the size of the buffer to allocate.
                     * @throws IllegalArgumentException
                     *             if {@code size &lt;= 0}.</member>
        <member name="M:biz.ritter.javapi.io.BufferedReader.close">
                     * Closes this reader. This implementation closes the buffered source reader
                     * and releases the buffer. Nothing is done if this reader has already been
                     * closed.
                     *
                     * @throws IOException
                     *             if an error occurs while closing this reader.</member>
        <member name="M:biz.ritter.javapi.io.BufferedReader.fillBuf">
                     * Populates the buffer with data. It is an error to call this method when
                     * the buffer still contains data; ie. if {@code pos &lt; end}.
                     *
                     * @return the number of bytes read into the buffer, or -1 if the end of the
                     *      source stream has been reached.</member>
        <member name="M:biz.ritter.javapi.io.BufferedReader.isClosed">
                     * Indicates whether or not this reader is closed.
                     *
                     * @return {@code true} if this reader is closed, {@code false}
                     *         otherwise.</member>
        <member name="M:biz.ritter.javapi.io.BufferedReader.mark(System.Int32)">
                     * Sets a mark position in this reader. The parameter {@code markLimit}
                     * indicates how many characters can be read before the mark is invalidated.
                     * Calling {@code reset()} will reposition the reader back to the marked
                     * position if {@code markLimit} has not been surpassed.
                     *
                     * @param markLimit
                     *            the number of characters that can be read before the mark is
                     *            invalidated.
                     * @throws IllegalArgumentException
                     *             if {@code markLimit &lt; 0}.
                     * @throws IOException
                     *             if an error occurs while setting a mark in this reader.
                     * @see #markSupported()
                     * @see #reset()</member>
        <member name="M:biz.ritter.javapi.io.BufferedReader.markSupported">
                     * Indicates whether this reader supports the {@code mark()} and
                     * {@code reset()} methods. This implementation returns {@code true}.
                     *
                     * @return {@code true} for {@code BufferedReader}.
                     * @see #mark(int)
                     * @see #reset()</member>
        <member name="M:biz.ritter.javapi.io.BufferedReader.read">
                     * Reads a single character from this reader and returns it with the two
                     * higher-order bytes set to 0. If possible, BufferedReader returns a
                     * character from the buffer. If there are no characters available in the
                     * buffer, it fills the buffer and then returns a character. It returns -1
                     * if there are no more characters in the source reader.
                     *
                     * @return the character read or -1 if the end of the source reader has been
                     *         reached.
                     * @throws IOException
                     *             if this reader is closed or some other I/O error occurs.</member>
        <member name="M:biz.ritter.javapi.io.BufferedReader.read(System.Char[],System.Int32,System.Int32)">
                     * Reads at most {@code length} characters from this reader and stores them
                     * at {@code offset} in the character array {@code buffer}. Returns the
                     * number of characters actually read or -1 if the end of the source reader
                     * has been reached. If all the buffered characters have been used, a mark
                     * has not been set and the requested number of characters is larger than
                     * this readers buffer size, BufferedReader bypasses the buffer and simply
                     * places the results directly into {@code buffer}.
                     *
                     * @param buffer
                     *            the character array to store the characters read.
                     * @param offset
                     *            the initial position in {@code buffer} to store the bytes read
                     *            from this reader.
                     * @param length
                     *            the maximum number of characters to read, must be
                     *            non-negative.
                     * @return number of characters read or -1 if the end of the source reader
                     *         has been reached.
                     * @throws IndexOutOfBoundsException
                     *             if {@code offset &lt; 0} or {@code length &lt; 0}, or if
                     *             {@code offset + length} is greater than the size of
                     *             {@code buffer}.
                     * @throws IOException
                     *             if this reader is closed or some other I/O error occurs.</member>
        <member name="M:biz.ritter.javapi.io.BufferedReader.chompNewline">
                     * Peeks at the next input character, refilling the buffer if necessary. If
                     * this character is a newline character ("\n"), it is discarded.</member>
        <member name="M:biz.ritter.javapi.io.BufferedReader.readLine">
                     * Returns the next line of text available from this reader. A line is
                     * represented by zero or more characters followed by {@code '\n'},
                     * {@code '\r'}, {@code "\r\n"} or the end of the reader. The string does
                     * not include the newline sequence.
                     *
                     * @return the contents of the line or {@code null} if no characters were
                     *         read before the end of the reader has been reached.
                     * @throws IOException
                     *             if this reader is closed or some other I/O error occurs.</member>
        <member name="M:biz.ritter.javapi.io.BufferedReader.ready">
                     * Indicates whether this reader is ready to be read without blocking.
                     *
                     * @return {@code true} if this reader will not block when {@code read} is
                     *         called, {@code false} if unknown or blocking will occur.
                     * @throws IOException
                     *             if this reader is closed or some other I/O error occurs.
                     * @see #read()
                     * @see #read(char[], int, int)
                     * @see #readLine()</member>
        <member name="M:biz.ritter.javapi.io.BufferedReader.reset">
                     * Resets this reader's position to the last {@code mark()} location.
                     * Invocations of {@code read()} and {@code skip()} will occur from this new
                     * location.
                     *
                     * @throws IOException
                     *             if this reader is closed or no mark has been set.
                     * @see #mark(int)
                     * @see #markSupported()</member>
        <member name="M:biz.ritter.javapi.io.BufferedReader.skip(System.Int64)">
                     * Skips {@code amount} characters in this reader. Subsequent
                     * {@code read()}s will not return these characters unless {@code reset()}
                     * is used. Skipping characters may invalidate a mark if {@code markLimit}
                     * is surpassed.
                     *
                     * @param amount
                     *            the maximum number of characters to skip.
                     * @return the number of characters actually skipped.
                     * @throws IllegalArgumentException
                     *             if {@code amount &lt; 0}.
                     * @throws IOException
                     *             if this reader is closed or some other I/O error occurs.
                     * @see #mark(int)
                     * @see #markSupported()
                     * @see #reset()</member>
        <member name="T:biz.ritter.javapi.io.PushbackReader">
                 * Wraps an existing {@link Reader} and adds functionality to "push back"
                 * characters that have been read, so that they can be read again. Parsers may
                 * find this useful. The number of characters which may be pushed back can be
                 * specified during construction. If the buffer of pushed back bytes is empty,
                 * characters are read from the underlying reader.</member>
        <member name="F:biz.ritter.javapi.io.PushbackReader.buf">
                     * The {@code char} array containing the chars to read.</member>
        <member name="F:biz.ritter.javapi.io.PushbackReader.pos">
                     * The current position within the char array {@code buf}. A value
                     * equal to buf.length indicates no chars available. A value of 0 indicates
                     * the buffer is full.</member>
        <member name="M:biz.ritter.javapi.io.PushbackReader.#ctor(biz.ritter.javapi.io.Reader)">
                     * Constructs a new {@code PushbackReader} with the specified reader as
                     * source. The size of the pushback buffer is set to the default value of 1
                     * character.
                     *
                     * @param in
                     *            the source reader.</member>
        <member name="M:biz.ritter.javapi.io.PushbackReader.#ctor(biz.ritter.javapi.io.Reader,System.Int32)">
                     * Constructs a new {@code PushbackReader} with {@code in} as source reader.
                     * The size of the pushback buffer is set to {@code size}.
                     *
                     * @param in
                     *            the source reader.
                     * @param size
                     *            the size of the pushback buffer.
                     * @throws IllegalArgumentException
                     *             if {@code size} is negative.</member>
        <member name="M:biz.ritter.javapi.io.PushbackReader.close">
                     * Closes this reader. This implementation closes the source reader
                     * and releases the pushback buffer.
                     *
                     * @throws IOException
                     *             if an error occurs while closing this reader.</member>
        <member name="M:biz.ritter.javapi.io.PushbackReader.mark(System.Int32)">
                     * Marks the current position in this stream. Setting a mark is not
                     * supported in this class; this implementation always throws an
                     * {@code IOException}.
                     *
                     * @param readAheadLimit
                     *            the number of character that can be read from this reader
                     *            before the mark is invalidated; this parameter is ignored.
                     * @throws IOException
                     *             if this method is called.</member>
        <member name="M:biz.ritter.javapi.io.PushbackReader.markSupported">
                     * Indicates whether this reader supports the {@code mark(int)} and
                     * {@code reset()} methods. {@code PushbackReader} does not support them, so
                     * it returns {@code false}.
                     *
                     * @return always {@code false}.
                     * @see #mark(int)
                     * @see #reset()</member>
        <member name="M:biz.ritter.javapi.io.PushbackReader.read">
                     * Reads a single character from this reader and returns it as an integer
                     * with the two higher-order bytes set to 0. Returns -1 if the end of the
                     * reader has been reached. If the pushback buffer does not contain any
                     * available characters then a character from the source reader is returned.
                     * Blocks until one character has been read, the end of the source reader is
                     * detected or an exception is thrown.
                     *
                     * @return the character read or -1 if the end of the source reader has been
                     *         reached.
                     * @throws IOException
                     *             if this reader is closed or an I/O error occurs while reading
                     *             from this reader.</member>
        <member name="M:biz.ritter.javapi.io.PushbackReader.read(System.Char[],System.Int32,System.Int32)">
                     * Reads at most {@code length} bytes from this reader and stores them in
                     * byte array {@code buffer} starting at {@code offset}. Characters are
                     * read from the pushback buffer first, then from the source reader if more
                     * bytes are required. Blocks until {@code count} characters have been read,
                     * the end of the source reader is detected or an exception is thrown.
                     *
                     * @param buffer
                     *            the array in which to store the characters read from this
                     *            reader.
                     * @param offset
                     *            the initial position in {@code buffer} to store the characters
                     *            read from this reader.
                     * @param count
                     *            the maximum number of bytes to store in {@code buffer}.
                     * @return the number of bytes read or -1 if the end of the source reader
                     *         has been reached.
                     * @throws IndexOutOfBoundsException
                     *             if {@code offset &lt; 0} or {@code count &lt; 0}, or if
                     *             {@code offset + count} is greater than the length of
                     *             {@code buffer}.
                     * @throws IOException
                     *             if this reader is closed or another I/O error occurs while
                     *             reading from this reader.</member>
        <member name="M:biz.ritter.javapi.io.PushbackReader.ready">
                     * Indicates whether this reader is ready to be read without blocking.
                     * Returns {@code true} if this reader will not block when {@code read} is
                     * called, {@code false} if unknown or blocking will occur.
                     *
                     * @return {@code true} if the receiver will not block when
                     *         {@code read()} is called, {@code false} if unknown
                     *         or blocking will occur.
                     * @throws IOException
                     *             if this reader is closed or some other I/O error occurs.
                     * @see #read()
                     * @see #read(char[], int, int)</member>
        <member name="M:biz.ritter.javapi.io.PushbackReader.reset">
                     * Resets this reader to the last marked position. Resetting the reader is
                     * not supported in this class; this implementation always throws an
                     * {@code IOException}.
                     *
                     * @throws IOException
                     *             if this method is called.</member>
        <member name="M:biz.ritter.javapi.io.PushbackReader.unread(System.Char[])">
                     * Pushes all the characters in {@code buffer} back to this reader. The
                     * characters are pushed back in such a way that the next character read
                     * from this reader is buffer[0], then buffer[1] and so on.
                     * <p>
                     * If this reader's internal pushback buffer cannot store the entire
                     * contents of {@code buffer}, an {@code IOException} is thrown. Parts of
                     * {@code buffer} may have already been copied to the pushback buffer when
                     * the exception is thrown.
                     *</p>
                     * @param buffer
                     *            the buffer containing the characters to push back to this
                     *            reader.
                     * @throws IOException
                     *             if this reader is closed or the free space in the internal
                     *             pushback buffer is not sufficient to store the contents of
                     *             {@code buffer}.</member>
        <member name="M:biz.ritter.javapi.io.PushbackReader.unread(System.Char[],System.Int32,System.Int32)">
                     * Pushes a subset of the characters in {@code buffer} back to this reader.
                     * The subset is defined by the start position {@code offset} within
                     * {@code buffer} and the number of characters specified by {@code length}.
                     * The bytes are pushed back in such a way that the next byte read from this
                     * stream is {@code buffer[offset]}, then {@code buffer[1]} and so on.
                     * <p>
                     * If this stream's internal pushback buffer cannot store the selected
                     * subset of {@code buffer}, an {@code IOException} is thrown. Parts of
                     * {@code buffer} may have already been copied to the pushback buffer when
                     * the exception is thrown.
                     *</p>
                     * @param buffer
                     *            the buffer containing the characters to push back to this
                     *            reader.
                     * @param offset
                     *            the index of the first byte in {@code buffer} to push back.
                     * @param length
                     *            the number of bytes to push back.
                     * @throws IndexOutOfBoundsException
                     *             if {@code offset &lt; 0} or {@code count &lt; 0}, or if
                     *             {@code offset + count} is greater than the length of
                     *             {@code buffer}.
                     * @throws IOException
                     *             if this reader is closed or the free space in the internal
                     *             pushback buffer is not sufficient to store the selected
                     *             contents of {@code buffer}.
                     * @throws NullPointerException
                     *             if {@code buffer} is {@code null}.</member>
        <member name="M:biz.ritter.javapi.io.PushbackReader.unread(System.Int32)">
                     * Pushes the specified character {@code oneChar} back to this reader. This
                     * is done in such a way that the next character read from this reader is
                     * {@code (char) oneChar}.
                     * <p>
                     * If this reader's internal pushback buffer cannot store the character, an
                     * {@code IOException} is thrown.
                     *</p>
                     * @param oneChar
                     *            the character to push back to this stream.
                     * @throws IOException
                     *             if this reader is closed or the internal pushback buffer is
                     *             full.</member>
        <member name="M:biz.ritter.javapi.io.PushbackReader.skip(System.Int64)">
                     * Skips {@code count} characters in this reader. This implementation skips
                     * characters in the pushback buffer first and then in the source reader if
                     * necessary.
                     *
                     * @param count
                     *            the number of characters to skip.
                     * @return the number of characters actually skipped.
                     * @throws IllegalArgumentException if {@code count &lt; 0}.
                     * @throws IOException
                     *             if this reader is closed or another I/O error occurs.</member>
        <member name="T:biz.ritter.javapi.io.Reader">
                 * The base class for all readers. A reader is a means of reading data from a
                 * source in a character-wise manner. Some readers also support marking a
                 * position in the input and returning to this position later.
                 * <p />
                 * This abstract class does not provide a fully working implementation, so it
                 * needs to be subclassed, and at least the {@link #read(char[], int, int)} and
                 * {@link #close()} methods needs to be overridden. Overriding some of the
                 * non-abstract methods is also often advised, since it might result in higher
                 * efficiency.
                 * <p />
                 * Many specialized readers for purposes like reading from a file already exist
                 * in this package.
                 *
                 * @see Writer</member>
        <member name="F:biz.ritter.javapi.io.Reader.lockJ">
                     * The object used to synchronize access to the reader.</member>
        <member name="M:biz.ritter.javapi.io.Reader.#ctor">
                     * Constructs a new {@code Reader} with {@code this} as the object used to
                     * synchronize critical sections.</member>
        <member name="M:biz.ritter.javapi.io.Reader.#ctor(System.Object)">
                     * Constructs a new {@code Reader} with {@code lock} used to synchronize
                     * critical sections.
                     *
                     * @param lock
                     *            the {@code Object} used to synchronize critical sections.
                     * @throws NullPointerException
                     *             if {@code lock} is {@code null}.</member>
        <member name="M:biz.ritter.javapi.io.Reader.close">
                     * Closes this reader. Implementations of this method should free any
                     * resources associated with the reader.
                     *
                     * @throws IOException
                     *             if an error occurs while closing this reader.</member>
        <member name="M:biz.ritter.javapi.io.Reader.mark(System.Int32)">
                     * Sets a mark position in this reader. The parameter {@code readLimit}
                     * indicates how many characters can be read before the mark is invalidated.
                     * Calling {@code reset()} will reposition the reader back to the marked
                     * position if {@code readLimit} has not been surpassed.
                     * <p />
                     * This default implementation simply throws an {@code IOException};
                     * subclasses must provide their own implementation.
                     *
                     * @param readLimit
                     *            the number of characters that can be read before the mark is
                     *            invalidated.
                     * @throws IllegalArgumentException
                     *             if {@code readLimit &lt; 0}.
                     * @throws IOException
                     *             if an error occurs while setting a mark in this reader.
                     * @see #markSupported()
                     * @see #reset()</member>
        <member name="M:biz.ritter.javapi.io.Reader.markSupported">
                     * Indicates whether this reader supports the {@code mark()} and
                     * {@code reset()} methods. This default implementation returns
                     * {@code false}.
                     *
                     * @return always {@code false}.</member>
        <member name="M:biz.ritter.javapi.io.Reader.read">
                     * Reads a single character from this reader and returns it as an integer
                     * with the two higher-order bytes set to 0. Returns -1 if the end of the
                     * reader has been reached.
                     *
                     * @return the character read or -1 if the end of the reader has been
                     *         reached.
                     * @throws IOException
                     *             if this reader is closed or some other I/O error occurs.</member>
        <member name="M:biz.ritter.javapi.io.Reader.read(System.Char[])">
                     * Reads characters from this reader and stores them in the character array
                     * {@code buf} starting at offset 0. Returns the number of characters
                     * actually read or -1 if the end of the reader has been reached.
                     *
                     * @param buf
                     *            character array to store the characters read.
                     * @return the number of characters read or -1 if the end of the reader has
                     *         been reached.
                     * @throws IOException
                     *             if this reader is closed or some other I/O error occurs.</member>
        <member name="M:biz.ritter.javapi.io.Reader.read(System.Char[],System.Int32,System.Int32)">
                     * Reads at most {@code count} characters from this reader and stores them
                     * at {@code offset} in the character array {@code buf}. Returns the number
                     * of characters actually read or -1 if the end of the reader has been
                     * reached.
                     *
                     * @param buf
                     *            the character array to store the characters read.
                     * @param offset
                     *            the initial position in {@code buffer} to store the characters
                     *            read from this reader.
                     * @param count
                     *            the maximum number of characters to read.
                     * @return the number of characters read or -1 if the end of the reader has
                     *         been reached.
                     * @throws IOException
                     *             if this reader is closed or some other I/O error occurs.</member>
        <member name="M:biz.ritter.javapi.io.Reader.ready">
                     * Indicates whether this reader is ready to be read without blocking.
                     * Returns {@code true} if this reader will not block when {@code read} is
                     * called, {@code false} if unknown or blocking will occur. This default
                     * implementation always returns {@code false}.
                     *
                     * @return always {@code false}.
                     * @throws IOException
                     *             if this reader is closed or some other I/O error occurs.
                     * @see #read()
                     * @see #read(char[])
                     * @see #read(char[], int, int)</member>
        <member name="M:biz.ritter.javapi.io.Reader.reset">
                     * Resets this reader's position to the last {@code mark()} location.
                     * Invocations of {@code read()} and {@code skip()} will occur from this new
                     * location. If this reader has not been marked, the behavior of
                     * {@code reset()} is implementation specific. This default
                     * implementation throws an {@code IOException}.
                     *
                     * @throws IOException
                     *             always thrown in this default implementation.
                     * @see #mark(int)
                     * @see #markSupported()</member>
        <member name="M:biz.ritter.javapi.io.Reader.skip(System.Int64)">
                     * Skips {@code amount} characters in this reader. Subsequent calls of
                     * {@code read} methods will not return these characters unless {@code
                     * reset()} is used. This method may perform multiple reads to read {@code
                     * count} characters.
                     *
                     * @param count
                     *            the maximum number of characters to skip.
                     * @return the number of characters actually skipped.
                     * @throws IllegalArgumentException
                     *             if {@code amount &lt; 0}.
                     * @throws IOException
                     *             if this reader is closed or some other I/O error occurs.
                     * @see #mark(int)
                     * @see #markSupported()
                     * @see #reset()</member>
        <member name="M:biz.ritter.javapi.io.Reader.read(biz.ritter.javapi.nio.CharBuffer)">
                     * Reads characters and puts them into the {@code target} character buffer.
                     *
                     * @param target
                     *            the destination character buffer.
                     * @return the number of characters put into {@code target} or -1 if the end
                     *         of this reader has been reached before a character has been read.
                     * @throws IOException
                     *             if any I/O error occurs while reading from this reader.
                     * @throws NullPointerException
                     *             if {@code target} is {@code null}.
                     * @throws ReadOnlyBufferException
                     *             if {@code target} is read-only.</member>
        <member name="F:biz.ritter.javapi.lang.Integer.TYPE">
                     * The {@link Class} object that represents the primitive type {@code int}.</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.lang.Integer.parseInt(System.String,System.Int32)-->
        <member name="M:biz.ritter.javapi.lang.Integer.numberOfTrailingZeros(System.Int32)">
                     * Determines the number of trailing zeros in the specified integer after
                     * the {@link #lowestOneBit(int) lowest one bit}.
                     *
                     * @param i
                     *            the integer to examine.
                     * @return the number of trailing zeros in {@code i}.
                     * @since 1.5</member>
        <member name="M:biz.ritter.javapi.lang.Integer.bitCount(System.Int32)">
                     * Counts the number of 1 bits in the specified integer; this is also
                     * referred to as population count.
                     *
                     * @param i
                     *            the integer to examine.
                     * @return the number of 1 bits in {@code i}.
                     * @since 1.5</member>
        <member name="M:biz.ritter.javapi.lang.Integer.toString(System.Int32)">
                     * Converts the specified integer into its decimal string representation.
                     * The returned string is a concatenation of a minus sign if the number is
                     * negative and characters from '0' to '9'.
                     *
                     * @param value
                     *            the integer to convert.
                     * @return the decimal string representation of {@code value}.</member>
        <member name="M:biz.ritter.javapi.lang.Integer.numberOfLeadingZeros(System.Int32)">
                     * Determines the number of leading zeros in the specified integer prior to
                     * the {@link #highestOneBit(int) highest one bit}.
                     *
                     * @param i
                     *            the integer to examine.
                     * @return the number of leading zeros in {@code i}.
                     * @since 1.5</member>
        <member name="M:biz.ritter.javapi.lang.Integer.highestOneBit(System.Int32)">
                     * Determines the highest (leftmost) bit of the specified integer that is 1
                     * and returns the bit mask value for that bit. This is also referred to as
                     * the Most Significant 1 Bit. Returns zero if the specified integer is
                     * zero.
                     *
                     * @param i
                     *            the integer to examine.
                     * @return the bit mask indicating the highest 1 bit in {@code i}.
                     * @since 1.5</member>
        <member name="M:biz.ritter.javapi.lang.Integer.signum(System.Int32)">
                     * Returns the value of the {@code signum} function for the specified
                     * integer.
                     *
                     * @param i
                     *            the integer value to check.
                     * @return -1 if {@code i} is negative, 1 if {@code i} is positive, 0 if
                     *         {@code i} is zero.
                     * @since 1.5</member>
        <member name="M:biz.ritter.javapi.lang.Integer.decode(System.String)">
                     * Parses the specified string and returns a {@code Integer} instance if the
                     * string can be decoded into an integer value. The string may be an
                     * optional minus sign "-" followed by a hexadecimal ("0x..." or "#..."),
                     * octal ("0..."), or decimal ("...") representation of an integer.
                     *
                     * @param string
                     *            a string representation of an integer value.
                     * @return an {@code Integer} containing the value represented by
                     *         {@code string}.
                     * @throws NumberFormatException
                     *             if {@code string} can not be parsed as an integer value.</member>
        <member name="M:biz.ritter.javapi.lang.Integer.valueOf(System.String)">
                     * Parses the specified string as a signed decimal integer value.
                     *
                     * @param string
                     *            the string representation of an integer value.
                     * @return an {@code Integer} instance containing the integer value
                     *         represented by {@code string}.
                     * @throws NumberFormatException
                     *             if {@code string} is {@code null}, has a length of zero or
                     *             can not be parsed as an integer value.
                     * @see #parseInt(String)</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.lang.Integer.valueOf(System.Int32)-->
        <member name="M:biz.ritter.javapi.lang.Integer.op_Implicit(biz.ritter.javapi.lang.Integer)~System.Int32">
            <summary>
            Implicit convert java.lang.Integer to .net int type
            </summary>
            <param name="i">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:biz.ritter.javapi.lang.Integer.op_Implicit(System.Int32)~biz.ritter.javapi.lang.Integer">
            <summary>
            Implicit convert .net int type to java.lang.Integer
            </summary>
            <param name="i">
            </param>
            <returns>
            </returns>
        </member>
        <!--FIXME: Invalid documentation markup was found for member F:biz.ritter.javapi.lang.Integer.IAC_INTERGER_valueOfCache.CACHE-->
        <member name="T:biz.ritter.javapi.lang.Iterable`1">
                 * Objects of classes that implement this interface can be used within a
                 * {@code foreach} statement.
                 *
                 * @since 1.5</member>
        <member name="M:biz.ritter.javapi.lang.Iterable`1.iterator">
                     * Returns an {@link Iterator} for the elements in this object.
                     *
                     * @return An {@code Iterator} instance.</member>
        <member name="F:biz.ritter.javapi.lang.Long.TYPE">
                     * The {@link Class} object that represents the primitive type {@code long}.</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.lang.Long.parseLong(System.String,System.Int32)-->
        <member name="M:biz.ritter.javapi.lang.Long.toString(System.Int64)">
                     * Converts the specified long value into its decimal string representation.
                     * The returned string is a concatenation of a minus sign if the number is
                     * negative and characters from '0' to '9'.
                     *
                     * @param l
                     *            the long to convert.
                     * @return the decimal string representation of {@code l}.</member>
        <member name="M:biz.ritter.javapi.lang.Long.toString(System.Int64,System.Int32)">
                     * Converts the specified long value into a string representation based on
                     * the specified radix. The returned string is a concatenation of a minus
                     * sign if the number is negative and characters from '0' to '9' and 'a' to
                     * 'z', depending on the radix. If {@code radix} is not in the interval
                     * defined by {@code Character.MIN_RADIX} and {@code Character.MAX_RADIX}
                     * then 10 is used as the base for the conversion.
                     *
                     * @param l
                     *            the long to convert.
                     * @param radix
                     *            the base to use for the conversion.
                     * @return the string representation of {@code l}.</member>
        <member name="M:biz.ritter.javapi.lang.Long.numberOfTrailingZeros(System.Int64)">
                     * Determines the number of trailing zeros in the specified long value after
                     * the {@link #lowestOneBit(long) lowest one bit}.
                     *
                     * @param lng
                     *            the long to examine.
                     * @return the number of trailing zeros in {@code lng}.
                     * @since 1.5</member>
        <member name="M:biz.ritter.javapi.lang.Long.bitCount(System.Int64)">
                     * Counts the number of 1 bits in the specified long value; this is also
                     * referred to as population count.
                     *
                     * @param lng
                     *            the long to examine.
                     * @return the number of 1 bits in {@code lng}.
                     * @since 1.5</member>
        <member name="M:biz.ritter.javapi.lang.Long.reverse(System.Int64)">
                     * Reverses the order of the bits of the specified long value.
                     *
                     * @param lng
                     *            the long value for which to reverse the bit order.
                     * @return the reversed value.
                     * @since 1.5</member>
        <member name="M:biz.ritter.javapi.lang.Long.reverseBytes(System.Int64)">
                     * Reverses the order of the bytes of the specified long value.
                     *
                     * @param lng
                     *            the long value for which to reverse the byte order.
                     * @return the reversed value.
                     * @since 1.5</member>
        <member name="M:biz.ritter.javapi.lang.Long.signum(System.Int64)">
                     * Returns the value of the {@code signum} function for the specified long
                     * value.
                     *
                     * @param lng
                     *            the long value to check.
                     * @return -1 if {@code lng} is negative, 1 if {@code lng} is positive, 0 if
                     *         {@code lng} is zero.
                     * @since 1.5</member>
        <member name="M:biz.ritter.javapi.lang.Long.numberOfLeadingZeros(System.Int64)">
                     * Determines the number of leading zeros in the specified long value prior
                     * to the {@link #highestOneBit(long) highest one bit}.
                     *
                     * @param lng
                     *            the long to examine.
                     * @return the number of leading zeros in {@code lng}.
                     * @since 1.5</member>
        <member name="M:biz.ritter.javapi.lang.Long.op_Implicit(biz.ritter.javapi.lang.Long)~System.Int64">
            <summary>
            Implicit convert java.lang.Double to .net double type
            </summary>
            <param name="d">
            </param>
            <returns>
            </returns>
        </member>
        <member name="T:biz.ritter.javapi.lang.Readable">
                 * Represents a sequence of characters that can be incrementally read (copied)
                 * into a {@link CharBuffer}.</member>
        <member name="M:biz.ritter.javapi.lang.Readable.read(biz.ritter.javapi.nio.CharBuffer)">
                     * Reads characters into the specified {@code CharBuffer}. The maximum
                     * number of characters read is {@code CharBuffer.remaining()}.
                     *
                     * @param cb
                     *            the buffer to be filled with characters read.
                     * @return the number of characters actually read, or -1 if this
                     *         {@code Readable} reaches its end
                     * @throws IOException
                     *             if an I/O error occurs.</member>
        <member name="T:biz.ritter.javapi.net.BindException">
                 * A {@code BindException} is thrown when a process cannot bind a local
                 * address/port, either because it is already bound or reserved by the OS.</member>
        <member name="M:biz.ritter.javapi.net.BindException.#ctor">
                     * Constructs a new instance with its walkback filled in.</member>
        <member name="M:biz.ritter.javapi.net.BindException.#ctor(System.String)">
                     * Constructs a new instance with its walkback and message filled in.
                     *
                     * @param detailMessage
                     *            detail message of the exception.</member>
        <member name="T:biz.ritter.javapi.net.SocketException">
                 * This {@code SocketException} may be thrown during socket creation or setting
                 * options, and is the superclass of all other socket related exceptions.</member>
        <member name="M:biz.ritter.javapi.net.SocketException.#ctor">
                     * Constructs a new {@code SocketException} instance with its walkback
                     * filled in.</member>
        <member name="M:biz.ritter.javapi.net.SocketException.#ctor(System.String)">
                     * Constructs a new {@code SocketException} instance with its walkback and
                     * message filled in.
                     *
                     * @param detailMessage
                     *            the detail message of this exception.</member>
        <member name="T:biz.ritter.javapi.io.DataInput">
                 * Defines an interface for classes that are able to read typed data from some
                 * source. Typically, this data has been written by a class which implements
                 * {@link DataOutput}. Types that can be read include byte, 16-bit short, 32-bit
                 * int, 32-bit float, 64-bit long, 64-bit double, byte strings, and MUTF-8
                 * strings.
                 *
                 * <h3>MUTF-8 (Modified UTF-8) Encoding</h3>
                 * <p>
                 * When encoding strings as UTF, implementations of {@code DataInput} and
                 * {@code DataOutput} use a slightly modified form of UTF-8, hereafter referred
                 * to as MUTF-8. This form is identical to standard UTF-8, except:
                 * <ul>
                 * <li>Only the one-, two-, and three-byte encodings are used.</li>
                 * <li>Code points in the range <code>U+10000</code> …
                 * <code>U+10ffff</code> are encoded as a surrogate pair, each of which is
                 * represented as a three-byte encoded value.</li>
                 * <li>The code point <code>U+0000</code> is encoded in two-byte form.</li>
                 * </ul>
                 * </p>
                 * <p>
                 * Please refer to <a href="http://unicode.org">The Unicode Standard</a> for
                 * further information about character encoding. MUTF-8 is actually closer to
                 * the (relatively less well-known) encoding <a href="http://www.unicode.org/reports/tr26/">CESU-8</a> than to UTF-8 per se.
                 * </p>
                 * @see DataInputStream
                 * @see RandomAccessFile</member>
        <member name="M:biz.ritter.javapi.io.DataInput.readBoolean">
                     * Reads a boolean.
                     *
                     * @return the next boolean value.
                     * @throws EOFException if the end of the input is reached before the read
                     *         request can be satisfied.
                     * @throws IOException
                     *             if an I/O error occurs while reading.
                     * @see DataOutput#writeBoolean(boolean)</member>
        <member name="M:biz.ritter.javapi.io.DataInput.readByte">
                     * Reads an 8-bit byte value.
                     *
                     * @return the next byte value.
                     * @throws EOFException if the end of the input is reached before the read
                     *         request can be satisfied.
                     * @throws IOException
                     *             if an I/O error occurs while reading.
                     * @see DataOutput#writeByte(int)</member>
        <member name="M:biz.ritter.javapi.io.DataInput.readChar">
                     * Reads a 16-bit character value.
                     *
                     * @return the next char value.
                     * @throws EOFException if the end of the input is reached before the read
                     *         request can be satisfied.
                     * @throws IOException
                     *             if an I/O error occurs while reading.
                     * @see DataOutput#writeChar(int)</member>
        <member name="M:biz.ritter.javapi.io.DataInput.readDouble">
                     * Reads a 64-bit double value.
                     *
                     * @return the next double value.
                     * @throws EOFException if the end of the input is reached before the read
                     *         request can be satisfied.
                     * @throws IOException
                     *             if an I/O error occurs while reading.
                     * @see DataOutput#writeDouble(double)</member>
        <member name="M:biz.ritter.javapi.io.DataInput.readFloat">
                     * Reads a 32-bit float value.
                     *
                     * @return the next float value.
                     * @throws EOFException if the end of the input is reached before the read
                     *         request can be satisfied.
                     * @throws IOException
                     *             if an I/O error occurs while reading.
                     * @see DataOutput#writeFloat(float)</member>
        <member name="M:biz.ritter.javapi.io.DataInput.readFully(System.Byte[])">
                     * Reads bytes into the byte array {@code buffer}. This method will block
                     * until {@code buffer.length} number of bytes have been read.
                     *
                     * @param buffer
                     *            the buffer to read bytes into.
                     * @throws EOFException if the end of the input is reached before the read
                     *         request can be satisfied.
                     * @throws IOException
                     *             if an I/O error occurs while reading.
                     * @see DataOutput#write(byte[])
                     * @see DataOutput#write(byte[], int, int)</member>
        <member name="M:biz.ritter.javapi.io.DataInput.readFully(System.Byte[],System.Int32,System.Int32)">
                     * Reads bytes and stores them in the byte array {@code buffer} starting at
                     * offset {@code offset}. This method blocks until {@code count} number of
                     * bytes have been read.
                     *
                     * @param buffer
                     *            the byte array in which to store the bytes read.
                     * @param offset
                     *            the initial position in {@code buffer} to store the bytes
                     *            read.
                     * @param count
                     *            the maximum number of bytes to store in {@code buffer}.
                     * @throws EOFException if the end of the input is reached before the read
                     *         request can be satisfied.
                     * @throws IOException
                     *             if an I/O error occurs while reading.
                     * @see DataOutput#write(byte[])
                     * @see DataOutput#write(byte[], int, int)</member>
        <member name="M:biz.ritter.javapi.io.DataInput.readInt">
                     * Reads a 32-bit integer value.
                     *
                     * @return the next int value.
                     * @throws EOFException if the end of the input is reached before the read
                     *         request can be satisfied.
                     * @throws IOException
                     *             if an I/O error occurs while reading.
                     * @see DataOutput#writeInt(int)</member>
        <member name="M:biz.ritter.javapi.io.DataInput.readLine">
                     * Returns a string containing the next line of text available from this
                     * stream. A line is made of zero or more characters followed by {@code
                     * '\n'}, {@code '\r'}, {@code "\r\n"} or the end of the stream. The string
                     * does not include the newline sequence.
                     *
                     * @return the contents of the line or null if no characters have been read
                     *         before the end of the stream.
                     * @throws EOFException if the end of the input is reached before the read
                     *         request can be satisfied.
                     * @throws IOException
                     *             if an I/O error occurs while reading.</member>
        <member name="M:biz.ritter.javapi.io.DataInput.readLong">
                     * Reads a 64-bit long value.
                     *
                     * @return the next long value.
                     * @throws EOFException if the end of the input is reached before the read
                     *         request can be satisfied.
                     * @throws IOException
                     *             if an I/O error occurs while reading.
                     * @see DataOutput#writeLong(long)</member>
        <member name="M:biz.ritter.javapi.io.DataInput.readShort">
                     * Reads a 16-bit short value.
                     *
                     * @return the next short value.
                     * @throws EOFException if the end of the input is reached before the read
                     *         request can be satisfied.
                     * @throws IOException
                     *             if an I/O error occurs while reading.
                     * @see DataOutput#writeShort(int)</member>
        <member name="M:biz.ritter.javapi.io.DataInput.readUnsignedByte">
                     * Reads an unsigned 8-bit byte value and returns it as an int.
                     *
                     * @return the next unsigned byte value.
                     * @throws EOFException if the end of the input is reached before the read
                     *         request can be satisfied.
                     * @throws IOException
                     *             if an I/O error occurs while reading.
                     * @see DataOutput#writeByte(int)</member>
        <member name="M:biz.ritter.javapi.io.DataInput.readUnsignedShort">
                     * Reads a 16-bit unsigned short value and returns it as an int.
                     *
                     * @return the next unsigned short value.
                     * @throws EOFException if the end of the input is reached before the read
                     *         request can be satisfied.
                     * @throws IOException
                     *             if an I/O error occurs while reading.
                     * @see DataOutput#writeShort(int)</member>
        <member name="M:biz.ritter.javapi.io.DataInput.readUTF">
                     * Reads a string encoded with {@link DataInput modified UTF-8}.
                     *
                     * @return the next string encoded with {@link DataInput modified UTF-8}.
                     * @throws EOFException if the end of the input is reached before the read
                     *         request can be satisfied.
                     * @throws IOException
                     *             if an I/O error occurs while reading.
                     * @see DataOutput#writeUTF(java.lang.String)</member>
        <member name="M:biz.ritter.javapi.io.DataInput.skipBytes(System.Int32)">
                     * Skips {@code count} number of bytes. This method will not throw an
                     * {@link EOFException} if the end of the input is reached before
                     * {@code count} bytes where skipped.
                     *
                     * @param count
                     *            the number of bytes to skip.
                     * @return the number of bytes actually skipped.
                     * @throws IOException
                     *             if a problem occurs during skipping.</member>
        <member name="T:biz.ritter.javapi.io.DataOutput">
            	 * Defines an interface for classes that are able to write typed data to some
            	 * target. Typically, this data can be read in by a class which implements
            	 * DataInput. Types that can be written include byte, 16-bit short, 32-bit int,
            	 * 32-bit float, 64-bit long, 64-bit double, byte strings, and {@link DataInput
            	 * MUTF-8} encoded strings.
            	 *
            	 * @see DataOutputStream
            	 * @see RandomAccessFile</member>
        <member name="M:biz.ritter.javapi.io.DataOutput.write(System.Byte[])">
            	     * Writes the entire contents of the byte array {@code buffer} to this
            	     * stream.
            	     *
            	     * @param buffer
            	     *            the buffer to write.
            	     * @throws IOException
            	     *             if an I/O error occurs while writing.
            	     * @see DataInput#readFully(byte[])
            	     * @see DataInput#readFully(byte[], int, int)</member>
        <member name="M:biz.ritter.javapi.io.DataOutput.write(System.Byte[],System.Int32,System.Int32)">
            	     * Writes {@code count} bytes from the byte array {@code buffer} starting at
            	     * offset {@code index}.
            	     *
            	     * @param buffer
            	     *            the buffer to write.
            	     * @param offset
            	     *            the index of the first byte in {@code buffer} to write.
            	     * @param count
            	     *            the number of bytes from the {@code buffer} to write.
            	     * @throws IOException
            	     *             if an I/O error occurs while writing.
            	     * @see DataInput#readFully(byte[])
            	     * @see DataInput#readFully(byte[], int, int)</member>
        <member name="M:biz.ritter.javapi.io.DataOutput.write(System.Int32)">
            	     * Writes the specified 8-bit byte.
            	     *
            	     * @param oneByte
            	     *            the byte to write.
            	     * @throws IOException
            	     *             if an I/O error occurs while writing.
            	     * @see DataInput#readByte()</member>
        <member name="M:biz.ritter.javapi.io.DataOutput.writeBoolean(System.Boolean)">
            	     * Writes the specified boolean.
            	     *
            	     * @param val
            	     *            the boolean value to write.
            	     * @throws IOException
            	     *             if an I/O error occurs while writing.
            	     * @see DataInput#readBoolean()</member>
        <member name="M:biz.ritter.javapi.io.DataOutput.writeByte(System.Int32)">
            	     * Writes the specified 8-bit byte.
            	     *
            	     * @param val
            	     *            the byte value to write.
            	     * @throws IOException
            	     *             if an I/O error occurs while writing.
            	     * @see DataInput#readByte()
            	     * @see DataInput#readUnsignedByte()</member>
        <member name="M:biz.ritter.javapi.io.DataOutput.writeBytes(System.String)">
            	     * Writes the low order 8-bit bytes from the specified string.
            	     *
            	     * @param str
            	     *            the string containing the bytes to write.
            	     * @throws IOException
            	     *             if an I/O error occurs while writing.
            	     * @see DataInput#readFully(byte[])
            	     * @see DataInput#readFully(byte[],int,int)</member>
        <member name="M:biz.ritter.javapi.io.DataOutput.writeChar(System.Int32)">
            	     * Writes the specified 16-bit character. Only the two least significant
            	     * bytes of the integer {@code oneByte} are written, with the higher one
            	     * written first. This represents the Unicode value of the char.
            	     *
            	     * @param val
            	     *            the character to write.
            	     * @throws IOException
            	     *             if an I/O error occurs while writing.
            	     * @see DataInput#readChar()</member>
        <member name="M:biz.ritter.javapi.io.DataOutput.writeChars(System.String)">
            	     * Writes the 16-bit characters contained in {@code str}.
            	     *
            	     * @param str
            	     *            the string that contains the characters to write.
            	     * @throws IOException
            	     *             if an I/O error occurs while writing.
            	     * @see DataInput#readChar()</member>
        <member name="M:biz.ritter.javapi.io.DataOutput.writeDouble(System.Double)">
            	     * Writes the specified 64-bit double. The resulting output is the eight
            	     * bytes returned by {@link Double#doubleToLongBits(double)}.
            	     *
            	     * @param val
            	     *            the double to write.
            	     * @throws IOException
            	     *             if an I/O error occurs while writing.
            	     * @see DataInput#readDouble()</member>
        <member name="M:biz.ritter.javapi.io.DataOutput.writeFloat(System.Single)">
            	     * Writes the specified 32-bit float. The resulting output is the four bytes
            	     * returned by {@link Float#floatToIntBits(float)}.
            	     *
            	     * @param val
            	     *            the float to write.
            	     * @throws IOException
            	     *             if an I/O error occurs while writing.
            	     * @see DataInput#readFloat()</member>
        <member name="M:biz.ritter.javapi.io.DataOutput.writeInt(System.Int32)">
            	     * Writes the specified 32-bit int. The resulting output is the four bytes,
            	     * highest order first, of {@code val}.
            	     *
            	     * @param val
            	     *            the int to write.
            	     * @throws IOException
            	     *             if an I/O error occurs while writing.
            	     * @see DataInput#readInt()</member>
        <member name="M:biz.ritter.javapi.io.DataOutput.writeLong(System.Int64)">
            	     * Writes the specified 64-bit long. The resulting output is the eight
            	     * bytes, highest order first, of {@code val}.
            	     *
            	     * @param val
            	     *            the long to write.
            	     * @throws IOException
            	     *             if an I/O error occurs while writing.
            	     * @see DataInput#readLong()</member>
        <member name="M:biz.ritter.javapi.io.DataOutput.writeShort(System.Int32)">
            	     * Writes the specified 16-bit short. Only the lower two bytes of {@code
            	     * val} are written with the higher one written first.
            	     *
            	     * @param val
            	     *            the short to write.
            	     * @throws IOException
            	     *             if an I/O error occurs while writing.
            	     * @see DataInput#readShort()
            	     * @see DataInput#readUnsignedShort()</member>
        <member name="M:biz.ritter.javapi.io.DataOutput.writeUTF(System.String)">
            	     * Writes the specified string encoded in {@link DataInput modified UTF-8}.
            	     *
            	     * @param str
            	     *            the string to write encoded in {@link DataInput modified UTF-8}.
            	     * @throws IOException
            	     *             if an I/O error occurs while writing.
            	     * @see DataInput#readUTF()</member>
        <member name="M:biz.ritter.javapi.io.File.canWrite">
            <summary>
            Check is java.io.File instance is writable.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:biz.ritter.javapi.io.File.createNewFile">
            <summary>
            Create a new file, with given path if not exist
            </summary>
            <returns>true, if created</returns>
        </member>
        <member name="M:biz.ritter.javapi.io.File.renameTo(biz.ritter.javapi.io.File)">
            <summary>
            Rename this file to dest.
            </summary>
            <param name="dest">new File</param>
            <returns>true, if renamed</returns>
            <exception cref="T:biz.ritter.javapi.lang.NullPointerException">dest is null</exception>
            <exception cref="T:biz.ritter.javapi.lang.SecurityException">no read/write access for old/new file</exception>
        </member>
        <member name="M:biz.ritter.javapi.io.File.mkdir">
            <summary>
            Create a new directory
            </summary>
            <returns>true if is created</returns>
        </member>
        <member name="M:biz.ritter.javapi.io.FileInputStream.read(System.Byte[],System.Int32,System.Int32)">
            Optimized reading for files</member>
        <member name="M:biz.ritter.javapi.io.FileOutputStream.#ctor(biz.ritter.javapi.io.File)">
            <summary>
            Construct new instance with given File object
            </summary>
            <param name="f">
            </param>
        </member>
        <member name="M:biz.ritter.javapi.io.FileOutputStream.#ctor(biz.ritter.javapi.io.File,System.Boolean)">
            <summary>
            Create a new instance and go to end to append data
            </summary>
            <param name="f">
            </param>
            <param name="append">
            </param>
        </member>
        <member name="M:biz.ritter.javapi.io.FileOutputStream.#ctor(System.String,System.Boolean)">
            <summary>
            Create a new instance and go to end to append data
            </summary>
            <param name="name">
            </param>
            <param name="append">
            </param>
        </member>
        <member name="M:biz.ritter.javapi.io.OutputStream.checkError">
                     * Returns true if this writer has encountered and suppressed an error. Used
                     * by PrintStreams as an alternative to checked exceptions.</member>
        <member name="T:biz.ritter.javapi.io.PushbackInputStream">
            <summary>
            Wraps an existing {@link InputStream} and adds functionality to "push back"
            bytes that have been read, so that they can be read again. Parsers may find
            this useful. The number of bytes which may be pushed back can be specified
            during construction. If the buffer of pushed back bytes is empty, bytes are
            read from the underlying input stream.
            </summary>
            <remarks>Class is ported from Apache Harmony project.</remarks>
        </member>
        <member name="F:biz.ritter.javapi.io.PushbackInputStream.buf">
                     * The buffer that contains pushed-back bytes.</member>
        <member name="F:biz.ritter.javapi.io.PushbackInputStream.pos">
                     * The current position within {@code buf}. A value equal to
                     * {@code buf.length} indicates that no bytes are available. A value of 0
                     * indicates that the buffer is full.</member>
        <member name="M:biz.ritter.javapi.io.PushbackInputStream.#ctor(biz.ritter.javapi.io.InputStream)">
                     * Constructs a new {@code PushbackInputStream} with the specified input
                     * stream as source. The size of the pushback buffer is set to the default
                     * value of 1 byte.
                     *
                     * @param in
                     *            the source input stream.</member>
        <member name="M:biz.ritter.javapi.io.PushbackInputStream.#ctor(biz.ritter.javapi.io.InputStream,System.Int32)">
                     * Constructs a new {@code PushbackInputStream} with {@code in} as source
                     * input stream. The size of the pushback buffer is set to {@code size}.
                     *
                     * @param in
                     *            the source input stream.
                     * @param size
                     *            the size of the pushback buffer.
                     * @throws IllegalArgumentException
                     *             if {@code size} is negative.</member>
        <member name="M:biz.ritter.javapi.io.PushbackInputStream.available">
                     * Returns the number of bytes that are available before this stream will
                     * block. This is the sum of the bytes available in the pushback buffer and
                     * those available from the source stream.
                     *
                     * @return the number of bytes available before blocking.
                     * @throws IOException
                     *             if this stream is closed or an I/O error occurs in the source
                     *             stream.</member>
        <member name="M:biz.ritter.javapi.io.PushbackInputStream.close">
                     * Closes this stream. This implementation closes the source stream
                     * and releases the pushback buffer.
                     *
                     * @throws IOException
                     *             if an error occurs while closing this stream.</member>
        <member name="M:biz.ritter.javapi.io.PushbackInputStream.markSupported">
                     * Indicates whether this stream supports the {@code mark(int)} and
                     * {@code reset()} methods. {@code PushbackInputStream} does not support
                     * them, so it returns {@code false}.
                     *
                     * @return always {@code false}.
                     * @see #mark(int)
                     * @see #reset()</member>
        <member name="M:biz.ritter.javapi.io.PushbackInputStream.read">
                     * Reads a single byte from this stream and returns it as an integer in the
                     * range from 0 to 255. If the pushback buffer does not contain any
                     * available bytes then a byte from the source input stream is returned.
                     * Blocks until one byte has been read, the end of the source stream is
                     * detected or an exception is thrown.
                     *
                     * @return the byte read or -1 if the end of the source stream has been
                     *         reached.
                     * @throws IOException
                     *             if this stream is closed or an I/O error occurs while reading
                     *             from this stream.</member>
        <member name="M:biz.ritter.javapi.io.PushbackInputStream.read(System.Byte[],System.Int32,System.Int32)">
                     * Reads at most {@code length} bytes from this stream and stores them in
                     * the byte array {@code buffer} starting at {@code offset}. Bytes are read
                     * from the pushback buffer first, then from the source stream if more bytes
                     * are required. Blocks until {@code count} bytes have been read, the end of
                     * the source stream is detected or an exception is thrown.
                     *
                     * @param buffer
                     *            the array in which to store the bytes read from this stream.
                     * @param offset
                     *            the initial position in {@code buffer} to store the bytes read
                     *            from this stream.
                     * @param length
                     *            the maximum number of bytes to store in {@code buffer}.
                     * @return the number of bytes read or -1 if the end of the source stream
                     *         has been reached.
                     * @throws IndexOutOfBoundsException
                     *             if {@code offset &lt; 0} or {@code length &lt; 0}, or if
                     *             {@code offset + length} is greater than the length of
                     *             {@code buffer}.
                     * @throws IOException
                     *             if this stream is closed or another I/O error occurs while
                     *             reading from this stream.
                     * @throws NullPointerException
                     *             if {@code buffer} is {@code null}.</member>
        <member name="M:biz.ritter.javapi.io.PushbackInputStream.skip(System.Int64)">
                     * Skips {@code count} bytes in this stream. This implementation skips bytes
                     * in the pushback buffer first and then in the source stream if necessary.
                     *
                     * @param count
                     *            the number of bytes to skip.
                     * @return the number of bytes actually skipped.
                     * @throws IOException
                     *             if this stream is closed or another I/O error occurs.</member>
        <member name="M:biz.ritter.javapi.io.PushbackInputStream.unread(System.Byte[])">
                     * Pushes all the bytes in {@code buffer} back to this stream. The bytes are
                     * pushed back in such a way that the next byte read from this stream is
                     * buffer[0], then buffer[1] and so on.
                     * <p />
                     * If this stream's internal pushback buffer cannot store the entire
                     * contents of {@code buffer}, an {@code IOException} is thrown. Parts of
                     * {@code buffer} may have already been copied to the pushback buffer when
                     * the exception is thrown.
                     *<p />
                     * @param buffer
                     *            the buffer containing the bytes to push back to this stream.
                     * @throws IOException
                     *             if the free space in the internal pushback buffer is not
                     *             sufficient to store the contents of {@code buffer}.</member>
        <member name="M:biz.ritter.javapi.io.PushbackInputStream.unread(System.Byte[],System.Int32,System.Int32)">
                     * Pushes a subset of the bytes in {@code buffer} back to this stream. The
                     * subset is defined by the start position {@code offset} within
                     * {@code buffer} and the number of bytes specified by {@code length}. The
                     * bytes are pushed back in such a way that the next byte read from this
                     * stream is {@code buffer[offset]}, then {@code buffer[1]} and so on.
                     * <p />
                     * If this stream's internal pushback buffer cannot store the selected
                     * subset of {@code buffer}, an {@code IOException} is thrown. Parts of
                     * {@code buffer} may have already been copied to the pushback buffer when
                     * the exception is thrown.
                     *
                     * @param buffer
                     *            the buffer containing the bytes to push back to this stream.
                     * @param offset
                     *            the index of the first byte in {@code buffer} to push back.
                     * @param length
                     *            the number of bytes to push back.
                     * @throws IndexOutOfBoundsException
                     *             if {@code offset &lt; 0} or {@code length &lt; 0}, or if
                     *             {@code offset + length} is greater than the length of
                     *             {@code buffer}.
                     * @throws IOException
                     *             if the free space in the internal pushback buffer is not
                     *             sufficient to store the selected contents of {@code buffer}.</member>
        <member name="M:biz.ritter.javapi.io.PushbackInputStream.unread(System.Int32)">
                     * Pushes the specified byte {@code oneByte} back to this stream. Only the
                     * least significant byte of the integer {@code oneByte} is pushed back.
                     * This is done in such a way that the next byte read from this stream is
                     * {@code (byte) oneByte}.
                     * <p />
                     * If this stream's internal pushback buffer cannot store the byte, an
                     * {@code IOException} is thrown.
                     *<p />
                     * @param oneByte
                     *            the byte to push back to this stream.
                     * @throws IOException
                     *             if this stream is closed or the internal pushback buffer is
                     *             full.</member>
        <member name="M:biz.ritter.javapi.io.PushbackInputStream.mark(System.Int32)">
                     * Marks the current position in this stream. Setting a mark is not
                     * supported in this class; this implementation does nothing.
                     *
                     * @param readlimit
                     *            the number of bytes that can be read from this stream before
                     *            the mark is invalidated; this parameter is ignored.</member>
        <member name="M:biz.ritter.javapi.io.PushbackInputStream.reset">
                     * Resets this stream to the last marked position. Resetting the stream is
                     * not supported in this class; this implementation always throws an
                     * {@code IOException}.
                     *
                     * @throws IOException
                     *             if this method is called.</member>
        <member name="T:biz.ritter.javapi.io.Serializable">
            <summary>
            Declaration-interface
            </summary>
        </member>
        <member name="T:biz.ritter.javapi.io.Writer">
            <summary>
            The base class for all writers. A writer is a means of writing data to a
            target in a character-wise manner. Most output streams expect the
            {@link #flush()} method to be called before closing the stream, to ensure all
            data is actually written out.
            <p />
            This abstract class does not provide a fully working implementation, so it
            needs to be subclassed, and at least the {@link #write(char[], int, int)},
            {@link #close()} and {@link #flush()} methods needs to be overridden.
            Overriding some of the non-abstract methods is also often advised, since it
            might result in higher efficiency.
            <p />
            Many specialized readers for purposes like reading from a file already exist
            in this package.
            <see cref="T:biz.ritter.javapi.io.Reader" /></summary>
            <remarks>Class is ported from Apache Harmony project.</remarks>
        </member>
        <member name="F:biz.ritter.javapi.io.Writer.lockJ">
                     * The object used to synchronize access to the writer.</member>
        <member name="M:biz.ritter.javapi.io.Writer.#ctor">
                     * Constructs a new {@code Writer} with {@code this} as the object used to
                     * synchronize critical sections.</member>
        <member name="M:biz.ritter.javapi.io.Writer.#ctor(System.Object)">
                     * Constructs a new {@code Writer} with {@code lock} used to synchronize
                     * critical sections.
                     *
                     * @param lock
                     *            the {@code Object} used to synchronize critical sections.
                     * @throws NullPointerException
                     *             if {@code lock} is {@code null}.</member>
        <member name="M:biz.ritter.javapi.io.Writer.close">
                     * Closes this writer. Implementations of this method should free any
                     * resources associated with the writer.
                     *
                     * @throws IOException
                     *             if an error occurs while closing this writer.</member>
        <member name="M:biz.ritter.javapi.io.Writer.flush">
                     * Flushes this writer. Implementations of this method should ensure that
                     * all buffered characters are written to the target.
                     *
                     * @throws IOException
                     *             if an error occurs while flushing this writer.</member>
        <member name="M:biz.ritter.javapi.io.Writer.write(System.Char[])">
                     * Writes the entire character buffer {@code buf} to the target.
                     *
                     * @param buf
                     *            the non-null array containing characters to write.
                     * @throws IOException
                     *             if this writer is closed or another I/O error occurs.</member>
        <member name="M:biz.ritter.javapi.io.Writer.write(System.Char[],System.Int32,System.Int32)">
                     * Writes {@code count} characters starting at {@code offset} in {@code buf}
                     * to the target.
                     *
                     * @param buf
                     *            the non-null character array to write.
                     * @param offset
                     *            the index of the first character in {@code buf} to write.
                     * @param count
                     *            the maximum number of characters to write.
                     * @throws IndexOutOfBoundsException
                     *             if {@code offset &lt; 0} or {@code count &lt; 0}, or if {@code
                     *             offset + count} is greater than the size of {@code buf}.
                     * @throws IOException
                     *             if this writer is closed or another I/O error occurs.</member>
        <member name="M:biz.ritter.javapi.io.Writer.write(System.Int32)">
                     * Writes one character to the target. Only the two least significant bytes
                     * of the integer {@code oneChar} are written.
                     *
                     * @param oneChar
                     *            the character to write to the target.
                     * @throws IOException
                     *             if this writer is closed or another I/O error occurs.</member>
        <member name="M:biz.ritter.javapi.io.Writer.write(System.String)">
                     * Writes the characters from the specified string to the target.
                     *
                     * @param str
                     *            the non-null string containing the characters to write.
                     * @throws IOException
                     *             if this writer is closed or another I/O error occurs.</member>
        <member name="M:biz.ritter.javapi.io.Writer.write(System.String,System.Int32,System.Int32)">
                     * Writes {@code count} characters from {@code str} starting at {@code
                     * offset} to the target.
                     *
                     * @param str
                     *            the non-null string containing the characters to write.
                     * @param offset
                     *            the index of the first character in {@code str} to write.
                     * @param count
                     *            the number of characters from {@code str} to write.
                     * @throws IOException
                     *             if this writer is closed or another I/O error occurs.
                     * @throws IndexOutOfBoundsException
                     *             if {@code offset &lt; 0} or {@code count &lt; 0}, or if {@code
                     *             offset + count} is greater than the length of {@code str}.</member>
        <member name="M:biz.ritter.javapi.io.Writer.append(System.Char)">
                     * Appends the character {@code c} to the target. This method works the same
                     * way as {@link #write(int)}.
                     *
                     * @param c
                     *            the character to append to the target stream.
                     * @return this writer.
                     * @throws IOException
                     *             if this writer is closed or another I/O error occurs.</member>
        <member name="M:biz.ritter.javapi.io.Writer.append(biz.ritter.javapi.lang.CharSequence)">
                     * Appends the character sequence {@code csq} to the target. This method
                     * works the same way as {@code Writer.write(csq.toString())}. If {@code
                     * csq} is {@code null}, then the string "null" is written to the target
                     * stream.
                     *
                     * @param csq
                     *            the character sequence appended to the target.
                     * @return this writer.
                     * @throws IOException
                     *             if this writer is closed or another I/O error occurs.</member>
        <member name="M:biz.ritter.javapi.io.Writer.append(biz.ritter.javapi.lang.CharSequence,System.Int32,System.Int32)">
                     * Appends a subsequence of the character sequence {@code csq} to the
                     * target. This method works the same way as {@code
                     * Writer.writer(csq.subsequence(start, end).toString())}. If {@code
                     * csq} is {@code null}, then the specified subsequence of the string "null"
                     * will be written to the target.
                     *
                     * @param csq
                     *            the character sequence appended to the target.
                     * @param start
                     *            the index of the first char in the character sequence appended
                     *            to the target.
                     * @param end
                     *            the index of the character following the last character of the
                     *            subsequence appended to the target.
                     * @return this writer.
                     * @throws IOException
                     *             if this writer is closed or another I/O error occurs.
                     * @throws IndexOutOfBoundsException
                     *             if {@code start &gt; end}, {@code start &lt; 0}, {@code end &lt; 0} or
                     *             either {@code start} or {@code end} are greater or equal than
                     *             the length of {@code csq}.</member>
        <member name="M:biz.ritter.javapi.io.Writer.checkError">
            <summary>
            Returns true if this writer has encountered and suppressed an error. Used
            by PrintWriters as an alternative to checked exceptions.
            </summary>
        </member>
        <member name="T:biz.ritter.javapi.lang.ArrayIndexOutOfBoundsException">
            <summary>
            Thrown when the an array is indexed with a value less than zero, or greater
            than or equal to the size of the array.
            </summary>
            <remarks>Class is ported from Apache Harmony project.</remarks>
        </member>
        <member name="M:biz.ritter.javapi.lang.ArrayIndexOutOfBoundsException.#ctor">
                     * Constructs a new {@code ArrayIndexOutOfBoundsException} that includes the
                     * current stack trace.</member>
        <member name="M:biz.ritter.javapi.lang.ArrayIndexOutOfBoundsException.#ctor(System.Int32)">
                     * Constructs a new {@code ArrayIndexOutOfBoundsException} with the current
                     * stack trace and a detail message that is based on the specified invalid
                     * {@code index}.
                     *
                     * @param index
                     *            the invalid index.</member>
        <member name="M:biz.ritter.javapi.lang.ArrayIndexOutOfBoundsException.#ctor(System.String)">
                     * Constructs a new {@code ArrayIndexOutOfBoundsException} with the current
                     * stack trace and the specified detail message.
                     *
                     * @param detailMessage
                     *            the detail message for this exception.</member>
        <member name="T:biz.ritter.javapi.lang.CharSequence">
            <remarks>Author: Sebastian Ritter</remarks>
        </member>
        <member name="T:biz.ritter.javapi.lang.IllegalStateException">
                 * Thrown when an action is attempted at a time when the virtual machine is not
                 * in the correct state.
                 <remarks>Class is ported from Apache Harmony project.</remarks></member>
        <member name="M:biz.ritter.javapi.lang.IllegalStateException.#ctor">
                     * Constructs a new {@code IllegalStateException} that includes the current
                     * stack trace.</member>
        <member name="M:biz.ritter.javapi.lang.IllegalStateException.#ctor(System.String)">
                     * Constructs a new {@code IllegalStateException} with the current stack
                     * trace and the specified detail message.
                     *
                     * @param detailMessage
                     *            the detail message for this exception.</member>
        <member name="M:biz.ritter.javapi.lang.IllegalStateException.#ctor(System.String,biz.ritter.javapi.lang.Throwable)">
                     * Constructs a new {@code IllegalStateException} with the current stack
                     * trace, the specified detail message and the specified cause.
                     *
                     * @param message
                     *            the detail message for this exception.
                     * @param cause
                     *            the cause of this exception.
                     * @since 1.5</member>
        <member name="M:biz.ritter.javapi.lang.IllegalStateException.#ctor(biz.ritter.javapi.lang.Throwable)">
                     * Constructs a new {@code IllegalStateException} with the current stack
                     * trace and the specified cause.
                     *
                     * @param cause
                     *            the cause of this exception, may be {@code null}.
                     * @since 1.5</member>
        <member name="T:biz.ritter.javapi.lang.StringIndexOutOfBoundsException">
                 * Thrown by <code>String</code> methods to indicate that an index
                 * is either negative or greater than the size of the string.  For
                 * some methods such as the charAt method, this exception also is
                 * thrown when the index is equal to the size of the string.
                 *
                 * @author  unascribed
                 * @version 1.23, 11/17/05
                 * @see     java.lang.String#charAt(int)
                 * @since   JDK1.0</member>
        <member name="M:biz.ritter.javapi.lang.StringIndexOutOfBoundsException.#ctor">
                     * Constructs a <code>StringIndexOutOfBoundsException</code> with no
                     * detail message.
                     *
                     * @since   JDK1.0.</member>
        <member name="M:biz.ritter.javapi.lang.StringIndexOutOfBoundsException.#ctor(System.String)">
                     * Constructs a <code>StringIndexOutOfBoundsException</code> with
                     * the specified detail message.
                     *
                     * @param   s   the detail message.</member>
        <member name="M:biz.ritter.javapi.lang.StringIndexOutOfBoundsException.#ctor(System.Int32)">
                     * Constructs a new <code>StringIndexOutOfBoundsException</code>
                     * class with an argument indicating the illegal index.
                     *
                     * @param   index   the illegal index.</member>
        <member name="M:biz.ritter.javapi.lang.StringJ.matches(System.String)">
            <summary>
            Check string instance for matching giving regular expression.
            </summary>
            <param name="expr">regular expression</param>
            <returns>
            </returns>
        </member>
        <member name="M:biz.ritter.javapi.lang.StringJ.valueOf(System.Char[],System.Int32,System.Int32)">
                     * Creates a new string containing the specified characters in the character
                     * array. Modifying the character array after creating the string has no
                     * effect on the string.
                     *
                     * @param data
                     *            the array of characters.
                     * @param start
                     *            the starting offset in the character array.
                     * @param length
                     *            the number of characters to use.
                     * @return the new string.
                     * @throws IndexOutOfBoundsException
                     *             if {@code length &lt; 0}, {@code start &lt; 0} or {@code start +
                     *             length &gt; data.length}
                     * @throws NullPointerException
                     *             if {@code data} is {@code null}.</member>
        <member name="M:biz.ritter.javapi.lang.StringJ.valueOf(System.Int32)">
                     * Converts the specified integer to its string representation.
                     *
                     * @param value
                     *            the integer.
                     * @return the integer converted to a string.</member>
        <member name="M:biz.ritter.javapi.lang.StringJ.valueOf(System.Boolean)">
                     * Converts the specified boolean to its string representation. When the
                     * boolean is {@code true} return {@code "true"}, otherwise return {@code
                     * "false"}.
                     *
                     * @param value
                     *            the boolean.
                     * @return the boolean converted to a string.</member>
        <member name="M:biz.ritter.javapi.lang.StringJ.valueOf(System.Char[])">
                     * Creates a new string containing the characters in the specified character
                     * array. Modifying the character array after creating the string has no
                     * effect on the string.
                     *
                     * @param data
                     *            the array of characters.
                     * @return the new string.
                     * @throws NullPointerException
                     *             if {@code data} is {@code null}.</member>
        <member name="M:biz.ritter.javapi.lang.StringJ.valueOf(System.Char)">
                     * Converts the specified character to its string representation.
                     *
                     * @param value
                     *            the character.
                     * @return the character converted to a string.</member>
        <member name="M:biz.ritter.javapi.lang.StringJ.valueOf(System.Double)">
                     * Converts the specified double to its string representation.
                     *
                     * @param value
                     *            the double.
                     * @return the double converted to a string.</member>
        <member name="M:biz.ritter.javapi.lang.StringJ.valueOf(System.Single)">
                     * Converts the specified float to its string representation.
                     *
                     * @param value
                     *            the float.
                     * @return the float converted to a string.</member>
        <member name="M:biz.ritter.javapi.lang.StringJ.valueOf(System.Int64)">
                     * Converts the specified long to its string representation.
                     *
                     * @param value
                     *            the long.
                     * @return the long converted to a string.</member>
        <member name="M:biz.ritter.javapi.lang.StringJ.valueOf(System.Object)">
                     * Converts the specified object to its string representation. If the object
                     * is null return the string {@code "null"}, otherwise use {@code
                     * toString()} to get the string representation.
                     *
                     * @param value
                     *            the object.
                     * @return the object converted to a string, or the string {@code "null"}.</member>
        <member name="M:biz.ritter.javapi.lang.StringJ.op_Implicit(biz.ritter.javapi.lang.StringJ)~System.String">
            <summary>
            Implicit convert java.lang.String to .net System.String type
            </summary>
            <param name="s">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:biz.ritter.javapi.lang.StringJ.op_Implicit(System.String)~biz.ritter.javapi.lang.StringJ">
            <summary>
            Implicit convert .net System.String to java.lang.String type
            </summary>
            <param name="s">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:biz.ritter.javapi.lang.StringJ.getBytes">
            <summary>
            Extends System.String
            Encodes this {@code String} into a sequence of bytes using the
            platform's default charset, storing the result into a new byte array.
            </summary>
            <returns>The resultant byte array</returns>
        </member>
        <member name="M:biz.ritter.javapi.lang.StringJ.getBytes(System.String)">
            <summary>
            Extends System.String
            Encodes this {@code String} into a sequence of bytes using the named
            charset, storing the result into a new byte array.
            </summary>
            <exception cref="T:biz.ritter.javapi.io.UnsupportedEncodingException">If the named charset is not supported</exception>
            <param name="charsetName">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:biz.ritter.javapi.lang.Thread.currentThread">
            <summary>
            Return the current thread
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:biz.ritter.javapi.lang.Thread.getContextClassLoader">
            <summary>
            Return the System ClassLoader
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:biz.ritter.javapi.lang.Thread.setContextClassLoader(biz.ritter.javapi.lang.ClassLoader)">
            <summary>
            Set the context class loader
            </summary>
            <param name="cl">
            </param>
        </member>
        <member name="M:biz.ritter.javapi.lang.Thread.setName(System.String)">
            <summary>
            Set the name of Thread instance to newName
            </summary>
            <param name="newName">
            </param>
        </member>
        <member name="M:biz.ritter.javapi.lang.Thread.getName">
            <summary>
            Get the name of Thread instance
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:biz.ritter.javapi.lang.Thread.setDaemon(System.Boolean)">
            <summary>
            Set this Thread instance to background / daemon thread or not.
            </summary>
            <param name="onOrOff">
            </param>
        </member>
        <member name="M:biz.ritter.javapi.lang.Thread.isDaemon">
            <summary>
            Return Thread instance is background / deamon thread information
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:biz.ritter.javapi.lang.Thread.#ctor">
            <summary>
            Construct new Thread instance
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.lang.Thread.#ctor(biz.ritter.javapi.lang.Runnable)">
            <summary>
            Construct new Thread instance for giving Runnable instance
            </summary>
            <param name="toRun">
            </param>
        </member>
        <member name="M:biz.ritter.javapi.lang.Thread.#ctor(System.String)">
            <summary>
            Construct new named Thread instance
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.lang.Thread.#ctor(biz.ritter.javapi.lang.Runnable,System.String)">
            <summary>
            Construct new named Thread instance for giving Runnable instance
            </summary>
            <param name="toRun">
            </param>
            <param name="name">
            </param>
        </member>
        <member name="M:biz.ritter.javapi.lang.Thread.run">
            <summary>
            All todo is implemented in run method.
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.lang.Thread.start">
            <summary>
            Start the Thread instance
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.lang.Thread.getState">
            <summary>
            Return the State of Thread instance
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:biz.ritter.javapi.lang.Thread.isAlive">
            <summary>
            Thread is started but not died.
            </summary>
            <returns>Thread running true / false</returns>
        </member>
        <member name="T:biz.ritter.javapi.lang.Thread.State">
            <summary>
            A representation of a thread's state. A given thread may only be in one state at a time.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.lang.Thread.State.NEW">
                         * The thread has been created, but has never been started.</member>
        <member name="F:biz.ritter.javapi.lang.Thread.State.RUNNABLE">
                         * The thread may be run.</member>
        <member name="F:biz.ritter.javapi.lang.Thread.State.BLOCKED">
                         * The thread is blocked and waiting for a lock.</member>
        <member name="F:biz.ritter.javapi.lang.Thread.State.WAITING">
                         * The thread is waiting.</member>
        <member name="F:biz.ritter.javapi.lang.Thread.State.TIMED_WAITING">
                         * The thread is waiting for a specified amount of time.</member>
        <member name="F:biz.ritter.javapi.lang.Thread.State.TERMINATED">
                         * The thread has been terminated.</member>
        <member name="M:biz.ritter.javapi.lang.Thread.sleep(System.Int32)">
            <summary>
            Let the Thread instance sleeping
            </summary>
            <param name="millis">
            </param>
        </member>
        <member name="F:biz.ritter.javapi.lang.Throwable.stackTrace">
                     * A fully-expanded representation of the stack trace.</member>
        <member name="F:biz.ritter.javapi.lang.Throwable.cause">
            <summary>
            Cause for this exception, if other it is.
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.lang.Throwable.#ctor">
            <summary>
            Create new Throwable with empty message and no cause
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.lang.Throwable.printStackTrace(biz.ritter.javapi.lang.PrintStream)">
                     * Writes a printable representation of this {@code Throwable}'s stack trace
                     * to the specified print stream. If the {@code Throwable} contains a
                     * {@link #getCause() cause}, the method will be invoked recursively for
                     * the nested {@code Throwable}.
                     *
                     * @param err
                     *            the stream to write the stack trace on.</member>
        <member name="M:biz.ritter.javapi.lang.Throwable.printStackTrace(biz.ritter.javapi.io.PrintWriter)">
                        * Writes a printable representation of this {@code Throwable}'s stack trace
                        * to the specified print writer. If the {@code Throwable} contains a
                        * {@link #getCause() cause}, the method will be invoked recursively for the
                        * nested {@code Throwable}.
                        *
                        * @param err
                        *            the writer to write the stack trace on.</member>
        <member name="M:biz.ritter.javapi.lang.Throwable.getInternalStackTrace">
                     * Returns an array of StackTraceElements. Each StackTraceElement represents
                     * a entry on the stack. Cache the stack trace in the stackTrace field,
                     * returning the cached field when it has already been initialized.
                     *
                     * @return an array of StackTraceElement representing the stack</member>
        <member name="M:biz.ritter.javapi.lang.Throwable.getStackTraceImpl">
            <summary>
            Create a new StackTraceElement []
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:biz.ritter.javapi.lang.Throwable.getCause">
                     * Returns the cause of this {@code Throwable}, or {@code null} if there is
                     * no cause.
                     *
                     * @return Throwable this {@code Throwable}'s cause.</member>
        <member name="M:biz.ritter.javapi.lang.Throwable.countDuplicates(biz.ritter.javapi.lang.StackTraceElement[],biz.ritter.javapi.lang.StackTraceElement[])">
                     * Counts the number of duplicate stack frames, starting from the
                     * end of the stack.
                     *
                     * @param currentStack a stack to compare
                     * @param parentStack a stack to compare
                     *
                     * @return the number of duplicate stack frames.</member>
        <member name="M:biz.ritter.javapi.lang.Throwable.getStackTrace">
                     * Returns the array of stack trace elements of this {@code Throwable}. Each
                     * {@code StackTraceElement} represents an entry in the call stack. The
                     * element at position 0 is the top of the stack, that is, the stack frame
                     * where this {@code Throwable} is thrown.
                     *
                     * @return a copy of the array of {@code StackTraceElement}s representing
                     *         the call stack. Changes in the array obtained from this call will
                     *         not change the call stack stored in this {@code Throwable}.
                     * @see #printStackTrace()</member>
        <member name="T:biz.ritter.javapi.lang.UnsupportedOperationException">
                 * Thrown when an unsupported operation is attempted.</member>
        <member name="M:biz.ritter.javapi.lang.UnsupportedOperationException.#ctor">
                     * Constructs a new {@code UnsupportedOperationException} that includes the
                     * current stack trace.</member>
        <member name="M:biz.ritter.javapi.lang.UnsupportedOperationException.#ctor(System.String)">
                     * Constructs a new {@code UnsupportedOperationException} with the current
                     * stack trace and the specified detail message.
                     *
                     * @param detailMessage
                     *            the detail message for this exception.</member>
        <member name="M:biz.ritter.javapi.lang.UnsupportedOperationException.#ctor(System.String,biz.ritter.javapi.lang.Throwable)">
                     * Constructs a new {@code UnsupportedOperationException} with the current
                     * stack trace, the specified detail message and the specified cause.
                     *
                     * @param message
                     *            the detail message for this exception.
                     * @param cause
                     *            the optional cause of this exception, may be {@code null}.
                     * @since 1.5</member>
        <member name="M:biz.ritter.javapi.lang.UnsupportedOperationException.#ctor(biz.ritter.javapi.lang.Throwable)">
                     * Constructs a new {@code UnsupportedOperationException} with the current
                     * stack trace and the specified cause.
                     *
                     * @param cause
                     *            the optional cause of this exception, may be {@code null}.
                     * @since 1.5</member>
        <member name="M:biz.ritter.javapi.net.Socket.#ctor(System.Net.Sockets.Socket)">
            <summary>
            Is used from ServerSocket to accept clients.
            </summary>
            <param name="newDelegateInstance">new C# Socket instance</param>
        </member>
        <member name="M:biz.ritter.javapi.net.URI.#ctor(System.String)">
                     * Creates a new URI instance according to the given string {@code uri}.
                     *
                     * @param uri
                     *            the textual URI representation to be parsed into a URI object.
                     * @throws URISyntaxException
                     *             if the given string {@code uri} doesn't fit to the
                     *             specification RFC2396 or could not be parsed correctly.</member>
        <member name="M:biz.ritter.javapi.net.URI.#ctor(System.String,System.String,System.String)">
                     * Creates a new URI instance using the given arguments. This constructor
                     * first creates a temporary URI string from the given components. This
                     * string will be parsed later on to create the URI instance.
                     * <p />
                     * {@code [scheme:]scheme-specific-part[#fragment]}
                     *
                     * @param scheme
                     *            the scheme part of the URI.
                     * @param ssp
                     *            the scheme-specific-part of the URI.
                     * @param frag
                     *            the fragment part of the URI.
                     * @throws URISyntaxException
                     *             if the temporary created string doesn't fit to the
                     *             specification RFC2396 or could not be parsed correctly.</member>
        <member name="M:biz.ritter.javapi.net.URI.#ctor(System.String,System.String,System.String,System.Int32,System.String,System.String,System.String)">
                     * Creates a new URI instance using the given arguments. This constructor
                     * first creates a temporary URI string from the given components. This
                     * string will be parsed later on to create the URI instance.
                     * <p />
                     * {@code [scheme:][user-info@]host[:port][path][?query][#fragment]}
                     *
                     * @param scheme
                     *            the scheme part of the URI.
                     * @param userinfo
                     *            the user information of the URI for authentication and
                     *            authorization.
                     * @param host
                     *            the host name of the URI.
                     * @param port
                     *            the port number of the URI.
                     * @param path
                     *            the path to the resource on the host.
                     * @param query
                     *            the query part of the URI to specify parameters for the
                     *            resource.
                     * @param fragment
                     *            the fragment part of the URI.
                     * @throws URISyntaxException
                     *             if the temporary created string doesn't fit to the
                     *             specification RFC2396 or could not be parsed correctly.</member>
        <member name="M:biz.ritter.javapi.net.URI.#ctor(System.String,System.String,System.String,System.String)">
                     * Creates a new URI instance using the given arguments. This constructor
                     * first creates a temporary URI string from the given components. This
                     * string will be parsed later on to create the URI instance.
                     * <p />
                     * {@code [scheme:]host[path][#fragment]}
                     *
                     * @param scheme
                     *            the scheme part of the URI.
                     * @param host
                     *            the host name of the URI.
                     * @param path
                     *            the path to the resource on the host.
                     * @param fragment
                     *            the fragment part of the URI.
                     * @throws URISyntaxException
                     *             if the temporary created string doesn't fit to the
                     *             specification RFC2396 or could not be parsed correctly.</member>
        <member name="M:biz.ritter.javapi.net.URI.#ctor(System.String,System.String,System.String,System.String,System.String)">
                     * Creates a new URI instance using the given arguments. This constructor
                     * first creates a temporary URI string from the given components. This
                     * string will be parsed later on to create the URI instance.
                     * <p />
                     * {@code [scheme:][//authority][path][?query][#fragment]}
                     *
                     * @param scheme
                     *            the scheme part of the URI.
                     * @param authority
                     *            the authority part of the URI.
                     * @param path
                     *            the path to the resource on the host.
                     * @param query
                     *            the query part of the URI to specify parameters for the
                     *            resource.
                     * @param fragment
                     *            the fragment part of the URI.
                     * @throws URISyntaxException
                     *             if the temporary created string doesn't fit to the
                     *             specification RFC2396 or could not be parsed correctly.</member>
        <member name="M:biz.ritter.javapi.net.URI.create(System.String)">
                     * Parses the given argument {@code uri} and creates an appropriate URI
                     * instance.
                     *
                     * @param uri
                     *            the string which has to be parsed to create the URI instance.
                     * @return the created instance representing the given URI.</member>
        <member name="M:biz.ritter.javapi.net.URI.ToString">
                     * Returns the textual string representation of this URI instance.
                     *
                     * @return the textual string representation of this URI.</member>
        <member name="M:biz.ritter.javapi.net.URI.toURL">
                     * Converts this URI instance to a URL.
                     *
                     * @return the created URL representing the same resource as this URI.
                     * @throws MalformedURLException
                     *             if an error occurs while creating the URL or no protocol
                     *             handler could be found.</member>
        <member name="T:biz.ritter.javapi.util.AbstractList`1">
                 * {@code AbstractList} is an abstract implementation of the {@code List} interface, optimized
                 * for a backing store which supports random access. This implementation does
                 * not support adding or replacing. A subclass must implement the abstract
                 * methods {@code get()} and {@code size()}, and to create a
                 * modifiable {@code List} it's necessary to override the {@code add()} method that
                 * currently throws an {@code UnsupportedOperationException}.
                 *
                 * @since 1.2</member>
        <member name="F:biz.ritter.javapi.util.AbstractList`1.modCount">
                     * A counter for changes to the list.</member>
        <member name="M:biz.ritter.javapi.util.AbstractList`1.#ctor">
                     * Constructs a new instance of this AbstractList.</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.util.AbstractList`1.add(System.Int32,`0)-->
        <member name="M:biz.ritter.javapi.util.AbstractList`1.add(`0)">
                     * Adds the specified object at the end of this List.
                     *
                     *
                     * @param object
                     *            the object to add
                     * @return true
                     *
                     * @throws UnsupportedOperationException
                     *                if adding to this List is not supported
                     * @throws ClassCastException
                     *                if the class of the object is inappropriate for this
                     *                List
                     * @throws IllegalArgumentException
                     *                if the object cannot be added to this List</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.util.AbstractList`1.addAll(System.Int32,biz.ritter.javapi.util.Collection{`0})-->
        <member name="M:biz.ritter.javapi.util.AbstractList`1.clear">
                     * Removes all elements from this list, leaving it empty.
                     *
                     * @throws UnsupportedOperationException
                     *             if removing from this list is not supported.
                     * @see List#isEmpty
                     * @see List#size</member>
        <member name="M:biz.ritter.javapi.util.AbstractList`1.Equals(System.Object)">
                     * Compares the specified object to this list and return true if they are
                     * equal. Two lists are equal when they both contain the same objects in the
                     * same order.
                     *
                     * @param object
                     *            the object to compare to this object.
                     * @return {@code true} if the specified object is equal to this list,
                     *         {@code false} otherwise.
                     * @see #hashCode</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.util.AbstractList`1.get(System.Int32)-->
        <member name="M:biz.ritter.javapi.util.AbstractList`1.GetHashCode">
                     * Returns the hash code of this list. The hash code is calculated by taking
                     * each element's hashcode into account.
                     *
                     * @return the hash code.
                     * @see #equals
                     * @see List#hashCode()</member>
        <member name="M:biz.ritter.javapi.util.AbstractList`1.indexOf(System.Object)">
                     * Searches this list for the specified object and returns the index of the
                     * first occurrence.
                     *
                     * @param object
                     *            the object to search for.
                     * @return the index of the first occurrence of the object, or -1 if it was
                     *         not found.</member>
        <member name="M:biz.ritter.javapi.util.AbstractList`1.iterator">
                     * Returns an iterator on the elements of this list. The elements are
                     * iterated in the same order as they occur in the list.
                     *
                     * @return an iterator on the elements of this list.
                     * @see Iterator</member>
        <member name="M:biz.ritter.javapi.util.AbstractList`1.lastIndexOf(System.Object)">
                     * Searches this list for the specified object and returns the index of the
                     * last occurrence.
                     *
                     * @param object
                     *            the object to search for.
                     * @return the index of the last occurrence of the object, or -1 if the
                     *         object was not found.</member>
        <member name="M:biz.ritter.javapi.util.AbstractList`1.listIterator">
                     * Returns a ListIterator on the elements of this list. The elements are
                     * iterated in the same order that they occur in the list.
                     *
                     * @return a ListIterator on the elements of this list
                     * @see ListIterator</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.util.AbstractList`1.listIterator(System.Int32)-->
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.util.AbstractList`1.remove(System.Int32)-->
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.util.AbstractList`1.removeRange(System.Int32,System.Int32)-->
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.util.AbstractList`1.set(System.Int32,`0)-->
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.util.AbstractList`1.subList(System.Int32,System.Int32)-->
        <member name="M:biz.ritter.javapi.util.AbstractList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get the IEnumerator instance.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:biz.ritter.javapi.util.AbstractList`1.GetEnumerator">
            <summary>
            Get the IEnemurator instance for this wrapped java.util.Iterator.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="T:biz.ritter.javapi.util.AbstractMap`2">
            <summary>
            </summary>
            <remarks>
            Implementation details:
            <code>
            +-Class--------------+
            |     Object         |----------------------------------------------------+
            +--------------------+                                                    |
            |            +-Interface-+                                       |
            Java           | Map       |                                     .net
            |            +-----------+                                       |
            +-Class--------------+     |                                              |
            |  AbstractMap       |-----+                                              |
            +--------------------+     |                       +-Interface---+        |
            |              JavApi                     | IDictionary |        |
            |                 |                       +-------------+        |
            +--------------------+     |                              |      +-Class-----------+
            | HashMap            |     +------------------------------+------|    Dictionary   |
            +--------------------+                                           +-----------------+
            </code></remarks>
        </member>
        <!--FIXME: Invalid documentation markup was found for member T:biz.ritter.javapi.util.AbstractMap`2.SimpleImmutableEntry`2-->
        <member name="M:biz.ritter.javapi.util.AbstractMap`2.SimpleImmutableEntry`2.#ctor(`2,`3)">
                         * Constructs a new instance by key and value.
                         *
                         * @param theKey
                         *            the key
                         * @param theValue
                         *            the value</member>
        <member name="M:biz.ritter.javapi.util.AbstractMap`2.SimpleImmutableEntry`2.#ctor(biz.ritter.javapi.util.MapNS.Entry{`2,`3})">
                         * Constructs a new instance by an entry
                         *
                         * @param entry
                         *            the entry</member>
        <member name="M:biz.ritter.javapi.util.AbstractMap`2.SimpleImmutableEntry`2.getKey">
                         * {@inheritDoc}
                         *
                         * @see java.util.Map.Entry#getKey()</member>
        <member name="M:biz.ritter.javapi.util.AbstractMap`2.SimpleImmutableEntry`2.getValue">
                         * {@inheritDoc}
                         *
                         * @see java.util.Map.Entry#getValue()</member>
        <member name="M:biz.ritter.javapi.util.AbstractMap`2.SimpleImmutableEntry`2.setValue(`3)">
                         * Throws an UnsupportedOperationException.
                         *
                         * @param object
                         *            new value
                         * @return (Does not)
                         * @throws UnsupportedOperationException
                         *             always
                         *
                         * @see java.util.Map.Entry#setValue(java.lang.Object)</member>
        <member name="M:biz.ritter.javapi.util.AbstractMap`2.SimpleImmutableEntry`2.Equals(System.Object)">
                         * Answers whether the object is equal to this entry. This works across
                         * all kinds of the Map.Entry interface.
                         *
                         * @see java.lang.Object#equals(java.lang.Object)</member>
        <member name="M:biz.ritter.javapi.util.AbstractMap`2.SimpleImmutableEntry`2.GetHashCode">
                         * Answers the hash code of this entry.
                         *
                         * @see java.lang.Object#hashCode()</member>
        <member name="M:biz.ritter.javapi.util.AbstractMap`2.SimpleImmutableEntry`2.ToString">
                         * Answers a String representation of this entry.
                         *
                         * @see java.lang.Object#toString()</member>
        <member name="T:biz.ritter.javapi.util.AbstractSequentialList`1">
                 * AbstractSequentialList is an abstract implementation of the List interface.
                 * This implementation does not support adding. A subclass must implement the
                 * abstract method listIterator().
                 *
                 * @since 1.2</member>
        <member name="M:biz.ritter.javapi.util.AbstractSequentialList`1.#ctor">
                     * Constructs a new instance of this AbstractSequentialList.</member>
        <member name="M:biz.ritter.javapi.util.AbstractSequentialList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get the IEnumerator instance.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:biz.ritter.javapi.util.AbstractSequentialList`1.GetEnumerator">
            <summary>
            Get the IEnemurator instance for this wrapped java.util.Iterator.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="T:biz.ritter.javapi.util.AbstractSet`1">
                 * An AbstractSet is an abstract implementation of the Set interface. This
                 * implementation does not support adding. A subclass must implement the
                 * abstract methods iterator() and size().
                 *
                 * @since 1.2</member>
        <member name="M:biz.ritter.javapi.util.AbstractSet`1.#ctor">
                     * Constructs a new instance of this AbstractSet.</member>
        <member name="M:biz.ritter.javapi.util.AbstractSet`1.Equals(System.Object)">
                     * Compares the specified object to this Set and returns true if they are
                     * equal. The object must be an instance of Set and contain the same
                     * objects.
                     *
                     * @param object
                     *            the object to compare with this set.
                     * @return {@code true} if the specified object is equal to this set,
                     *         {@code false} otherwise
                     * @see #hashCode</member>
        <member name="M:biz.ritter.javapi.util.AbstractSet`1.GetHashCode">
                     * Returns the hash code for this set. Two set which are equal must return
                     * the same value. This implementation calculates the hash code by adding
                     * each element's hash code.
                     *
                     * @return the hash code of this set.
                     * @see #equals</member>
        <member name="M:biz.ritter.javapi.util.AbstractSet`1.removeAll(biz.ritter.javapi.util.Collection{`0})">
                     * Removes all occurrences in this collection which are contained in the
                     * specified collection.
                     *
                     * @param collection
                     *            the collection of objects to remove.
                     * @return {@code true} if this collection was modified, {@code false}
                     *         otherwise.
                     * @throws UnsupportedOperationException
                     *                if removing from this collection is not supported.</member>
        <member name="M:biz.ritter.javapi.util.AbstractSet`1.containsAll(biz.ritter.javapi.util.Collection{`0})">
                     * Searches this set for all objects in the specified collection.
                     *
                     * @param collection
                     *            the collection of objects.
                     * @return {@code true} if all objects in the specified collection are
                     *         elements of this set, {@code false} otherwise.</member>
        <member name="M:biz.ritter.javapi.util.AbstractSet`1.retainAll(biz.ritter.javapi.util.Collection{`0})">
                     * Removes all objects from this set that are not contained in the specified
                     * collection.
                     *
                     * @param collection
                     *            the collection of objects to retain.
                     * @return {@code true} if this set was modified, {@code false} otherwise.
                     * @throws UnsupportedOperationException
                     *             when removing from this set is not supported.</member>
        <member name="T:biz.ritter.javapi.util.ArrayList`1">
                 * ArrayList is an implementation of {@link List}, backed by an array. All
                 * optional operations adding, removing, and replacing are supported. The
                 * elements can be any objects.
                 *
                 * @since 1.2</member>
        <member name="M:biz.ritter.javapi.util.ArrayList`1.#ctor">
                     * Constructs a new instance of {@code ArrayList} with ten capacity.</member>
        <member name="M:biz.ritter.javapi.util.ArrayList`1.#ctor(System.Int32)">
                     * Constructs a new instance of {@code ArrayList} with the specified
                     * capacity.
                     *
                     * @param capacity
                     *            the initial capacity of this {@code ArrayList}.</member>
        <member name="M:biz.ritter.javapi.util.ArrayList`1.#ctor(biz.ritter.javapi.util.Collection{`0})">
                     * Constructs a new instance of {@code ArrayList} containing the elements of
                     * the specified collection. The initial size of the {@code ArrayList} will
                     * be 10% larger than the size of the specified collection.
                     *
                     * @param collection
                     *            the collection of elements to add.</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.util.ArrayList`1.add(System.Int32,`0)-->
        <member name="M:biz.ritter.javapi.util.ArrayList`1.add(`0)">
                     * Adds the specified object at the end of this {@code ArrayList}.
                     *
                     * @param object
                     *            the object to add.
                     * @return always true</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.util.ArrayList`1.addAll(System.Int32,biz.ritter.javapi.util.Collection{`0})-->
        <member name="M:biz.ritter.javapi.util.ArrayList`1.addAll(biz.ritter.javapi.util.Collection{`0})">
                     * Adds the objects in the specified collection to this {@code ArrayList}.
                     *
                     * @param collection
                     *            the collection of objects.
                     * @return {@code true} if this {@code ArrayList} is modified, {@code false}
                     *         otherwise.</member>
        <member name="M:biz.ritter.javapi.util.ArrayList`1.clear">
                     * Removes all elements from this {@code ArrayList}, leaving it empty.
                     *
                     * @see #isEmpty
                     * @see #size</member>
        <member name="M:biz.ritter.javapi.util.ArrayList`1.clone">
                     * Returns a new {@code ArrayList} with the same elements, the same size and
                     * the same capacity as this {@code ArrayList}.
                     *
                     * @return a shallow copy of this {@code ArrayList}
                     * @see java.lang.Cloneable</member>
        <member name="M:biz.ritter.javapi.util.ArrayList`1.contains(System.Object)">
                     * Searches this {@code ArrayList} for the specified object.
                     *
                     * @param object
                     *            the object to search for.
                     * @return {@code true} if {@code object} is an element of this
                     *         {@code ArrayList}, {@code false} otherwise</member>
        <member name="M:biz.ritter.javapi.util.ArrayList`1.ensureCapacity(System.Int32)">
                     * Ensures that after this operation the {@code ArrayList} can hold the
                     * specified number of elements without further growing.
                     *
                     * @param minimumCapacity
                     *            the minimum capacity asked for.</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.util.ArrayList`1.remove(System.Int32)-->
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.util.ArrayList`1.removeRange(System.Int32,System.Int32)-->
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.util.ArrayList`1.set(System.Int32,`0)-->
        <member name="M:biz.ritter.javapi.util.ArrayList`1.size">
                     * Returns the number of elements in this {@code ArrayList}.
                     *
                     * @return the number of elements in this {@code ArrayList}.</member>
        <member name="M:biz.ritter.javapi.util.ArrayList`1.toArray">
                     * Returns a new array containing all elements contained in this
                     * {@code ArrayList}.
                     *
                     * @return an array of the elements from this {@code ArrayList}</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.util.ArrayList`1.trimToSize-->
        <member name="F:biz.ritter.javapi.util.Calendar.JANUARY">
                 * Value of the {@code MONTH} field indicating the first month of the
                 * year.</member>
        <member name="F:biz.ritter.javapi.util.Calendar.FEBRUARY">
                     * Value of the {@code MONTH} field indicating the second month of
                     * the year.</member>
        <member name="F:biz.ritter.javapi.util.Calendar.MARCH">
                     * Value of the {@code MONTH} field indicating the third month of the
                     * year.</member>
        <member name="F:biz.ritter.javapi.util.Calendar.APRIL">
                     * Value of the {@code MONTH} field indicating the fourth month of
                     * the year.</member>
        <member name="F:biz.ritter.javapi.util.Calendar.MAY">
                     * Value of the {@code MONTH} field indicating the fifth month of the
                     * year.</member>
        <member name="F:biz.ritter.javapi.util.Calendar.JUNE">
                     * Value of the {@code MONTH} field indicating the sixth month of the
                     * year.</member>
        <member name="F:biz.ritter.javapi.util.Calendar.JULY">
                     * Value of the {@code MONTH} field indicating the seventh month of
                     * the year.</member>
        <member name="F:biz.ritter.javapi.util.Calendar.AUGUST">
                     * Value of the {@code MONTH} field indicating the eighth month of
                     * the year.</member>
        <member name="F:biz.ritter.javapi.util.Calendar.SEPTEMBER">
                     * Value of the {@code MONTH} field indicating the ninth month of the
                     * year.</member>
        <member name="F:biz.ritter.javapi.util.Calendar.OCTOBER">
                     * Value of the {@code MONTH} field indicating the tenth month of the
                     * year.</member>
        <member name="F:biz.ritter.javapi.util.Calendar.NOVEMBER">
                     * Value of the {@code MONTH} field indicating the eleventh month of
                     * the year.</member>
        <member name="F:biz.ritter.javapi.util.Calendar.DECEMBER">
                     * Value of the {@code MONTH} field indicating the twelfth month of
                     * the year.</member>
        <member name="F:biz.ritter.javapi.util.Calendar.UNDECIMBER">
                     * Value of the {@code MONTH} field indicating the thirteenth month
                     * of the year. Although {@code GregorianCalendar} does not use this
                     * value, lunar calendars do.</member>
        <member name="F:biz.ritter.javapi.util.Calendar.SUNDAY">
                     * Value of the {@code DAY_OF_WEEK} field indicating Sunday.</member>
        <member name="F:biz.ritter.javapi.util.Calendar.MONDAY">
                     * Value of the {@code DAY_OF_WEEK} field indicating Monday.</member>
        <member name="F:biz.ritter.javapi.util.Calendar.TUESDAY">
                     * Value of the {@code DAY_OF_WEEK} field indicating Tuesday.</member>
        <member name="F:biz.ritter.javapi.util.Calendar.WEDNESDAY">
                     * Value of the {@code DAY_OF_WEEK} field indicating Wednesday.</member>
        <member name="F:biz.ritter.javapi.util.Calendar.THURSDAY">
                     * Value of the {@code DAY_OF_WEEK} field indicating Thursday.</member>
        <member name="F:biz.ritter.javapi.util.Calendar.FRIDAY">
                     * Value of the {@code DAY_OF_WEEK} field indicating Friday.</member>
        <member name="F:biz.ritter.javapi.util.Calendar.SATURDAY">
                     * Value of the {@code DAY_OF_WEEK} field indicating Saturday.</member>
        <member name="F:biz.ritter.javapi.util.Calendar.ERA">
                     * Field number for {@code get} and {@code set} indicating the
                     * era, e.g., AD or BC in the Julian calendar. This is a calendar-specific
                     * value; see subclass documentation.
                     *
                     * @see GregorianCalendar#AD
                     * @see GregorianCalendar#BC</member>
        <member name="F:biz.ritter.javapi.util.Calendar.YEAR">
                     * Field number for {@code get} and {@code set} indicating the
                     * year. This is a calendar-specific value; see subclass documentation.</member>
        <member name="F:biz.ritter.javapi.util.Calendar.MONTH">
                     * Field number for {@code get} and {@code set} indicating the
                     * month. This is a calendar-specific value. The first month of the year is
                     * {@code JANUARY}; the last depends on the number of months in a
                     * year.
                     *
                     * @see #JANUARY
                     * @see #FEBRUARY
                     * @see #MARCH
                     * @see #APRIL
                     * @see #MAY
                     * @see #JUNE
                     * @see #JULY
                     * @see #AUGUST
                     * @see #SEPTEMBER
                     * @see #OCTOBER
                     * @see #NOVEMBER
                     * @see #DECEMBER
                     * @see #UNDECIMBER</member>
        <member name="F:biz.ritter.javapi.util.Calendar.WEEK_OF_YEAR">
                     * Field number for {@code get} and {@code set} indicating the
                     * week number within the current year. The first week of the year, as
                     * defined by {@code getFirstDayOfWeek()} and
                     * {@code getMinimalDaysInFirstWeek()}, has value 1. Subclasses
                     * define the value of {@code WEEK_OF_YEAR} for days before the first
                     * week of the year.
                     *
                     * @see #getFirstDayOfWeek
                     * @see #getMinimalDaysInFirstWeek</member>
        <member name="F:biz.ritter.javapi.util.Calendar.WEEK_OF_MONTH">
                     * Field number for {@code get} and {@code set} indicating the
                     * week number within the current month. The first week of the month, as
                     * defined by {@code getFirstDayOfWeek()} and
                     * {@code getMinimalDaysInFirstWeek()}, has value 1. Subclasses
                     * define the value of {@code WEEK_OF_MONTH} for days before the
                     * first week of the month.
                     *
                     * @see #getFirstDayOfWeek
                     * @see #getMinimalDaysInFirstWeek</member>
        <member name="F:biz.ritter.javapi.util.Calendar.DATE">
                     * Field number for {@code get} and {@code set} indicating the
                     * day of the month. This is a synonym for {@code DAY_OF_MONTH}. The
                     * first day of the month has value 1.
                     *
                     * @see #DAY_OF_MONTH</member>
        <member name="F:biz.ritter.javapi.util.Calendar.DAY_OF_MONTH">
                     * Field number for {@code get} and {@code set} indicating the
                     * day of the month. This is a synonym for {@code DATE}. The first
                     * day of the month has value 1.
                     *
                     * @see #DATE</member>
        <member name="F:biz.ritter.javapi.util.Calendar.DAY_OF_YEAR">
                     * Field number for {@code get} and {@code set} indicating the
                     * day number within the current year. The first day of the year has value
                     * 1.</member>
        <member name="F:biz.ritter.javapi.util.Calendar.DAY_OF_WEEK">
                     * Field number for {@code get} and {@code set} indicating the
                     * day of the week. This field takes values {@code SUNDAY},
                     * {@code MONDAY}, {@code TUESDAY}, {@code WEDNESDAY},
                     * {@code THURSDAY}, {@code FRIDAY}, and
                     * {@code SATURDAY}.
                     *
                     * @see #SUNDAY
                     * @see #MONDAY
                     * @see #TUESDAY
                     * @see #WEDNESDAY
                     * @see #THURSDAY
                     * @see #FRIDAY
                     * @see #SATURDAY</member>
        <member name="F:biz.ritter.javapi.util.Calendar.DAY_OF_WEEK_IN_MONTH">
                     * Field number for {@code get} and {@code set} indicating the
                     * ordinal number of the day of the week within the current month. Together
                     * with the {@code DAY_OF_WEEK} field, this uniquely specifies a day
                     * within a month. Unlike {@code WEEK_OF_MONTH} and
                     * {@code WEEK_OF_YEAR}, this field's value does <em>not</em>
                     * depend on {@code getFirstDayOfWeek()} or
                     * {@code getMinimalDaysInFirstWeek()}. {@code DAY_OF_MONTH 1}
                     * through {@code 7} always correspond to <code>DAY_OF_WEEK_IN_MONTH
                     * 1</code>;
                     * {@code 8} through {@code 15} correspond to
                     * {@code DAY_OF_WEEK_IN_MONTH 2}, and so on.
                     * {@code DAY_OF_WEEK_IN_MONTH 0} indicates the week before
                     * {@code DAY_OF_WEEK_IN_MONTH 1}. Negative values count back from
                     * the end of the month, so the last Sunday of a month is specified as
                     * {@code DAY_OF_WEEK = SUNDAY, DAY_OF_WEEK_IN_MONTH = -1}. Because
                     * negative values count backward they will usually be aligned differently
                     * within the month than positive values. For example, if a month has 31
                     * days, {@code DAY_OF_WEEK_IN_MONTH -1} will overlap
                     * {@code DAY_OF_WEEK_IN_MONTH 5} and the end of {@code 4}.
                     *
                     * @see #DAY_OF_WEEK
                     * @see #WEEK_OF_MONTH</member>
        <member name="F:biz.ritter.javapi.util.Calendar.AM_PM">
                     * Field number for {@code get} and {@code set} indicating
                     * whether the {@code HOUR} is before or after noon. E.g., at
                     * 10:04:15.250 PM the {@code AM_PM} is {@code PM}.
                     *
                     * @see #AM
                     * @see #PM
                     * @see #HOUR</member>
        <member name="F:biz.ritter.javapi.util.Calendar.AM">
                     * Value of the {@code AM_PM} field indicating the period of the day
                     * from midnight to just before noon.</member>
        <member name="F:biz.ritter.javapi.util.Calendar.PM">
                     * Value of the {@code AM_PM} field indicating the period of the day
                     * from noon to just before midnight.</member>
        <member name="F:biz.ritter.javapi.util.Calendar.HOUR">
                     * Field number for {@code get} and {@code set} indicating the
                     * hour of the morning or afternoon. {@code HOUR} is used for the
                     * 12-hour clock. E.g., at 10:04:15.250 PM the {@code HOUR} is 10.
                     *
                     * @see #AM_PM
                     * @see #HOUR_OF_DAY</member>
        <member name="F:biz.ritter.javapi.util.Calendar.HOUR_OF_DAY">
                     * Field number for {@code get} and {@code set} indicating the
                     * hour of the day. {@code HOUR_OF_DAY} is used for the 24-hour
                     * clock. E.g., at 10:04:15.250 PM the {@code HOUR_OF_DAY} is 22.
                     *
                     * @see #HOUR</member>
        <member name="F:biz.ritter.javapi.util.Calendar.MINUTE">
                     * Field number for {@code get} and {@code set} indicating the
                     * minute within the hour. E.g., at 10:04:15.250 PM the {@code MINUTE}
                     * is 4.</member>
        <member name="F:biz.ritter.javapi.util.Calendar.SECOND">
                     * Field number for {@code get} and {@code set} indicating the
                     * second within the minute. E.g., at 10:04:15.250 PM the
                     * {@code SECOND} is 15.</member>
        <member name="F:biz.ritter.javapi.util.Calendar.MILLISECOND">
                     * Field number for {@code get} and {@code set} indicating the
                     * millisecond within the second. E.g., at 10:04:15.250 PM the
                     * {@code MILLISECOND} is 250.</member>
        <member name="T:biz.ritter.javapi.util.Collection`1">
                 * {@code Collection} is the root of the collection hierarchy. It defines operations on
                 * data collections and the behavior that they will have in all implementations
                 * of {@code Collection}s.
                 *
                 * All direct or indirect implementations of {@code Collection} should implement at
                 * least two constructors. One with no parameters which creates an empty
                 * collection and one with a parameter of type {@code Collection}. This second
                 * constructor can be used to create a collection of different type as the
                 * initial collection but with the same elements. Implementations of {@code Collection}
                 * cannot be forced to implement these two constructors but at least all
                 * implementations under {@code java.util} do.
                 *
                 * Methods that change the content of a collection throw an
                 * {@code UnsupportedOperationException} if the underlying collection does not
                 * support that operation, though it's not mandatory to throw such an {@code Exception}
                 * in cases where the requested operation would not change the collection. In
                 * these cases it's up to the implementation whether it throws an
                 * {@code UnsupportedOperationException} or not.
                 *
                 * Methods marked with (optional) can throw an
                 * {@code UnsupportedOperationException} if the underlying collection doesn't
                 * support that method.</member>
        <member name="M:biz.ritter.javapi.util.Collection`1.add(`0)">
                     * Attempts to add {@code object} to the contents of this
                     * {@code Collection} (optional).
                     *
                     * After this method finishes successfully it is guaranteed that the object
                     * is contained in the collection.
                     *
                     * If the collection was modified it returns {@code true}, {@code false} if
                     * no changes were made.
                     *
                     * An implementation of {@code Collection} may narrow the set of accepted
                     * objects, but it has to specify this in the documentation. If the object
                     * to be added does not meet this restriction, then an
                     * {@code IllegalArgumentException} is thrown.
                     *
                     * If a collection does not yet contain an object that is to be added and
                     * adding the object fails, this method <i>must</i> throw an appropriate
                     * unchecked Exception. Returning false is not permitted in this case
                     * because it would violate the postcondition that the element will be part
                     * of the collection after this method finishes.
                     *
                     * @param object
                     *            the object to add.
                     * @return {@code true} if this {@code Collection} is
                     *         modified, {@code false} otherwise.
                     *
                     * @throws UnsupportedOperationException
                     *                if adding to this {@code Collection} is not supported.
                     * @throws ClassCastException
                     *                if the class of the object is inappropriate for this
                     *                collection.
                     * @throws IllegalArgumentException
                     *                if the object cannot be added to this {@code Collection}.
                     * @throws NullPointerException
                     *                if null elements cannot be added to the {@code Collection}.</member>
        <member name="M:biz.ritter.javapi.util.Collection`1.addAll(biz.ritter.javapi.util.Collection{`0})">
                     * Attempts to add all of the objects contained in {@code Collection}
                     * to the contents of this {@code Collection} (optional). If the passed {@code Collection}
                     * is changed during the process of adding elements to this {@code Collection}, the
                     * behavior is not defined.
                     *
                     * @param collection
                     *            the {@code Collection} of objects.
                     * @return {@code true} if this {@code Collection} is modified, {@code false}
                     *         otherwise.
                     * @throws UnsupportedOperationException
                     *                if adding to this {@code Collection} is not supported.
                     * @throws ClassCastException
                     *                if the class of an object is inappropriate for this
                     *                {@code Collection}.
                     * @throws IllegalArgumentException
                     *                if an object cannot be added to this {@code Collection}.
                     * @throws NullPointerException
                     *                if {@code collection} is {@code null}, or if it
                     *                contains {@code null} elements and this {@code Collection} does
                     *                not support such elements.</member>
        <member name="M:biz.ritter.javapi.util.Collection`1.clear">
                     * Removes all elements from this {@code Collection}, leaving it empty (optional).
                     *
                     * @throws UnsupportedOperationException
                     *                if removing from this {@code Collection} is not supported.
                     *
                     * @see #isEmpty
                     * @see #size</member>
        <member name="M:biz.ritter.javapi.util.Collection`1.contains(System.Object)">
                     * Tests whether this {@code Collection} contains the specified object. Returns
                     * {@code true} if and only if at least one element {@code elem} in this
                     * {@code Collection} meets following requirement:
                     * {@code (object==null ? elem==null : object.equals(elem))}.
                     *
                     * @param object
                     *            the object to search for.
                     * @return {@code true} if object is an element of this {@code Collection},
                     *         {@code false} otherwise.
                     * @throws ClassCastException
                     *                if the object to look for isn't of the correct
                     *                type.
                     * @throws NullPointerException
                     *                if the object to look for is {@code null} and this
                     *                {@code Collection} doesn't support {@code null} elements.</member>
        <member name="M:biz.ritter.javapi.util.Collection`1.containsAll(biz.ritter.javapi.util.Collection{`0})">
                     * Tests whether this {@code Collection} contains all objects contained in the
                     * specified {@code Collection}. If an element {@code elem} is contained several
                     * times in the specified {@code Collection}, the method returns {@code true} even
                     * if {@code elem} is contained only once in this {@code Collection}.
                     *
                     * @param collection
                     *            the collection of objects.
                     * @return {@code true} if all objects in the specified {@code Collection} are
                     *         elements of this {@code Collection}, {@code false} otherwise.
                     * @throws ClassCastException
                     *                if one or more elements of {@code collection} isn't of the
                     *                correct type.
                     * @throws NullPointerException
                     *                if {@code collection} contains at least one {@code null}
                     *                element and this {@code Collection} doesn't support {@code null}
                     *                elements.
                     * @throws NullPointerException
                     *                if {@code collection} is {@code null}.</member>
        <member name="M:biz.ritter.javapi.util.Collection`1.isEmpty">
                     * Returns if this {@code Collection} contains no elements.
                     *
                     * @return {@code true} if this {@code Collection} has no elements, {@code false}
                     *         otherwise.
                     *
                     * @see #size</member>
        <member name="M:biz.ritter.javapi.util.Collection`1.iterator">
                     * Returns an instance of {@link Iterator} that may be used to access the
                     * objects contained by this {@code Collection}. The order in which the elements are
                     * returned by the iterator is not defined. Only if the instance of the
                     * {@code Collection} has a defined order the elements are returned in that order.
                     *
                     * @return an iterator for accessing the {@code Collection} contents.</member>
        <member name="M:biz.ritter.javapi.util.Collection`1.remove(System.Object)">
                     * Removes one instance of the specified object from this {@code Collection} if one
                     * is contained (optional). The element {@code elem} that is removed
                     * complies with {@code (object==null ? elem==null : object.equals(elem)}.
                     *
                     * @param object
                     *            the object to remove.
                     * @return {@code true} if this {@code Collection} is modified, {@code false}
                     *         otherwise.
                     * @throws UnsupportedOperationException
                     *                if removing from this {@code Collection} is not supported.
                     * @throws ClassCastException
                     *                if the object passed is not of the correct type.
                     * @throws NullPointerException
                     *                if {@code object} is {@code null} and this {@code Collection}
                     *                doesn't support {@code null} elements.</member>
        <member name="M:biz.ritter.javapi.util.Collection`1.removeAll(biz.ritter.javapi.util.Collection{`0})">
                     * Removes all occurrences in this {@code Collection} of each object in the
                     * specified {@code Collection} (optional). After this method returns none of the
                     * elements in the passed {@code Collection} can be found in this {@code Collection}
                     * anymore.
                     *
                     * @param collection
                     *            the collection of objects to remove.
                     * @return {@code true} if this {@code Collection} is modified, {@code false}
                     *         otherwise.
                     *
                     * @throws UnsupportedOperationException
                     *                if removing from this {@code Collection} is not supported.
                     * @throws ClassCastException
                     *                if one or more elements of {@code collection}
                     *                isn't of the correct type.
                     * @throws NullPointerException
                     *                if {@code collection} contains at least one
                     *                {@code null} element and this {@code Collection} doesn't support
                     *                {@code null} elements.
                     * @throws NullPointerException
                     *                if {@code collection} is {@code null}.</member>
        <member name="M:biz.ritter.javapi.util.Collection`1.retainAll(biz.ritter.javapi.util.Collection{`0})">
                     * Removes all objects from this {@code Collection} that are not also found in the
                     * {@code Collection} passed (optional). After this method returns this {@code Collection}
                     * will only contain elements that also can be found in the {@code Collection}
                     * passed to this method.
                     *
                     * @param collection
                     *            the collection of objects to retain.
                     * @return {@code true} if this {@code Collection} is modified, {@code false}
                     *         otherwise.
                     * @throws UnsupportedOperationException
                     *                if removing from this {@code Collection} is not supported.
                     * @throws ClassCastException
                     *                if one or more elements of {@code collection}
                     *                isn't of the correct type.
                     * @throws NullPointerException
                     *                if {@code collection} contains at least one
                     *                {@code null} element and this {@code Collection} doesn't support
                     *                {@code null} elements.
                     * @throws NullPointerException
                     *                if {@code collection} is {@code null}.</member>
        <member name="M:biz.ritter.javapi.util.Collection`1.size">
                     * Returns a count of how many objects this {@code Collection} contains.
                     *
                     * @return how many objects this {@code Collection} contains, or Integer.MAX_VALUE
                     *         if there are more than Integer.MAX_VALUE elements in this
                     *         {@code Collection}.</member>
        <member name="M:biz.ritter.javapi.util.Collection`1.toArray">
                     * Returns a new array containing all elements contained in this {@code Collection}.
                     *
                     * If the implementation has ordered elements it will return the element
                     * array in the same order as an iterator would return them.
                     *
                     * The array returned does not reflect any changes of the {@code Collection}. A new
                     * array is created even if the underlying data structure is already an
                     * array.
                     *
                     * @return an array of the elements from this {@code Collection}.</member>
        <member name="M:biz.ritter.javapi.util.Collection`1.toArray``1(``0[])">
                     * Returns an array containing all elements contained in this {@code Collection}. If
                     * the specified array is large enough to hold the elements, the specified
                     * array is used, otherwise an array of the same type is created. If the
                     * specified array is used and is larger than this {@code Collection}, the array
                     * element following the {@code Collection} elements is set to null.
                     *
                     * If the implementation has ordered elements it will return the element
                     * array in the same order as an iterator would return them.
                     *
                     * {@code toArray(new Object[0])} behaves exactly the same way as
                     * {@code toArray()} does.
                     *
                     * @param array
                     *            the array.
                     * @return an array of the elements from this {@code Collection}.
                     *
                     * @throws ArrayStoreException
                     *                if the type of an element in this {@code Collection} cannot be
                     *                stored in the type of the specified array.</member>
        <member name="T:biz.ritter.javapi.util.Collections`1">
            <summary>
                <c>Collections</c> contains static methods which operate on <c>Collection</c> classes.
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.util.Collections`1.synchronizedSortedMap``2(biz.ritter.javapi.util.SortedMap{``0,``1})">
                     * Returns a wrapper on the specified sorted map which synchronizes all
                     * access to the sorted map.
                     *
                     * @param map
                     *            the sorted map to wrap in a synchronized sorted map.
                     * @return a synchronized sorted map.</member>
        <member name="M:biz.ritter.javapi.util.Collections`1.synchronizedMap``2(biz.ritter.javapi.util.Map{``0,``1})">
                     * Returns a wrapper on the specified map which synchronizes all access to
                     * the map.
                     *
                     * @param map
                     *            the map to wrap in a lock map.
                     * @return a lock Map.</member>
        <member name="F:biz.ritter.javapi.util.Collections`1.EMPTY_SET">
                     * An empty immutable instance of {@link Set}.</member>
        <member name="F:biz.ritter.javapi.util.Collections`1.EMPTY_LIST">
                     * An empty immutable instance of {@link List}.</member>
        <member name="M:biz.ritter.javapi.util.Collections`1.emptyList">
            <summary>
            Return the EMPTY_LIST
            </summary>
            <returns>
            </returns>
            <see cref="F:biz.ritter.javapi.util.Collections{`0}.EMPTY_LIST" />
        </member>
        <member name="M:biz.ritter.javapi.util.Collections`1.nCopies``1(System.Int32,``0)">
                     * Returns a list containing the specified number of the specified element.
                     * The list cannot be modified. The list is serializable.
                     *
                     * @param length
                     *            the size of the returned list.
                     * @param object
                     *            the element to be added {@code length} times to a list.
                     * @return a list containing {@code length} copies of the element.
                     * @throws IllegalArgumentException
                     *             when {@code length &lt; 0}.</member>
        <member name="M:biz.ritter.javapi.util.Collections`1.unmodifiableList``1(biz.ritter.javapi.util.List{``0})">
                     * Returns a wrapper on the specified list which throws an
                     * {@code UnsupportedOperationException} whenever an attempt is made to
                     * modify the list.
                     *
                     * @param list
                     *            the list to wrap in an unmodifiable list.
                     * @return an unmodifiable List.</member>
        <member name="M:biz.ritter.javapi.util.Collections`1.unmodifiableCollection``1(biz.ritter.javapi.util.Collection{``0})">
                     * Returns a wrapper on the specified collection which throws an
                     * {@code UnsupportedOperationException} whenever an attempt is made to
                     * modify the collection.
                     *
                     * @param collection
                     *            the collection to wrap in an unmodifiable collection.
                     * @return an unmodifiable collection.</member>
        <member name="M:biz.ritter.javapi.util.Collections`1.unmodifiableSortedMap``2(biz.ritter.javapi.util.SortedMap{``0,``1})">
                     * Returns a wrapper on the specified sorted map which throws an
                     * {@code UnsupportedOperationException} whenever an attempt is made to
                     * modify the sorted map.
                     *
                     * @param map
                     *            the sorted map to wrap in an unmodifiable sorted map.
                     * @return a unmodifiable sorted map</member>
        <member name="M:biz.ritter.javapi.util.Collections`1.unmodifiableSortedSet``1(biz.ritter.javapi.util.SortedSet{``0})">
                     * Returns a wrapper on the specified sorted set which throws an
                     * {@code UnsupportedOperationException} whenever an attempt is made to
                     * modify the sorted set.
                     *
                     * @param set
                     *            the sorted set to wrap in an unmodifiable sorted set.
                     * @return a unmodifiable sorted set.</member>
        <member name="M:biz.ritter.javapi.util.Collections`1.unmodifiableMap``2(biz.ritter.javapi.util.Map{``0,``1})">
                     * Returns a wrapper on the specified map which throws an
                     * {@code UnsupportedOperationException} whenever an attempt is made to
                     * modify the map.
                     *
                     * @param map
                     *            the map to wrap in an unmodifiable map.
                     * @return a unmodifiable map.</member>
        <member name="M:biz.ritter.javapi.util.Collections`1.unmodifiableSet``1(biz.ritter.javapi.util.Set{``0})">
                     * Returns a wrapper on the specified set which throws an
                     * {@code UnsupportedOperationException} whenever an attempt is made to
                     * modify the set.
                     *
                     * @param set
                     *            the set to wrap in an unmodifiable set.
                     * @return a unmodifiable set</member>
        <member name="M:biz.ritter.javapi.util.Collections`1.singleton``1(``0)">
                     * Returns a set containing the specified element. The set cannot be
                     * modified. The set is serializable.
                     *
                     * @param object
                     *            the element.
                     * @return a set containing the element.</member>
        <member name="M:biz.ritter.javapi.util.Collections`1.reverseOrder``1(biz.ritter.javapi.util.Comparator{``0})">
                     * Returns a {@link Comparator} that reverses the order of the
                     * {@code Comparator} passed. If the {@code Comparator} passed is
                     * {@code null}, then this method is equivalent to {@link #reverseOrder()}.
                     * <p />
                     * The {@code Comparator} that's returned is {@link Serializable} if the
                     * {@code Comparator} passed is serializable or {@code null}.
                     *
                     * @param c
                     *            the {@code Comparator} to reverse or {@code null}.
                     * @return a {@code Comparator} instance.
                     * @see Comparator
                     * @since 1.5</member>
        <member name="M:biz.ritter.javapi.util.Collections`1.reverseOrder``1">
                     * A comparator which reverses the natural order of the elements. The
                     * {@code Comparator} that's returned is {@link Serializable}.
                     *
                     * @return a {@code Comparator} instance.
                     * @see Comparator
                     * @see Comparable
                     * @see Serializable</member>
        <member name="T:biz.ritter.javapi.util.Collections`1.ReverseComparator`1">
                     * This class is a singleton so that equals() and hashCode() work properly.</member>
        <member name="M:biz.ritter.javapi.util.Collections`1.enumeration``1(biz.ritter.javapi.util.Collection{``0})">
                     * Returns an {@code Enumeration} on the specified collection.
                     *
                     * @param collection
                     *            the collection to enumerate.
                     * @return an Enumeration.</member>
        <member name="M:biz.ritter.javapi.util.SynchronizedRandomAccessList`1.writeReplace">
                     * Replaces this SynchronizedRandomAccessList with a SynchronizedList so
                     * that JREs before 1.4 can deserialize this obj without any
                     * problems. This is necessary since RandomAccess API was introduced
                     * only in 1.4.
                     * <p />
                     *
                     * @return SynchronizedList
                     *
                     * @see SynchronizedList#readResolve()</member>
        <member name="M:biz.ritter.javapi.util.SynchronizedList`1.readResolve">
                     * Resolves SynchronizedList instances to SynchronizedRandomAccessList
                     * instances if the underlying list is a Random Access list.
                     * <p>
                     * This is necessary since SynchronizedRandomAccessList instances are
                     * replaced with SynchronizedList instances during serialization for
                     * compliance with JREs before 1.4.
                     * </p>
                     *
                     * @return a SynchronizedList instance if the underlying list implements
                     *         RandomAccess interface, or this same obj if not.
                     *
                     * @see SynchronizedRandomAccessList#writeReplace()</member>
        <member name="M:biz.ritter.javapi.util.UnmodifiableRandomAccessList`1.writeReplace">
                     * Replaces this UnmodifiableRandomAccessList with an UnmodifiableList
                     * so that JREs before 1.4 can deserialize this object without any
                     * problems. This is necessary since RandomAccess API was introduced
                     * only in 1.4.
                     * <p />
                     *
                     * @return UnmodifiableList
                     *
                     * @see UnmodifiableList#readResolve()</member>
        <member name="M:biz.ritter.javapi.util.UnmodifiableList`1.readResolve">
                     * Resolves UnmodifiableList instances to UnmodifiableRandomAccessList
                     * instances if the underlying list is a Random Access list.
                     * <p>
                     * This is necessary since UnmodifiableRandomAccessList instances are
                     * replaced with UnmodifiableList instances during serialization for
                     * compliance with JREs before 1.4.
                     * </p>
                     *
                     * @return an UnmodifiableList instance if the underlying list
                     *         implements RandomAccess interface, or this same object if
                     *         not.
                     *
                     * @see UnmodifiableRandomAccessList#writeReplace()</member>
        <member name="T:biz.ritter.javapi.util.Comparator`1">
                 * A {@code Comparator} is used to compare two objects to determine their ordering with
                 * respect to each other. On a given {@code Collection}, a {@code Comparator} can be used to
                 * obtain a sorted {@code Collection} which is <i>totally ordered</i>. For a {@code Comparator}
                 * to be <i>consistent with equals</i>, its {code #compare(Object, Object)}
                 * method has to return zero for each pair of elements (a,b) where a.equals(b)
                 * holds true. It is recommended that a {@code Comparator} implements
                 * {@link java.io.Serializable}.
                 *
                 * @since 1.2</member>
        <member name="M:biz.ritter.javapi.util.Comparator`1.compare(`0,`0)">
                     * Compares the two specified objects to determine their relative ordering. The ordering
                     * implied by the return value of this method for all possible pairs of
                     * {@code (object1, object2)} should form an <i>equivalence relation</i>.
                     * This means that
                     * <ul>
                     * <li>{@code compare(a,a)} returns zero for all {@code a}</li>
                     * <li>the sign of {@code compare(a,b)} must be the opposite of the sign of {@code
                     * compare(b,a)} for all pairs of (a,b)</li>
                     * <li>From {@code compare(a,b) &gt; 0} and {@code compare(b,c) &gt; 0} it must
                     * follow {@code compare(a,c) &gt; 0} for all possible combinations of {@code
                     * (a,b,c)}</li>
                     * </ul>
                     *
                     * @param object1
                     *            an {@code Object}.
                     * @param object2
                     *            a second {@code Object} to compare with {@code object1}.
                     * @return an integer &lt; 0 if {@code object1} is less than {@code object2}, 0 if they are
                     *         equal, and &gt; 0 if {@code object1} is greater than {@code object2}.
                     * @throws ClassCastException
                     *                if objects are not of the correct type.</member>
        <member name="M:biz.ritter.javapi.util.Comparator`1.equals(System.Object)">
                     * Compares this {@code Comparator} with the specified {@code Object} and indicates whether they
                     * are equal. In order to be equal, {@code object} must represent the same object
                     * as this instance using a class-specific comparison.
                     * <p />
                     * A {@code Comparator} never needs to override this method, but may choose so for
                     * performance reasons.
                     *
                     * @param object
                     *            the {@code Object} to compare with this comparator.
                     * @return boolean {@code true} if specified {@code Object} is the same as this
                     *         {@code Object}, and {@code false} otherwise.
                     * @see Object#hashCode
                     * @see Object#equals</member>
        <member name="T:biz.ritter.javapi.util.ConcurrentModificationException">
                 * An {@code ConcurrentModificationException} is thrown when a Collection is
                 * modified and an existing iterator on the Collection is used to modify the
                 * Collection as well.
                 *
                 * @see java.lang.RuntimeException</member>
        <member name="M:biz.ritter.javapi.util.ConcurrentModificationException.#ctor">
                     * Constructs a new {@code ConcurrentModificationException} with the current
                     * stack trace filled in.</member>
        <member name="M:biz.ritter.javapi.util.ConcurrentModificationException.#ctor(System.String)">
                     * Constructs a new {@code ConcurrentModificationException} with the current
                     * stack trace and message filled in.
                     *
                     * @param detailMessage
                     *           the detail message for the exception.</member>
        <member name="T:biz.ritter.javapi.util.Currency">
                 * This class represents a currency as identified in the ISO 4217 currency
                 * codes.</member>
        <member name="M:biz.ritter.javapi.util.Currency.#ctor(System.Globalization.RegionInfo)">
                     * @param currencyCode</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.util.Currency.getInstance(System.String)-->
        <member name="M:biz.ritter.javapi.util.Currency.getInstance(biz.ritter.javapi.util.Locale)">
                     * Returns the {@code Currency} instance for this {@code Locale}'s country.
                     *
                     * @param locale
                     *            the {@code Locale} of a country.
                     * @return the {@code Currency} used in the country defined by the locale parameter.
                     *
                     * @throws IllegalArgumentException
                     *             if the locale's country is not a supported ISO 3166 Country.</member>
        <member name="M:biz.ritter.javapi.util.Currency.getCurrencyCode">
                     * Returns this {@code Currency}'s ISO 4217 currency code.
                     *
                     * @return this {@code Currency}'s ISO 4217 currency code.</member>
        <member name="M:biz.ritter.javapi.util.Currency.getSymbol">
                     * Returns the symbol for this currency in the default locale. For instance,
                     * if the default locale is the US, the symbol of the US dollar is "$". For
                     * other locales it may be "US$". If no symbol can be determined, the ISO
                     * 4217 currency code of the US dollar is returned.
                     *
                     * @return the symbol for this {@code Currency} in the default {@code Locale}.</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.util.Currency.getSymbol(biz.ritter.javapi.util.Locale)-->
        <member name="M:biz.ritter.javapi.util.Currency.getDefaultFractionDigits">
                     * Returns the default number of fraction digits for this currency. For
                     * instance, the default number of fraction digits for the US dollar is 2.
                     * For the Japanese Yen the number is 0. In the case of pseudo-currencies,
                     * such as IMF Special Drawing Rights, -1 is returned.
                     *
                     * @return the default number of fraction digits for this currency.</member>
        <member name="M:biz.ritter.javapi.util.Currency.ToString">
                     * Returns ISO 4217 currency code.
                     *
                     * @return ISO 4217 currency code.</member>
        <member name="M:biz.ritter.javapi.util.Date.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Create new Date instance with given year, month, day.
            <seealso cref="M:biz.ritter.javapi.util.Calendar.set(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" /></summary>
            <param name="year">
            </param>
            <param name="month">
            </param>
            <param name="day">
            </param>
        </member>
        <member name="M:biz.ritter.javapi.util.Date.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a new Data with given paramerts
            </summary>
            <param name="year">
            </param>
            <param name="month">
            </param>
            <param name="dayOfMonth">
            </param>
            <param name="hour">
            </param>
            <param name="minute">
            </param>
            <param name="second">
            </param>
        </member>
        <member name="M:biz.ritter.javapi.util.Date.getYear">
            <summary>
            The year since 1900
            </summary>
            <returns>Year since 1900</returns>
        </member>
        <member name="M:biz.ritter.javapi.util.Date.getMonth">
            <summary>
            The month, based on zero for January
            </summary>
            <returns>Month</returns>
        </member>
        <member name="M:biz.ritter.javapi.util.Date.getHours">
            <summary>
            The hour
            </summary>
            <returns>Hour</returns>
        </member>
        <member name="M:biz.ritter.javapi.util.Date.getMinutes">
            <summary>
            The minute
            </summary>
            <returns>Minute</returns>
        </member>
        <member name="M:biz.ritter.javapi.util.Date.getSeconds">
            <summary>
            The second
            </summary>
            <returns>Second</returns>
        </member>
        <member name="M:biz.ritter.javapi.util.Date.getDate">
            <summary>
            The day of month.
            </summary>
            <returns>Day of month</returns>
        </member>
        <!--FIXME: Invalid documentation markup was found for member T:biz.ritter.javapi.util.Deque`1-->
        <member name="M:biz.ritter.javapi.util.Deque`1.addFirst(`0)">
                     * Inserts an element at the head of this deque if it dose not violate size
                     * limit immediately. It is better to use offerFirst(E) if a deque is
                     * size-limited.
                     *
                     * @param e
                     *            the element
                     * @throws IllegalStateException
                     *             if it can not add now due to size limit
                     * @throws ClassCastException
                     *             if the class of element can not be added into this deque
                     * @throws NullPointerException
                     *             if the element is null and the deque can not contain null
                     *             element
                     * @throws IllegalArgumentException
                     *             if the element can not be added due to some property.</member>
        <member name="M:biz.ritter.javapi.util.Deque`1.addLast(`0)">
                     * Inserts an element at the tail of this deque if it dose not violate size
                     * limit immediately. It is better to use offerLast(E) if a deque is
                     * size-limited.
                     *
                     * @param e
                     *            the element
                     * @throws IllegalStateException
                     *             if it can not add now due to size limit
                     * @throws ClassCastException
                     *             if the class of element can not be added into this deque
                     * @throws NullPointerException
                     *             if the element is null and the deque can not contain null
                     *             element
                     * @throws IllegalArgumentException
                     *             if the element can not be added due to some property.</member>
        <member name="M:biz.ritter.javapi.util.Deque`1.offerFirst(`0)">
                     * Inserts an element at the head of this deque unless it would violate size
                     * limit. It is better than the addFirst(E) method in a size-limited deque,
                     * because the latter one may fail to add the element only by throwing an
                     * exception.
                     *
                     * @param e
                     *            the element
                     * @return true if the operation succeeds or false if it fails.
                     * @throws ClassCastException
                     *             if the class of element can not be added into this deque
                     * @throws NullPointerException
                     *             if the element is null and the deque can not contain null
                     *             element
                     * @throws IllegalArgumentException
                     *             if the element can not be added due to some property.</member>
        <member name="M:biz.ritter.javapi.util.Deque`1.offerLast(`0)">
                     * Inserts an element at the tail of this deque unless it would violate size
                     * limit. It is better than the addLast(E) method in a size-limited deque,
                     * because the latter one may fail to add the element only by throwing an
                     * exception.
                     *
                     * @param e
                     *            the element
                     * @return true if the operation succeeds or false if it fails
                     * @throws ClassCastException
                     *             if the class of element can not be added into this deque
                     * @throws NullPointerException
                     *             if the element is null and the deque can not contain null
                     *             element
                     * @throws IllegalArgumentException
                     *             if the element can not be added due to some property</member>
        <member name="M:biz.ritter.javapi.util.Deque`1.removeFirst">
                     * Gets and removes the head element of this deque. This method throws an
                     * exception if the deque is empty.
                     *
                     * @return the head element
                     * @throws NoSuchElementException
                     *             if the deque is empty</member>
        <member name="M:biz.ritter.javapi.util.Deque`1.removeLast">
                     * Gets and removes the tail element of this deque. This method throws an
                     * exception if the deque is empty.
                     *
                     * @return the tail element
                     * @throws NoSuchElementException
                     *             if the deque is empty</member>
        <member name="M:biz.ritter.javapi.util.Deque`1.pollFirst">
                     * Gets and removes the head element of this deque. This method returns null
                     * if the deque is empty.
                     *
                     * @return the head element or null if the deque is empty</member>
        <member name="M:biz.ritter.javapi.util.Deque`1.pollLast">
                     * Gets and removes the tail element of this deque. This method returns null
                     * if the deque is empty.
                     *
                     * @return the tail element or null if the deque is empty</member>
        <member name="M:biz.ritter.javapi.util.Deque`1.getFirst">
                     * Gets but not removes the head element of this deque. This method throws
                     * an exception if the deque is empty.
                     *
                     * @return the head element
                     * @throws NoSuchElementException
                     *             if the deque is empty</member>
        <member name="M:biz.ritter.javapi.util.Deque`1.getLast">
                     * Gets but not removes the tail element of this deque. This method throws
                     * an exception if the deque is empty.
                     *
                     * @return the tail element
                     * @throws NoSuchElementException
                     *             if the deque is empty</member>
        <member name="M:biz.ritter.javapi.util.Deque`1.peekFirst">
                     * Gets but not removes the head element of this deque. This method returns
                     * null if the deque is empty.
                     *
                     * @return the head element or null if the deque is empty</member>
        <member name="M:biz.ritter.javapi.util.Deque`1.peekLast">
                     * Gets but not removes the tail element of this deque. This method returns
                     * null if the deque is empty.
                     *
                     * @return the tail element or null if the deque is empty</member>
        <member name="M:biz.ritter.javapi.util.Deque`1.removeFirstOccurrence(System.Object)">
                     * Removes the first equivalent element of the specified object. If the
                     * deque does not contain the element, it is unchanged and returns false.
                     *
                     * @param o
                     *            the element to be removed
                     * @return true if the operation succeeds or false if the deque does not
                     *         contain the element.
                     * @throws ClassCastException
                     *             if the class of the element is incompatible with the deque
                     * @throws NullPointerException
                     *             if the element is null and the deque can not contain null
                     *             element</member>
        <member name="M:biz.ritter.javapi.util.Deque`1.removeLastOccurrence(System.Object)">
                     * Removes the last equivalent element of the specified object. If the deque
                     * does not contain the element, it is unchanged and returns false.
                     *
                     * @param o
                     *            the element to be removed
                     * @return true if the operation succeeds or false if the deque does not
                     *         contain the element.
                     * @throws ClassCastException
                     *             if the class of the element is incompatible with the deque
                     * @throws NullPointerException
                     *             if the element is null and the deque can not contain null
                     *             element</member>
        <member name="M:biz.ritter.javapi.util.Deque`1.push(`0)">
                     * Pushes the element to the deque(at the head of the deque), just same as
                     * addFirst(E).
                     *
                     * @param e
                     *            the element
                     * @throws IllegalStateException
                     *             if it can not add now due to size limit
                     * @throws ClassCastException
                     *             if the class of element can not be added into this deque
                     * @throws NullPointerException
                     *             if the element is null and the deque can not contain null
                     *             element
                     * @throws IllegalArgumentException
                     *             if the element can not be added due to some property.</member>
        <member name="M:biz.ritter.javapi.util.Deque`1.pop">
                     * Pops the head element of the deque, just same as removeFirst().
                     *
                     * @return the head element
                     * @throws NoSuchElementException
                     *             if the deque is empty</member>
        <member name="M:biz.ritter.javapi.util.Deque`1.descendingIterator">
                     * Returns the iterator in reverse order, from tail to head.
                     *
                     * @return the iterator in reverse order</member>
        <!--FIXME: Invalid documentation markup was found for member T:biz.ritter.javapi.util.Dictionary`2-->
        <member name="M:biz.ritter.javapi.util.Dictionary`2.elements">
                     * Returns an enumeration on the elements of this dictionary.
                     *
                     * @return an enumeration of the values of this dictionary.
                     * @see #keys
                     * @see #size
                     * @see Enumeration</member>
        <member name="M:biz.ritter.javapi.util.Dictionary`2.get(System.Object)">
                     * Returns the value which is associated with {@code key}.
                     *
                     * @param key
                     *            the key of the value returned.
                     * @return the value associated with {@code key}, or {@code null} if the
                     *         specified key does not exist.
                     * @see #put</member>
        <member name="M:biz.ritter.javapi.util.Dictionary`2.isEmpty">
                     * Returns true if this dictionary has no key/value pairs.
                     *
                     * @return {@code true} if this dictionary has no key/value pairs,
                     *         {@code false} otherwise.
                     * @see #size</member>
        <member name="M:biz.ritter.javapi.util.Dictionary`2.keys">
                     * Returns an enumeration on the keys of this dictionary.
                     *
                     * @return an enumeration of the keys of this dictionary.
                     * @see #elements
                     * @see #size
                     * @see Enumeration</member>
        <member name="M:biz.ritter.javapi.util.Dictionary`2.put(`0,`1)">
                     * Associate {@code key} with {@code value} in this dictionary. If {@code
                     * key} exists in the dictionary before this call, the old value in the
                     * dictionary is replaced by {@code value}.
                     *
                     * @param key
                     *            the key to add.
                     * @param value
                     *            the value to add.
                     * @return the old value previously associated with {@code key} or {@code
                     *         null} if {@code key} is new to the dictionary.
                     * @see #elements
                     * @see #get
                     * @see #keys</member>
        <member name="M:biz.ritter.javapi.util.Dictionary`2.remove(System.Object)">
                     * Removes the key/value pair with the specified {@code key} from this
                     * dictionary.
                     *
                     * @param key
                     *            the key to remove.
                     * @return the associated value before the deletion or {@code null} if
                     *         {@code key} was not known to this dictionary.
                     * @see #get
                     * @see #put</member>
        <member name="M:biz.ritter.javapi.util.Dictionary`2.size">
                     * Returns the number of key/value pairs in this dictionary.
                     *
                     * @return the number of key/value pairs in this dictionary.
                     * @see #elements
                     * @see #keys</member>
        <member name="T:biz.ritter.javapi.util.EmptyStackException">
                 * An {@code EmptyStackException} is thrown if the pop/peek method of a stack is
                 * executed on an empty stack.
                 *
                 * @see java.lang.RuntimeException</member>
        <member name="M:biz.ritter.javapi.util.EmptyStackException.#ctor">
                     * Constructs a new {@code EmptyStackException} with the stack trace filled
                     * in.</member>
        <member name="T:biz.ritter.javapi.util.Enumeration`1">
                 * An Enumeration is used to sequence over a collection of objects.
                 * <p>
                 * Preferably an {@link Iterator} should be used. {@code Iterator} replaces the
                 * enumeration interface and adds a way to remove elements from a collection.
                 * </p>
                 * @see Hashtable
                 * @see Properties
                 * @see Vector
                 * @version 1.0</member>
        <member name="M:biz.ritter.javapi.util.Enumeration`1.hasMoreElements">
                     * Returns whether this {@code Enumeration} has more elements.
                     *
                     * @return {@code true} if there are more elements, {@code false} otherwise.
                     * @see #nextElement</member>
        <member name="M:biz.ritter.javapi.util.Enumeration`1.nextElement">
                     * Returns the next element in this {@code Enumeration}.
                     *
                     * @return the next element..
                     * @throws NoSuchElementException
                     *             if there are no more elements.
                     * @see #hasMoreElements</member>
        <member name="T:biz.ritter.javapi.util.EventListener">
            <summary>
            EventListener interface. All event listener need to implement this!
            </summary>
            <see cref="T:biz.ritter.javapi.util.EventObject" />
            <see cref="T:biz.ritter.javapi.util.EventListenerProxy" />
        </member>
        <member name="T:biz.ritter.javapi.util.EventListenerProxy">
            <summary>
            Abstract wrapper class for <code>EventListener</code> interface.
            </summary>
            <see cref="T:biz.ritter.javapi.util.EventListener" />
            <see cref="T:biz.ritter.javapi.util.EventObject" />
        </member>
        <member name="M:biz.ritter.javapi.util.EventListenerProxy.#ctor(biz.ritter.javapi.util.EventListener)">
            <summary>
            Create a new wrapper instance with given object.
            </summary>
            <param name="objectToProxy">EventListener for proxy instance.</param>
        </member>
        <member name="M:biz.ritter.javapi.util.EventListenerProxy.getListener">
            <summary>
            Returns the wrapped EventListener instance
            </summary>
            <returns>EventListener instance</returns>
        </member>
        <member name="T:biz.ritter.javapi.util.EventObject">
                 * {@code EventObject}s represent events. Typically applications subclass this class to
                 * add event specific information.
                 *
                 * @see EventListener</member>
        <member name="F:biz.ritter.javapi.util.EventObject.source">
                     * The event source.</member>
        <member name="M:biz.ritter.javapi.util.EventObject.#ctor(System.Object)">
                     * Constructs a new instance of this class.
                     *
                     * @param source
                     *            the object which fired the event.</member>
        <member name="M:biz.ritter.javapi.util.EventObject.getSource">
                     * Returns the event source.
                     *
                     * @return the object which fired the event.</member>
        <member name="M:biz.ritter.javapi.util.EventObject.ToString">
                     * Returns the string representation of this {@code EventObject}.
                     *
                     * @return the string representation of this {@code EventObject}.</member>
        <member name="F:biz.ritter.javapi.util.GregorianCalendar.BC">
                     * Value for the BC era.</member>
        <member name="F:biz.ritter.javapi.util.GregorianCalendar.AD">
                     * Value for the AD era.</member>
        <member name="T:biz.ritter.javapi.util.HashSet`1">
                 * HashSet is an implementation of a Set. All optional operations (adding and
                 * removing) are supported. The elements can be any objects.</member>
        <member name="M:biz.ritter.javapi.util.HashSet`1.#ctor">
                     * Constructs a new empty instance of {@code HashSet}.</member>
        <member name="M:biz.ritter.javapi.util.HashSet`1.#ctor(System.Int32)">
                     * Constructs a new instance of {@code HashSet} with the specified capacity.
                     *
                     * @param capacity
                     *            the initial capacity of this {@code HashSet}.</member>
        <member name="M:biz.ritter.javapi.util.HashSet`1.#ctor(System.Int32,System.Single)">
                     * Constructs a new instance of {@code HashSet} with the specified capacity
                     * and load factor.
                     *
                     * @param capacity
                     *            the initial capacity.
                     * @param loadFactor
                     *            the initial load factor.</member>
        <member name="M:biz.ritter.javapi.util.HashSet`1.#ctor(biz.ritter.javapi.util.Collection{`0})">
                     * Constructs a new instance of {@code HashSet} containing the unique
                     * elements in the specified collection.
                     *
                     * @param collection
                     *            the collection of elements to add.</member>
        <member name="M:biz.ritter.javapi.util.HashSet`1.add(`0)">
                     * Adds the specified object to this {@code HashSet} if not already present.
                     *
                     * @param object
                     *            the object to add.
                     * @return {@code true} when this {@code HashSet} did not already contain
                     *         the object, {@code false} otherwise</member>
        <member name="M:biz.ritter.javapi.util.HashSet`1.clear">
                     * Removes all elements from this {@code HashSet}, leaving it empty.
                     *
                     * @see #isEmpty
                     * @see #size</member>
        <member name="M:biz.ritter.javapi.util.HashSet`1.clone">
                     * Returns a new {@code HashSet} with the same elements and size as this
                     * {@code HashSet}.
                     *
                     * @return a shallow copy of this {@code HashSet}.
                     * @see java.lang.Cloneable</member>
        <member name="M:biz.ritter.javapi.util.HashSet`1.contains(System.Object)">
                     * Searches this {@code HashSet} for the specified object.
                     *
                     * @param object
                     *            the object to search for.
                     * @return {@code true} if {@code object} is an element of this
                     *         {@code HashSet}, {@code false} otherwise.</member>
        <member name="M:biz.ritter.javapi.util.HashSet`1.isEmpty">
                     * Returns true if this {@code HashSet} has no elements, false otherwise.
                     *
                     * @return {@code true} if this {@code HashSet} has no elements,
                     *         {@code false} otherwise.
                     * @see #size</member>
        <member name="M:biz.ritter.javapi.util.HashSet`1.iterator">
                     * Returns an Iterator on the elements of this {@code HashSet}.
                     *
                     * @return an Iterator on the elements of this {@code HashSet}.
                     * @see Iterator</member>
        <member name="M:biz.ritter.javapi.util.HashSet`1.remove(System.Object)">
                     * Removes the specified object from this {@code HashSet}.
                     *
                     * @param object
                     *            the object to remove.
                     * @return {@code true} if the object was removed, {@code false} otherwise.</member>
        <member name="M:biz.ritter.javapi.util.HashSet`1.size">
                     * Returns the number of elements in this {@code HashSet}.
                     *
                     * @return the number of elements in this {@code HashSet}.</member>
        <member name="T:biz.ritter.javapi.util.Hashtable`2">
            <summary>
                <strong>In change to Java this class extends java.util.AbstractMap and implements
            java.util.Dictionary.</strong>
            </summary>
            <typeparam name="K">
            </typeparam>
            <typeparam name="V">
            </typeparam>
        </member>
        <member name="T:biz.ritter.javapi.util.IllegalFormatFlagsException">
                 * An {@code IllegalFormatFlagsException} will be thrown if the combination of
                 * the format flags is illegal.
                 *
                 * @see java.lang.RuntimeException</member>
        <member name="M:biz.ritter.javapi.util.IllegalFormatFlagsException.#ctor(System.String)">
                     * Constructs a new {@code IllegalFormatFlagsException} with the specified
                     * flags.
                     *
                     * @param f
                     *           the specified flags.</member>
        <member name="M:biz.ritter.javapi.util.IllegalFormatFlagsException.getFlags">
                     * Returns the flags that are illegal.
                     *
                     * @return the flags that are illegal.</member>
        <member name="M:biz.ritter.javapi.util.IllegalFormatFlagsException.getMessage">
                     * Returns the message string of the IllegalFormatFlagsException.
                     *
                     * @return the message string of the IllegalFormatFlagsException.</member>
        <member name="T:biz.ritter.javapi.util.IllegalFormatPrecisionException">
                 * An {@code IllegalFormatPrecisionException} will be thrown if the precision is
                 * a negative other than -1 or in other cases where precision is not supported.
                 *
                 * @see java.lang.RuntimeException</member>
        <member name="M:biz.ritter.javapi.util.IllegalFormatPrecisionException.#ctor(System.Int32)">
                     * Constructs a new {@code IllegalFormatPrecisionException} with specified
                     * precision.
                     *
                     * @param p
                     *           the precision.</member>
        <member name="M:biz.ritter.javapi.util.IllegalFormatPrecisionException.getPrecision">
                     * Returns the precision associated with the exception.
                     *
                     * @return the precision.</member>
        <member name="M:biz.ritter.javapi.util.IllegalFormatPrecisionException.getMessage">
                     * Returns the message of the exception.
                     *
                     * @return the message of the exception.</member>
        <member name="T:biz.ritter.javapi.util.IllegalFormatWidthException">
                 * An {@code IllegalFormatWidthException} will be thrown if the width is a
                 * negative value other than -1 or in other cases where a width is not
                 * supported.
                 *
                 * @see java.lang.RuntimeException</member>
        <member name="M:biz.ritter.javapi.util.IllegalFormatWidthException.#ctor(System.Int32)">
                     * Constructs a new {@code IllegalFormatWidthException} with specified
                     * width.
                     *
                     * @param w
                     *           the width.</member>
        <member name="M:biz.ritter.javapi.util.IllegalFormatWidthException.getWidth">
                     * Returns the width associated with the exception.
                     *
                     * @return the width.</member>
        <member name="M:biz.ritter.javapi.util.IllegalFormatWidthException.getMessage">
                     * Returns the message of the exception.
                     *
                     * @return the message of the exception.</member>
        <!--FIXME: Invalid documentation markup was found for member T:biz.ritter.javapi.util.Iterator`1-->
        <member name="M:biz.ritter.javapi.util.Iterator`1.hasNext">
                     * Returns whether there are more elements to iterate, i.e. whether the
                     * iterator is positioned in front of an element.
                     *
                     * @return {@code true} if there are more elements, {@code false} otherwise.
                     * @see #next</member>
        <member name="M:biz.ritter.javapi.util.Iterator`1.next">
                     * Returns the next object in the iteration, i.e. returns the element in
                     * front of the iterator and advances the iterator by one position.
                     *
                     * @return the next object.
                     * @throws NoSuchElementException
                     *             if there are no more elements.
                     * @see #hasNext</member>
        <member name="M:biz.ritter.javapi.util.Iterator`1.remove">
                     * Removes the last object returned by {@code next} from the collection.
                     * This method can only be called once after {@code next} was called.
                     *
                     * @throws UnsupportedOperationException
                     *             if removing is not supported by the collection being
                     *             iterated.
                     * @throws IllegalStateException
                     *             if {@code next} has not been called, or {@code remove} has
                     *             already been called after the last call to {@code next}.</member>
        <member name="T:biz.ritter.javapi.util.jar.Attributes">
                 * The {@code Attributes} class is used to store values for manifest entries.
                 * Attribute keys are generally instances of {@code Attributes.Name}. Values
                 * associated with attribute keys are of type {@code String}.</member>
        <member name="F:biz.ritter.javapi.util.jar.Attributes.map">
                     * The {@code Attributes} as name/value pairs. Maps the attribute names (as
                     * {@link Attributes.Name}) of a JAR file manifest to arbitrary values. The
                     * attribute names thus are obtained from the {@link Manifest} for
                     * convenience.</member>
        <member name="M:biz.ritter.javapi.util.jar.Attributes.#ctor">
                     * Constructs an {@code Attributes} instance.</member>
        <member name="M:biz.ritter.javapi.util.jar.Attributes.#ctor(biz.ritter.javapi.util.jar.Attributes)">
                     * Constructs an {@code Attributes} instance obtaining keys and values from
                     * the parameter {@code attrib}.
                     *
                     * @param attrib
                     *            The attributes to obtain entries from.</member>
        <member name="M:biz.ritter.javapi.util.jar.Attributes.#ctor(System.Int32)">
                     * Constructs an {@code Attributes} instance with initial capacity of size
                     * {@code size}.
                     *
                     * @param size
                     *            Initial size of this {@code Attributes} instance.</member>
        <member name="M:biz.ritter.javapi.util.jar.Attributes.clear">
                     * Removes all key/value pairs from this {@code Attributes}.</member>
        <member name="M:biz.ritter.javapi.util.jar.Attributes.containsKey(System.Object)">
                     * Determines whether this {@code Attributes} contains the specified key.
                     *
                     * @param key
                     *            The key to search for.
                     * @return {@code true} if the key is found, {@code false} otherwise.</member>
        <member name="M:biz.ritter.javapi.util.jar.Attributes.containsValue(System.Object)">
                     * Determines whether this {@code Attributes} contains the specified value.
                     *
                     * @param value
                     *            the value to search for.
                     * @return {@code true} if the value is found, {@code false} otherwise.</member>
        <member name="M:biz.ritter.javapi.util.jar.Attributes.entrySet">
                     * Returns a set containing map entries for each of the key/value pair
                     * contained in this {@code Attributes}.
                     *
                     * @return a set of Map.Entry's</member>
        <member name="M:biz.ritter.javapi.util.jar.Attributes.get(System.Object)">
                     * Returns the value associated with the parameter key.
                     *
                     * @param key
                     *            the key to search for.
                     * @return Object associated with key, or {@code null} if key does not
                     *         exist.</member>
        <member name="M:biz.ritter.javapi.util.jar.Attributes.isEmpty">
                     * Determines whether this {@code Attributes} contains any keys.
                     *
                     * @return {@code true} if one or more keys exist, {@code false} otherwise.</member>
        <member name="M:biz.ritter.javapi.util.jar.Attributes.keySet">
                     * Returns a {@code Set} containing all the keys found in this {@code
                     * Attributes}.
                     *
                     * @return a {@code Set} of all keys.</member>
        <member name="M:biz.ritter.javapi.util.jar.Attributes.put(System.Object,System.Object)">
                     * Stores key/value pairs in this {@code Attributes}.
                     *
                     * @param key
                     *            the key to associate with value.
                     * @param value
                     *            the value to store in this {@code Attributes}.
                     * @return the value being stored.
                     * @exception ClassCastException
                     *                when key is not an {@code Attributes.Name} or value is not
                     *                a {@code String}.</member>
        <member name="M:biz.ritter.javapi.util.jar.Attributes.putAll(biz.ritter.javapi.util.Map{System.Object,System.Object})">
                     * Stores all the key/value pairs in the argument in this {@code
                     * Attributes}.
                     *
                     * @param attrib
                     *            the associations to store (must be of type {@code
                     *            Attributes}).</member>
        <member name="M:biz.ritter.javapi.util.jar.Attributes.remove(System.Object)">
                     * Deletes the key/value pair with key {@code key} from this {@code
                     * Attributes}.
                     *
                     * @param key
                     *            the key to remove.
                     * @return the values associated with the removed key, {@code null} if not
                     *         present.</member>
        <member name="M:biz.ritter.javapi.util.jar.Attributes.size">
                     * Returns the number of key/value pairs associated with this {@code
                     * Attributes}.
                     *
                     * @return the size of this {@code Attributes}.</member>
        <member name="M:biz.ritter.javapi.util.jar.Attributes.values">
                     * Returns a collection of all the values present in this {@code
                     * Attributes}.
                     *
                     * @return a collection of all values present.</member>
        <member name="M:biz.ritter.javapi.util.jar.Attributes.GetHashCode">
                     * Returns the hash code of this {@code Attributes}.
                     *
                     * @return the hash code of this object.</member>
        <member name="M:biz.ritter.javapi.util.jar.Attributes.Equals(System.Object)">
                     * Determines if this {@code Attributes} and the parameter {@code
                     * Attributes} are equal. Two {@code Attributes} instances are equal if they
                     * contain the same keys and values.
                     *
                     * @param obj
                     *            the object with which this {@code Attributes} is compared.
                     * @return {@code true} if the {@code Attributes} are equal, {@code false}
                     *         otherwise.</member>
        <member name="M:biz.ritter.javapi.util.jar.Attributes.getValue(biz.ritter.javapi.util.jar.AttributesNS.Name)">
                     * Returns the value associated with the parameter {@code Attributes.Name}
                     * key.
                     *
                     * @param name
                     *            the key to obtain the value for.
                     * @return the {@code String} associated with name, or {@code null} if name
                     *         is not a valid key.</member>
        <member name="M:biz.ritter.javapi.util.jar.Attributes.getValue(System.String)">
                     * Returns the string associated with the parameter name.
                     *
                     * @param name
                     *            the key to obtain the value for.
                     * @return the string associated with name, or {@code null} if name is not a
                     *         valid key.</member>
        <member name="M:biz.ritter.javapi.util.jar.Attributes.putValue(System.String,System.String)">
                     * Stores the value {@code val} associated with the key {@code name} in this
                     * {@code Attributes}.
                     *
                     * @param name
                     *            the key to store.
                     * @param val
                     *            the value to store in this {@code Attributes}.
                     * @return the value being stored.</member>
        <member name="T:biz.ritter.javapi.util.jar.AttributesNS.Name">
                        * The name part of the name/value pairs constituting an attribute as
                        * defined by the specification of the JAR manifest. May be composed of the
                        * following ASCII signs as defined in the EBNF below:
                        *
                        * <pre>
                        * name       = alphanum *headerchar
                        * headerchar = alphanum | - | _
                        * alphanum   = {A-Z} | {a-z} | {0-9}
                        * </pre></member>
        <member name="F:biz.ritter.javapi.util.jar.AttributesNS.Name.CLASS_PATH">
                            * The class path (a main attribute).</member>
        <member name="F:biz.ritter.javapi.util.jar.AttributesNS.Name.MANIFEST_VERSION">
                            * The version of the manifest file (a main attribute).</member>
        <member name="F:biz.ritter.javapi.util.jar.AttributesNS.Name.MAIN_CLASS">
                            * The main class's name (for stand-alone applications).</member>
        <member name="F:biz.ritter.javapi.util.jar.AttributesNS.Name.SIGNATURE_VERSION">
                            * Defines the signature version of the JAR file.</member>
        <member name="F:biz.ritter.javapi.util.jar.AttributesNS.Name.CONTENT_TYPE">
                            * The {@code Content-Type} manifest attribute.</member>
        <member name="F:biz.ritter.javapi.util.jar.AttributesNS.Name.SEALED">
                            * The {@code Sealed} manifest attribute which may have the value
                            * {@code true} for sealed archives.</member>
        <member name="F:biz.ritter.javapi.util.jar.AttributesNS.Name.IMPLEMENTATION_TITLE">
                            * The {@code Implementation-Title} attribute whose value is a string
                            * that defines the title of the extension implementation.</member>
        <member name="F:biz.ritter.javapi.util.jar.AttributesNS.Name.IMPLEMENTATION_VERSION">
                            * The {@code Implementation-Version} attribute defining the version of
                            * the extension implementation.</member>
        <member name="F:biz.ritter.javapi.util.jar.AttributesNS.Name.IMPLEMENTATION_VENDOR">
                            * The {@code Implementation-Vendor} attribute defining the organization
                            * that maintains the extension implementation.</member>
        <member name="F:biz.ritter.javapi.util.jar.AttributesNS.Name.SPECIFICATION_TITLE">
                            * The {@code Specification-Title} attribute defining the title of the
                            * extension specification.</member>
        <member name="F:biz.ritter.javapi.util.jar.AttributesNS.Name.SPECIFICATION_VERSION">
                            * The {@code Specification-Version} attribute defining the version of
                            * the extension specification.</member>
        <member name="F:biz.ritter.javapi.util.jar.AttributesNS.Name.SPECIFICATION_VENDOR">
                            * The {@code Specification-Vendor} attribute defining the organization
                            * that maintains the extension specification.</member>
        <member name="F:biz.ritter.javapi.util.jar.AttributesNS.Name.EXTENSION_LIST">
                            * The {@code Extension-List} attribute defining the extensions that are
                            * needed by the applet.</member>
        <member name="F:biz.ritter.javapi.util.jar.AttributesNS.Name.EXTENSION_NAME">
                            * The {@code Extension-Name} attribute which defines the unique name of
                            * the extension.</member>
        <member name="F:biz.ritter.javapi.util.jar.AttributesNS.Name.EXTENSION_INSTALLATION">
                            * The {@code Extension-Installation} attribute.</member>
        <member name="F:biz.ritter.javapi.util.jar.AttributesNS.Name.IMPLEMENTATION_VENDOR_ID">
                            * The {@code Implementation-Vendor-Id} attribute specifies the vendor
                            * of an extension implementation if the applet requires an
                            * implementation from a specific vendor.</member>
        <member name="F:biz.ritter.javapi.util.jar.AttributesNS.Name.IMPLEMENTATION_URL">
                            * The {@code Implementation-URL} attribute specifying a URL that can be
                            * used to obtain the most recent version of the extension if the
                            * required version is not already installed.</member>
        <member name="M:biz.ritter.javapi.util.jar.AttributesNS.Name.#ctor(System.String)">
                            * A String which must satisfy the following EBNF grammar to specify an
                            * additional attribute:
                            *
                            * <pre>
                            * name       = alphanum *headerchar
                            * headerchar = alphanum | - | _
                            * alphanum   = {A-Z} | {a-z} | {0-9}
                            * </pre>
                            *
                            * @param s
                            *            The Attribute string.
                            * @exception IllegalArgumentException
                            *                if the string does not satisfy the EBNF grammar.</member>
        <member name="M:biz.ritter.javapi.util.jar.AttributesNS.Name.#ctor(System.Byte[])">
                            * A private constructor for a trusted attribute name.</member>
        <member name="M:biz.ritter.javapi.util.jar.AttributesNS.Name.ToString">
                            * Returns this attribute name.
                            *
                            * @return the attribute name.</member>
        <member name="M:biz.ritter.javapi.util.jar.AttributesNS.Name.Equals(System.Object)">
                            * Returns whether the argument provided is the same as the attribute
                            * name.
                            *
                            * @return if the attribute names correspond.
                            * @param object
                            *            An attribute name to be compared with this name.</member>
        <member name="M:biz.ritter.javapi.util.jar.AttributesNS.Name.GetHashCode">
                         * Computes a hash code of the name.
                         *
                         * @return the hash value computed from the name.</member>
        <member name="F:biz.ritter.javapi.util.jar.InitManifest.linebreak">
                     * Number of subsequent line breaks.</member>
        <member name="M:biz.ritter.javapi.util.jar.InitManifest.readHeader">
                     * Read a single line from the manifest buffer.</member>
        <member name="T:biz.ritter.javapi.util.jar.JarEntry">
             * Represents a single file in a JAR archive together with the manifest
             * attributes and digital signatures associated with it.
             *
             * @see JarFile
             * @see JarInputStream</member>
        <member name="M:biz.ritter.javapi.util.jar.JarEntry.#ctor(System.String)">
                     * Creates a new {@code JarEntry} named name.
                     *
                     * @param name
                     *            The name of the new {@code JarEntry}.</member>
        <member name="M:biz.ritter.javapi.util.jar.JarEntry.#ctor(biz.ritter.javapi.util.zip.ZipEntry)">
                     * Creates a new {@code JarEntry} using the values obtained from entry.
                     *
                     * @param entry
                     *            The ZipEntry to obtain values from.</member>
        <member name="M:biz.ritter.javapi.util.jar.JarEntry.getAttributes">
                     * Returns the {@code Attributes} object associated with this entry or
                     * {@code null} if none exists.
                     *
                     * @return the {@code Attributes} for this entry.
                     * @exception IOException
                     *                If an error occurs obtaining the {@code Attributes}.
                     * @see Attributes</member>
        <member name="T:biz.ritter.javapi.util.jar.JarFile">
                 * {@code JarFile} is used to read jar entries and their associated data from
                 * jar files.
                 *
                 * @see JarInputStream
                 * @see JarEntry</member>
        <member name="F:biz.ritter.javapi.util.jar.JarFile.MANIFEST_NAME">
                     * The MANIFEST file name.</member>
        <member name="M:biz.ritter.javapi.util.jar.JarFile.#ctor(biz.ritter.javapi.io.File)">
                 * Create a new {@code JarFile} using the contents of the specified file.
                 *
                 * @param file
                 *            the JAR file as {@link File}.
                 * @throws IOException
                 *             If the file cannot be read.</member>
        <member name="M:biz.ritter.javapi.util.jar.JarFile.#ctor(biz.ritter.javapi.io.File,System.Boolean)">
                 * Create a new {@code JarFile} using the contents of the specified file.
                 *
                 * @param file
                 *            the JAR file as {@link File}.
                 * @param verify
                 *            if this JAR file is signed whether it must be verified.
                 * @throws IOException
                 *             If the file cannot be read.</member>
        <member name="M:biz.ritter.javapi.util.jar.JarFile.#ctor(biz.ritter.javapi.io.File,System.Boolean,System.Int32)">
                 * Create a new {@code JarFile} using the contents of file.
                 *
                 * @param file
                 *            the JAR file as {@link File}.
                 * @param verify
                 *            if this JAR filed is signed whether it must be verified.
                 * @param mode
                 *            the mode to use, either {@link ZipFile#OPEN_READ OPEN_READ} or
                 *            {@link ZipFile#OPEN_DELETE OPEN_DELETE}.
                 * @throws IOException
                 *             If the file cannot be read.</member>
        <member name="M:biz.ritter.javapi.util.jar.JarFile.#ctor(System.String)">
                 * Create a new {@code JarFile} from the contents of the file specified by
                 * filename.
                 *
                 * @param filename
                 *            the file name referring to the JAR file.
                 * @throws IOException
                 *             if file name cannot be opened for reading.</member>
        <member name="M:biz.ritter.javapi.util.jar.JarFile.#ctor(System.String,System.Boolean)">
                 * Create a new {@code JarFile} from the contents of the file specified by
                 * {@code filename}.
                 *
                 * @param filename
                 *            the file name referring to the JAR file.
                 * @param verify
                 *            if this JAR filed is signed whether it must be verified.
                 * @throws IOException
                 *             If file cannot be opened or read.</member>
        <member name="M:biz.ritter.javapi.util.jar.JarFile.getManifest">
                     * Returns the {@code Manifest} object associated with this {@code JarFile}
                     * or {@code null} if no MANIFEST entry exists.
                     *
                     * @return the MANIFEST.
                     * @throws IOException
                     *             if an error occurs reading the MANIFEST file.
                     * @throws IllegalStateException
                     *             if the jar file is closed.
                     * @see Manifest</member>
        <member name="M:biz.ritter.javapi.util.jar.JarFile.readMetaEntries">
                     * Called by the JarFile constructors, this method reads the contents of the
                     * file's META-INF/ directory and picks out the MANIFEST.MF file and
                     * verifier signature files if they exist. Any signature files found are
                     * registered with the verifier.
                     *
                     * @throws IOException
                     *             if there is a problem reading the jar file entries.</member>
        <member name="M:biz.ritter.javapi.util.jar.JarFile.getMetaEntriesImpl">
                     * Returns all the ZipEntry's that relate to files in the
                     * JAR's META-INF directory.
                     *
                     * @return the list of ZipEntry's or {@code null} if there are none.</member>
        <member name="M:biz.ritter.javapi.util.jar.JarVerifier.#ctor(System.String)">
                     * Constructs and returns a new instance of {@code JarVerifier}.
                     *
                     * @param name
                     *            the name of the JAR file being verified.</member>
        <member name="M:biz.ritter.javapi.util.jar.JarVerifier.addMetaEntry(System.String,System.Byte[])">
                     * Add a new meta entry to the internal collection of data held on each JAR
                     * entry in the {@code META-INF} directory including the manifest
                     * file itself. Files associated with the signing of a JAR would also be
                     * added to this collection.
                     *
                     * @param name
                     *            the name of the file located in the {@code META-INF}
                     *            directory.
                     * @param buf
                     *            the file bytes for the file called {@code name}.
                     * @see #removeMetaEntries()</member>
        <member name="T:biz.ritter.javapi.util.jar.Manifest">
                 * The {@code Manifest} class is used to obtain attribute information for a
                 * {@code JarFile} and its entries.</member>
        <member name="F:biz.ritter.javapi.util.jar.Manifest.im">
                     * Manifest bytes are used for delayed entry parsing.</member>
        <member name="F:biz.ritter.javapi.util.jar.Manifest.mainEnd">
                     * The end of the main attributes section in the manifest is needed in
                     * verification.</member>
        <member name="M:biz.ritter.javapi.util.jar.Manifest.#ctor(biz.ritter.javapi.util.jar.Manifest)">
                     * Creates a new {@code Manifest} instance. The new instance will have the
                     * same attributes as those found in the parameter {@code Manifest}.
                     *
                     * @param man
                     *            {@code Manifest} instance to obtain attributes from.</member>
        <member name="M:biz.ritter.javapi.util.jar.Manifest.getEntries">
                     * Returns a map containing the {@code Attributes} for each entry in the
                     * {@code Manifest}.
                     *
                     * @return the map of entry attributes.</member>
        <member name="M:biz.ritter.javapi.util.jar.Manifest.clone">
                     * Creates a copy of this {@code Manifest}. The returned {@code Manifest}
                     * will equal the {@code Manifest} from which it was cloned.
                     *
                     * @return a copy of this instance.</member>
        <member name="M:biz.ritter.javapi.util.jar.Manifest.getAttributes(System.String)">
                     * Returns the {@code Attributes} associated with the parameter entry
                     * {@code name}.
                     *
                     * @param name
                     *            the name of the entry to obtain {@code Attributes} from.
                     * @return the Attributes for the entry or {@code null} if the entry does
                     *         not exist.</member>
        <member name="M:biz.ritter.javapi.util.jar.Manifest.read(biz.ritter.javapi.io.InputStream)">
                     * Constructs a new {@code Manifest} instance obtaining attribute
                     * information from the specified input stream.
                     *
                     * @param is
                     *            The {@code InputStream} to read from.
                     * @throws IOException
                     *             If an error occurs reading the {@code Manifest}.</member>
        <member name="T:biz.ritter.javapi.util.LinkedHashSet`1">
                 * LinkedHashSet is a variant of HashSet. Its entries are kept in a
                 * doubly-linked list. The iteration order is the order in which entries were
                 * inserted.
                 * <p />
                 * Null elements are allowed, and all the optional Set operations are supported.
                 * <p />
                 * Like HashSet, LinkedHashSet is not thread safe, so access by multiple threads
                 * must be synchronized by an external mechanism such as
                 * {@link Collections#synchronizedSet(Set)}.
                 *
                 * @since 1.4</member>
        <member name="M:biz.ritter.javapi.util.LinkedHashSet`1.#ctor">
                     * Constructs a new empty instance of {@code LinkedHashSet}.</member>
        <member name="M:biz.ritter.javapi.util.LinkedHashSet`1.#ctor(System.Int32)">
                     * Constructs a new instance of {@code LinkedHashSet} with the specified
                     * capacity.
                     *
                     * @param capacity
                     *            the initial capacity of this {@code LinkedHashSet}.</member>
        <member name="M:biz.ritter.javapi.util.LinkedHashSet`1.#ctor(System.Int32,System.Single)">
                     * Constructs a new instance of {@code LinkedHashSet} with the specified
                     * capacity and load factor.
                     *
                     * @param capacity
                     *            the initial capacity.
                     * @param loadFactor
                     *            the initial load factor.</member>
        <member name="M:biz.ritter.javapi.util.LinkedHashSet`1.#ctor(biz.ritter.javapi.util.Collection{`0})">
                     * Constructs a new instance of {@code LinkedHashSet} containing the unique
                     * elements in the specified collection.
                     *
                     * @param collection
                     *            the collection of elements to add.</member>
        <member name="T:biz.ritter.javapi.util.LinkedList`1">
                 * LinkedList is an implementation of List, backed by a linked list. All
                 * optional operations are supported, adding, removing and replacing. The
                 * elements can be any objects.
                 *
                 * @since 1.2</member>
        <member name="M:biz.ritter.javapi.util.LinkedList`1.#ctor">
                     * Constructs a new empty instance of {@code LinkedList}.</member>
        <member name="M:biz.ritter.javapi.util.LinkedList`1.#ctor(biz.ritter.javapi.util.Collection{`0})">
                     * Constructs a new instance of {@code LinkedList} that holds all of the
                     * elements contained in the specified {@code collection}. The order of the
                     * elements in this new {@code LinkedList} will be determined by the
                     * iteration order of {@code collection}.
                     *
                     * @param collection
                     *            the collection of elements to add.</member>
        <member name="M:biz.ritter.javapi.util.LinkedList`1.add(System.Int32,`0)">
                     * Inserts the specified object into this {@code LinkedList} at the
                     * specified location. The object is inserted before any previous element at
                     * the specified location. If the location is equal to the size of this
                     * {@code LinkedList}, the object is added at the end.
                     *
                     * @param location
                     *            the index at which to insert.
                     * @param object
                     *            the object to add.
                     * @throws IndexOutOfBoundsException
                     *             if {@code location &lt; 0 || &gt;= size()}</member>
        <member name="M:biz.ritter.javapi.util.LinkedList`1.add(`0)">
                     * Adds the specified object at the end of this {@code LinkedList}.
                     *
                     * @param object
                     *            the object to add.
                     * @return always true</member>
        <member name="M:biz.ritter.javapi.util.LinkedList`1.addAll(System.Int32,biz.ritter.javapi.util.Collection{`0})">
                     * Inserts the objects in the specified collection at the specified location
                     * in this {@code LinkedList}. The objects are added in the order they are
                     * returned from the collection's iterator.
                     *
                     * @param location
                     *            the index at which to insert.
                     * @param collection
                     *            the collection of objects
                     * @return {@code true} if this {@code LinkedList} is modified,
                     *         {@code false} otherwise.
                     * @throws ClassCastException
                     *             if the class of an object is inappropriate for this list.
                     * @throws IllegalArgumentException
                     *             if an object cannot be added to this list.
                     * @throws IndexOutOfBoundsException
                     *             if {@code location &lt; 0 || &gt; size()}</member>
        <member name="M:biz.ritter.javapi.util.LinkedList`1.addAll(biz.ritter.javapi.util.Collection{`0})">
                     * Adds the objects in the specified Collection to this {@code LinkedList}.
                     *
                     * @param collection
                     *            the collection of objects.
                     * @return {@code true} if this {@code LinkedList} is modified,
                     *         {@code false} otherwise.</member>
        <member name="M:biz.ritter.javapi.util.LinkedList`1.addFirst(`0)">
                     * Adds the specified object at the beginning of this {@code LinkedList}.
                     *
                     * @param object
                     *            the object to add.</member>
        <member name="M:biz.ritter.javapi.util.LinkedList`1.addLast(`0)">
                     * Adds the specified object at the end of this {@code LinkedList}.
                     *
                     * @param object
                     *            the object to add.</member>
        <member name="M:biz.ritter.javapi.util.LinkedList`1.clear">
                     * Removes all elements from this {@code LinkedList}, leaving it empty.
                     *
                     * @see List#isEmpty
                     * @see #size</member>
        <member name="M:biz.ritter.javapi.util.LinkedList`1.clone">
                     * Returns a new {@code LinkedList} with the same elements and size as this
                     * {@code LinkedList}.
                     *
                     * @return a shallow copy of this {@code LinkedList}.
                     * @see java.lang.Cloneable</member>
        <member name="M:biz.ritter.javapi.util.LinkedList`1.contains(System.Object)">
                     * Searches this {@code LinkedList} for the specified object.
                     *
                     * @param object
                     *            the object to search for.
                     * @return {@code true} if {@code object} is an element of this
                     *         {@code LinkedList}, {@code false} otherwise</member>
        <member name="M:biz.ritter.javapi.util.LinkedList`1.getFirst">
                     * Returns the first element in this {@code LinkedList}.
                     *
                     * @return the first element.
                     * @throws NoSuchElementException
                     *             if this {@code LinkedList} is empty.</member>
        <member name="M:biz.ritter.javapi.util.LinkedList`1.getLast">
                     * Returns the last element in this {@code LinkedList}.
                     *
                     * @return the last element
                     * @throws NoSuchElementException
                     *             if this {@code LinkedList} is empty</member>
        <member name="M:biz.ritter.javapi.util.LinkedList`1.lastIndexOf(System.Object)">
                     * Searches this {@code LinkedList} for the specified object and returns the
                     * index of the last occurrence.
                     *
                     * @param object
                     *            the object to search for
                     * @return the index of the last occurrence of the object, or -1 if it was
                     *         not found.</member>
        <member name="M:biz.ritter.javapi.util.LinkedList`1.listIterator(System.Int32)">
                     * Returns a ListIterator on the elements of this {@code LinkedList}. The
                     * elements are iterated in the same order that they occur in the
                     * {@code LinkedList}. The iteration starts at the specified location.
                     *
                     * @param location
                     *            the index at which to start the iteration
                     * @return a ListIterator on the elements of this {@code LinkedList}
                     * @throws IndexOutOfBoundsException
                     *             if {@code location &lt; 0 || &gt;= size()}
                     * @see ListIterator</member>
        <member name="M:biz.ritter.javapi.util.LinkedList`1.remove(System.Int32)">
                     * Removes the object at the specified location from this {@code LinkedList}.
                     *
                     * @param location
                     *            the index of the object to remove
                     * @return the removed object
                     * @throws IndexOutOfBoundsException
                     *             if {@code location &lt; 0 || &gt;= size()}</member>
        <member name="M:biz.ritter.javapi.util.LinkedList`1.removeFirst">
                     * Removes the first object from this {@code LinkedList}.
                     *
                     * @return the removed object.
                     * @throws NoSuchElementException
                     *             if this {@code LinkedList} is empty.</member>
        <member name="M:biz.ritter.javapi.util.LinkedList`1.removeLast">
                     * Removes the last object from this {@code LinkedList}.
                     *
                     * @return the removed object.
                     * @throws NoSuchElementException
                     *             if this {@code LinkedList} is empty.</member>
        <member name="M:biz.ritter.javapi.util.LinkedList`1.descendingIterator">
                     * {@inheritDoc}
                     *
                     * @see java.util.Deque#descendingIterator()
                     * @since 1.6</member>
        <member name="M:biz.ritter.javapi.util.LinkedList`1.offerFirst(`0)">
                     * {@inheritDoc}
                     *
                     * @see java.util.Deque#offerFirst(java.lang.Object)
                     * @since 1.6</member>
        <member name="M:biz.ritter.javapi.util.LinkedList`1.offerLast(`0)">
                     * {@inheritDoc}
                     *
                     * @see java.util.Deque#offerLast(java.lang.Object)
                     * @since 1.6</member>
        <member name="M:biz.ritter.javapi.util.LinkedList`1.peekFirst">
                     * {@inheritDoc}
                     *
                     * @see java.util.Deque#peekFirst()
                     * @since 1.6</member>
        <member name="M:biz.ritter.javapi.util.LinkedList`1.peekLast">
                     * {@inheritDoc}
                     *
                     * @see java.util.Deque#peekLast()
                     * @since 1.6</member>
        <member name="M:biz.ritter.javapi.util.LinkedList`1.pollFirst">
                     * {@inheritDoc}
                     *
                     * @see java.util.Deque#pollFirst()
                     * @since 1.6</member>
        <member name="M:biz.ritter.javapi.util.LinkedList`1.pollLast">
                     * {@inheritDoc}
                     *
                     * @see java.util.Deque#pollLast()
                     * @since 1.6</member>
        <member name="M:biz.ritter.javapi.util.LinkedList`1.pop">
                     * {@inheritDoc}
                     *
                     * @see java.util.Deque#pop()
                     * @since 1.6</member>
        <member name="M:biz.ritter.javapi.util.LinkedList`1.push(`0)">
                     * {@inheritDoc}
                     *
                     * @see java.util.Deque#push(java.lang.Object)
                     * @since 1.6</member>
        <member name="M:biz.ritter.javapi.util.LinkedList`1.removeFirstOccurrence(System.Object)">
                     * {@inheritDoc}
                     *
                     * @see java.util.Deque#removeFirstOccurrence(java.lang.Object)
                     * @since 1.6</member>
        <member name="M:biz.ritter.javapi.util.LinkedList`1.removeLastOccurrence(System.Object)">
                     * {@inheritDoc}
                     *
                     * @see java.util.Deque#removeLastOccurrence(java.lang.Object)
                     * @since 1.6</member>
        <member name="M:biz.ritter.javapi.util.LinkedList`1.set(System.Int32,`0)">
                     * Replaces the element at the specified location in this {@code LinkedList}
                     * with the specified object.
                     *
                     * @param location
                     *            the index at which to put the specified object.
                     * @param object
                     *            the object to add.
                     * @return the previous element at the index.
                     * @throws ClassCastException
                     *             if the class of an object is inappropriate for this list.
                     * @throws IllegalArgumentException
                     *             if an object cannot be added to this list.
                     * @throws IndexOutOfBoundsException
                     *             if {@code location &lt; 0 || &gt;= size()}</member>
        <member name="M:biz.ritter.javapi.util.LinkedList`1.size">
                     * Returns the number of elements in this {@code LinkedList}.
                     *
                     * @return the number of elements in this {@code LinkedList}.</member>
        <member name="M:biz.ritter.javapi.util.LinkedList`1.toArray">
                     * Returns a new array containing all elements contained in this
                     * {@code LinkedList}.
                     *
                     * @return an array of the elements from this {@code LinkedList}.</member>
        <member name="T:biz.ritter.javapi.util.List`1">
                 * A {@code List} is a collection which maintains an ordering for its elements. Every
                 * element in the {@code List} has an index. Each element can thus be accessed by its
                 * index, with the first index being zero. Normally, {@code List}s allow duplicate
                 * elements, as compared to Sets, where elements have to be unique.</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.util.List`1.add(System.Int32,`0)-->
        <member name="M:biz.ritter.javapi.util.List`1.add(`0)">
                     * Adds the specified object at the end of this {@code List}.
                     *
                     * @param object
                     *            the object to add.
                     * @return always true.
                     * @throws UnsupportedOperationException
                     *                if adding to this {@code List} is not supported.
                     * @throws ClassCastException
                     *                if the class of the object is inappropriate for this
                     *                {@code List}.
                     * @throws IllegalArgumentException
                     *                if the object cannot be added to this {@code List}.</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.util.List`1.addAll(System.Int32,biz.ritter.javapi.util.Collection{`0})-->
        <member name="M:biz.ritter.javapi.util.List`1.addAll(biz.ritter.javapi.util.Collection{`0})">
                     * Adds the objects in the specified collection to the end of this {@code List}. The
                     * objects are added in the order in which they are returned from the
                     * collection's iterator.
                     *
                     * @param collection
                     *            the collection of objects.
                     * @return {@code true} if this {@code List} is modified, {@code false} otherwise
                     *         (i.e. if the passed collection was empty).
                     * @throws UnsupportedOperationException
                     *                if adding to this {@code List} is not supported.
                     * @throws ClassCastException
                     *                if the class of an object is inappropriate for this
                     *                {@code List}.
                     * @throws IllegalArgumentException
                     *                if an object cannot be added to this {@code List}.</member>
        <member name="M:biz.ritter.javapi.util.List`1.clear">
                     * Removes all elements from this {@code List}, leaving it empty.
                     *
                     * @throws UnsupportedOperationException
                     *                if removing from this {@code List} is not supported.
                     * @see #isEmpty
                     * @see #size</member>
        <member name="M:biz.ritter.javapi.util.List`1.contains(System.Object)">
                     * Tests whether this {@code List} contains the specified object.
                     *
                     * @param object
                     *            the object to search for.
                     * @return {@code true} if object is an element of this {@code List}, {@code false}
                     *         otherwise</member>
        <member name="M:biz.ritter.javapi.util.List`1.containsAll(biz.ritter.javapi.util.Collection{`0})">
                     * Tests whether this {@code List} contains all objects contained in the
                     * specified collection.
                     *
                     * @param collection
                     *            the collection of objects
                     * @return {@code true} if all objects in the specified collection are
                     *         elements of this {@code List}, {@code false} otherwise.</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.util.List`1.get(System.Int32)-->
        <member name="M:biz.ritter.javapi.util.List`1.indexOf(System.Object)">
                     * Searches this {@code List} for the specified object and returns the index of the
                     * first occurrence.
                     *
                     * @param object
                     *            the object to search for.
                     * @return the index of the first occurrence of the object or -1 if the
                     *         object was not found.</member>
        <member name="M:biz.ritter.javapi.util.List`1.isEmpty">
                     * Returns whether this {@code List} contains no elements.
                     *
                     * @return {@code true} if this {@code List} has no elements, {@code false}
                     *         otherwise.
                     * @see #size</member>
        <member name="M:biz.ritter.javapi.util.List`1.iterator">
                     * Returns an iterator on the elements of this {@code List}. The elements are
                     * iterated in the same order as they occur in the {@code List}.
                     *
                     * @return an iterator on the elements of this {@code List}.
                     * @see Iterator</member>
        <member name="M:biz.ritter.javapi.util.List`1.lastIndexOf(System.Object)">
                     * Searches this {@code List} for the specified object and returns the index of the
                     * last occurrence.
                     *
                     * @param object
                     *            the object to search for.
                     * @return the index of the last occurrence of the object, or -1 if the
                     *         object was not found.</member>
        <member name="M:biz.ritter.javapi.util.List`1.listIterator">
                     * Returns a {@code List} iterator on the elements of this {@code List}. The elements are
                     * iterated in the same order that they occur in the {@code List}.
                     *
                     * @return a {@code List} iterator on the elements of this {@code List}
                     *
                     * @see ListIterator</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.util.List`1.listIterator(System.Int32)-->
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.util.List`1.remove(System.Int32)-->
        <member name="M:biz.ritter.javapi.util.List`1.remove(System.Object)">
                     * Removes the first occurrence of the specified object from this {@code List}.
                     *
                     * @param object
                     *            the object to remove.
                     * @return true if this {@code List} was modified by this operation, false
                     *         otherwise.
                     * @throws UnsupportedOperationException
                     *                if removing from this {@code List} is not supported.</member>
        <member name="M:biz.ritter.javapi.util.List`1.removeAll(biz.ritter.javapi.util.Collection{`0})">
                     * Removes all occurrences in this {@code List} of each object in the specified
                     * collection.
                     *
                     * @param collection
                     *            the collection of objects to remove.
                     * @return {@code true} if this {@code List} is modified, {@code false} otherwise.
                     * @throws UnsupportedOperationException
                     *                if removing from this {@code List} is not supported.</member>
        <member name="M:biz.ritter.javapi.util.List`1.retainAll(biz.ritter.javapi.util.Collection{`0})">
                     * Removes all objects from this {@code List} that are not contained in the
                     * specified collection.
                     *
                     * @param collection
                     *            the collection of objects to retain.
                     * @return {@code true} if this {@code List} is modified, {@code false} otherwise.
                     * @throws UnsupportedOperationException
                     *                if removing from this {@code List} is not supported.</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.util.List`1.set(System.Int32,`0)-->
        <member name="M:biz.ritter.javapi.util.List`1.size">
                     * Returns the number of elements in this {@code List}.
                     *
                     * @return the number of elements in this {@code List}.</member>
        <member name="M:biz.ritter.javapi.util.List`1.subList(System.Int32,System.Int32)">
                     * Returns a {@code List} of the specified portion of this {@code List} from the given start
                     * index to the end index minus one. The returned {@code List} is backed by this
                     * {@code List} so changes to it are reflected by the other.
                     *
                     * @param start
                     *            the index at which to start the sublist.
                     * @param end
                     *            the index one past the end of the sublist.
                     * @return a list of a portion of this {@code List}.
                     * @throws IndexOutOfBoundsException
                     *                if {@code start &lt; 0, start &gt; end} or {@code end &gt;
                     *                size()}</member>
        <member name="M:biz.ritter.javapi.util.List`1.toArray">
                     * Returns an array containing all elements contained in this {@code List}.
                     *
                     * @return an array of the elements from this {@code List}.</member>
        <member name="M:biz.ritter.javapi.util.List`1.toArray``1(``0[])">
                     * Returns an array containing all elements contained in this {@code List}. If the
                     * specified array is large enough to hold the elements, the specified array
                     * is used, otherwise an array of the same type is created. If the specified
                     * array is used and is larger than this {@code List}, the array element following
                     * the collection elements is set to null.
                     *
                     * @param array
                     *            the array.
                     * @return an array of the elements from this {@code List}.
                     * @throws ArrayStoreException
                     *                if the type of an element in this {@code List} cannot be stored
                     *                in the type of the specified array.</member>
        <member name="T:biz.ritter.javapi.util.ListIterator`1">
                 * An ListIterator is used to sequence over a List of objects. ListIterator can
                 * move backwards or forwards through the list.</member>
        <member name="M:biz.ritter.javapi.util.ListIterator`1.add(`0)">
                     * Inserts the specified object into the list between {@code next} and
                     * {@code previous}. The object inserted will be the previous object.
                     *
                     * @param object
                     *            the object to insert.
                     * @throws UnsupportedOperationException
                     *             if adding is not supported by the list being iterated.
                     * @throws ClassCastException
                     *             if the class of the object is inappropriate for the list.
                     * @throws IllegalArgumentException
                     *             if the object cannot be added to the list.</member>
        <member name="M:biz.ritter.javapi.util.ListIterator`1.hasNext">
                     * Returns whether there are more elements to iterate.
                     *
                     * @return {@code true} if there are more elements, {@code false} otherwise.
                     * @see #next</member>
        <member name="M:biz.ritter.javapi.util.ListIterator`1.hasPrevious">
                     * Returns whether there are previous elements to iterate.
                     *
                     * @return {@code true} if there are previous elements, {@code false}
                     *         otherwise.
                     * @see #previous</member>
        <member name="M:biz.ritter.javapi.util.ListIterator`1.next">
                     * Returns the next object in the iteration.
                     *
                     * @return the next object.
                     * @throws NoSuchElementException
                     *             if there are no more elements.
                     * @see #hasNext</member>
        <member name="M:biz.ritter.javapi.util.ListIterator`1.nextIndex">
                     * Returns the index of the next object in the iteration.
                     *
                     * @return the index of the next object, or the size of the list if the
                     *         iterator is at the end.
                     * @throws NoSuchElementException
                     *             if there are no more elements.
                     * @see #next</member>
        <member name="M:biz.ritter.javapi.util.ListIterator`1.previous">
                     * Returns the previous object in the iteration.
                     *
                     * @return the previous object.
                     * @throws NoSuchElementException
                     *             if there are no previous elements.
                     * @see #hasPrevious</member>
        <member name="M:biz.ritter.javapi.util.ListIterator`1.previousIndex">
                     * Returns the index of the previous object in the iteration.
                     *
                     * @return the index of the previous object, or -1 if the iterator is at the
                     *         beginning.
                     * @throws NoSuchElementException
                     *             if there are no previous elements.
                     * @see #previous</member>
        <member name="M:biz.ritter.javapi.util.ListIterator`1.remove">
                     * Removes the last object returned by {@code next} or {@code previous} from
                     * the list.
                     *
                     * @throws UnsupportedOperationException
                     *             if removing is not supported by the list being iterated.
                     * @throws IllegalStateException
                     *             if {@code next} or {@code previous} have not been called, or
                     *             {@code remove} or {@code add} have already been called after
                     *             the last call to {@code next} or {@code previous}.</member>
        <member name="M:biz.ritter.javapi.util.ListIterator`1.set(`0)">
                     * Replaces the last object returned by {@code next} or {@code previous}
                     * with the specified object.
                     *
                     * @param object
                     *            the object to set.
                     * @throws UnsupportedOperationException
                     *             if setting is not supported by the list being iterated
                     * @throws ClassCastException
                     *             if the class of the object is inappropriate for the list.
                     * @throws IllegalArgumentException
                     *             if the object cannot be added to the list.
                     * @throws IllegalStateException
                     *             if {@code next} or {@code previous} have not been called, or
                     *             {@code remove} or {@code add} have already been called after
                     *             the last call to {@code next} or {@code previous}.</member>
        <member name="T:biz.ritter.javapi.util.Locale">
            <summary>
                <code>Locale</code> represents a language/countrycombination. It is an identifier
            which dictates particular conventions for the presentation of information.
            The language codes are two letter lowercase codes as defined by ISO-639. The
            country codes are three letter uppercase codes as defined by ISO-3166.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.util.Locale.CANADA">
                     * Locale instance for en_CA.</member>
        <member name="F:biz.ritter.javapi.util.Locale.CANADA_FRENCH">
                     * Locale instance for fr_CA.</member>
        <member name="F:biz.ritter.javapi.util.Locale.CHINA">
                     * Locale instance for zh_CN.</member>
        <member name="F:biz.ritter.javapi.util.Locale.CHINESE">
                     * Locale instance for zh.</member>
        <member name="F:biz.ritter.javapi.util.Locale.ENGLISH">
                     * Locale instance for en.</member>
        <member name="F:biz.ritter.javapi.util.Locale.FRANCE">
                     * Locale instance for fr_FR.</member>
        <member name="F:biz.ritter.javapi.util.Locale.FRENCH">
                     * Locale instance for fr.</member>
        <member name="F:biz.ritter.javapi.util.Locale.GERMAN">
                     * Locale instance for de.</member>
        <member name="F:biz.ritter.javapi.util.Locale.GERMANY">
                     * Locale instance for de_DE.</member>
        <member name="F:biz.ritter.javapi.util.Locale.ITALIAN">
                     * Locale instance for it.</member>
        <member name="F:biz.ritter.javapi.util.Locale.ITALY">
                     * Locale instance for it_IT.</member>
        <member name="F:biz.ritter.javapi.util.Locale.JAPAN">
                     * Locale instance for ja_JP.</member>
        <member name="F:biz.ritter.javapi.util.Locale.JAPANESE">
                     * Locale instance for ja.</member>
        <member name="F:biz.ritter.javapi.util.Locale.KOREA">
                     * Locale instance for ko_KR.</member>
        <member name="F:biz.ritter.javapi.util.Locale.KOREAN">
                     * Locale instance for ko.</member>
        <member name="F:biz.ritter.javapi.util.Locale.PRC">
                     * Locale instance for zh_CN.</member>
        <member name="F:biz.ritter.javapi.util.Locale.SIMPLIFIED_CHINESE">
                     * Locale instance for zh_CN.</member>
        <member name="F:biz.ritter.javapi.util.Locale.TAIWAN">
                     * Locale instance for zh_TW.</member>
        <member name="F:biz.ritter.javapi.util.Locale.TRADITIONAL_CHINESE">
                     * Locale instance for zh_TW.</member>
        <member name="F:biz.ritter.javapi.util.Locale.UK">
                     * Locale instance for en_GB.</member>
        <member name="F:biz.ritter.javapi.util.Locale.US">
                     * Locale instance for en_US.</member>
        <member name="M:biz.ritter.javapi.util.Locale.#ctor">
                     * Constructs a default.</member>
        <member name="M:biz.ritter.javapi.util.Locale.#ctor(System.String)">
                     * Constructs a new {@code Locale} using the specified language.
                     *
                     * @param language
                     *            the language this {@code Locale} represents.</member>
        <member name="M:biz.ritter.javapi.util.Locale.#ctor(System.String,System.String)">
            <summary>
            Create a new Locale instance with language and country
            </summary>
            <param name="country">ISO 3166 two char country code</param>
            <param name="language">ISO 639 two char language code</param>
        </member>
        <member name="M:biz.ritter.javapi.util.Locale.getAvailableLocales">
                     * Gets all list of installed {@code Locale}. At least a {@code Locale} that is equal to
                     * {@code Locale.US} must be contained in this array.
                     *
                     * @return an array of {@code Locale}s.</member>
        <member name="M:biz.ritter.javapi.util.Locale.getCountry">
                     * Gets the country code for this {@code Locale} or an empty string of no country
                     * was set.
                     *
                     * @return a country code.</member>
        <member name="M:biz.ritter.javapi.util.Locale.getDefault">
                     * Gets the default {@code Locale}.
                     *
                     * @return the default {@code Locale}.</member>
        <member name="M:biz.ritter.javapi.util.Locale.getDisplayCountry">
                     * Gets the full country name in the default {@code Locale} for the country code of
                     * this {@code Locale}. If there is no matching country name, the country code is
                     * returned.
                     *
                     * @return a country name.</member>
        <member name="M:biz.ritter.javapi.util.Locale.getDisplayCountry(biz.ritter.javapi.util.Locale)">
                     * Gets the full country name in the specified {@code Locale} for the country code
                     * of this {@code Locale}. If there is no matching country name, the country code is
                     * returned.
                     *
                     * @param locale
                     *            the {@code Locale} for which the display name is retrieved.
                     * @return a country name.</member>
        <member name="M:biz.ritter.javapi.util.Locale.getDisplayLanguage">
                     * Gets the full language name in the default {@code Locale} for the language code
                     * of this {@code Locale}. If there is no matching language name, the language code
                     * is returned.
                     *
                     * @return a language name.</member>
        <member name="M:biz.ritter.javapi.util.Locale.getDisplayLanguage(biz.ritter.javapi.util.Locale)">
                     * Gets the full language name in the specified {@code Locale} for the language code
                     * of this {@code Locale}. If there is no matching language name, the language code
                     * is returned.
                     *
                     * @param locale
                     *            the {@code Locale} for which the display name is retrieved.
                     * @return a language name.</member>
        <member name="M:biz.ritter.javapi.util.Locale.getDisplayName">
                     * Gets the full language, country, and variant names in the default {@code Locale}
                     * for the codes of this {@code Locale}.
                     *
                     * @return a {@code Locale} name.</member>
        <member name="M:biz.ritter.javapi.util.Locale.getDisplayName(biz.ritter.javapi.util.Locale)">
                     * Gets the full language, country, and variant names in the specified
                     * Locale for the codes of this {@code Locale}.
                     *
                     * @param locale
                     *            the {@code Locale} for which the display name is retrieved.
                     * @return a {@code Locale} name.</member>
        <member name="M:biz.ritter.javapi.util.Locale.getISO3Language">
                     * Gets the three letter ISO language code which corresponds to the language
                     * code for this {@code Locale}.
                     *
                     * @return a three letter ISO language code.
                     * @throws MissingResourceException
                     *                if there is no matching three letter ISO language code.</member>
        <member name="M:biz.ritter.javapi.util.Locale.getLanguage">
                     * Gets the language code for this {@code Locale} or the empty string of no language
                     * was set.
                     *
                     * @return a language code.</member>
        <member name="M:biz.ritter.javapi.util.Locale.GetHashCode">
                     * Returns an integer hash code for the receiver. Objects which are equal
                     * return the same value for this method.
                     *
                     * @return the receiver's hash.
                     * @see #equals</member>
        <member name="M:biz.ritter.javapi.util.Locale.ToString">
                     * Returns the string representation of this {@code Locale}.
                     * @return the string representation of this {@code Locale}.</member>
        <member name="T:biz.ritter.javapi.util.Map`2">
            <summary>
            A <code>Map</code> is a data structure consisting of a set of keys and values
            in which each key is mapped to a single value.  The class of the objects
            used as keys is declared when the <code>Map</code> is declared, as is the
            class of the corresponding values.
            <p />
            A <code>Map</code> provides helper methods to iterate through all of the
            keys contained in it, as well as various methods to access and update
            the key/value pairs.
            </summary>
            <typeparam name="K">key type</typeparam>
            <typeparam name="V">value type</typeparam>
        </member>
        <member name="M:biz.ritter.javapi.util.Map`2.clear">
                     * Removes all elements from this {@code Map}, leaving it empty.
                     *
                     * @throws UnsupportedOperationException
                     *                if removing elements from this {@code Map} is not supported.
                     * @see #isEmpty()
                     * @see #size()</member>
        <member name="M:biz.ritter.javapi.util.Map`2.containsKey(System.Object)">
                     * Returns whether this {@code Map} contains the specified key.
                     *
                     * @param key
                     *            the key to search for.
                     * @return {@code true} if this map contains the specified key,
                     *         {@code false} otherwise.</member>
        <member name="M:biz.ritter.javapi.util.Map`2.containsValue(System.Object)">
                     * Returns whether this {@code Map} contains the specified value.
                     *
                     * @param value
                     *            the value to search for.
                     * @return {@code true} if this map contains the specified value,
                     *         {@code false} otherwise.</member>
        <member name="M:biz.ritter.javapi.util.Map`2.entrySet">
                     * Returns a {@code Set} containing all of the mappings in this {@code Map}. Each mapping is
                     * an instance of {@link Map.Entry}. As the {@code Set} is backed by this {@code Map},
                     * changes in one will be reflected in the other.
                     *
                     * @return a set of the mappings</member>
        <member name="M:biz.ritter.javapi.util.Map`2.get(System.Object)">
                     * Compares the argument to the receiver, and returns {@code true} if the
                     * specified object is a {@code Map} and both {@code Map}s contain the same mappings.
                     *
                     * @param object
                     *            the {@code Object} to compare with this {@code Object}.
                     * @return boolean {@code true} if the {@code Object} is the same as this {@code Object}
                     *         {@code false} if it is different from this {@code Object}.
                     * @see #hashCode()
                     * @see #entrySet()
                     *
                    bool equals(Object obj);
                     * Returns the value of the mapping with the specified key.
                     *
                     * @param key
                     *            the key.
                     * @return the value of the mapping with the specified key, or {@code null}
                     *         if no mapping for the specified key is found.</member>
        <member name="M:biz.ritter.javapi.util.Map`2.isEmpty">
                     * Returns an integer hash code for the receiver. {@code Object}s which are equal
                     * return the same value for this method.
                     *
                     * @return the receiver's hash.
                     * @see #equals(Object)
                     *
                    int hashCode();
                     * Returns whether this map is empty.
                     *
                     * @return {@code true} if this map has no elements, {@code false}
                     *         otherwise.
                     * @see #size()</member>
        <member name="M:biz.ritter.javapi.util.Map`2.keySet">
                     * Returns a set of the keys contained in this {@code Map}. The {@code Set} is backed by
                     * this {@code Map} so changes to one are reflected by the other. The {@code Set} does not
                     * support adding.
                     *
                     * @return a set of the keys.</member>
        <member name="M:biz.ritter.javapi.util.Map`2.put(`0,`1)">
                     * Maps the specified key to the specified value.
                     *
                     * @param key
                     *            the key.
                     * @param value
                     *            the value.
                     * @return the value of any previous mapping with the specified key or
                     *         {@code null} if there was no mapping.
                     * @throws UnsupportedOperationException
                     *                if adding to this {@code Map} is not supported.
                     * @throws ClassCastException
                     *                if the class of the key or value is inappropriate for
                     *                this {@code Map}.
                     * @throws IllegalArgumentException
                     *                if the key or value cannot be added to this {@code Map}.
                     * @throws NullPointerException
                     *                if the key or value is {@code null} and this {@code Map} does
                     *                not support {@code null} keys or values.</member>
        <member name="M:biz.ritter.javapi.util.Map`2.putAll(biz.ritter.javapi.util.Map{`0,`1})">
                     * Copies every mapping in the specified {@code Map} to this {@code Map}.
                     *
                     * @param map
                     *            the {@code Map} to copy mappings from.
                     * @throws UnsupportedOperationException
                     *                if adding to this {@code Map} is not supported.
                     * @throws ClassCastException
                     *                if the class of a key or a value of the specified {@code Map} is
                     *                inappropriate for this {@code Map}.
                     * @throws IllegalArgumentException
                     *                if a key or value cannot be added to this {@code Map}.
                     * @throws NullPointerException
                     *                if a key or value is {@code null} and this {@code Map} does not
                     *                support {@code null} keys or values.</member>
        <member name="M:biz.ritter.javapi.util.Map`2.remove(System.Object)">
                     * Removes a mapping with the specified key from this {@code Map}.
                     *
                     * @param key
                     *            the key of the mapping to remove.
                     * @return the value of the removed mapping or {@code null} if no mapping
                     *         for the specified key was found.
                     * @throws UnsupportedOperationException
                     *                if removing from this {@code Map} is not supported.</member>
        <member name="M:biz.ritter.javapi.util.Map`2.size">
                     * Returns the number of mappings in this {@code Map}.
                     *
                     * @return the number of mappings in this {@code Map}.</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.util.Map`2.values-->
        <member name="T:biz.ritter.javapi.util.MapNS.Entry`2">
                     * {@code Map.Entry} is a key/value mapping contained in a {@code Map}.</member>
        <member name="M:biz.ritter.javapi.util.MapNS.Entry`2.getKey">
                         * Returns the key.
                         *
                         * @return the key</member>
        <member name="M:biz.ritter.javapi.util.MapNS.Entry`2.getValue">
                         * Returns the value.
                         *
                         * @return the value</member>
        <member name="M:biz.ritter.javapi.util.MapNS.Entry`2.setValue(`1)">
                         * Returns an integer hash code for the receiver. {@code Object} which are
                         * equal return the same value for this method.
                         *
                         * @return the receiver's hash code.
                         * @see #equals(Object)
                         *
                        int hashCode();
                         * Sets the value of this entry to the specified value, replacing any
                         * existing value.
                         *
                         * @param object
                         *            the new value to set.
                         * @return object the replaced value of this entry.</member>
        <member name="T:biz.ritter.javapi.util.MapEntry`2">
                 * MapEntry is an internal class which provides an implementation of Map.Entry.</member>
        <member name="T:biz.ritter.javapi.util.MissingFormatWidthException">
                 * A {@code MissingFormatWidthException} will be thrown if the format width is
                 * missing but is required.
                 *
                 * @see java.lang.RuntimeException</member>
        <member name="M:biz.ritter.javapi.util.MissingFormatWidthException.#ctor(System.String)">
                     * Constructs a new {@code MissingFormatWidthException} with the specified
                     * format specifier.
                     *
                     * @param s
                     *           the specified format specifier.</member>
        <member name="M:biz.ritter.javapi.util.MissingFormatWidthException.getFormatSpecifier">
                     * Returns the format specifier associated with the exception.
                     *
                     * @return the format specifier associated with the exception.</member>
        <member name="M:biz.ritter.javapi.util.MissingFormatWidthException.getMessage">
                     * Returns the message of the exception.
                     *
                     * @return the message of the exception.</member>
        <member name="T:biz.ritter.javapi.util.MissingResourceException">
                 * A {@code MissingResourceException} is thrown by ResourceBundle when a
                 * resource bundle cannot be found or a resource is missing from a resource
                 * bundle.
                 *
                 * @see ResourceBundle
                 * @see java.lang.RuntimeException</member>
        <member name="M:biz.ritter.javapi.util.MissingResourceException.#ctor(System.String,System.String,System.String)">
                     * Constructs a new {@code MissingResourceException} with the stack trace,
                     * message, the class name of the resource bundle and the name of the
                     * missing resource filled in.
                     *
                     * @param detailMessage
                     *           the detail message for the exception.
                     * @param className
                     *           the class name of the resource bundle.
                     * @param resourceName
                     *           the name of the missing resource.</member>
        <member name="M:biz.ritter.javapi.util.MissingResourceException.getClassName">
                     * Returns the class name of the resource bundle from which a resource could
                     * not be found, or in the case of a missing resource, the name of the
                     * missing resource bundle.
                     *
                     * @return the class name of the resource bundle.</member>
        <member name="M:biz.ritter.javapi.util.MissingResourceException.getKey">
                     * Returns the name of the missing resource, or an empty string if the
                     * resource bundle is missing.
                     *
                     * @return the name of the missing resource.</member>
        <!--FIXME: Invalid documentation markup was found for member T:biz.ritter.javapi.util.NavigableMap`2-->
        <member name="M:biz.ritter.javapi.util.NavigableMap`2.firstEntry">
                     * Answers the entry with the smallest key, or null if the map is empty.
                     *
                     * @return the entry with the smallest key, or null if the map is empty</member>
        <member name="M:biz.ritter.javapi.util.NavigableMap`2.lastEntry">
                     * Answers the entry with the biggest key, or null if the map is empty.
                     *
                     * @return the entry with the biggest key, or null if the map is empty</member>
        <member name="M:biz.ritter.javapi.util.NavigableMap`2.pollFirstEntry">
                     * Deletes and answers the entry with the smallest key, or null if the map
                     * is empty.
                     *
                     * @return the entry with the smallest key, or null if the map is empty</member>
        <member name="M:biz.ritter.javapi.util.NavigableMap`2.pollLastEntry">
                     * Deletes and answers the entry with the biggest key, or null if the map is
                     * empty.
                     *
                     * @return the entry with the biggest key, or null if the map is empty</member>
        <member name="M:biz.ritter.javapi.util.NavigableMap`2.ceilingEntry(`0)">
                     * Answers an entry related with the smallest key greater than or equal to
                     * the specified key, or null if no such key.
                     *
                     * @param key
                     *            the key
                     * @return the entry, or null if no such key
                     * @throws ClassCastException
                     *             if the key cannot be compared with the keys in the map
                     * @throws NullPointerException
                     *             if the key is null and the map can not contain null key</member>
        <member name="M:biz.ritter.javapi.util.NavigableMap`2.ceilingKey(`0)">
                     * Answers the smallest key greater than or equal to the specified key, or
                     * null if no such key.
                     *
                     * @param key
                     *            the key
                     * @return the smallest key greater than or equal to key, or null if no such
                     *         key
                     * @throws ClassCastException
                     *             if the key cannot be compared with the keys in the map
                     * @throws NullPointerException
                     *             if the key is null and the map can not contain null key</member>
        <member name="M:biz.ritter.javapi.util.NavigableMap`2.higherEntry(`0)">
                     * Answers an entry related with the smallest key greater than the specified
                     * key, or null if no such key.
                     *
                     * @param key
                     *            the key
                     * @return the entry, or null if no such key
                     * @throws ClassCastException
                     *             if the key cannot be compared with the keys in the map
                     * @throws NullPointerException
                     *             if the key is null and the map can not contain null key</member>
        <member name="M:biz.ritter.javapi.util.NavigableMap`2.higherKey(`0)">
                     * Answers the smallest key greater than the specified key, or null if no
                     * such key.
                     *
                     * @param key
                     *            the key
                     * @return the smallest key greater than key, or null if no such key
                     * @throws ClassCastException
                     *             if the key cannot be compared with the keys in the map
                     * @throws NullPointerException
                     *             if the key is null and the map can not contain null key</member>
        <member name="M:biz.ritter.javapi.util.NavigableMap`2.floorEntry(`0)">
                     * Answers an entry related with the biggest key less than or equal to the
                     * specified key, or null if no such key.
                     *
                     * @param key
                     *            the key
                     * @return the entry, or null if no such key
                     * @throws ClassCastException
                     *             if the key cannot be compared with the keys in the map
                     * @throws NullPointerException
                     *             if the key is null and the map can not contain null key</member>
        <member name="M:biz.ritter.javapi.util.NavigableMap`2.floorKey(`0)">
                     * Answers the biggest key less than or equal to the specified key, or null
                     * if no such key.
                     *
                     * @param key
                     *            the key
                     * @return the biggest key less than or equal to key, or null if no such key
                     * @throws ClassCastException
                     *             if the key cannot be compared with the keys in the map
                     * @throws NullPointerException
                     *             if the key is null and the map can not contain null key</member>
        <member name="M:biz.ritter.javapi.util.NavigableMap`2.lowerEntry(`0)">
                     * Answers an entry related with the biggest key less than the specified
                     * key, or null if no such key.
                     *
                     * @param key
                     *            the key
                     * @return the entry, or null if no such key
                     * @throws ClassCastException
                     *             if the key cannot be compared with the keys in the map
                     * @throws NullPointerException
                     *             if the key is null and the map can not contain null key</member>
        <member name="M:biz.ritter.javapi.util.NavigableMap`2.lowerKey(`0)">
                     * Answers the biggest key less than the specified key, or null if no such
                     * key.
                     *
                     * @param key
                     *            the key
                     * @return the biggest key less than key, or null if no such key
                     * @throws ClassCastException
                     *             if the key cannot be compared with the keys in the map
                     * @throws NullPointerException
                     *             if the key is null and the map can not contain null key</member>
        <member name="M:biz.ritter.javapi.util.NavigableMap`2.navigableKeySet">
                     * Answers a NavigableSet view of the keys in ascending order.
                     *
                     * @return the navigable set view</member>
        <member name="M:biz.ritter.javapi.util.NavigableMap`2.descendingMap">
                     * Answers a reverse order view of the map.
                     *
                     * @return the reverse order view of the map</member>
        <member name="M:biz.ritter.javapi.util.NavigableMap`2.descendingKeySet">
                     * Answers a NavigableSet view of the keys in descending order.
                     *
                     * @return the navigable set view</member>
        <member name="M:biz.ritter.javapi.util.NavigableMap`2.subMap(`0,System.Boolean,`0,System.Boolean)">
                     * Answers a view of part of the map whose keys is from startKey to endKey.
                     *
                     * @param startKey
                     *            the start key
                     * @param startInclusive
                     *            true if the start key is in the returned map
                     * @param endKey
                     *            the end key
                     * @param endInclusive
                     *            true if the end key is in the returned map
                     * @return the sub-map view
                     *
                     * @exception ClassCastException
                     *                when the class of the start or end key is inappropriate
                     *                for this SubMap
                     * @exception NullPointerException
                     *                when the start or end key is null and this SortedMap does
                     *                not support null keys
                     * @exception IllegalArgumentException
                     *                when the start key is greater than the end key</member>
        <member name="M:biz.ritter.javapi.util.NavigableMap`2.headMap(`0,System.Boolean)">
                     * Answers a view of the head of the map whose keys are smaller than (or
                     * equal to, depends on inclusive argument) endKey.
                     *
                     * @param endKey
                     *            the end key
                     * @param inclusive
                     *            true if the end key is in the returned map
                     * @return the head-map view
                     *
                     * @exception ClassCastException
                     *                when the class of the end key is inappropriate for this
                     *                SubMap
                     * @exception NullPointerException
                     *                when the end key is null and this SortedMap does not
                     *                support null keys
                     * @exception IllegalArgumentException
                     *                when the map is range-limited and end key is out of the
                     *                range of the map</member>
        <member name="M:biz.ritter.javapi.util.NavigableMap`2.tailMap(`0,System.Boolean)">
                     * Answers a view of the tail of the map whose keys are bigger than (or
                     * equal to, depends on inclusive argument) startKey.
                     *
                     * @param startKey
                     *            the start key
                     * @param inclusive
                     *            true if the start key is in the returned map
                     * @return the tail-map view
                     *
                     * @exception ClassCastException
                     *                when the class of the start key is inappropriate for this
                     *                SubMap
                     * @exception NullPointerException
                     *                when the start key is null and this SortedMap does not
                     *                support null keys
                     * @exception IllegalArgumentException
                     *                when the map is range-limited and start key is out of the
                     *                range of the map</member>
        <!--FIXME: Invalid documentation markup was found for member T:biz.ritter.javapi.util.NavigableSet`1-->
        <member name="M:biz.ritter.javapi.util.NavigableSet`1.pollFirst">
                     * Deletes and answers the smallest element, or null if the set is empty.
                     *
                     * @return the smallest element, or null if the set is empty</member>
        <member name="M:biz.ritter.javapi.util.NavigableSet`1.pollLast">
                     * Deletes and answers the biggest element, or null if the set is empty.
                     *
                     * @return the biggest element, or null if the set is empty</member>
        <member name="M:biz.ritter.javapi.util.NavigableSet`1.higher(`0)">
                     * Answers the smallest element bigger than the specified one, or null if no
                     * such element.
                     *
                     * @param e
                     *            the specified element
                     * @return the smallest element bigger than the specified one, or null if no
                     *         such element
                     * @throws ClassCastException
                     *             if the element cannot be compared with the ones in the set
                     * @throws NullPointerException
                     *             if the element is null and the set can not contain null</member>
        <member name="M:biz.ritter.javapi.util.NavigableSet`1.ceiling(`0)">
                     * Answers the smallest element bigger than or equal to the specified one,
                     * or null if no such element.
                     *
                     * @param e
                     *            the specified element
                     * @return the smallest element bigger than or equal to the specified one,
                     *         or null if no such element
                     * @throws ClassCastException
                     *             if the element cannot be compared with the ones in the set
                     * @throws NullPointerException
                     *             if the element is null and the set can not contain null</member>
        <member name="M:biz.ritter.javapi.util.NavigableSet`1.lower(`0)">
                     * Answers the biggest element less than the specified one, or null if no
                     * such element.
                     *
                     * @param e
                     *            the specified element
                     * @return the biggest element less than the specified one, or null if no
                     *         such element
                     * @throws ClassCastException
                     *             if the element cannot be compared with the ones in the set
                     * @throws NullPointerException
                     *             if the element is null and the set can not contain null</member>
        <member name="M:biz.ritter.javapi.util.NavigableSet`1.floor(`0)">
                     * Answers the biggest element less than or equal to the specified one, or
                     * null if no such element.
                     *
                     * @param e
                     *            the specified element
                     * @return the biggest element less than or equal to the specified one, or
                     *         null if no such element
                     * @throws ClassCastException
                     *             if the element cannot be compared with the ones in the set
                     * @throws NullPointerException
                     *             if the element is null and the set can not contain null</member>
        <member name="M:biz.ritter.javapi.util.NavigableSet`1.descendingIterator">
                     * Answers a descending iterator of this set.
                     *
                     * @return the descending iterator</member>
        <member name="M:biz.ritter.javapi.util.NavigableSet`1.descendingSet">
                     * Answers a reverse order view of this set.
                     *
                     * @return the reverse order view</member>
        <member name="M:biz.ritter.javapi.util.NavigableSet`1.subSet(`0,System.Boolean,`0,System.Boolean)">
                     * Answers a NavigableSet of the specified portion of this set which
                     * contains elements greater (or equal to, depends on startInclusive) the
                     * start element but less than (or equal to, depends on endInclusive) the
                     * end element. The returned NavigableSet is backed by this set so changes
                     * to one are reflected by the other.
                     *
                     * @param start
                     *            the start element
                     * @param startInclusive
                     *            true if the start element is in the returned set
                     * @param end
                     *            the end element
                     * @param endInclusive
                     *            true if the end element is in the returned set
                     * @return the subset
                     *
                     * @throws ClassCastException
                     *             when the start or end object cannot be compared with the
                     *             elements in this set
                     * @throws NullPointerException
                     *             when the start or end object is null and the set cannot
                     *             contain null
                     * @throws IllegalArgumentException
                     *             when the start is bigger than end; or start or end is out of
                     *             range and the set has a range</member>
        <member name="M:biz.ritter.javapi.util.NavigableSet`1.headSet(`0,System.Boolean)">
                     * Answers a NavigableSet of the specified portion of this set which
                     * contains elements less than (or equal to, depends on endInclusive) the
                     * end element. The returned NavigableSet is backed by this set so changes
                     * to one are reflected by the other.
                     *
                     * @param end
                     *            the end element
                     * @param endInclusive
                     *            true if the end element is in the returned set
                     * @return the subset
                     *
                     * @throws ClassCastException
                     *             when the end object cannot be compared with the elements in
                     *             this set
                     * @throws NullPointerException
                     *             when the end object is null and the set cannot contain handle
                     *             null
                     * @throws IllegalArgumentException
                     *             when end is out of range and the set has a range</member>
        <member name="M:biz.ritter.javapi.util.NavigableSet`1.tailSet(`0,System.Boolean)">
                     * Answers a NavigableSet of the specified portion of this set which
                     * contains elements greater (or equal to, depends on startInclusive) the
                     * start element. The returned NavigableSet is backed by this set so changes
                     * to one are reflected by the other.
                     *
                     * @param start
                     *            the start element
                     * @param startInclusive
                     *            true if the start element is in the returned set
                     * @return the subset
                     *
                     * @throws ClassCastException
                     *             when the start object cannot be compared with the elements in
                     *             this set
                     * @throws NullPointerException
                     *             when the start object is null and the set cannot contain null
                     * @throws IllegalArgumentException
                     *             when start is out of range and the set has a range</member>
        <member name="T:biz.ritter.javapi.util.NoSuchElementException">
                 * A {@code NoSuchElementException} is thrown when trying to retrieve an element
                 * past the end of an Enumeration, or the first or last element from an empty
                 * Vector.
                 *
                 * @see Enumeration
                 * @see java.lang.RuntimeException</member>
        <member name="M:biz.ritter.javapi.util.NoSuchElementException.#ctor">
                     * Constructs a new {@code NoSuchElementException} with the current stack
                     * trace filled in.</member>
        <member name="M:biz.ritter.javapi.util.NoSuchElementException.#ctor(System.String)">
                     * Constructs a new {@code NoSuchElementException} with the current stack
                     * trace and message filled in.
                     *
                     * @param detailMessage
                     *           the detail message for the exception.</member>
        <member name="T:biz.ritter.javapi.util.Observable">
                 * Observable is used to notify a group of Observer objects when a change
                 * occurs. On creation, the set of observers is empty. After a change occurred,
                 * the application can call the {@link #notifyObservers()} method. This will
                 * cause the invocation of the {@code update()} method of all registered
                 * Observers. The order of invocation is not specified. This implementation will
                 * call the Observers in the order they registered. Subclasses are completely
                 * free in what order they call the update methods.
                 *
                 * @see Observer</member>
        <member name="M:biz.ritter.javapi.util.Observable.#ctor">
                     * Constructs a new {@code Observable} object.</member>
        <member name="M:biz.ritter.javapi.util.Observable.addObserver(biz.ritter.javapi.util.Observer)">
                     * Adds the specified observer to the list of observers. If it is already
                     * registered, it is not added a second time.
                     *
                     * @param observer
                     *            the Observer to add.</member>
        <member name="M:biz.ritter.javapi.util.Observable.clearChanged">
                     * Clears the changed flag for this {@code Observable}. After calling
                     * {@code clearChanged()}, {@code hasChanged()} will return {@code false}.</member>
        <member name="M:biz.ritter.javapi.util.Observable.countObservers">
                     * Returns the number of observers registered to this {@code Observable}.
                     *
                     * @return the number of observers.</member>
        <member name="M:biz.ritter.javapi.util.Observable.deleteObserver(biz.ritter.javapi.util.Observer)">
                     * Removes the specified observer from the list of observers. Passing null
                     * won't do anything.
                     *
                     * @param observer
                     *            the observer to remove.</member>
        <member name="M:biz.ritter.javapi.util.Observable.deleteObservers">
                     * Removes all observers from the list of observers.</member>
        <member name="M:biz.ritter.javapi.util.Observable.hasChanged">
                     * Returns the changed flag for this {@code Observable}.
                     *
                     * @return {@code true} when the changed flag for this {@code Observable} is
                     *         set, {@code false} otherwise.</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.util.Observable.notifyObservers-->
        <member name="M:biz.ritter.javapi.util.Observable.notifyObservers(System.Object)">
                     * If {@code hasChanged()} returns {@code true}, calls the {@code update()}
                     * method for every Observer in the list of observers using the specified
                     * argument. Afterwards calls {@code clearChanged()}.
                     *
                     * @param data
                     *            the argument passed to {@code update()}.</member>
        <member name="M:biz.ritter.javapi.util.Observable.setChanged">
                     * Sets the changed flag for this {@code Observable}. After calling
                     * {@code setChanged()}, {@code hasChanged()} will return {@code true}.</member>
        <member name="T:biz.ritter.javapi.util.Observer">
                 * {@code Observer} is the interface to be implemented by objects that
                 * receive notification of updates on an {@code Observable} object.
                 *
                 * @see Observable</member>
        <member name="M:biz.ritter.javapi.util.Observer.update(biz.ritter.javapi.util.Observable,System.Object)">
                     * This method is called if the specified {@code Observable} object's
                     * {@code notifyObservers} method is called (because the {@code Observable}
                     * object has been updated.
                     *
                     * @param observable
                     *            the {@link Observable} object.
                     * @param data
                     *            the data passed to {@link Observable#notifyObservers(Object)}.</member>
        <member name="T:biz.ritter.javapi.util.Queue`1">
                 * This kind of collection provides advanced operations compared to basic
                 * collections, such as insertion, extraction, and inspection.
                 * <p />
                 * Generally, a queue orders its elements by means of first-in-first-out.
                 * However, a priority queue orders its elements according to a comparator
                 * specified or the elements' natural order. Furthermore, a stack orders its
                 * elements last-in-first out.
                 * <p />
                 * A typical queue does not allow {@code null} to be inserted as its element,
                 * while some implementations such as {@code LinkedList} allow it. But {@code
                 * null} should not be inserted even in these implementations, since the method
                 * {@code poll} returns {@code null} to indicate that there is no element left
                 * in the queue.
                 * <p />
                 * {@code Queue} does not provide blocking queue methods, which would block
                 * until the operation of the method is allowed. See the
                 * {@link java.util.concurrent.BlockingQueue} interface for information about
                 * blocking queue methods.</member>
        <member name="M:biz.ritter.javapi.util.Queue`1.offer(`0)">
                     * Inserts the specified element into the queue provided that the condition
                     * allows such an operation. The method is generally preferable to
                     * {@link Collection#add}, since the latter might throw an exception if the
                     * operation fails.
                     *
                     * @param o
                     *            the specified element to insert into the queue.
                     * @return {@code true} if the operation succeeds and {@code false} if it
                     *         fails.</member>
        <member name="M:biz.ritter.javapi.util.Queue`1.poll">
                     * Gets and removes the element at the head of the queue, or returns {@code
                     * null} if there is no element in the queue.
                     *
                     * @return the element at the head of the queue or {@code null} if there is
                     *         no element in the queue.</member>
        <member name="M:biz.ritter.javapi.util.Queue`1.remove">
                     * Gets and removes the element at the head of the queue. Throws a
                     * NoSuchElementException if there is no element in the queue.
                     *
                     * @return the element at the head of the queue.
                     * @throws NoSuchElementException
                     *             if there is no element in the queue.</member>
        <member name="M:biz.ritter.javapi.util.Queue`1.peek">
                     * Gets but does not remove the element at the head of the queue.
                     *
                     * @return the element at the head of the queue or {@code null} if there is
                     *         no element in the queue.</member>
        <member name="M:biz.ritter.javapi.util.Queue`1.element">
                     * Gets but does not remove the element at the head of the queue. Throws a
                     * {@code NoSuchElementException} if there is no element in the queue.
                     *
                     * @return the element at the head of the queue.
                     * @throws NoSuchElementException
                     *             if there is no element in the queue.</member>
        <member name="T:biz.ritter.javapi.util.Random">
                 * This class provides methods that generates pseudo-random numbers of different
                 * types, such as {@code int}, {@code long}, {@code double}, and {@code float}.
                 *
                 * @see Properties
                 * @see PropertyResourceBundle</member>
        <member name="F:biz.ritter.javapi.util.Random.haveNextNextGaussian">
                     * The boolean value indicating if the second Gaussian number is available.
                     *
                     * @serial</member>
        <member name="F:biz.ritter.javapi.util.Random.seed">
                     * @serial It is associated with the internal state of this generator.</member>
        <member name="F:biz.ritter.javapi.util.Random.nextNextGaussian">
                     * The second Gaussian generated number.
                     *
                     * @serial</member>
        <member name="M:biz.ritter.javapi.util.Random.#ctor">
                     * Construct a random generator with the current time of day in milliseconds
                     * as the initial state.
                     *
                     * @see #setSeed</member>
        <member name="M:biz.ritter.javapi.util.Random.#ctor(System.Int64)">
                     * Construct a random generator with the given {@code seed} as the
                     * initial state.
                     *
                     * @param seed
                     *            the seed that will determine the initial state of this random
                     *            number generator.
                     * @see #setSeed</member>
        <member name="M:biz.ritter.javapi.util.Random.next(System.Int32)">
                     * Returns a pseudo-random uniformly distributed {@code int} value of
                     * the number of bits specified by the argument {@code bits} as
                     * described by Donald E. Knuth in <i>The Art of Computer Programming,
                     * Volume 2: Seminumerical Algorithms</i>, section 3.2.1.
                     *
                     * @param bits
                     *            number of bits of the returned value.
                     * @return a pseudo-random generated int number.
                     * @see #nextBytes
                     * @see #nextDouble
                     * @see #nextFloat
                     * @see #nextInt()
                     * @see #nextInt(int)
                     * @see #nextGaussian
                     * @see #nextLong</member>
        <member name="M:biz.ritter.javapi.util.Random.nextBoolean">
                     * Returns the next pseudo-random, uniformly distributed {@code boolean} value
                     * generated by this generator.
                     *
                     * @return a pseudo-random, uniformly distributed boolean value.</member>
        <member name="M:biz.ritter.javapi.util.Random.nextBytes(System.Byte[])">
                     * Modifies the {@code byte} array by a random sequence of {@code byte}s generated by this
                     * random number generator.
                     *
                     * @param buf
                     *            non-null array to contain the new random {@code byte}s.
                     * @see #next</member>
        <member name="M:biz.ritter.javapi.util.Random.nextDouble">
                     * Generates a normally distributed random {@code double} number between 0.0
                     * inclusively and 1.0 exclusively.
                     *
                     * @return a random {@code double} in the range [0.0 - 1.0)
                     * @see #nextFloat</member>
        <member name="M:biz.ritter.javapi.util.Random.nextFloat">
                     * Generates a normally distributed random {@code float} number between 0.0
                     * inclusively and 1.0 exclusively.
                     *
                     * @return float a random {@code float} number between [0.0 and 1.0)
                     * @see #nextDouble</member>
        <member name="M:biz.ritter.javapi.util.Random.nextGaussian">
                     * Pseudo-randomly generates (approximately) a normally distributed
                     * {@code double} value with mean 0.0 and a standard deviation value
                     * of {@code 1.0} using the <i>polar method</i> of G. E. P. Box, M.
                     * E. Muller, and G. Marsaglia, as described by Donald E. Knuth in <i>The
                     * Art of Computer Programming, Volume 2: Seminumerical Algorithms</i>,
                     * section 3.4.1, subsection C, algorithm P.
                     *
                     * @return a random {@code double}
                     * @see #nextDouble</member>
        <member name="M:biz.ritter.javapi.util.Random.nextInt">
                     * Generates a uniformly distributed 32-bit {@code int} value from
                     * the random number sequence.
                     *
                     * @return a uniformly distributed {@code int} value.
                     * @see java.lang.Integer#MAX_VALUE
                     * @see java.lang.Integer#MIN_VALUE
                     * @see #next
                     * @see #nextLong</member>
        <member name="M:biz.ritter.javapi.util.Random.nextInt(System.Int32)">
                     * Returns a new pseudo-random {@code int} value which is uniformly distributed
                     * between 0 (inclusively) and the value of {@code n} (exclusively).
                     *
                     * @param n
                     *            the exclusive upper border of the range [0 - n).
                     * @return a random {@code int}.</member>
        <member name="M:biz.ritter.javapi.util.Random.nextLong">
                     * Generates a uniformly distributed 64-bit integer value from
                     * the random number sequence.
                     *
                     * @return 64-bit random integer.
                     * @see java.lang.Integer#MAX_VALUE
                     * @see java.lang.Integer#MIN_VALUE
                     * @see #next
                     * @see #nextInt()
                     * @see #nextInt(int)</member>
        <member name="M:biz.ritter.javapi.util.Random.setSeed(System.Int64)">
                     * Modifies the seed a using linear congruential formula presented in <i>The
                     * Art of Computer Programming, Volume 2</i>, Section 3.2.1.
                     *
                     * @param seed
                     *            the seed that alters the state of the random number generator.
                     * @see #next
                     * @see #Random()
                     * @see #Random(long)</member>
        <member name="T:biz.ritter.javapi.util.RandomAccess">
                 * RandomAccess is implemented by {@code List} implementations that support fast
                 * (usually constant time) random access.</member>
        <member name="T:biz.ritter.javapi.util.Set`1">
                 * A {@code Set} is a data structure which does not allow duplicate elements.
                 *
                 * @since 1.2</member>
        <member name="T:biz.ritter.javapi.util.SortedMap`2">
                 * A map that has its keys ordered. The sorting is according to either the
                 * natural ordering of its keys or the ordering given by a specified comparator.</member>
        <member name="M:biz.ritter.javapi.util.SortedMap`2.comparator">
                     * Returns the comparator used to compare keys in this sorted map.
                     *
                     * @return the comparator or {@code null} if the natural order is used.</member>
        <member name="M:biz.ritter.javapi.util.SortedMap`2.firstKey">
                     * Returns the first key in this sorted map.
                     *
                     * @return the first key in this sorted map.
                     * @throws NoSuchElementException
                     *                if this sorted map is empty.</member>
        <member name="M:biz.ritter.javapi.util.SortedMap`2.headMap(`0)">
                     * Returns a sorted map over a range of this sorted map with all keys that
                     * are less than the specified {@code endKey}. Changes to the returned
                     * sorted map are reflected in this sorted map and vice versa.
                     * <p />
                     * Note: The returned map will not allow an insertion of a key outside the
                     * specified range.
                     *
                     * @param endKey
                     *            the high boundary of the range specified.
                     * @return a sorted map where the keys are less than {@code endKey}.
                     * @throws ClassCastException
                     *             if the class of the end key is inappropriate for this sorted
                     *             map.
                     * @throws NullPointerException
                     *             if the end key is {@code null} and this sorted map does not
                     *             support {@code null} keys.
                     * @throws IllegalArgumentException
                     *             if this map is itself a sorted map over a range of another
                     *             map and the specified key is outside of its range.</member>
        <member name="M:biz.ritter.javapi.util.SortedMap`2.lastKey">
                     * Returns the last key in this sorted map.
                     *
                     * @return the last key in this sorted map.
                     * @throws NoSuchElementException
                     *                if this sorted map is empty.</member>
        <member name="M:biz.ritter.javapi.util.SortedMap`2.subMap(`0,`0)">
                     * Returns a sorted map over a range of this sorted map with all keys
                     * greater than or equal to the specified {@code startKey} and less than the
                     * specified {@code endKey}. Changes to the returned sorted map are
                     * reflected in this sorted map and vice versa.
                     * <p />
                     * Note: The returned map will not allow an insertion of a key outside the
                     * specified range.
                     *
                     * @param startKey
                     *            the low boundary of the range (inclusive).
                     * @param endKey
                     *            the high boundary of the range (exclusive),
                     * @return a sorted map with the key from the specified range.
                     * @throws ClassCastException
                     *             if the class of the start or end key is inappropriate for
                     *             this sorted map.
                     * @throws NullPointerException
                     *             if the start or end key is {@code null} and this sorted map
                     *             does not support {@code null} keys.
                     * @throws IllegalArgumentException
                     *             if the start key is greater than the end key, or if this map
                     *             is itself a sorted map over a range of another sorted map and
                     *             the specified range is outside of its range.</member>
        <member name="M:biz.ritter.javapi.util.SortedMap`2.tailMap(`0)">
                     * Returns a sorted map over a range of this sorted map with all keys that
                     * are greater than or equal to the specified {@code startKey}. Changes to
                     * the returned sorted map are reflected in this sorted map and vice versa.
                     * <p />
                     * Note: The returned map will not allow an insertion of a key outside the
                     * specified range.
                     *
                     * @param startKey
                     *            the low boundary of the range specified.
                     * @return a sorted map where the keys are greater or equal to
                     *         {@code startKey}.
                     * @throws ClassCastException
                     *             if the class of the start key is inappropriate for this
                     *             sorted map.
                     * @throws NullPointerException
                     *             if the start key is {@code null} and this sorted map does not
                     *             support {@code null} keys.
                     * @throws IllegalArgumentException
                     *             if this map itself a sorted map over a range of another map
                     *             and the specified key is outside of its range.</member>
        <member name="T:biz.ritter.javapi.util.SortedSet`1">
                 * SortedSet is a Set which iterates over its elements in a sorted order. The
                 * order is determined either by the elements natural ordering, or by a
                 * {@link Comparator} which is passed into a concrete implementation at
                 * construction time. All elements in this set must be mutually comparable. The
                 * ordering in this set must be consistent with {@code equals} of its elements.
                 *
                 * @see Comparator
                 * @see Comparable</member>
        <member name="M:biz.ritter.javapi.util.SortedSet`1.comparator">
                     * Returns the comparator used to compare elements in this {@code SortedSet}.
                     *
                     * @return a comparator or null if the natural ordering is used.</member>
        <member name="M:biz.ritter.javapi.util.SortedSet`1.first">
                     * Returns the first element in this {@code SortedSet}. The first element
                     * is the lowest element.
                     *
                     * @return the first element.
                     * @throws NoSuchElementException
                     *             when this {@code SortedSet} is empty.</member>
        <member name="M:biz.ritter.javapi.util.SortedSet`1.headSet(`0)">
                     * Returns a {@code SortedSet} of the specified portion of this
                     * {@code SortedSet} which contains elements less than the end element. The
                     * returned {@code SortedSet} is backed by this {@code SortedSet} so changes
                     * to one set are reflected by the other.
                     *
                     * @param end
                     *            the end element.
                     * @return a subset where the elements are less than {@code end}.
                     * @throws ClassCastException
                     *             when the class of the end element is inappropriate for this
                     *             SubSet.
                     * @throws NullPointerException
                     *             when the end element is null and this {@code SortedSet} does
                     *             not support null elements.</member>
        <member name="M:biz.ritter.javapi.util.SortedSet`1.last">
                     * Returns the last element in this {@code SortedSet}. The last element is
                     * the highest element.
                     *
                     * @return the last element.
                     * @throws NoSuchElementException
                     *             when this {@code SortedSet} is empty.</member>
        <member name="M:biz.ritter.javapi.util.SortedSet`1.subSet(`0,`0)">
                     * Returns a {@code SortedSet} of the specified portion of this
                     * {@code SortedSet} which contains elements greater or equal to the start
                     * element but less than the end element. The returned {@code SortedSet} is
                     * backed by this SortedMap so changes to one set are reflected by the
                     * other.
                     *
                     * @param start
                     *            the start element.
                     * @param end
                     *            the end element.
                     * @return a subset where the elements are greater or equal to {@code start}
                     *         and less than {@code end}.
                     * @throws ClassCastException
                     *             when the class of the start or end element is inappropriate
                     *             for this SubSet.
                     * @throws NullPointerException
                     *             when the start or end element is null and this
                     *             {@code SortedSet} does not support null elements.
                     * @throws IllegalArgumentException
                     *             when the start element is greater than the end element.</member>
        <member name="M:biz.ritter.javapi.util.SortedSet`1.tailSet(`0)">
                     * Returns a {@code SortedSet} of the specified portion of this
                     * {@code SortedSet} which contains elements greater or equal to the start
                     * element. The returned {@code SortedSet} is backed by this
                     * {@code SortedSet} so changes to one set are reflected by the other.
                     *
                     * @param start
                     *            the start element.
                     * @return a subset where the elements are greater or equal to {@code start} .
                     * @throws ClassCastException
                     *             when the class of the start element is inappropriate for this
                     *             SubSet.
                     * @throws NullPointerException
                     *             when the start element is null and this {@code SortedSet}
                     *             does not support null elements.</member>
        <member name="T:biz.ritter.javapi.util.Stack`1">
                 * {@code Stack} is a Last-In/First-Out(LIFO) data structure which represents a
                 * stack of objects. It enables users to pop to and push from the stack,
                 * including null objects. There is no limit to the size of the stack.</member>
        <member name="M:biz.ritter.javapi.util.Stack`1.#ctor">
                     * Constructs a stack with the default size of {@code Vector}.</member>
        <member name="M:biz.ritter.javapi.util.Stack`1.empty">
                     * Returns whether the stack is empty or not.
                     *
                     * @return {@code true} if the stack is empty, {@code false} otherwise.</member>
        <member name="M:biz.ritter.javapi.util.Stack`1.peek">
                     * Returns the element at the top of the stack without removing it.
                     *
                     * @return the element at the top of the stack.
                     * @throws EmptyStackException
                     *             if the stack is empty.
                     * @see #pop</member>
        <member name="M:biz.ritter.javapi.util.Stack`1.pop">
                     * Returns the element at the top of the stack and removes it.
                     *
                     * @return the element at the top of the stack.
                     * @throws EmptyStackException
                     *             if the stack is empty.
                     * @see #peek
                     * @see #push</member>
        <member name="M:biz.ritter.javapi.util.Stack`1.push(`0)">
                     * Pushes the specified object onto the top of the stack.
                     *
                     * @param object
                     *            The object to be added on top of the stack.
                     * @return the object argument.
                     * @see #peek
                     * @see #pop</member>
        <member name="M:biz.ritter.javapi.util.Stack`1.search(System.Object)">
                     * Returns the index of the first occurrence of the object, starting from
                     * the top of the stack.
                     *
                     * @return the index of the first occurrence of the object, assuming that
                     *         the topmost object on the stack has a distance of one.
                     * @param o
                     *            the object to be searched.</member>
        <member name="T:biz.ritter.javapi.util.StringTokenizer">
                 * The {@code StringTokenizer} class allows an application to break a string
                 * into tokens by performing code point comparison. The {@code StringTokenizer}
                 * methods do not distinguish among identifiers, numbers, and quoted strings,
                 * nor do they recognize and skip comments.
                 * <p />
                 * The set of delimiters (the codepoints that separate tokens) may be specified
                 * either at creation time or on a per-token basis.
                 * <p />
                 * An instance of {@code StringTokenizer} behaves in one of three ways,
                 * depending on whether it was created with the {@code returnDelimiters} flag
                 * having the value {@code true} or {@code false}:
                 * <ul>
                 * <li>If returnDelims is {@code false}, delimiter code points serve to separate
                 * tokens. A token is a maximal sequence of consecutive code points that are not
                 * delimiters.</li>
                 * <li>If returnDelims is {@code true}, delimiter code points are themselves
                 * considered to be tokens. In this case a token will be received for each
                 * delimiter code point.</li>
                 * </ul>
                 * <p />
                 * A token is thus either one delimiter code point, or a maximal sequence of
                 * consecutive code points that are not delimiters.
                 * <p />
                 * A {@code StringTokenizer} object internally maintains a current position
                 * within the string to be tokenized. Some operations advance this current
                 * position past the code point processed.
                 * <p />
                 * A token is returned by taking a substring of the string that was used to
                 * create the {@code StringTokenizer} object.
                 * <p />
                 * Here's an example of the use of the default delimiter {@code StringTokenizer}
                 * : <blockquote>
                 *
                 * <pre>
                 * StringTokenizer st = new StringTokenizer("this is a test");
                 * while (st.hasMoreTokens()) {
                 *     println(st.nextToken());
                 * }
                 * </pre>
                 *
                 * </blockquote>
                 * <p />
                 * This prints the following output: <blockquote>
                 *
                 * <pre>
                 *     this
                 *     is
                 *     a
                 *     test
                 * </pre>
                 *
                 * </blockquote>
                 * <p />
                 * Here's an example of how to use a {@code StringTokenizer} with a user
                 * specified delimiter: <blockquote>
                 *
                 * <pre>
                 * StringTokenizer st = new StringTokenizer(
                 *         "this is a test with supplementary characters \ud800\ud800\udc00\udc00",
                 *         " \ud800\udc00");
                 * while (st.hasMoreTokens()) {
                 *     println(st.nextToken());
                 * }
                 * </pre>
                 *
                 * </blockquote>
                 * <p />
                 * This prints the following output: <blockquote>
                 *
                 * <pre>
                 *     this
                 *     is
                 *     a
                 *     test
                 *     with
                 *     supplementary
                 *     characters
                 *     \ud800
                 *     \udc00
                 * </pre>
                 *
                 * </blockquote></member>
        <member name="M:biz.ritter.javapi.util.StringTokenizer.#ctor(System.String)">
            <summary>
            Constructs a new {@code StringTokenizer} for the parameter string using
            whitespace as the delimiter. The {@code returnDelimiters} flag is set to
            {@code false}.
            </summary>
            <param name="str">the string to be tokenized.</param>
        </member>
        <member name="M:biz.ritter.javapi.util.StringTokenizer.#ctor(System.String,System.String)">
            <summary>
            Constructs a new {@code StringTokenizer} for the parameter string using
            the specified delimiters. The {@code returnDelimiters} flag is set to
            {@code false}. If {@code delimiters} is {@code null}, this constructor
            doesn't throw an {@code Exception}, but later calls to some methods might
            throw a {@code NullPointerException}.
            </summary>
            <param name="str">the string to be tokenized.</param>
            <param name="delimiters">the delimiters to use.</param>
        </member>
        <member name="M:biz.ritter.javapi.util.StringTokenizer.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Constructs a new {@code StringTokenizer} for the parameter string using
            the specified delimiters, returning the delimiters as tokens if the
            parameter {@code returnDelimiters} is {@code true}. If {@code delimiters}
            is null this constructor doesn't throw an {@code Exception}, but later
            calls to some methods might throw a {@code NullPointerException}.
            </summary>
            <param name="str">the string to be tokenized.</param>
            <param name="delimiters">the delimiters to use.</param>
            <param name="returnDelimiters">{@code true} to return each delimiter as a token.</param>
        </member>
        <member name="M:biz.ritter.javapi.util.StringTokenizer.countTokens">
                     * Returns the number of unprocessed tokens remaining in the string.
                     *
                     * @return number of tokens that can be retreived before an {@code
                     *         Exception} will result from a call to {@code nextToken()}.</member>
        <member name="M:biz.ritter.javapi.util.StringTokenizer.hasMoreElements">
                     * Returns {@code true} if unprocessed tokens remain. This method is
                     * implemented in order to satisfy the {@code Enumeration} interface.
                     *
                     * @return {@code true} if unprocessed tokens remain.</member>
        <member name="M:biz.ritter.javapi.util.StringTokenizer.hasMoreTokens">
                     * Returns {@code true} if unprocessed tokens remain.
                     *
                     * @return {@code true} if unprocessed tokens remain.</member>
        <member name="M:biz.ritter.javapi.util.StringTokenizer.nextElement">
                     * Returns the next token in the string as an {@code Object}. This method is
                     * implemented in order to satisfy the {@code Enumeration} interface.
                     *
                     * @return next token in the string as an {@code Object}
                     * @throws NoSuchElementException
                     *                if no tokens remain.</member>
        <member name="M:biz.ritter.javapi.util.StringTokenizer.nextToken">
                     * Returns the next token in the string as a {@code String}.
                     *
                     * @return next token in the string as a {@code String}.
                     * @throws NoSuchElementException
                     *                if no tokens remain.</member>
        <member name="M:biz.ritter.javapi.util.StringTokenizer.nextToken(System.String)">
                     * Returns the next token in the string as a {@code String}. The delimiters
                     * used are changed to the specified delimiters.
                     *
                     * @param delims
                     *            the new delimiters to use.
                     * @return next token in the string as a {@code String}.
                     * @throws NoSuchElementException
                     *                if no tokens remain.</member>
        <member name="T:biz.ritter.javapi.util.Timer">
                 * {@code Timer}s are used to schedule jobs for execution in a background process. A
                 * single thread is used for the scheduling and this thread has the option of
                 * being a daemon thread. By calling {@code cancel} you can terminate a
                 * {@code Timer} and its associated thread. All tasks which are scheduled to run after
                 * this point are cancelled. Tasks are executed sequentially but are subject to
                 * the delays from other tasks run methods. If a specific task takes an
                 * excessive amount of time to run it may impact the time at which subsequent
                 * tasks may run.
                 * <p />
                 *
                 * The {@code TimerTask} does not offer any guarantees about the real-time nature of
                 * scheduling tasks as its underlying implementation relies on the
                 * {@code Object.wait(long)} method.
                 * <p />
                 * Multiple threads can share a single {@code Timer} without the need for their own
                 * synchronization.
                 * <p />
                 * A {@code Timer} can be set to schedule tasks either at a fixed rate or
                 * with a fixed period. Fixed-period execution is the default.
                 * <p />
                 * The difference between fixed-rate and fixed-period execution
                 * is the following:  With fixed-rate execution, the start time of each
                 * successive run of the task is scheduled in absolute terms without regard for when the previous
                 * task run actually took place. This can result in a series of bunched-up runs
                 * (one launched immediately after another) if busy resources or other
                 * system delays prevent the {@code Timer} from firing for an extended time.
                 * With fixed-period execution, each successive run of the
                 * task is scheduled relative to the start time of the previous run of the
                 * task, so two runs of the task are never fired closer together in time than
                 * the specified {@code period}.
                 *
                 * @see TimerTask
                 * @see java.lang.Object#wait(long)</member>
        <member name="M:biz.ritter.javapi.util.Timer.#ctor(System.String,System.Boolean)">
                        * Creates a new named {@code Timer} which may be specified to be run as a
                        * daemon thread.
                        *
                        * @param name the name of the {@code Timer}.
                        * @param isDaemon true if {@code Timer}'s thread should be a daemon thread.
                        * @throws NullPointerException is {@code name} is {@code null}</member>
        <member name="M:biz.ritter.javapi.util.Timer.#ctor(System.String)">
                        * Creates a new named {@code Timer} which does not run as a daemon thread.
                        *
                        * @param name the name of the Timer.
                        * @throws NullPointerException is {@code name} is {@code null}</member>
        <member name="M:biz.ritter.javapi.util.Timer.#ctor(System.Boolean)">
                        * Creates a new {@code Timer} which may be specified to be run as a daemon thread.
                        *
                        * @param isDaemon {@code true} if the {@code Timer}'s thread should be a daemon thread.</member>
        <member name="M:biz.ritter.javapi.util.Timer.#ctor">
                        * Creates a new non-daemon {@code Timer}.</member>
        <member name="M:biz.ritter.javapi.util.Timer.cancel">
                        * Cancels the {@code Timer} and removes any scheduled tasks. If there is a
                        * currently running task it is not affected. No more tasks may be scheduled
                        * on this {@code Timer}. Subsequent calls do nothing.</member>
        <member name="M:biz.ritter.javapi.util.Timer.purge">
                        * Removes all canceled tasks from the task queue. If there are no
                        * other references on the tasks, then after this call they are free
                        * to be garbage collected.
                        *
                        * @return the number of canceled tasks that were removed from the task
                        *         queue.</member>
        <member name="M:biz.ritter.javapi.util.Timer.schedule(biz.ritter.javapi.util.TimerTask,biz.ritter.javapi.util.Date)">
                        * Schedule a task for single execution. If {@code when} is less than the
                        * current time, it will be scheduled to be executed as soon as possible.
                        *
                        * @param task
                        *            the task to schedule.
                        * @param when
                        *            time of execution.
                        * @throws IllegalArgumentException
                        *                if {@code when.getTime() &lt; 0}.
                        * @throws IllegalStateException
                        *                if the {@code Timer} has been canceled, or if the task has been
                        *                scheduled or canceled.</member>
        <member name="M:biz.ritter.javapi.util.Timer.schedule(biz.ritter.javapi.util.TimerTask,System.Int64)">
                        * Schedule a task for single execution after a specified delay.
                        *
                        * @param task
                        *            the task to schedule.
                        * @param delay
                        *            amount of time in milliseconds before execution.
                        * @throws IllegalArgumentException
                        *                if {@code delay &lt; 0}.
                        * @throws IllegalStateException
                        *                if the {@code Timer} has been canceled, or if the task has been
                        *                scheduled or canceled.</member>
        <member name="M:biz.ritter.javapi.util.Timer.schedule(biz.ritter.javapi.util.TimerTask,System.Int64,System.Int64)">
                        * Schedule a task for repeated fixed-delay execution after a specific delay.
                        *
                        * @param task
                        *            the task to schedule.
                        * @param delay
                        *            amount of time in milliseconds before first execution.
                        * @param period
                        *            amount of time in milliseconds between subsequent executions.
                        * @throws IllegalArgumentException
                        *                if {@code delay &lt; 0} or {@code period &lt; 0}.
                        * @throws IllegalStateException
                        *                if the {@code Timer} has been canceled, or if the task has been
                        *                scheduled or canceled.</member>
        <member name="M:biz.ritter.javapi.util.Timer.schedule(biz.ritter.javapi.util.TimerTask,biz.ritter.javapi.util.Date,System.Int64)">
                        * Schedule a task for repeated fixed-delay execution after a specific time
                        * has been reached.
                        *
                        * @param task
                        *            the task to schedule.
                        * @param when
                        *            time of first execution.
                        * @param period
                        *            amount of time in milliseconds between subsequent executions.
                        * @throws IllegalArgumentException
                        *                if {@code when.getTime() &lt; 0} or {@code period &lt; 0}.
                        * @throws IllegalStateException
                        *                if the {@code Timer} has been canceled, or if the task has been
                        *                scheduled or canceled.</member>
        <member name="M:biz.ritter.javapi.util.Timer.scheduleAtFixedRate(biz.ritter.javapi.util.TimerTask,System.Int64,System.Int64)">
                        * Schedule a task for repeated fixed-rate execution after a specific delay
                        * has passed.
                        *
                        * @param task
                        *            the task to schedule.
                        * @param delay
                        *            amount of time in milliseconds before first execution.
                        * @param period
                        *            amount of time in milliseconds between subsequent executions.
                        * @throws IllegalArgumentException
                        *                if {@code delay &lt; 0} or {@code period &lt; 0}.
                        * @throws IllegalStateException
                        *                if the {@code Timer} has been canceled, or if the task has been
                        *                scheduled or canceled.</member>
        <member name="M:biz.ritter.javapi.util.Timer.scheduleAtFixedRate(biz.ritter.javapi.util.TimerTask,biz.ritter.javapi.util.Date,System.Int64)">
                        * Schedule a task for repeated fixed-rate execution after a specific time
                        * has been reached.
                        *
                        * @param task
                        *            the task to schedule.
                        * @param when
                        *            time of first execution.
                        * @param period
                        *            amount of time in milliseconds between subsequent executions.
                        * @throws IllegalArgumentException
                        *                if {@code when.getTime() &lt; 0} or {@code period &lt; 0}.
                        * @throws IllegalStateException
                        *                if the {@code Timer} has been canceled, or if the task has been
                        *                scheduled or canceled.</member>
        <member name="F:biz.ritter.javapi.util.TimerImpl.cancelled">
                        * True if the method cancel() of the Timer was called or the !!!stop()
                        * method was invoked</member>
        <member name="F:biz.ritter.javapi.util.TimerImpl.finished">
                        * True if the Timer has become garbage</member>
        <member name="F:biz.ritter.javapi.util.TimerImpl.tasks">
                        * Vector consists of scheduled events, sorted according to
                        * {@code when} field of TaskScheduled object.</member>
        <member name="M:biz.ritter.javapi.util.TimerImpl.#ctor(System.Boolean)">
                        * Starts a new timer.
                        *
                        * @param name thread's name
                        * @param isDaemon daemon thread or not</member>
        <member name="M:biz.ritter.javapi.util.TimerImpl.run">
                        * This method will be launched on separate thread for each Timer
                        * object.</member>
        <member name="M:biz.ritter.javapi.util.TimerImpl.cancel">
                        * Cancels timer.</member>
        <member name="T:biz.ritter.javapi.util.TimerTask">
                 * The {@code TimerTask} class represents a task to run at a specified time. The task
                 * may be run once or repeatedly.
                 *
                 * @see Timer
                 * @see java.lang.Object#wait(long)</member>
        <member name="M:biz.ritter.javapi.util.TimerTask.#ctor">
                     * Creates a new {@code TimerTask}.</member>
        <member name="M:biz.ritter.javapi.util.TimerTask.cancel">
                     * Cancels the {@code TimerTask} and removes it from the {@code Timer}'s queue. Generally, it
                     * returns {@code false} if the call did not prevent a {@code TimerTask} from running at
                     * least once. Subsequent calls have no effect.
                     *
                     * @return {@code true} if the call prevented a scheduled execution
                     *         from taking place, {@code false} otherwise.</member>
        <member name="M:biz.ritter.javapi.util.TimerTask.scheduledExecutionTime">
                     * Returns the scheduled execution time. If the task execution is in
                     * progress it returns the execution time of the ongoing task. Tasks which
                     * have not yet run return an undefined value.
                     *
                     * @return the most recent execution time.</member>
        <member name="M:biz.ritter.javapi.util.TimerTask.run">
                     * The task to run should be specified in the implementation of the {@code run()}
                     * method.</member>
        <member name="T:biz.ritter.javapi.util.TreeMap`2">
            <summary>
            TreeMap is an implementation of SortedMap. All optional operations (adding
            and removing) are supported. The values can be any objects. The keys can be
            any objects which are comparable to each other either using their natural
            <p>@since 1.2</p></summary>
            <typeparam name="K">type of key</typeparam>
            <typeparam name="V">type of value</typeparam>
        </member>
        <member name="T:biz.ritter.javapi.util.TreeMap`2.Entry`2">
                     * Entry is an internal class which is used to hold the entries of a
                     * TreeMap.
                     *
                     * also used to record key, value, and position</member>
        <member name="M:biz.ritter.javapi.util.TreeMap`2.NavigableSubMap`2.checkUpperBound(`2)">
                         *
                         * @param key
                         * @return false if the key bigger than the end key (if any)</member>
        <member name="M:biz.ritter.javapi.util.TreeMap`2.NavigableSubMap`2.checkLowerBound(`2)">
                         *
                         * @param key
                         * @return false if the key smaller than the start key (if any)</member>
        <member name="M:biz.ritter.javapi.util.TreeMap`2.#ctor">
                     * Constructs a new empty {@code TreeMap} instance.</member>
        <member name="M:biz.ritter.javapi.util.TreeMap`2.#ctor(biz.ritter.javapi.util.Comparator{`0})">
                     * Constructs a new empty {@code TreeMap} instance with the specified
                     * comparator.
                     *
                     * @param comparator
                     *            the comparator to compare keys with.</member>
        <member name="M:biz.ritter.javapi.util.TreeMap`2.#ctor(biz.ritter.javapi.util.Map{`0,`1})">
                     * Constructs a new {@code TreeMap} instance containing the mappings from
                     * the specified map and using natural ordering.
                     *
                     * @param map
                     *            the mappings to add.
                     * @throws ClassCastException
                     *             if a key in the specified map does not implement the
                     *             Comparable interface, or if the keys in the map cannot be
                     *             compared.</member>
        <member name="M:biz.ritter.javapi.util.TreeMap`2.#ctor(biz.ritter.javapi.util.SortedMap{`0,`1})">
                     * Constructs a new {@code TreeMap} instance containing the mappings from
                     * the specified SortedMap and using the same comparator.
                     *
                     * @param map
                     *            the mappings to add.</member>
        <member name="M:biz.ritter.javapi.util.TreeMap`2.clear">
                     * Removes all mappings from this TreeMap, leaving it empty.
                     *
                     * @see Map#isEmpty()
                     * @see #size()</member>
        <member name="M:biz.ritter.javapi.util.TreeMap`2.clone">
                     * Returns a new {@code TreeMap} with the same mappings, size and comparator
                     * as this instance.
                     *
                     * @return a shallow copy of this instance.
                     * @see java.lang.Cloneable</member>
        <member name="M:biz.ritter.javapi.util.TreeMap`2.comparator">
                     * Returns the comparator used to compare elements in this map.
                     *
                     * @return the comparator or {@code null} if the natural ordering is used.</member>
        <member name="M:biz.ritter.javapi.util.TreeMap`2.containsKey(System.Object)">
                     * Returns whether this map contains the specified key.
                     *
                     * @param key
                     *            the key to search for.
                     * @return {@code true} if this map contains the specified key,
                     *         {@code false} otherwise.
                     * @throws ClassCastException
                     *             if the specified key cannot be compared with the keys in this
                     *             map.
                     * @throws NullPointerException
                     *             if the specified key is {@code null} and the comparator
                     *             cannot handle {@code null} keys.</member>
        <member name="M:biz.ritter.javapi.util.TreeMap`2.containsValue(System.Object)">
                     * Returns whether this map contains the specified value.
                     *
                     * @param value
                     *            the value to search for.
                     * @return {@code true} if this map contains the specified value,
                     *         {@code false} otherwise.</member>
        <member name="M:biz.ritter.javapi.util.TreeMap`2.firstKey">
                     * Returns the first key in this map.
                     *
                     * @return the first key in this map.
                     * @throws NoSuchElementException
                     *                if this map is empty.</member>
        <member name="M:biz.ritter.javapi.util.TreeMap`2.get(System.Object)">
                     * Returns the value of the mapping with the specified key.
                     *
                     * @param key
                     *            the key.
                     * @return the value of the mapping with the specified key.
                     * @throws ClassCastException
                     *             if the key cannot be compared with the keys in this map.
                     * @throws NullPointerException
                     *             if the key is {@code null} and the comparator cannot handle
                     *             {@code null}.</member>
        <member name="M:biz.ritter.javapi.util.TreeMap`2.keySet">
                     * Returns a set of the keys contained in this map. The set is backed by
                     * this map so changes to one are reflected by the other. The set does not
                     * support adding.
                     *
                     * @return a set of the keys.</member>
        <member name="M:biz.ritter.javapi.util.TreeMap`2.lastKey">
                     * Returns the last key in this map.
                     *
                     * @return the last key in this map.
                     * @throws NoSuchElementException
                     *             if this map is empty.</member>
        <member name="M:biz.ritter.javapi.util.TreeMap`2.put(`0,`1)">
                     * Maps the specified key to the specified value.
                     *
                     * @param key
                     *            the key.
                     * @param value
                     *            the value.
                     * @return the value of any previous mapping with the specified key or
                     *         {@code null} if there was no mapping.
                     * @throws ClassCastException
                     *             if the specified key cannot be compared with the keys in this
                     *             map.
                     * @throws NullPointerException
                     *             if the specified key is {@code null} and the comparator
                     *             cannot handle {@code null} keys.</member>
        <member name="M:biz.ritter.javapi.util.TreeMap`2.putAll(biz.ritter.javapi.util.Map{`0,`1})">
                     * Copies all the mappings in the given map to this map. These mappings will
                     * replace all mappings that this map had for any of the keys currently in
                     * the given map.
                     *
                     * @param map
                     *            the map to copy mappings from.
                     * @throws ClassCastException
                     *             if a key in the specified map cannot be compared with the
                     *             keys in this map.
                     * @throws NullPointerException
                     *             if a key in the specified map is {@code null} and the
                     *             comparator cannot handle {@code null} keys.</member>
        <member name="M:biz.ritter.javapi.util.TreeMap`2.remove(System.Object)">
                     * Removes the mapping with the specified key from this map.
                     *
                     * @param key
                     *            the key of the mapping to remove.
                     * @return the value of the removed mapping or {@code null} if no mapping
                     *         for the specified key was found.
                     * @throws ClassCastException
                     *             if the specified key cannot be compared with the keys in this
                     *             map.
                     * @throws NullPointerException
                     *             if the specified key is {@code null} and the comparator
                     *             cannot handle {@code null} keys.</member>
        <member name="M:biz.ritter.javapi.util.TreeMap`2.size">
                     * Returns the number of mappings in this map.
                     *
                     * @return the number of mappings in this map.</member>
        <member name="M:biz.ritter.javapi.util.TreeMap`2.values">
                     * Returns a collection of the values contained in this map. The collection
                     * is backed by this map so changes to one are reflected by the other. The
                     * collection supports remove, removeAll, retainAll and clear operations,
                     * and it does not support add or addAll operations.
                     * <p>
                     * This method returns a collection which is the subclass of
                     * AbstractCollection. The iterator method of this subclass returns a
                     * "wrapper object" over the iterator of map's entrySet(). The {@code size}
                     * method wraps the map's size method and the {@code contains} method wraps
                     * the map's containsValue method.</p>
                     * <p>
                     * The collection is created when this method is called for the first time
                     * and returned in response to all subsequent calls. This method may return
                     * different collections when multiple concurrent calls occur, since no
                     * synchronization is performed.</p>
                     *
                     * @return a collection of the values contained in this map.</member>
        <member name="M:biz.ritter.javapi.util.TreeMap`2.firstEntry">
                     * {@inheritDoc}
                     *
                     * @see java.util.NavigableMap#firstEntry()
                     * @since 1.6</member>
        <member name="M:biz.ritter.javapi.util.TreeMap`2.lastEntry">
                     * {@inheritDoc}
                     *
                     * @see java.util.NavigableMap#lastEntry()
                     * @since 1.6</member>
        <member name="M:biz.ritter.javapi.util.TreeMap`2.pollFirstEntry">
                     * {@inheritDoc}
                     *
                     * @see java.util.NavigableMap#pollFirstEntry()
                     * @since 1.6</member>
        <member name="M:biz.ritter.javapi.util.TreeMap`2.pollLastEntry">
                     * {@inheritDoc}
                     *
                     * @see java.util.NavigableMap#pollLastEntry()
                     * @since 1.6</member>
        <member name="M:biz.ritter.javapi.util.TreeMap`2.higherEntry(`0)">
                     * {@inheritDoc}
                     *
                     * @see java.util.NavigableMap#higherEntry(obj)
                     * @since 1.6</member>
        <member name="M:biz.ritter.javapi.util.TreeMap`2.higherKey(`0)">
                     * {@inheritDoc}
                     *
                     * @see java.util.NavigableMap#higherKey(obj)
                     * @since 1.6</member>
        <member name="M:biz.ritter.javapi.util.TreeMap`2.lowerEntry(`0)">
                     * {@inheritDoc}
                     *
                     * @see java.util.NavigableMap#lowerEntry(obj)
                     * @since 1.6</member>
        <member name="M:biz.ritter.javapi.util.TreeMap`2.lowerKey(`0)">
                     * {@inheritDoc}
                     *
                     * @see java.util.NavigableMap#lowerKey(obj)
                     * @since 1.6</member>
        <member name="M:biz.ritter.javapi.util.TreeMap`2.ceilingEntry(`0)">
                     * {@inheritDoc}
                     *
                     * @see java.util.NavigableMap#ceilingEntry(java.lang.Object)
                     * @since 1.6</member>
        <member name="M:biz.ritter.javapi.util.TreeMap`2.ceilingKey(`0)">
                     * {@inheritDoc}
                     *
                     * @see java.util.NavigableMap#ceilingKey(java.lang.Object)
                     * @since 1.6</member>
        <member name="M:biz.ritter.javapi.util.TreeMap`2.floorEntry(`0)">
                     * {@inheritDoc}
                     *
                     * @see java.util.NavigableMap#floorEntry(obj)
                     * @since 1.6</member>
        <member name="M:biz.ritter.javapi.util.TreeMap`2.floorKey(`0)">
                     * {@inheritDoc}
                     *
                     * @see java.util.NavigableMap#floorKey(obj)
                     * @since 1.6</member>
        <member name="M:biz.ritter.javapi.util.TreeMap`2.entrySet">
                     * Returns a set containing all of the mappings in this map. Each mapping is
                     * an instance of {@link MapNS.Entry}. As the set is backed by this map,
                     * changes in one will be reflected in the other. It does not support adding
                     * operations.
                     *
                     * @return a set of the mappings.</member>
        <member name="M:biz.ritter.javapi.util.TreeMap`2.navigableKeySet">
                     * {@inheritDoc}
                     *
                     * @see java.util.NavigableMap#navigableKeySet()
                     * @since 1.6</member>
        <member name="M:biz.ritter.javapi.util.TreeMap`2.descendingKeySet">
                     * {@inheritDoc}
                     *
                     * @see java.util.NavigableMap#descendingKeySet()
                     * @since 1.6</member>
        <member name="M:biz.ritter.javapi.util.TreeMap`2.descendingMap">
                     * {@inheritDoc}
                     *
                     * @see java.util.NavigableMap#descendingMap()
                     * @since 1.6</member>
        <member name="M:biz.ritter.javapi.util.TreeMap`2.subMap(`0,System.Boolean,`0,System.Boolean)">
                     * {@inheritDoc}
                     *
                     * @see java.util.NavigableMap#subMap(Object, boolean, Object, boolean)
                     * @since 1.6</member>
        <member name="M:biz.ritter.javapi.util.TreeMap`2.headMap(`0,System.Boolean)">
                     * {@inheritDoc}
                     *
                     * @see java.util.NavigableMap#headMap(Object, boolean)
                     * @since 1.6</member>
        <member name="M:biz.ritter.javapi.util.TreeMap`2.tailMap(`0,System.Boolean)">
                     * {@inheritDoc}
                     *
                     * @see java.util.NavigableMap#tailMap(Object, boolean)
                     * @since 1.6</member>
        <member name="M:biz.ritter.javapi.util.TreeMap`2.subMap(`0,`0)">
                     * Returns a sorted map over a range of this sorted map with all keys
                     * greater than or equal to the specified {@code startKey} and less than the
                     * specified {@code endKey}. Changes to the returned sorted map are
                     * reflected in this sorted map and vice versa.
                     * <p>
                     * Note: The returned map will not allow an insertion of a key outside the
                     * specified range.</p>
                     *
                     * @param startKey
                     *            the low boundary of the range (inclusive).
                     * @param endKey
                     *            the high boundary of the range (exclusive),
                     * @return a sorted map with the key from the specified range.
                     * @throws ClassCastException
                     *             if the start or end key cannot be compared with the keys in
                     *             this map.
                     * @throws NullPointerException
                     *             if the start or end key is {@code null} and the comparator
                     *             cannot handle {@code null} keys.
                     * @throws IllegalArgumentException
                     *             if the start key is greater than the end key, or if this map
                     *             is itself a sorted map over a range of another sorted map and
                     *             the specified range is outside of its range.</member>
        <member name="M:biz.ritter.javapi.util.TreeMap`2.headMap(`0)">
                     * Returns a sorted map over a range of this sorted map with all keys that
                     * are less than the specified {@code endKey}. Changes to the returned
                     * sorted map are reflected in this sorted map and vice versa.
                     * <p>
                     * Note: The returned map will not allow an insertion of a key outside the
                     * specified range.</p>
                     *
                     * @param endKey
                     *            the high boundary of the range specified.
                     * @return a sorted map where the keys are less than {@code endKey}.
                     * @throws ClassCastException
                     *             if the specified key cannot be compared with the keys in this
                     *             map.
                     * @throws NullPointerException
                     *             if the specified key is {@code null} and the comparator
                     *             cannot handle {@code null} keys.
                     * @throws IllegalArgumentException
                     *             if this map is itself a sorted map over a range of another
                     *             map and the specified key is outside of its range.</member>
        <member name="M:biz.ritter.javapi.util.TreeMap`2.tailMap(`0)">
                     * Returns a sorted map over a range of this sorted map with all keys that
                     * are greater than or equal to the specified {@code startKey}. Changes to
                     * the returned sorted map are reflected in this sorted map and vice versa.
                     * <p>
                     * Note: The returned map will not allow an insertion of a key outside the
                     * specified range.</p>
                     *
                     * @param startKey
                     *            the low boundary of the range specified.
                     * @return a sorted map where the keys are greater or equal to
                     *         {@code startKey}.
                     * @throws ClassCastException
                     *             if the specified key cannot be compared with the keys in this
                     *             map.
                     * @throws NullPointerException
                     *             if the specified key is {@code null} and the comparator
                     *             cannot handle {@code null} keys.
                     * @throws IllegalArgumentException
                     *             if this map itself a sorted map over a range of another map
                     *             and the specified key is outside of its range.</member>
        <member name="T:biz.ritter.javapi.util.TreeSet`1">
                 * TreeSet is an implementation of SortedSet. All optional operations (adding
                 * and removing) are supported. The elements can be any objects which are
                 * comparable to each other either using their natural order or a specified
                 * Comparator.
                 *
                 * @since 1.2</member>
        <member name="F:biz.ritter.javapi.util.TreeSet`1.backingMap">
             Keys are this set's elements. Values are always Boolean.TRUE</member>
        <member name="M:biz.ritter.javapi.util.TreeSet`1.#ctor">
                     * Constructs a new empty instance of {@code TreeSet} which uses natural
                     * ordering.</member>
        <member name="M:biz.ritter.javapi.util.TreeSet`1.#ctor(biz.ritter.javapi.util.Collection{`0})">
                     * Constructs a new instance of {@code TreeSet} which uses natural ordering
                     * and containing the unique elements in the specified collection.
                     *
                     * @param collection
                     *            the collection of elements to add.
                     * @throws ClassCastException
                     *                when an element in the collection does not implement the
                     *                Comparable interface, or the elements in the collection
                     *                cannot be compared.</member>
        <member name="M:biz.ritter.javapi.util.TreeSet`1.#ctor(biz.ritter.javapi.util.Comparator{`0})">
                     * Constructs a new empty instance of {@code TreeSet} which uses the
                     * specified comparator.
                     *
                     * @param comparator
                     *            the comparator to use.</member>
        <member name="M:biz.ritter.javapi.util.TreeSet`1.#ctor(biz.ritter.javapi.util.SortedSet{`0})">
                     * Constructs a new instance of {@code TreeSet} containing the elements of
                     * the specified SortedSet and using the same Comparator.
                     *
                     * @param set
                     *            the SortedSet of elements to add.</member>
        <member name="M:biz.ritter.javapi.util.TreeSet`1.add(`0)">
                     * Adds the specified object to this {@code TreeSet}.
                     *
                     * @param object
                     *            the object to add.
                     * @return {@code true} when this {@code TreeSet} did not already contain
                     *         the object, {@code false} otherwise.
                     * @throws ClassCastException
                     *             when the object cannot be compared with the elements in this
                     *             {@code TreeSet}.
                     * @throws NullPointerException
                     *             when the object is null and the comparator cannot handle
                     *             null.</member>
        <member name="M:biz.ritter.javapi.util.TreeSet`1.addAll(biz.ritter.javapi.util.Collection{`0})">
                     * Adds the objects in the specified collection to this {@code TreeSet}.
                     *
                     * @param collection
                     *            the collection of objects to add.
                     * @return {@code true} if this {@code TreeSet} was modified, {@code false}
                     *         otherwise.
                     * @throws ClassCastException
                     *             when an object in the collection cannot be compared with the
                     *             elements in this {@code TreeSet}.
                     * @throws NullPointerException
                     *             when an object in the collection is null and the comparator
                     *             cannot handle null.</member>
        <member name="M:biz.ritter.javapi.util.TreeSet`1.clear">
                     * Removes all elements from this {@code TreeSet}, leaving it empty.
                     *
                     * @see #isEmpty
                     * @see #size</member>
        <member name="M:biz.ritter.javapi.util.TreeSet`1.clone">
                     * Returns a new {@code TreeSet} with the same elements, size and comparator
                     * as this {@code TreeSet}.
                     *
                     * @return a shallow copy of this {@code TreeSet}.
                     * @see java.lang.Cloneable</member>
        <member name="M:biz.ritter.javapi.util.TreeSet`1.comparator">
                     * Returns the comparator used to compare elements in this {@code TreeSet}.
                     *
                     * @return a Comparator or null if the natural ordering is used</member>
        <member name="M:biz.ritter.javapi.util.TreeSet`1.contains(System.Object)">
                     * Searches this {@code TreeSet} for the specified object.
                     *
                     * @param object
                     *            the object to search for.
                     * @return {@code true} if {@code object} is an element of this
                     *         {@code TreeSet}, {@code false} otherwise.
                     * @throws ClassCastException
                     *             when the object cannot be compared with the elements in this
                     *             {@code TreeSet}.
                     * @throws NullPointerException
                     *             when the object is null and the comparator cannot handle
                     *             null.</member>
        <member name="M:biz.ritter.javapi.util.TreeSet`1.isEmpty">
                     * Returns true if this {@code TreeSet} has no element, otherwise false.
                     *
                     * @return true if this {@code TreeSet} has no element.
                     * @see #size</member>
        <member name="M:biz.ritter.javapi.util.TreeSet`1.iterator">
                     * Returns an Iterator on the elements of this {@code TreeSet}.
                     *
                     * @return an Iterator on the elements of this {@code TreeSet}.
                     * @see Iterator</member>
        <member name="M:biz.ritter.javapi.util.TreeSet`1.descendingIterator">
                     * {@inheritDoc}
                     *
                     * @see java.util.NavigableSet#descendingIterator()
                     * @since 1.6</member>
        <member name="M:biz.ritter.javapi.util.TreeSet`1.remove(System.Object)">
                     * Removes an occurrence of the specified object from this {@code TreeSet}.
                     *
                     * @param object
                     *            the object to remove.
                     * @return {@code true} if this {@code TreeSet} was modified, {@code false}
                     *         otherwise.
                     * @throws ClassCastException
                     *             when the object cannot be compared with the elements in this
                     *             {@code TreeSet}.
                     * @throws NullPointerException
                     *             when the object is null and the comparator cannot handle
                     *             null.</member>
        <member name="M:biz.ritter.javapi.util.TreeSet`1.size">
                     * Returns the number of elements in this {@code TreeSet}.
                     *
                     * @return the number of elements in this {@code TreeSet}.</member>
        <member name="M:biz.ritter.javapi.util.TreeSet`1.first">
                     * Answers the first element in this TreeSet.
                     *
                     * @return the first element
                     *
                     * @exception NoSuchElementException
                     *                when this TreeSet is empty</member>
        <member name="M:biz.ritter.javapi.util.TreeSet`1.last">
                     * Answers the last element in this TreeSet.
                     *
                     * @return the last element
                     *
                     * @exception NoSuchElementException
                     *                when this TreeSet is empty</member>
        <member name="M:biz.ritter.javapi.util.TreeSet`1.pollFirst">
                     * {@inheritDoc}
                     *
                     * @see java.util.NavigableSet#pollFirst()
                     * @since 1.6</member>
        <member name="M:biz.ritter.javapi.util.TreeSet`1.pollLast">
                     * {@inheritDoc}
                     *
                     * @see java.util.NavigableSet#pollLast()
                     * @since 1.6</member>
        <member name="M:biz.ritter.javapi.util.TreeSet`1.higher(`0)">
                     * {@inheritDoc}
                     *
                     * @see java.util.NavigableSet#higher(java.lang.Object)
                     * @since 1.6</member>
        <member name="M:biz.ritter.javapi.util.TreeSet`1.lower(`0)">
                     * {@inheritDoc}
                     *
                     * @see java.util.NavigableSet#lower(java.lang.Object)
                     * @since 1.6</member>
        <member name="M:biz.ritter.javapi.util.TreeSet`1.ceiling(`0)">
                     * {@inheritDoc}
                     *
                     * @see java.util.NavigableSet#ceiling(java.lang.Object)
                     * @since 1.6</member>
        <member name="M:biz.ritter.javapi.util.TreeSet`1.floor(`0)">
                     * {@inheritDoc}
                     *
                     * @see java.util.NavigableSet#floor(java.lang.Object)
                     * @since 1.6</member>
        <member name="M:biz.ritter.javapi.util.TreeSet`1.descendingSet">
                     * {@inheritDoc}
                     *
                     * @see java.util.NavigableSet#descendingSet()
                     * @since 1.6</member>
        <member name="M:biz.ritter.javapi.util.TreeSet`1.subSet(`0,System.Boolean,`0,System.Boolean)">
                     * {@inheritDoc}
                     *
                     * @see java.util.NavigableSet#subSet(Object, boolean, Object, boolean)
                     * @since 1.6</member>
        <member name="M:biz.ritter.javapi.util.TreeSet`1.headSet(`0,System.Boolean)">
                     * {@inheritDoc}
                     *
                     * @see java.util.NavigableSet#headSet(Object, boolean)
                     * @since 1.6</member>
        <member name="M:biz.ritter.javapi.util.TreeSet`1.tailSet(`0,System.Boolean)">
                     * {@inheritDoc}
                     *
                     * @see java.util.NavigableSet#tailSet(Object, boolean)
                     * @since 1.6</member>
        <member name="M:biz.ritter.javapi.util.TreeSet`1.subSet(`0,`0)">
                     * Answers a SortedSet of the specified portion of this TreeSet which
                     * contains elements greater or equal to the start element but less than the
                     * end element. The returned SortedSet is backed by this TreeSet so changes
                     * to one are reflected by the other.
                     *
                     * @param start
                     *            the start element
                     * @param end
                     *            the end element
                     * @return a subset where the elements are greater or equal to
                     *         <code>start</code> and less than <code>end</code>
                     *
                     * @exception ClassCastException
                     *                when the start or end object cannot be compared with the
                     *                elements in this TreeSet
                     * @exception NullPointerException
                     *                when the start or end object is null and the comparator
                     *                cannot handle null</member>
        <member name="M:biz.ritter.javapi.util.TreeSet`1.headSet(`0)">
                     * Answers a SortedSet of the specified portion of this TreeSet which
                     * contains elements less than the end element. The returned SortedSet is
                     * backed by this TreeSet so changes to one are reflected by the other.
                     *
                     * @param end
                     *            the end element
                     * @return a subset where the elements are less than <code>end</code>
                     *
                     * @exception ClassCastException
                     *                when the end object cannot be compared with the elements
                     *                in this TreeSet
                     * @exception NullPointerException
                     *                when the end object is null and the comparator cannot
                     *                handle null</member>
        <member name="M:biz.ritter.javapi.util.TreeSet`1.tailSet(`0)">
                     * Answers a SortedSet of the specified portion of this TreeSet which
                     * contains elements greater or equal to the start element. The returned
                     * SortedSet is backed by this TreeSet so changes to one are reflected by
                     * the other.
                     *
                     * @param start
                     *            the start element
                     * @return a subset where the elements are greater or equal to
                     *         <code>start</code>
                     *
                     * @exception ClassCastException
                     *                when the start object cannot be compared with the elements
                     *                in this TreeSet
                     * @exception NullPointerException
                     *                when the start object is null and the comparator cannot
                     *                handle null</member>
        <member name="T:biz.ritter.javapi.util.UnknownFormatConversionException">
                 * An {@code UnknownFormatConversionException} will be thrown if the format
                 * conversion is unknown.
                 *
                 * @see java.lang.RuntimeException</member>
        <member name="M:biz.ritter.javapi.util.UnknownFormatConversionException.#ctor(System.String)">
                     * Constructs an {@code UnknownFormatConversionException} with the unknown
                     * format conversion.
                     *
                     * @param s
                     *           the unknown format conversion.</member>
        <member name="M:biz.ritter.javapi.util.UnknownFormatConversionException.getConversion">
                     * Returns the conversion associated with the exception.
                     *
                     * @return the conversion associated with the exception.</member>
        <member name="M:biz.ritter.javapi.util.UnknownFormatConversionException.getMessage">
                     * Returns the message of the exception.
                     *
                     * @return the message of the exception.</member>
        <member name="T:biz.ritter.javapi.util.Vector`1">
                 * Vector is a variable size contiguous indexable array of objects. The size of
                 * the vector is the number of objects it contains. The capacity of the vector
                 * is the number of objects it can hold.
                 * <p />
                 * Objects may be inserted at any position up to the size of the vector, thus
                 * increasing the size of the vector. Objects at any position in the vector may
                 * be removed, thus shrinking the size of the Vector. Objects at any position in
                 * the Vector may be replaced, which does not affect the vector's size.
                 * <p />
                 * The capacity of a vector may be specified when the vector is created. If the
                 * capacity of the vector is exceeded, the capacity is increased (doubled by
                 * default).
                 *
                 * @see java.lang.StringBuffer</member>
        <member name="F:biz.ritter.javapi.util.Vector`1.elementCount">
                     * The number of elements or the size of the vector.</member>
        <member name="F:biz.ritter.javapi.util.Vector`1.elementData">
                     * The elements of the vector.</member>
        <member name="F:biz.ritter.javapi.util.Vector`1.capacityIncrement">
                     * How many elements should be added to the vector when it is detected that
                     * it needs to grow to accommodate extra entries. If this value is zero or
                     * negative the size will be doubled if an increase is needed.</member>
        <member name="M:biz.ritter.javapi.util.Vector`1.#ctor">
                     * Constructs a new vector using the default capacity.</member>
        <member name="M:biz.ritter.javapi.util.Vector`1.#ctor(System.Int32)">
                     * Constructs a new vector using the specified capacity.
                     *
                     * @param capacity
                     *            the initial capacity of the new vector.
                     * @throws IllegalArgumentException
                     *             if {@code capacity} is negative.</member>
        <member name="M:biz.ritter.javapi.util.Vector`1.#ctor(System.Int32,System.Int32)">
                     * Constructs a new vector using the specified capacity and capacity
                     * increment.
                     *
                     * @param capacity
                     *            the initial capacity of the new vector.
                     * @param capacityIncrement
                     *            the amount to increase the capacity when this vector is full.
                     * @throws IllegalArgumentException
                     *             if {@code capacity} is negative.</member>
        <member name="M:biz.ritter.javapi.util.Vector`1.#ctor(biz.ritter.javapi.util.Collection{`0})">
                     * Constructs a new instance of {@code Vector} containing the elements in
                     * {@code collection}. The order of the elements in the new {@code Vector}
                     * is dependent on the iteration order of the seed collection.
                     *
                     * @param collection
                     *            the collection of elements to add.</member>
        <member name="M:biz.ritter.javapi.util.Vector`1.add(System.Int32,`0)">
                     * Adds the specified object into this vector at the specified location. The
                     * object is inserted before any element with the same or a higher index
                     * increasing their index by 1. If the location is equal to the size of this
                     * vector, the object is added at the end.
                     *
                     * @param location
                     *            the index at which to insert the element.
                     * @param object
                     *            the object to insert in this vector.
                     * @throws ArrayIndexOutOfBoundsException
                     *                if {@code location &lt; 0 || location &gt; size()}.
                     * @see #addElement
                     * @see #size</member>
        <member name="M:biz.ritter.javapi.util.Vector`1.add(`0)">
                     * Adds the specified object at the end of this vector.
                     *
                     * @param object
                     *            the object to add to the vector.
                     * @return {@code true}</member>
        <member name="M:biz.ritter.javapi.util.Vector`1.addAll(System.Int32,biz.ritter.javapi.util.Collection{`0})">
                     * Inserts the objects in the specified collection at the specified location
                     * in this vector. The objects are inserted in the order in which they are
                     * returned from the Collection iterator. The elements with an index equal
                     * or higher than {@code location} have their index increased by the size of
                     * the added collection.
                     *
                     * @param location
                     *            the location to insert the objects.
                     * @param collection
                     *            the collection of objects.
                     * @return {@code true} if this vector is modified, {@code false} otherwise.
                     * @throws ArrayIndexOutOfBoundsException
                     *                if {@code location &lt; 0} or {@code location &gt; size()}.</member>
        <member name="M:biz.ritter.javapi.util.Vector`1.addAll(biz.ritter.javapi.util.Collection{`0})">
                     * Adds the objects in the specified collection to the end of this vector.
                     *
                     * @param collection
                     *            the collection of objects.
                     * @return {@code true} if this vector is modified, {@code false} otherwise.</member>
        <member name="M:biz.ritter.javapi.util.Vector`1.addElement(`0)">
                     * Adds the specified object at the end of this vector.
                     *
                     * @param object
                     *            the object to add to the vector.</member>
        <member name="M:biz.ritter.javapi.util.Vector`1.capacity">
                     * Returns the number of elements this vector can hold without growing.
                     *
                     * @return the capacity of this vector.
                     * @see #ensureCapacity
                     * @see #size</member>
        <member name="M:biz.ritter.javapi.util.Vector`1.clear">
                     * Removes all elements from this vector, leaving it empty.
                     *
                     * @see #isEmpty
                     * @see #size</member>
        <member name="M:biz.ritter.javapi.util.Vector`1.clone">
                     * Returns a new vector with the same elements, size, capacity and capacity
                     * increment as this vector.
                     *
                     * @return a shallow copy of this vector.
                     * @see java.lang.Cloneable</member>
        <member name="M:biz.ritter.javapi.util.Vector`1.contains(System.Object)">
                     * Searches this vector for the specified object.
                     *
                     * @param object
                     *            the object to look for in this vector.
                     * @return {@code true} if object is an element of this vector,
                     *         {@code false} otherwise.
                     * @see #indexOf(Object)
                     * @see #indexOf(Object, int)
                     * @see java.lang.Object#equals</member>
        <member name="M:biz.ritter.javapi.util.Vector`1.containsAll(biz.ritter.javapi.util.Collection{`0})">
                     * Searches this vector for all objects in the specified collection.
                     *
                     * @param collection
                     *            the collection of objects.
                     * @return {@code true} if all objects in the specified collection are
                     *         elements of this vector, {@code false} otherwise.</member>
        <member name="M:biz.ritter.javapi.util.Vector`1.copyInto(System.Object[])">
                     * Attempts to copy elements contained by this {@code Vector} into the
                     * corresponding elements of the supplied {@code Object} array.
                     *
                     * @param elements
                     *            the {@code Object} array into which the elements of this
                     *            vector are copied.
                     * @throws IndexOutOfBoundsException
                     *             if {@code elements} is not big enough.
                     * @see #clone</member>
        <member name="M:biz.ritter.javapi.util.Vector`1.elementAt(System.Int32)">
                     * Returns the element at the specified location in this vector.
                     *
                     * @param location
                     *            the index of the element to return in this vector.
                     * @return the element at the specified location.
                     * @throws ArrayIndexOutOfBoundsException
                     *                if {@code location &lt; 0 || location &gt;= size()}.
                     * @see #size</member>
        <member name="M:biz.ritter.javapi.util.Vector`1.elements">
                     * Returns an enumeration on the elements of this vector. The results of the
                     * enumeration may be affected if the contents of this vector is modified.
                     *
                     * @return an enumeration of the elements of this vector.
                     * @see #elementAt
                     * @see Enumeration</member>
        <member name="M:biz.ritter.javapi.util.Vector`1.ensureCapacity(System.Int32)">
                     * Ensures that this vector can hold the specified number of elements
                     * without growing.
                     *
                     * @param minimumCapacity
                     *            the minimum number of elements that this vector will hold
                     *            before growing.
                     * @see #capacity</member>
        <member name="M:biz.ritter.javapi.util.Vector`1.Equals(System.Object)">
                     * Compares the specified object to this vector and returns if they are
                     * equal. The object must be a List which contains the same objects in the
                     * same order.
                     *
                     * @param object
                     *            the object to compare with this object
                     * @return {@code true} if the specified object is equal to this vector,
                     *         {@code false} otherwise.
                     * @see #hashCode</member>
        <member name="M:biz.ritter.javapi.util.Vector`1.firstElement">
                     * Returns the first element in this vector.
                     *
                     * @return the element at the first position.
                     * @throws NoSuchElementException
                     *                if this vector is empty.
                     * @see #elementAt
                     * @see #lastElement
                     * @see #size</member>
        <member name="M:biz.ritter.javapi.util.Vector`1.get(System.Int32)">
                     * Returns the element at the specified location in this vector.
                     *
                     * @param location
                     *            the index of the element to return in this vector.
                     * @return the element at the specified location.
                     * @throws ArrayIndexOutOfBoundsException
                     *                if {@code location &lt; 0 || location &gt;= size()}.
                     * @see #size</member>
        <member name="M:biz.ritter.javapi.util.Vector`1.growByOne">
                     * JIT optimization</member>
        <member name="M:biz.ritter.javapi.util.Vector`1.GetHashCode">
                     * Returns an integer hash code for the receiver. Objects which are equal
                     * return the same value for this method.
                     *
                     * @return the receiver's hash.
                     * @see #equals</member>
        <member name="M:biz.ritter.javapi.util.Vector`1.indexOf(System.Object)">
                     * Searches in this vector for the index of the specified object. The search
                     * for the object starts at the beginning and moves towards the end of this
                     * vector.
                     *
                     * @param object
                     *            the object to find in this vector.
                     * @return the index in this vector of the specified element, -1 if the
                     *         element isn't found.
                     * @see #contains
                     * @see #lastIndexOf(Object)
                     * @see #lastIndexOf(Object, int)</member>
        <member name="M:biz.ritter.javapi.util.Vector`1.indexOf(System.Object,System.Int32)">
                     * Searches in this vector for the index of the specified object. The search
                     * for the object starts at the specified location and moves towards the end
                     * of this vector.
                     *
                     * @param object
                     *            the object to find in this vector.
                     * @param location
                     *            the index at which to start searching.
                     * @return the index in this vector of the specified element, -1 if the
                     *         element isn't found.
                     * @throws ArrayIndexOutOfBoundsException
                     *                if {@code location &lt; 0}.
                     * @see #contains
                     * @see #lastIndexOf(Object)
                     * @see #lastIndexOf(Object, int)</member>
        <member name="M:biz.ritter.javapi.util.Vector`1.insertElementAt(`0,System.Int32)">
                     * Inserts the specified object into this vector at the specified location.
                     * This object is inserted before any previous element at the specified
                     * location. All elements with an index equal or greater than
                     * {@code location} have their index increased by 1. If the location is
                     * equal to the size of this vector, the object is added at the end.
                     *
                     * @param object
                     *            the object to insert in this vector.
                     * @param location
                     *            the index at which to insert the element.
                     * @throws ArrayIndexOutOfBoundsException
                     *                if {@code location &lt; 0 || location &gt; size()}.
                     * @see #addElement
                     * @see #size</member>
        <member name="M:biz.ritter.javapi.util.Vector`1.isEmpty">
                     * Returns if this vector has no elements, a size of zero.
                     *
                     * @return {@code true} if this vector has no elements, {@code false}
                     *         otherwise.
                     * @see #size</member>
        <member name="M:biz.ritter.javapi.util.Vector`1.lastElement">
                     * Returns the last element in this vector.
                     *
                     * @return the element at the last position.
                     * @throws NoSuchElementException
                     *                if this vector is empty.
                     * @see #elementAt
                     * @see #firstElement
                     * @see #size</member>
        <member name="M:biz.ritter.javapi.util.Vector`1.lastIndexOf(System.Object)">
                     * Searches in this vector for the index of the specified object. The search
                     * for the object starts at the end and moves towards the start of this
                     * vector.
                     *
                     * @param object
                     *            the object to find in this vector.
                     * @return the index in this vector of the specified element, -1 if the
                     *         element isn't found.
                     * @see #contains
                     * @see #indexOf(Object)
                     * @see #indexOf(Object, int)</member>
        <member name="M:biz.ritter.javapi.util.Vector`1.lastIndexOf(System.Object,System.Int32)">
                     * Searches in this vector for the index of the specified object. The search
                     * for the object starts at the specified location and moves towards the
                     * start of this vector.
                     *
                     * @param object
                     *            the object to find in this vector.
                     * @param location
                     *            the index at which to start searching.
                     * @return the index in this vector of the specified element, -1 if the
                     *         element isn't found.
                     * @throws ArrayIndexOutOfBoundsException
                     *                if {@code location &gt;= size()}.
                     * @see #contains
                     * @see #indexOf(Object)
                     * @see #indexOf(Object, int)</member>
        <member name="M:biz.ritter.javapi.util.Vector`1.remove(System.Int32)">
                     * Removes the object at the specified location from this vector. All
                     * elements with an index bigger than {@code location} have their index
                     * decreased by 1.
                     *
                     * @param location
                     *            the index of the object to remove.
                     * @return the removed object.
                     * @throws IndexOutOfBoundsException
                     *                if {@code location &lt; 0 || location &gt;= size()}.</member>
        <member name="M:biz.ritter.javapi.util.Vector`1.remove(System.Object)">
                     * Removes the first occurrence, starting at the beginning and moving
                     * towards the end, of the specified object from this vector. All elements
                     * with an index bigger than the element that gets removed have their index
                     * decreased by 1.
                     *
                     * @param object
                     *            the object to remove from this vector.
                     * @return {@code true} if the specified object was found, {@code false}
                     *         otherwise.
                     * @see #removeAllElements
                     * @see #removeElementAt
                     * @see #size</member>
        <member name="M:biz.ritter.javapi.util.Vector`1.removeAll(biz.ritter.javapi.util.Collection{`0})">
                     * Removes all occurrences in this vector of each object in the specified
                     * Collection.
                     *
                     * @param collection
                     *            the collection of objects to remove.
                     * @return {@code true} if this vector is modified, {@code false} otherwise.
                     * @see #remove(Object)
                     * @see #contains(Object)</member>
        <member name="M:biz.ritter.javapi.util.Vector`1.removeAllElements">
                     * Removes all elements from this vector, leaving the size zero and the
                     * capacity unchanged.
                     *
                     * @see #isEmpty
                     * @see #size</member>
        <member name="M:biz.ritter.javapi.util.Vector`1.removeElement(System.Object)">
                     * Removes the first occurrence, starting at the beginning and moving
                     * towards the end, of the specified object from this vector. All elements
                     * with an index bigger than the element that gets removed have their index
                     * decreased by 1.
                     *
                     * @param object
                     *            the object to remove from this vector.
                     * @return {@code true} if the specified object was found, {@code false}
                     *         otherwise.
                     * @see #removeAllElements
                     * @see #removeElementAt
                     * @see #size</member>
        <member name="M:biz.ritter.javapi.util.Vector`1.removeElementAt(System.Int32)">
                     * Removes the element found at index position {@code location} from
                     * this {@code Vector}. All elements with an index bigger than
                     * {@code location} have their index decreased by 1.
                     *
                     * @param location
                     *            the index of the element to remove.
                     * @throws ArrayIndexOutOfBoundsException
                     *                if {@code location &lt; 0 || location &gt;= size()}.
                     * @see #removeElement
                     * @see #removeAllElements
                     * @see #size</member>
        <member name="M:biz.ritter.javapi.util.Vector`1.removeRange(System.Int32,System.Int32)">
                     * Removes the objects in the specified range from the start to the, but not
                     * including, end index. All elements with an index bigger than or equal to
                     * {@code end} have their index decreased by {@code end - start}.
                     *
                     * @param start
                     *            the index at which to start removing.
                     * @param end
                     *            the index one past the end of the range to remove.
                     * @throws IndexOutOfBoundsException
                     *                if {@code start &lt; 0, start &gt; end} or
                     *                {@code end &gt; size()}.</member>
        <member name="M:biz.ritter.javapi.util.Vector`1.retainAll(biz.ritter.javapi.util.Collection{`0})">
                     * Removes all objects from this vector that are not contained in the
                     * specified collection.
                     *
                     * @param collection
                     *            the collection of objects to retain.
                     * @return {@code true} if this vector is modified, {@code false} otherwise.
                     * @see #remove(Object)</member>
        <member name="M:biz.ritter.javapi.util.Vector`1.set(System.Int32,`0)">
                     * Replaces the element at the specified location in this vector with the
                     * specified object.
                     *
                     * @param location
                     *            the index at which to put the specified object.
                     * @param object
                     *            the object to add to this vector.
                     * @return the previous element at the location.
                     * @throws ArrayIndexOutOfBoundsException
                     *                if {@code location &lt; 0 || location &gt;= size()}.
                     * @see #size</member>
        <member name="M:biz.ritter.javapi.util.Vector`1.setElementAt(`0,System.Int32)">
                     * Replaces the element at the specified location in this vector with the
                     * specified object.
                     *
                     * @param object
                     *            the object to add to this vector.
                     * @param location
                     *            the index at which to put the specified object.
                     * @throws ArrayIndexOutOfBoundsException
                     *                if {@code location &lt; 0 || location &gt;= size()}.
                     * @see #size</member>
        <member name="M:biz.ritter.javapi.util.Vector`1.setSize(System.Int32)">
                     * Sets the size of this vector to the specified size. If there are more
                     * than length elements in this vector, the elements at end are lost. If
                     * there are less than length elements in the vector, the additional
                     * elements contain null.
                     *
                     * @param length
                     *            the new size of this vector.
                     * @see #size</member>
        <member name="M:biz.ritter.javapi.util.Vector`1.size">
                     * Returns the number of elements in this vector.
                     *
                     * @return the number of elements in this vector.
                     * @see #elementCount
                     * @see #lastElement</member>
        <member name="M:biz.ritter.javapi.util.Vector`1.subList(System.Int32,System.Int32)">
                     * Returns a List of the specified portion of this vector from the start
                     * index to one less than the end index. The returned List is backed by this
                     * vector so changes to one are reflected by the other.
                     *
                     * @param start
                     *            the index at which to start the sublist.
                     * @param end
                     *            the index one past the end of the sublist.
                     * @return a List of a portion of this vector.
                     * @throws IndexOutOfBoundsException
                     *                if {@code start &lt; 0} or {@code end &gt; size()}.
                     * @throws IllegalArgumentException
                     *                if {@code start &gt; end}.</member>
        <member name="M:biz.ritter.javapi.util.Vector`1.toArray">
                     * Returns a new array containing all elements contained in this vector.
                     *
                     * @return an array of the elements from this vector.</member>
        <member name="M:biz.ritter.javapi.util.Vector`1.toArray``1(``0[])">
                     * Returns an array containing all elements contained in this vector. If the
                     * specified array is large enough to hold the elements, the specified array
                     * is used, otherwise an array of the same type is created. If the specified
                     * array is used and is larger than this vector, the array element following
                     * the collection elements is set to null.
                     *
                     * @param contents
                     *            the array to fill.
                     * @return an array of the elements from this vector.
                     * @throws ArrayStoreException
                     *                if the type of an element in this vector cannot be
                     *                stored in the type of the specified array.</member>
        <member name="M:biz.ritter.javapi.util.Vector`1.ToString">
                     * Returns the string representation of this vector.
                     *
                     * @return the string representation of this vector.
                     * @see #elements</member>
        <member name="M:biz.ritter.javapi.util.Vector`1.trimToSize">
                     * Sets the capacity of this vector to be the same as the size.
                     *
                     * @see #capacity
                     * @see #ensureCapacity
                     * @see #size</member>
        <member name="T:Kajabity.Tools.Java.JavaPropertyReader">
            <summary>
            This class reads Java style properties from an input stream.
            </summary>
        </member>
        <member name="M:Kajabity.Tools.Java.JavaPropertyReader.#ctor(biz.ritter.javapi.util.Properties)">
            <summary>
            Construct a reader passing a reference to a Hashtable (or JavaProperties) instance
            where the keys are to be stored.
            </summary>
            <param name="hashtable">A reference to a hashtable where the key-value pairs can be stored.</param>
        </member>
        <member name="M:Kajabity.Tools.Java.JavaPropertyReader.Parse(biz.ritter.javapi.io.Reader)">
            <summary>
                <para>Load key value pairs (properties) from an input Stream expected to have ISO-8859-1 encoding (code page 28592).
            The input stream (usually reading from a ".properties" file) consists of a series of lines (terminated
            by \r, \n or \r\n) each a key value pair, a comment or a blank line.</para>
                <para>Leading whitespace (spaces, tabs, formfeeds) are ignored at the start of any line - and a line that is empty or
            contains only whitespace is blank and ignored.</para>
                <para>A line with the first non-whitespace character is a '#' or '!' is a comment line and the rest of the line is
            ignored.</para>
                <para>If the first non-whitespace character is not '#' or '!' then it is the start of a key.  A key is all the
            characters up to the first whitespace or a key/value separator - '=' or ':'.</para>
                <para>The separator is optional.  Any whitespace after the key or after the separator (if present) is ignored.</para>
                <para>The first non-whitespace character after the separator (or after the key if no separator) begins the value.
            The value may include whitespace, separators, or comment characters.</para>
                <para>Any unicode character may be included in either key or value by using escapes preceded by the escape
            character '\'.</para>
                <para>The following special cases are defined:</para>
                <code>
            	'\t' - horizontal tab.
            	'\f' - form feed.
            	'\r' - return
            	'\n' - new line
            	'\\' - add escape character.
            	'\ ' - add space in a key or at the start of a value.
            	'\!', '\#' - add comment markers at the start of a key.
            	'\=', '\:' - add a separator in a key.
            </code>
                <para>Any unicode character using the following escape:</para>
                <code>
            	'\uXXXX' - where XXXX represents the unicode character code as 4 hexadecimal digits.
            </code>
                <para>Finally, longer lines can be broken by putting an escape at the very end of the line.  Any leading space
            (unless escaped) is skipped at the beginning of the following line.</para>
            Examples
            <code>
            	a-key = a-value
            	a-key : a-value
            	a-key=a-value
            	a-key a-value
            </code><para>All the above will result in the same key/value pair - key "a-key" and value "a-value".</para><code>
            	! comment...
            	# another comment...
            </code><para>The above are two examples of comments.</para><code>
            	Honk\ Kong = Near China
            </code><para>The above shows how to embed a space in a key - key is "Hong Kong", value is "Near China".</para><code>
            	a-longer-key-example = a really long value that is \
            			split over two lines.
            </code><para>An example of a long line split into two.</para></summary>
            <param name="stream">The input stream that the properties are read from.</param>
        </member>
        <member name="T:Kajabity.Tools.Java.JavaPropertyWriter">
            <summary>
            Use this class for writing a set of key value pair strings to an
            output stream using the Java properties format.
            </summary>
        </member>
        <member name="M:Kajabity.Tools.Java.JavaPropertyWriter.#ctor(biz.ritter.javapi.util.Properties)">
            <summary>
            Construct an instance of this class.
            </summary>
            <param name="hashtable">The Hashtable (or JavaProperties) instance
            whose values are to be written.</param>
        </member>
        <member name="M:Kajabity.Tools.Java.JavaPropertyWriter.Write(biz.ritter.javapi.io.Writer,System.String)">
            <summary>
            Write the properties to the output stream.
            </summary>
            <param name="stream">The output stream where the properties are written.</param>
            <param name="comments">Optional comments that are placed at the beginning of the output.</param>
        </member>
        <member name="M:Kajabity.Tools.Java.JavaPropertyWriter.escapeKey(System.String)">
            <summary>
            Escape the string as a Key with character set ISO-8859-1 -
            the characters 0-127 are US-ASCII and we will escape any others.  The passed string is Unicode which extends
            ISO-8859-1 - so all is well.
            </summary>
            <param name="s">
            </param>
            <returns>
            </returns>
        </member>
        <member name="F:org.apache.harmony.awt.gl.MultiRectArea.CHECK">
                     * If CHECK is true validation check active</member>
        <member name="F:org.apache.harmony.awt.gl.MultiRectArea.rect">
                     * Rectangle buffer</member>
        <member name="F:org.apache.harmony.awt.gl.MultiRectArea.bounds">
                     * Bounding box</member>
        <member name="F:org.apache.harmony.awt.gl.MultiRectArea.rectangles">
                     * Result rectangle array</member>
        <member name="T:org.apache.harmony.awt.gl.MultiRectArea.LineCash">
                     * LineCash provides creating MultiRectArea line by line. Used in JavaShapeRasterizer.</member>
        <member name="T:org.apache.harmony.awt.gl.MultiRectArea.RectCash">
                     * RectCash provides simple creating MultiRectArea</member>
        <member name="T:org.apache.harmony.awt.gl.MultiRectArea.Iterator">
                     * MultiRectArea path iterator</member>
        <member name="M:org.apache.harmony.awt.gl.MultiRectArea.#ctor">
                     * Constructs a new empty MultiRectArea</member>
        <member name="M:org.apache.harmony.awt.gl.MultiRectArea.#ctor(org.apache.harmony.awt.gl.MultiRectArea)">
                     * Constructs a new MultiRectArea as a copy of another one</member>
        <member name="M:org.apache.harmony.awt.gl.MultiRectArea.#ctor(biz.ritter.javapi.awt.Rectangle)">
                     * Constructs a new MultiRectArea consists of single rectangle</member>
        <member name="M:org.apache.harmony.awt.gl.MultiRectArea.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
                     * Constructs a new MultiRectArea consists of single rectangle</member>
        <member name="M:org.apache.harmony.awt.gl.MultiRectArea.#ctor(biz.ritter.javapi.awt.Rectangle[])">
                     * Constructs a new MultiRectArea and append rectangle from buffer</member>
        <member name="M:org.apache.harmony.awt.gl.MultiRectArea.#ctor(biz.ritter.javapi.util.ArrayList{biz.ritter.javapi.awt.Rectangle})">
                     * Constructs a new MultiRectArea and append rectangle from array</member>
        <member name="M:org.apache.harmony.awt.gl.MultiRectArea.resort">
                     * Sort rectangle buffer</member>
        <member name="M:org.apache.harmony.awt.gl.MultiRectArea.Equals(System.Object)">
                     * Tests equals with another object</member>
        <member name="M:org.apache.harmony.awt.gl.MultiRectArea.check(org.apache.harmony.awt.gl.MultiRectArea,System.String)">
                     * Checks validation of MultiRectArea object</member>
        <member name="M:org.apache.harmony.awt.gl.MultiRectArea.checkValidation(biz.ritter.javapi.awt.Rectangle[],System.Boolean)">
                     * Checks validation of MultiRectArea object</member>
        <member name="M:org.apache.harmony.awt.gl.MultiRectArea.setRect(System.Int32[],System.Boolean)">
                     * Assigns rectangle from another buffer</member>
        <member name="M:org.apache.harmony.awt.gl.MultiRectArea.add(org.apache.harmony.awt.gl.MultiRectArea)">
                     * Union with another MultiRectArea object</member>
        <member name="M:org.apache.harmony.awt.gl.MultiRectArea.intersect(org.apache.harmony.awt.gl.MultiRectArea)">
                     * Intersect with another MultiRectArea object</member>
        <member name="M:org.apache.harmony.awt.gl.MultiRectArea.substract(org.apache.harmony.awt.gl.MultiRectArea)">
                     * Subtract another MultiRectArea object</member>
        <member name="M:org.apache.harmony.awt.gl.MultiRectArea.add(biz.ritter.javapi.awt.Rectangle)">
                     * Union with Rectangle object</member>
        <member name="M:org.apache.harmony.awt.gl.MultiRectArea.intersect(biz.ritter.javapi.awt.Rectangle)">
                     * Intersect with Rectangle object</member>
        <member name="M:org.apache.harmony.awt.gl.MultiRectArea.substract(biz.ritter.javapi.awt.Rectangle)">
                     * Subtract rectangle object</member>
        <member name="M:org.apache.harmony.awt.gl.MultiRectArea.intersect(org.apache.harmony.awt.gl.MultiRectArea,org.apache.harmony.awt.gl.MultiRectArea)">
                     * Union two MutliRectareArea objects</member>
        <member name="M:org.apache.harmony.awt.gl.MultiRectArea.union(org.apache.harmony.awt.gl.MultiRectArea,org.apache.harmony.awt.gl.MultiRectArea)">
                     * Intersect two MultiRectArea objects</member>
        <member name="M:org.apache.harmony.awt.gl.MultiRectArea.subtract(org.apache.harmony.awt.gl.MultiRectArea,org.apache.harmony.awt.gl.MultiRectArea)">
                     * Subtract two MultiRectArea objects</member>
        <member name="M:org.apache.harmony.awt.gl.MultiRectArea.print(org.apache.harmony.awt.gl.MultiRectArea,System.String)">
                     * Print MultiRectArea object to output stream</member>
        <member name="M:org.apache.harmony.awt.gl.MultiRectArea.translate(System.Int32,System.Int32)">
                     * Translate MultiRectArea object by (x, y)</member>
        <member name="M:org.apache.harmony.awt.gl.MultiRectArea.addRect(System.Int32,System.Int32,System.Int32,System.Int32)">
                     * Add rectangle to the buffer without any checking</member>
        <member name="M:org.apache.harmony.awt.gl.MultiRectArea.isEmpty">
                     * Tests is MultiRectArea empty</member>
        <member name="M:org.apache.harmony.awt.gl.MultiRectArea.getBounds">
                     * Returns bounds of MultiRectArea object</member>
        <member name="M:org.apache.harmony.awt.gl.MultiRectArea.getRectCount">
                     * Return rectangle count in the buffer</member>
        <member name="M:org.apache.harmony.awt.gl.MultiRectArea.getRectangles">
                     * Returns Rectangle array</member>
        <member name="M:org.apache.harmony.awt.gl.MultiRectArea.getBounds2D">
                     * Returns Bounds2D</member>
        <member name="M:org.apache.harmony.awt.gl.MultiRectArea.contains(System.Double,System.Double)">
                     * Tests does point lie inside MultiRectArea object</member>
        <member name="M:org.apache.harmony.awt.gl.MultiRectArea.contains(biz.ritter.javapi.awt.geom.Point2D)">
                     * Tests does Point2D lie inside MultiRectArea object</member>
        <member name="M:org.apache.harmony.awt.gl.MultiRectArea.contains(System.Double,System.Double,System.Double,System.Double)">
                     * Tests does rectangle lie inside MultiRectArea object</member>
        <member name="M:org.apache.harmony.awt.gl.MultiRectArea.contains(biz.ritter.javapi.awt.geom.Rectangle2D)">
                     * Tests does Rectangle2D lie inside MultiRectArea object</member>
        <member name="M:org.apache.harmony.awt.gl.MultiRectArea.intersects(System.Double,System.Double,System.Double,System.Double)">
                     * Tests does rectangle intersect MultiRectArea object</member>
        <member name="M:org.apache.harmony.awt.gl.MultiRectArea.intersects(biz.ritter.javapi.awt.geom.Rectangle2D)">
                     * Tests does Rectangle2D intersect MultiRectArea object</member>
        <member name="M:org.apache.harmony.awt.gl.MultiRectArea.getPathIterator(biz.ritter.javapi.awt.geom.AffineTransform,System.Double)">
                     * Returns path iterator</member>
        <member name="M:org.apache.harmony.awt.gl.MultiRectArea.getPathIterator(biz.ritter.javapi.awt.geom.AffineTransform)">
                     * Returns path iterator</member>
        <member name="M:org.apache.harmony.awt.gl.MultiRectArea.ToString">
                     * Returns MultiRectArea object converted to string</member>
        <member name="T:org.apache.harmony.awt.gl.MultiRectAreaOp">
             * @author Denis M. Kishenko</member>
        <member name="F:org.apache.harmony.awt.gl.MultiRectAreaOp.RECT_CAPACITY">
                 * Rectangle buffer capacity</member>
        <member name="F:org.apache.harmony.awt.gl.MultiRectAreaOp.MAX_SIMPLE">
                 * If number of rectangle in MultiRectArea object less than MAX_SIMPLE simple algorithm applies</member>
        <member name="M:org.apache.harmony.awt.gl.MultiRectAreaOp.createBuf(System.Int32)">
                 * Create buffer</member>
        <member name="M:org.apache.harmony.awt.gl.MultiRectAreaOp.checkBufSize(System.Int32[],System.Int32)">
                 * Checks buffer size and reallocate if necessary</member>
        <member name="T:org.apache.harmony.awt.gl.MultiRectAreaOp.Region">
                 * Region class provides basic functionlity for MultiRectArea objects to make logical operations</member>
        <member name="T:org.apache.harmony.awt.gl.MultiRectAreaOp.Intersection">
                 * Intersection class provides intersection of two MultiRectAre aobjects</member>
        <member name="T:org.apache.harmony.awt.gl.MultiRectAreaOp.Union">
                 * Union class provides union of two MultiRectAre aobjects</member>
        <member name="T:org.apache.harmony.awt.gl.MultiRectAreaOp.Subtraction">
                 * Subtraction class provides subtraction of two MultiRectAre aobjects</member>
        <member name="T:org.apache.harmony.awt.ListenerList`1">
                 * List of AWT listeners. It is for 3 purposes.
                 * 1. To support list modification from listeners
                 * 2. To ensure call for all listeners as atomic operation
                 * 3. To support system listeners that are needed for built-in AWT components</member>
        <member name="M:org.apache.harmony.awt.ListenerList`1.addSystemListener(`0)">
                     * Adds system listener to this list.
                     *
                     * @param listener - listener to be added.</member>
        <member name="M:org.apache.harmony.awt.ListenerList`1.addUserListener(`0)">
                     * Adds user (public) listener to this list.
                     *
                     * @param listener - listener to be added.</member>
        <member name="M:org.apache.harmony.awt.ListenerList`1.removeUserListener(System.Object)">
                     * Removes user (public) listener to this list.
                     *
                     * @param listener - listener to be removed.</member>
        <member name="M:org.apache.harmony.awt.ListenerList`1.getUserListeners``1(``0[])">
                     * Gets all user (public) listeners in one array.
                     *
                     * @param emptyArray - empty array, it's for deriving particular listeners class.
                     * @return array of all user listeners.</member>
        <member name="M:org.apache.harmony.awt.ListenerList`1.getUserListeners">
                     * Gets all user (public) listeners in one list.
                     *
                     * @return list of all user listeners.</member>
        <member name="M:org.apache.harmony.awt.ListenerList`1.getUserIterator">
                     * Gets iterator for user listeners.
                     *
                     * @return iterator for user listeners.</member>
        <member name="M:org.apache.harmony.awt.ListenerList`1.getSystemIterator">
                     * Gets iterator for system listeners.
                     *
                     * @return iterator for system listeners.</member>
        <member name="T:org.apache.harmony.awt.ReadOnlyIterator`1">
                 * @author Pavel Dolgov
                 * ReadOnlyIterator</member>
        <member name="T:org.apache.harmony.awt.state.MenuItemState">
                 * @author Pavel Dolgov
                 * State of menu item</member>
        <member name="T:org.apache.harmony.luni.util.PriviAction`1">
             * Helper class to avoid multiple anonymous inner class for
             * <code>{@link java.security.AccessController#doPrivileged(PrivilegedAction)}</code>
             * calls.</member>
        <member name="M:org.apache.harmony.luni.util.PriviAction`1.getSecurityProperty(System.String)">
                 * Creates a PrivilegedAction to get the security property with the given
                 * name.
                 *
                 * @param property
                 *            the name of the property
                 *
                 * @see Security#getProperty</member>
        <member name="M:org.apache.harmony.luni.util.PriviAction`1.#ctor">
                 * Creates a PrivilegedAction to get the current security policy object.
                 *
                 * @see Policy#getPolicy</member>
        <member name="M:org.apache.harmony.luni.util.PriviAction`1.#ctor(biz.ritter.javapi.lang.reflect.AccessibleObject)">
                 * Creates a PrivilegedAction to disable the access checks to the given
                 * object.
                 *
                 * @param object
                 *            the object whose accessible flag will be set to
                 *            <code>true</code>
                 *
                 * @see AccessibleObject#setAccessible(boolean)</member>
        <member name="M:org.apache.harmony.luni.util.PriviAction`1.#ctor(System.String)">
                 * Creates a PrivilegedAction to return the value of the system property
                 * with the given key.
                 *
                 * @param property
                 *            the key of the system property
                 *
                 * @see System#getProperty(String)</member>
        <member name="M:org.apache.harmony.luni.util.PriviAction`1.#ctor(System.String,System.String)">
                 * Creates a PrivilegedAction to return the value of the system property
                 * with the given key.
                 *
                 * @param property
                 *            the key of the system property
                 * @param defaultAnswer
                 *            the return value if the system property does not exist
                 *
                 * @see System#getProperty(String, String)</member>
        <member name="M:org.apache.harmony.luni.util.PriviAction`1.run">
                 * Performs the actual privileged computation as defined by the constructor.
                 *
                 * @see java.security.PrivilegedAction#run()</member>
        <member name="T:org.apache.harmony.luni.TwoKeyHashMap`3">
                 *
                 * Reductive hash with two keys
                 *</member>
        <member name="M:org.apache.harmony.luni.TwoKeyHashMap`3.#ctor">
                     * Constructs an empty HashMap</member>
        <member name="M:org.apache.harmony.luni.TwoKeyHashMap`3.#ctor(System.Int32)">
                     * Constructs an empty HashMap
                     *
                     * @param initialCapacity</member>
        <member name="M:org.apache.harmony.luni.TwoKeyHashMap`3.#ctor(System.Int32,System.Single)">
                     * Constructs an empty HashMap
                     *
                     * @param initialCapacity
                     * @param initialLoadFactor</member>
        <member name="M:org.apache.harmony.luni.TwoKeyHashMap`3.values">
                     * Returns a collection view of the values</member>
        <member name="M:org.apache.harmony.luni.TwoKeyHashMap`3.entrySet">
                     * Returns a collection view of the mappings</member>
        <member name="M:org.apache.harmony.luni.TwoKeyHashMap`3.clear">
                     * Clears the map</member>
        <member name="M:org.apache.harmony.luni.TwoKeyHashMap`3.remove(System.Object,System.Object)">
                     * Removes the mapping for the keys
                     *
                     * @param key1
                     * @param key2
                     * @return</member>
        <member name="M:org.apache.harmony.luni.TwoKeyHashMap`3.put(`0,`1,`2)">
                     * Associates the specified value with the specified keys in this map
                     *
                     * @param key1
                     * @param key2
                     * @param value
                     * @return</member>
        <member name="M:org.apache.harmony.luni.TwoKeyHashMap`3.rehash">
                     * Rehash the map
                     *</member>
        <member name="M:org.apache.harmony.luni.TwoKeyHashMap`3.containsKey(System.Object,System.Object)">
                     * Answers whether this map contains a mapping for the specified keys.
                     *
                     * @param key1 first key
                     * @param key2 second key
                     * @return true if this map contains a mapping for the specified keys, and
                     *         false otherwise.</member>
        <member name="M:org.apache.harmony.luni.TwoKeyHashMap`3.get(System.Object,System.Object)">
                     * Return the value by keys
                     *
                     * @param key1
                     * @param key2
                     * @return</member>
        <member name="M:org.apache.harmony.luni.TwoKeyHashMap`3.isEmpty">
                     * Returns true if this map contains no key-value mappings</member>
        <member name="M:org.apache.harmony.luni.TwoKeyHashMap`3.size">
                     * Returns the number of mappings</member>
        <member name="M:org.apache.harmony.luni.TwoKeyHashMap`3.createEntry(System.Int32,`0,`1,`2,org.apache.harmony.luni.TwoKeyHashMap{`0,`1,`2}.Entry{`0,`1,`2})">
                     * Creates new entry
                     *
                     * @param hashCode
                     * @param key1
                     * @param key2
                     * @param value
                     * @param next
                     * @return</member>
        <member name="M:org.apache.harmony.luni.TwoKeyHashMap`3.createEntrySetIterator">
                     * Creates entries iterator
                     *
                     * @return</member>
        <member name="M:org.apache.harmony.luni.TwoKeyHashMap`3.createValueCollectionIterator">
                     * Creates values iterator
                     *
                     * @return</member>
        <member name="T:org.apache.harmony.luni.TwoKeyHashMap`3.Entry`3">
                     * Entry implementation for the TwoKeyHashMap class
                     *</member>
        <member name="T:org.apache.harmony.luni.TwoKeyHashMap`3.ValuesCollectionImpl">
                     * An instance is returned by the values() call.</member>
        <member name="T:biz.ritter.javapi.util.zip.Adler32">
            <summary>
            The Adler32 class is used to compute a Adler32 checksum from data provided as
            input value.
            </summary>
            <seealso cref="!:http://en.wikipedia.org/wiki/Adler32#Example_implementation" />
            <remarks>
            The Adler32 class compute a Adler32 checksum from data provided as input value.
            It implements the Wikipedia source code sample as C# code.
            If big array is used, you can become out of memory.
            </remarks>
        </member>
        <member name="F:biz.ritter.javapi.util.zip.Adler32.MOD_ADLER32">
            <summary>
            The modulo factor for Adler32
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.util.zip.Adler32.content">
            <summary>
            The content for compute checksum
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.util.zip.Adler32.checksum">
            <summary>
            The last checksum
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.util.zip.Adler32.#ctor">
            <summary>
            Construct a new Adler32 instance.
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.util.zip.Adler32.getValue">
            <summary>
            Return the Adler32 checksum
            </summary>
            <returns>Adler32 checksum</returns>
        </member>
        <member name="M:biz.ritter.javapi.util.zip.Adler32.reset">
                        * Resets the Adler32 checksum to it initial state.</member>
        <member name="M:biz.ritter.javapi.util.zip.Adler32.update(System.Int32)">
                        * Updates this checksum with the byte value provided as integer.
                        *
                        * @param val
                        *            represents the byte to update the checksum.</member>
        <member name="M:biz.ritter.javapi.util.zip.Adler32.update(System.Byte[])">
                        * Updates this checksum with the bytes contained in buffer {@code buf}.
                        *
                        * @param buf
                        *            the buffer holding the data to update the checksum with.</member>
        <member name="M:biz.ritter.javapi.util.zip.Adler32.update(System.Byte[],System.Int32,System.Int32)">
                        * Updates this checksum with n bytes of data obtained from buffer {@code
                        * buf}, starting at offset {@code off}.
                        *
                        * @param buf
                        *            the buffer to update the checksum.
                        * @param off
                        *            the offset in {@code buf} to obtain data from.
                        * @param nbytes
                        *            the number of bytes to read from {@code buf}.</member>
        <member name="M:biz.ritter.javapi.util.zip.Adler32.compute">
            <summary>
            Compute the checksum
            </summary>
        </member>
        <member name="T:biz.ritter.javapi.util.zip.CheckedInputStream">
                 * The {@code CheckedInputStream} class is used to maintain a checksum at the
                 * same time as the data, on which the checksum is computed, is read from a
                 * stream. The purpose of this checksum is to establish data integrity,
                 * comparing the computed checksum against a published checksum value.</member>
        <member name="M:biz.ritter.javapi.util.zip.CheckedInputStream.#ctor(biz.ritter.javapi.io.InputStream,biz.ritter.javapi.util.zip.Checksum)">
                     * Constructs a new {@code CheckedInputStream} on {@code InputStream}
                     * {@code is}. The checksum will be calculated using the algorithm
                     * implemented by {@code csum}.
                     *
                     * @param is
                     *            the input stream to calculate checksum from.
                     * @param csum
                     *            an entity implementing the checksum algorithm.</member>
        <member name="M:biz.ritter.javapi.util.zip.CheckedInputStream.read">
                     * Reads one byte of data from the underlying input stream and updates the
                     * checksum with the byte data.
                     *
                     * @return {@code -1} at the end of the stream, a single byte value
                     *         otherwise.
                     * @throws IOException
                     *             if an {@code IOException} occurs.</member>
        <member name="M:biz.ritter.javapi.util.zip.CheckedInputStream.read(System.Byte[],System.Int32,System.Int32)">
                     * Reads up to n bytes of data from the underlying input stream, storing it
                     * into {@code buf}, starting at offset {@code off}. The checksum is
                     * updated with the bytes read.
                     *
                     * @param buf
                     *            the byte array in which to store the bytes read.
                     * @param off
                     *            the initial position in {@code buf} to store the bytes read
                     *            from this stream.
                     * @param nbytes
                     *            the maximum number of bytes to store in {@code buf}.
                     * @return the number of bytes actually read or {@code -1} if arrived at the
                     *         end of the filtered stream while reading the data.
                     * @throws IOException
                     *             if this stream is closed or some I/O error occurs.</member>
        <member name="M:biz.ritter.javapi.util.zip.CheckedInputStream.getChecksum">
                     * Returns the checksum calculated on the stream read so far.
                     *
                     * @return the updated checksum.</member>
        <member name="M:biz.ritter.javapi.util.zip.CheckedInputStream.skip(System.Int64)">
                     * Skip up to n bytes of data on the underlying input stream. Any skipped
                     * bytes are added to the running checksum value.
                     *
                     * @param nbytes
                     *            the number of bytes to skip.
                     * @throws IOException
                     *             if this stream is closed or another I/O error occurs.
                     * @return the number of bytes skipped.</member>
        <member name="T:biz.ritter.javapi.util.zip.CheckedOutputStream">
                 * The {@code CheckedOutputStream} class is used to maintain a running checksum
                 * of all data written to a stream. The purpose of this checksum is to establish
                 * data integrity, by publishing the checksum to other parties wanting to read
                 * the non corrupted data.</member>
        <member name="M:biz.ritter.javapi.util.zip.CheckedOutputStream.#ctor(biz.ritter.javapi.io.OutputStream,biz.ritter.javapi.util.zip.Checksum)">
                     * Constructs a new {@code CheckedOutputStream} on {@code OutputStream}
                     * {@code os}. The checksum is calculated using the algorithm implemented
                     * by {@code csum}.
                     *
                     * @param os
                     *            the output stream to calculate checksum for.
                     * @param cs
                     *            an entity implementing the checksum algorithm.</member>
        <member name="M:biz.ritter.javapi.util.zip.CheckedOutputStream.getChecksum">
                     * Returns the checksum calculated on the stream read so far.
                     *
                     * @return the updated checksum.</member>
        <member name="M:biz.ritter.javapi.util.zip.CheckedOutputStream.write(System.Int32)">
                     * Writes the specified byte to the underlying stream. The checksum is
                     * updated with {@code val}.
                     *
                     * @param val
                     *            the data value to written to the output stream.
                     * @throws IOException
                     *             if an IO error has occurred.</member>
        <member name="M:biz.ritter.javapi.util.zip.CheckedOutputStream.write(System.Byte[],System.Int32,System.Int32)">
                     * Writes n bytes of data from {@code buf} starting at offset {@code off} to
                     * the underlying stream. The checksum is updated with the bytes written.
                     *
                     * @param buf
                     *            data written to the output stream.
                     * @param off
                     *            the offset to start reading the data from {@code buf} written
                     *            to the output stream.
                     * @param nbytes
                     *            number of bytes to write to the output stream.
                     * @throws IOException
                     *             if an IO error has occurred.</member>
        <member name="T:biz.ritter.javapi.util.zip.Checksum">
                 * Holds information about a checksum which was computed with the methods
                 * implementing a checksum algorithm.</member>
        <member name="M:biz.ritter.javapi.util.zip.Checksum.getValue">
                     * Returns the current calculated checksum value.
                     *
                     * @return the checksum.</member>
        <member name="M:biz.ritter.javapi.util.zip.Checksum.reset">
                     * Resets the checksum value applied before beginning calculations on a new
                     * stream of data.</member>
        <member name="M:biz.ritter.javapi.util.zip.Checksum.update(System.Byte[],System.Int32,System.Int32)">
                     * Updates the checksum with the given bytes.
                     *
                     * @param buf
                     *            the byte array from which to read the bytes.
                     * @param off
                     *            the initial position in {@code buf} to read the bytes from.
                     * @param nbytes
                     *            the number of bytes to read from {@code buf}.</member>
        <member name="M:biz.ritter.javapi.util.zip.Checksum.update(System.Int32)">
                     * Updates the checksum value with the given byte.
                     *
                     * @param val
                     *            the byte to update the checksum with.</member>
        <member name="T:biz.ritter.javapi.util.zip.CRC32">
            <summary>
            The CRC32 class is used to compute a CRC32 checksum from data provided as
            input value.
            </summary>
            <see cref="!:http://issues.apache.org/jira/browse/HADOOP-6148" />
            <see cref="!:http://www.codeplex.com/npoi" />
        </member>
        <member name="M:biz.ritter.javapi.util.zip.CRC32.getValue">
            <summary>
            Return the CRC checksum
            </summary>
            <returns>Adler32 checksum</returns>
        </member>
        <member name="M:biz.ritter.javapi.util.zip.CRC32.reset">
                        * Resets the Adler32 checksum to it initial state.</member>
        <member name="M:biz.ritter.javapi.util.zip.CRC32.update(System.Int32)">
                        * Updates this checksum with the byte value provided as integer.
                        *
                        * @param val
                        *            represents the byte to update the checksum.</member>
        <member name="M:biz.ritter.javapi.util.zip.CRC32.update(System.Byte[])">
                        * Updates this checksum with the bytes contained in buffer {@code buf}.
                        *
                        * @param buf
                        *            the buffer holding the data to update the checksum with.</member>
        <member name="M:biz.ritter.javapi.util.zip.CRC32.update(System.Byte[],System.Int32,System.Int32)">
                        * Updates this checksum with n bytes of data obtained from buffer {@code
                        * buf}, starting at offset {@code off}.
                        *
                        * @param buf
                        *            the buffer to update the checksum.
                        * @param off
                        *            the offset in {@code buf} to obtain data from.
                        * @param nbytes
                        *            the number of bytes to read from {@code buf}.</member>
        <member name="F:biz.ritter.javapi.util.zip.CRC32.T1">
                   * Pre-generated lookup tables. For the code to generate these tables
                   * please see HDFS-297.
             T1[x] is ~CRC(x)</member>
        <member name="F:biz.ritter.javapi.util.zip.CRC32.T2">
             T2[x] is ~CRC(x followed by one 0x00 byte)</member>
        <member name="F:biz.ritter.javapi.util.zip.CRC32.T3">
             T3[x] is ~CRC(x followed by two 0x00 bytes)</member>
        <member name="F:biz.ritter.javapi.util.zip.CRC32.T4">
             T4[x] is ~CRC(x followed by three 0x00 bytes)</member>
        <member name="T:biz.ritter.javapi.util.zip.DataFormatException">
                 * {@code DataFormatException} is used to indicate an error in the format of a
                 * particular data stream which is to be uncompressed.</member>
        <member name="M:biz.ritter.javapi.util.zip.DataFormatException.#ctor">
                     * Constructs a new {@code DataFormatException} instance.</member>
        <member name="M:biz.ritter.javapi.util.zip.DataFormatException.#ctor(System.String)">
                     * Constructs a new {@code DataFormatException} instance with the specified
                     * message.
                     *
                     * @param detailMessage
                     *            the detail message for the exception.</member>
        <!--FIXME: Invalid documentation markup was found for member T:biz.ritter.javapi.util.zip.Deflater-->
        <member name="F:biz.ritter.javapi.util.zip.Deflater.BEST_COMPRESSION">
                     * Upper bound for the compression level range.</member>
        <member name="F:biz.ritter.javapi.util.zip.Deflater.BEST_SPEED">
                     * Lower bound for compression level range.</member>
        <member name="F:biz.ritter.javapi.util.zip.Deflater.DEFAULT_COMPRESSION">
                     * Usage of the default compression level.</member>
        <member name="F:biz.ritter.javapi.util.zip.Deflater.DEFAULT_STRATEGY">
                     * Default value for compression strategy.</member>
        <member name="F:biz.ritter.javapi.util.zip.Deflater.DEFLATED">
                     * Default value for compression method.</member>
        <member name="F:biz.ritter.javapi.util.zip.Deflater.FILTERED">
                     * Possible value for compression strategy.</member>
        <member name="F:biz.ritter.javapi.util.zip.Deflater.HUFFMAN_ONLY">
                     * Possible value for compression strategy.</member>
        <member name="F:biz.ritter.javapi.util.zip.Deflater.NO_COMPRESSION">
                     * Possible value for compression level.</member>
        <member name="F:biz.ritter.javapi.util.zip.Deflater.Z_NO_FLUSH">
                     * Use buffering for best compression.</member>
        <member name="F:biz.ritter.javapi.util.zip.Deflater.Z_SYNC_FLUSH">
                     * Flush buffers so recipients can immediately decode the data sent thus
                     * far. This mode may degrade compression.</member>
        <member name="F:biz.ritter.javapi.util.zip.Deflater.Z_FINISH">
                     * Flush buffers because there is no further data.</member>
        <member name="M:biz.ritter.javapi.util.zip.Deflater.#ctor">
                     * Constructs a new {@code Deflater} instance with default compression
                     * level. The strategy can be specified with {@link #setStrategy}, only. A
                     * header is added to the output by default; use constructor {@code
                     * Deflater(level, boolean)} if you need to omit the header.</member>
        <member name="M:biz.ritter.javapi.util.zip.Deflater.#ctor(System.Int32)">
                     * Constructs a new {@code Deflater} instance with a specific compression
                     * level. The strategy can be specified with {@code setStrategy}, only. A
                     * header is added to the output by default; use
                     * {@code Deflater(level, boolean)} if you need to omit the header.
                     *
                     * @param level
                     *            the compression level in the range between 0 and 9.</member>
        <member name="M:biz.ritter.javapi.util.zip.Deflater.#ctor(System.Int32,System.Boolean)">
                     * Constructs a new {@code Deflater} instance with a specific compression
                     * level. If noHeader is passed as true no ZLib header is added to the
                     * output. In a ZIP archive every entry (compressed file) comes with such a
                     * header. The strategy can be specified with the setStrategy method, only.
                     *
                     * @param level
                     *            the compression level in the range between 0 and 9.
                     * @param noHeader
                     *            {@code true} indicates that no ZLIB header should be written.</member>
        <member name="M:biz.ritter.javapi.util.zip.Deflater.deflate(System.Byte[])">
                     * Deflates the data (previously passed to {@code setInput}) into the
                     * supplied buffer.
                     *
                     * @param buf
                     *            buffer to write compressed data to.
                     * @return number of bytes of compressed data written to {@code buf}.
                     * @see #deflate(byte[], int, int)</member>
        <member name="M:biz.ritter.javapi.util.zip.Deflater.deflate(System.Byte[],System.Int32,System.Int32)">
                     * Deflates data (previously passed to {@code setInput}) into a specific
                     * region within the supplied buffer.
                     *
                     * @param buf
                     *            the buffer to write compressed data to.
                     * @param off
                     *            the offset within {@code buf} at which to start writing to.
                     * @param nbytes
                     *            maximum number of bytes of compressed data to be written.
                     * @return the number of bytes of compressed data written to {@code buf}.</member>
        <member name="M:biz.ritter.javapi.util.zip.Deflater.deflate(System.Byte[],System.Int32,System.Int32,System.Int32)">
                     * @param flushParam one of {@link #Z_NO_FLUSH}, {@link #Z_FINISH} or
                     *            {@link #Z_SYNC_FLUSH}.</member>
        <member name="M:biz.ritter.javapi.util.zip.Deflater.end">
                     * Frees all resources held onto by this deflating algorithm. Any unused
                     * input or output is discarded. While this method is used by {@code
                     * finalize()}, it can be called explicitly in order to free native
                     * resources before the next GC cycle. After {@code end()} was called other
                     * methods will typically throw an {@code IllegalStateException}.</member>
        <member name="M:biz.ritter.javapi.util.zip.Deflater.finish">
                     * Indicates to the {@code Deflater} that all uncompressed input has been provided
                     * to it.
                     *
                     * @see #finished</member>
        <member name="M:biz.ritter.javapi.util.zip.Deflater.finished">
                     * Returns whether or not all provided data has been successfully
                     * compressed.
                     *
                     * @return true if all data has been compressed, false otherwise.</member>
        <member name="M:biz.ritter.javapi.util.zip.Deflater.getAdler">
                     * Returns the Adler32 checksum of uncompressed data currently read. If a
                     * preset dictionary is used getAdler() will return the Adler32 checksum of
                     * the dictionary used.
                     *j
                     * @return the Adler32 checksum of uncompressed data or preset dictionary if
                     *         used.
                     * @see #setDictionary(byte[])
                     * @see #setDictionary(byte[], int, int)</member>
        <member name="M:biz.ritter.javapi.util.zip.Deflater.getTotalIn">
                     * Returns the total number of bytes of input consumed by the {@code Deflater}.
                     *
                     * @return number of bytes of input read.</member>
        <member name="M:biz.ritter.javapi.util.zip.Deflater.getTotalOut">
                     * Returns the total number of compressed bytes output by this {@code Deflater}.
                     *
                     * @return number of compressed bytes output.</member>
        <member name="M:biz.ritter.javapi.util.zip.Deflater.needsInput">
                     * Counterpart to setInput(). Indicates whether or not all bytes of
                     * uncompressed input have been consumed by the {@code Deflater}. If needsInput()
                     * returns true setInput() must be called before deflation can continue. If
                     * all bytes of uncompressed data have been provided to the {@code Deflater}
                     * finish() must be called to ensure the compressed data is output.
                     *
                     * @return {@code true} if input is required for deflation to continue,
                     *         {@code false} otherwise.
                     * @see #finished()
                     * @see #setInput(byte[])
                     * @see #setInput(byte[], int, int)</member>
        <member name="M:biz.ritter.javapi.util.zip.Deflater.reset">
                     * Resets the {@code Deflater} to accept new input without affecting any
                     * previously made settings for the compression strategy or level. This
                     * operation <i>must</i> be called after {@code finished()} returns
                     * {@code true} if the {@code Deflater} is to be reused.
                     *
                     * @see #finished</member>
        <member name="M:biz.ritter.javapi.util.zip.Deflater.setDictionary(System.Byte[])">
                     * Sets the dictionary to be used for compression by this {@code Deflater}.
                     * setDictionary() can only be called if this {@code Deflater} supports the writing
                     * of ZLIB headers. This is the default behaviour but can be overridden
                     * using {@code Deflater(int, boolean)}.
                     *
                     * @param buf
                     *            the buffer containing the dictionary data bytes.
                     * @see Deflater#Deflater(int, boolean)</member>
        <member name="M:biz.ritter.javapi.util.zip.Deflater.setDictionary(System.Byte[],System.Int32,System.Int32)">
                     * Sets the dictionary to be used for compression by this {@code Deflater}.
                     * setDictionary() can only be called if this {@code Deflater} supports the writing
                     * of ZLIB headers. This is the default behaviour but can be overridden
                     * using {@code Deflater(int, boolean)}.
                     *
                     * @param buf
                     *            the buffer containing the dictionary data bytes.
                     * @param off
                     *            the offset of the data.
                     * @param nbytes
                     *            the length of the data.
                     * @see Deflater#Deflater(int, boolean)</member>
        <member name="M:biz.ritter.javapi.util.zip.Deflater.setInput(System.Byte[])">
                     * Sets the input buffer the {@code Deflater} will use to extract uncompressed bytes
                     * for later compression.
                     *
                     * @param buf
                     *            the buffer.</member>
        <member name="M:biz.ritter.javapi.util.zip.Deflater.setInput(System.Byte[],System.Int32,System.Int32)">
                     * Sets the input buffer the {@code Deflater} will use to extract uncompressed bytes
                     * for later compression. Input will be taken from the buffer region
                     * starting at off and ending at nbytes - 1.
                     *
                     * @param buf
                     *            the buffer containing the input data bytes.
                     * @param off
                     *            the offset of the data.
                     * @param nbytes
                     *            the length of the data.</member>
        <member name="M:biz.ritter.javapi.util.zip.Deflater.setLevel(System.Int32)">
                     * Sets the compression level to be used when compressing data. The
                     * compression level must be a value between 0 and 9. This value must be set
                     * prior to calling setInput().
                     *
                     * @param level
                     *            compression level to use
                     * @exception IllegalArgumentException
                     *                If the compression level is invalid.</member>
        <member name="M:biz.ritter.javapi.util.zip.Deflater.setStrategy(System.Int32)">
                     * Sets the compression strategy to be used. The strategy must be one of
                     * FILTERED, HUFFMAN_ONLY or DEFAULT_STRATEGY.This value must be set prior
                     * to calling setInput().
                     *
                     * @param strategy
                     *            compression strategy to use
                     * @exception IllegalArgumentException
                     *                If the strategy specified is not one of FILTERED,
                     *                HUFFMAN_ONLY or DEFAULT_STRATEGY.</member>
        <member name="M:biz.ritter.javapi.util.zip.Deflater.getBytesRead">
                     * Returns a long int of total number of bytes read by the {@code Deflater}. This
                     * method performs the same as {@code getTotalIn} except it returns a long value
                     * instead of an integer
                     *
                     * @see #getTotalIn()
                     * @return total number of bytes read by {@code Deflater}.</member>
        <member name="M:biz.ritter.javapi.util.zip.Deflater.getBytesWritten">
                     * Returns a long int of total number of bytes of read by the {@code Deflater}. This
                     * method performs the same as {@code getTotalOut} except it returns a long
                     * value instead of an integer
                     *
                     * @see #getTotalOut()
                     * @return bytes exactly write by {@code Deflater}</member>
        <member name="T:biz.ritter.javapi.util.zip.DeflaterInputStream">
                 * An inputstream filter to compress data by the compressing format of Deflate.</member>
        <member name="F:biz.ritter.javapi.util.zip.DeflaterInputStream.def">
                     * The Deflater used by this DeflaterInputStream</member>
        <member name="F:biz.ritter.javapi.util.zip.DeflaterInputStream.buf">
                     * The internal input data buffer used by this DeflaterInputStream.</member>
        <member name="M:biz.ritter.javapi.util.zip.DeflaterInputStream.#ctor(biz.ritter.javapi.io.InputStream)">
                     * Constructs a DeflaterInputStream with the default Deflater and internal
                     * input buffer length.
                     *
                     * @param in
                     *            the InputStream that the DeflaterInputStream reads data from.</member>
        <member name="M:biz.ritter.javapi.util.zip.DeflaterInputStream.#ctor(biz.ritter.javapi.io.InputStream,biz.ritter.javapi.util.zip.Deflater)">
                     * Constructs a DeflaterInputStream with a specified Deflater and the
                     * default internal input buffer length.
                     *
                     * @param in
                     *            the InputStream that the DeflaterInputStream reads data from.
                     * @param defl
                     *            an specifed Deflater used to compress data.</member>
        <member name="M:biz.ritter.javapi.util.zip.DeflaterInputStream.#ctor(biz.ritter.javapi.io.InputStream,biz.ritter.javapi.util.zip.Deflater,System.Int32)">
                     * Constructs a DeflaterInputStream with a specified Deflater and input
                     * buffer length.
                     *
                     * @param in
                     *            the InputStream that the DeflaterInputStream reads data from.
                     * @param defl
                     *            a specifed Deflater used to compress data.
                     * @param bufLen
                     *            the buffer length of the internal input data buffer.</member>
        <member name="M:biz.ritter.javapi.util.zip.DeflaterInputStream.close">
                     * Closes the underlying input stream and discards any remaining uncompressed
                     * data.</member>
        <member name="M:biz.ritter.javapi.util.zip.DeflaterInputStream.read">
                     * Reads a byte from the compressed input stream.
                     *
                     * @return the byte or -1 if the end of the compressed input stream has been
                     *         reached.</member>
        <member name="M:biz.ritter.javapi.util.zip.DeflaterInputStream.read(System.Byte[],System.Int32,System.Int32)">
                     * Reads compressed data into a byte buffer.
                     *
                     * @param b
                     *            the byte buffer that compressed data will be read into.
                     * @param off
                     *            the offset in the byte buffer where compressed data will start
                     *            to be read into.
                     * @param len
                     *            the length of the compressed data that is expected to read.
                     * @return the number of bytes read or -1 if the end of the compressed input
                     *         stream has been reached.</member>
        <member name="M:biz.ritter.javapi.util.zip.DeflaterInputStream.skip(System.Int64)">
                     * Skips n bytes from the DeflateInputStream.
                     *
                     * @param n
                     *            the bytes to skipped. If n is greater than Integer.MAX_VALUE,
                     *            the DeflateInputStream tries to skip Integer.MAX_VALUE bytes.
                     * @return the number of bytes actually skipped.</member>
        <member name="M:biz.ritter.javapi.util.zip.DeflaterInputStream.available">
                     * Returns 1 to denote there is data to read while 0 if no data is
                     * available. The returned value does not denote how many bytes that can be
                     * read.
                     *
                     * @return 1 to denote there is data to read while 0 if no data is
                     *         available.</member>
        <member name="M:biz.ritter.javapi.util.zip.DeflaterInputStream.markSupported">
                     * Denotes whether this inputstream support mark()/reset() operation. Always
                     * returns false since the two operaions are not supported in
                     * DeflaterInputStream.
                     *
                     * @return always returns false.</member>
        <member name="M:biz.ritter.javapi.util.zip.DeflaterInputStream.mark(System.Int32)">
                     * Not supported in DeflaterInputStream and just does nothing.
                     *
                     * @param limit
                     *            maximum number of bytes that can be read before the mark
                     *            becomes invalid.</member>
        <member name="M:biz.ritter.javapi.util.zip.DeflaterInputStream.reset">
                     * Not supported in DeflaterInputStream and just throws IOException.</member>
        <member name="T:biz.ritter.javapi.util.zip.Inflater">
            <summary>
                <para>
            This class uncompresses data that was compressed using the <i>DEFLATE</i>
            algorithm (see <a href="http://www.gzip.org/algorithm.txt">specification</a>).
            </para>
                <para>
            Basically this class is part of the API to the stream based ZLIB compression
            library and is used as such by {@code InflaterInputStream} and its
            descendants.
            <para /><para>
            The typical usage of a {@code Inflater} outside this package consists of a
            specific call to one of its constructors before being passed to an instance
            of {@code InflaterInputStream}.
            <para>
            @see InflaterInputStream
            @see Deflater
            </para></para></para>
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.util.zip.Inflater.#ctor">
                     * This constructor creates an inflater that expects a header from the input
                     * stream. Use {@code Inflater(bool)} if the input comes without a ZLIB
                     * header.</member>
        <member name="M:biz.ritter.javapi.util.zip.Inflater.#ctor(System.Boolean)">
                     * This constructor allows to create an inflater that expects no header from
                     * the input stream.
                     *
                     * @param noHeader
                     *            {@code true} indicates that no ZLIB header comes with the
                     *            input.</member>
        <member name="M:biz.ritter.javapi.util.zip.Inflater.end">
                     * Release any resources associated with this {@code Inflater}. Any unused
                     * input/output is discarded. This is also called by the finalize method.</member>
        <member name="M:biz.ritter.javapi.util.zip.Inflater.finished">
                     * Indicates if the {@code Inflater} has inflated the entire deflated
                     * stream. If deflated bytes remain and {@code needsInput()} returns {@code
                     * true} this method will return {@code false}. This method should be
                     * called after all deflated input is supplied to the {@code Inflater}.
                     *
                     * @return {@code true} if all input has been inflated, {@code false}
                     *         otherwise.</member>
        <member name="M:biz.ritter.javapi.util.zip.Inflater.getAdler">
                     * Returns the <i>Adler32</i> checksum of either all bytes inflated, or the
                     * checksum of the preset dictionary if one has been supplied.
                     *
                     * @return The <i>Adler32</i> checksum associated with this
                     *         {@code Inflater}.</member>
        <member name="M:biz.ritter.javapi.util.zip.Inflater.getBytesRead">
                     * Returns the total number of bytes read by the {@code Inflater}. This
                     * method performs the same as {@code getTotalIn()} except that it returns a
                     * {@code long} value instead of an integer.
                     *
                     * @return the total number of bytes read.</member>
        <member name="M:biz.ritter.javapi.util.zip.Inflater.getBytesWritten">
                     * Returns a the total number of bytes read by the {@code Inflater}. This
                     * method performs the same as {@code getTotalOut} except it returns a
                     * {@code long} value instead of an integer.
                     *
                     * @return the total bytes written to the output buffer.</member>
        <member name="M:biz.ritter.javapi.util.zip.Inflater.getRemaining">
                     * Returns the number of bytes of current input remaining to be read by the
                     * inflater.
                     *
                     * @return the number of bytes of unread input.</member>
        <member name="M:biz.ritter.javapi.util.zip.Inflater.getTotalIn">
                     * Returns total number of bytes of input read by the {@code Inflater}. The
                     * result value is limited by {@code Integer.MAX_VALUE}.
                     *
                     * @return the total number of bytes read.</member>
        <member name="M:biz.ritter.javapi.util.zip.Inflater.getTotalOut">
                     * Returns total number of bytes written to the output buffer by the {@code
                     * Inflater}. The result value is limited by {@code Integer.MAX_VALUE}.
                     *
                     * @return the total bytes of output data written.</member>
        <member name="M:biz.ritter.javapi.util.zip.Inflater.inflate(System.Byte[])">
                     * Inflates bytes from current input and stores them in {@code buf}.
                     *
                     * @param buf
                     *            the buffer where decompressed data bytes are written.
                     * @return the number of bytes inflated.
                     * @throws DataFormatException
                     *             if the underlying stream is corrupted or was not compressed
                     *             using a {@code Deflater}.</member>
        <member name="M:biz.ritter.javapi.util.zip.Inflater.inflate(System.Byte[],System.Int32,System.Int32)">
                     * Inflates up to n bytes from the current input and stores them in {@code
                     * buf} starting at {@code off}.
                     *
                     * @param buf
                     *            the buffer to write inflated bytes to.
                     * @param off
                     *            the offset in buffer where to start writing decompressed data.
                     * @param nbytes
                     *            the number of inflated bytes to write to {@code buf}.
                     * @throws DataFormatException
                     *             if the underlying stream is corrupted or was not compressed
                     *             using a {@code Deflater}.
                     * @return the number of bytes inflated.</member>
        <member name="M:biz.ritter.javapi.util.zip.Inflater.needsDictionary">
                     * Indicates whether the input bytes were compressed with a preset
                     * dictionary. This method should be called prior to {@code inflate()} to
                     * determine whether a dictionary is required. If so {@code setDictionary()}
                     * should be called with the appropriate dictionary prior to calling {@code
                     * inflate()}.
                     *
                     * @return {@code true} if a preset dictionary is required for inflation.
                     * @see #setDictionary(byte[])
                     * @see #setDictionary(byte[], int, int)</member>
        <member name="M:biz.ritter.javapi.util.zip.Inflater.needsInput">
                     * Indicates that input has to be passed to the inflater.
                     *
                     * @return {@code true} if {@code setInput} has to be called before
                     *         inflation can proceed.
                     * @see #setInput(byte[])</member>
        <member name="M:biz.ritter.javapi.util.zip.Inflater.reset">
                     * Resets the {@code Inflater}. Should be called prior to inflating a new
                     * set of data.</member>
        <member name="M:biz.ritter.javapi.util.zip.Inflater.setDictionary(System.Byte[])">
                     * Sets the preset dictionary to be used for inflation to {@code buf}.
                     * {@code needsDictionary()} can be called to determine whether the current
                     * input was deflated using a preset dictionary.
                     *
                     * @param buf
                     *            The buffer containing the dictionary bytes.
                     * @see #needsDictionary</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.util.zip.Inflater.setDictionary(System.Byte[],System.Int32,System.Int32)-->
        <member name="M:biz.ritter.javapi.util.zip.Inflater.setInput(System.Byte[])">
                     * Sets the current input to be decompressed. This method should only be
                     * called if {@code needsInput()} returns {@code true}.
                     *
                     * @param buf
                     *            the input buffer.
                     * @see #needsInput</member>
        <member name="M:biz.ritter.javapi.util.zip.Inflater.setInput(System.Byte[],System.Int32,System.Int32)">
                     * Sets the current input to the region of the input buffer starting at
                     * {@code off} and ending at {@code nbytes - 1} where data is written after
                     * decompression. This method should only be called if {@code needsInput()}
                     * returns {@code true}.
                     *
                     * @param buf
                     *            the input buffer.
                     * @param off
                     *            the offset to read from the input buffer.
                     * @param nbytes
                     *            the number of bytes to read.
                     * @see #needsInput</member>
        <member name="F:biz.ritter.javapi.util.zip.InflaterInputStream.inf">
                     * The inflater used for this stream.</member>
        <member name="F:biz.ritter.javapi.util.zip.InflaterInputStream.buf">
                     * The input buffer used for decompression.</member>
        <member name="M:biz.ritter.javapi.util.zip.InflaterInputStream.#ctor(biz.ritter.javapi.io.InputStream)">
                     * This is the most basic constructor. You only need to pass the {@code
                     * InputStream} from which the compressed data is to be read from. Default
                     * settings for the {@code Inflater} and internal buffer are be used. In
                     * particular the Inflater expects a ZLIB header from the input stream.
                     *
                     * @param is
                     *            the {@code InputStream} to read data from.</member>
        <member name="M:biz.ritter.javapi.util.zip.InflaterInputStream.#ctor(biz.ritter.javapi.io.InputStream,biz.ritter.javapi.util.zip.Inflater)">
                     * This constructor lets you pass a specifically initialized Inflater,
                     * for example one that expects no ZLIB header.
                     *
                     * @param is
                     *            the {@code InputStream} to read data from.
                     * @param inf
                     *            the specific {@code Inflater} for uncompressing data.</member>
        <member name="M:biz.ritter.javapi.util.zip.InflaterInputStream.#ctor(biz.ritter.javapi.io.InputStream,biz.ritter.javapi.util.zip.Inflater,System.Int32)">
                     * This constructor lets you specify both the {@code Inflater} as well as
                     * the internal buffer size to be used.
                     *
                     * @param is
                     *            the {@code InputStream} to read data from.
                     * @param inf
                     *            the specific {@code Inflater} for uncompressing data.
                     * @param bsize
                     *            the size to be used for the internal buffer.</member>
        <member name="F:biz.ritter.javapi.util.zip.InflaterInputStream.len">
                     * The length of the buffer.</member>
        <member name="F:biz.ritter.javapi.util.zip.InflaterInputStream.eof">
                     * True if this stream's last byte has been returned to the user. This
                     * could be because the underlying stream has been exhausted, or if errors
                     * were encountered while inflating that stream.</member>
        <member name="M:biz.ritter.javapi.util.zip.InflaterInputStream.read">
                     * Reads a single byte of decompressed data.
                     *
                     * @return the byte read.
                     * @throws IOException
                     *             if an error occurs reading the byte.</member>
        <member name="M:biz.ritter.javapi.util.zip.InflaterInputStream.read(System.Byte[],System.Int32,System.Int32)">
                     * Reads up to {@code nbytes} of decompressed data and stores it in
                     * {@code buffer} starting at {@code off}.
                     *
                     * @param buffer
                     *            the buffer to write data to.
                     * @param off
                     *            offset in buffer to start writing.
                     * @param nbytes
                     *            number of bytes to read.
                     * @return Number of uncompressed bytes read
                     * @throws IOException
                     *             if an IOException occurs.</member>
        <member name="M:biz.ritter.javapi.util.zip.InflaterInputStream.fill">
                     * Fills the input buffer with data to be decompressed.
                     *
                     * @throws IOException
                     *             if an {@code IOException} occurs.</member>
        <member name="M:biz.ritter.javapi.util.zip.InflaterInputStream.skip(System.Int64)">
                     * Skips up to n bytes of uncompressed data.
                     *
                     * @param nbytes
                     *            the number of bytes to skip.
                     * @return the number of uncompressed bytes skipped.
                     * @throws IOException
                     *             if an error occurs skipping.</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.util.zip.InflaterInputStream.available-->
        <member name="M:biz.ritter.javapi.util.zip.InflaterInputStream.close">
                     * Closes the input stream.
                     *
                     * @throws IOException
                     *             If an error occurs closing the input stream.</member>
        <member name="M:biz.ritter.javapi.util.zip.InflaterInputStream.mark(System.Int32)">
                     * Marks the current position in the stream. This implementation overrides
                     * the super type implementation to do nothing at all.
                     *
                     * @param readlimit
                     *            of no use.</member>
        <member name="M:biz.ritter.javapi.util.zip.InflaterInputStream.reset">
                     * Reset the position of the stream to the last marked position. This
                     * implementation overrides the supertype implementation and always throws
                     * an {@link IOException IOException} when called.
                     *
                     * @throws IOException
                     *             if the method is called</member>
        <member name="M:biz.ritter.javapi.util.zip.InflaterInputStream.markSupported">
                     * Returns whether the receiver implements {@code mark} semantics. This type
                     * does not support {@code mark()}, so always responds {@code false}.
                     *
                     * @return false, always</member>
        <member name="T:biz.ritter.javapi.util.zip.DeflaterOutputStream">
                 * This class provides an implementation of {@code FilterOutputStream} that
                 * compresses data using the <i>DEFLATE</i> algorithm. Basically it wraps the
                 * {@code Deflater} class and takes care of the buffering.
                 *
                 * @see Deflater</member>
        <member name="F:biz.ritter.javapi.util.zip.DeflaterOutputStream.buf">
                     * The buffer for the data to be written to.</member>
        <member name="F:biz.ritter.javapi.util.zip.DeflaterOutputStream.def">
                     * The deflater used.</member>
        <member name="M:biz.ritter.javapi.util.zip.DeflaterOutputStream.#ctor(biz.ritter.javapi.io.OutputStream,biz.ritter.javapi.util.zip.Deflater)">
                     * This constructor lets you pass the {@code Deflater} specifying the
                     * compression algorithm.
                     *
                     * @param os
                     *            is the {@code OutputStream} where to write the compressed data
                     *            to.
                     * @param def
                     *            is the specific {@code Deflater} that is used to compress
                     *            data.</member>
        <member name="M:biz.ritter.javapi.util.zip.DeflaterOutputStream.#ctor(biz.ritter.javapi.io.OutputStream)">
                     * This is the most basic constructor. You only need to pass the {@code
                     * OutputStream} to which the compressed data shall be written to. The
                     * default settings for the {@code Deflater} and internal buffer are used.
                     * In particular the {@code Deflater} produces a ZLIB header in the output
                     * stream.
                     *
                     * @param os
                     *            is the OutputStream where to write the compressed data to.</member>
        <member name="M:biz.ritter.javapi.util.zip.DeflaterOutputStream.#ctor(biz.ritter.javapi.io.OutputStream,biz.ritter.javapi.util.zip.Deflater,System.Int32)">
                     * This constructor lets you specify both the compression algorithm as well
                     * as the internal buffer size to be used.
                     *
                     * @param os
                     *            is the {@code OutputStream} where to write the compressed data
                     *            to.
                     * @param def
                     *            is the specific {@code Deflater} that will be used to compress
                     *            data.
                     * @param bsize
                     *            is the size to be used for the internal buffer.</member>
        <member name="M:biz.ritter.javapi.util.zip.DeflaterOutputStream.deflate">
                     * Compress the data in the input buffer and write it to the underlying
                     * stream.
                     *
                     * @throws IOException
                     *             If an error occurs during deflation.</member>
        <member name="M:biz.ritter.javapi.util.zip.DeflaterOutputStream.close">
                     * Writes any unwritten compressed data to the underlying stream, the closes
                     * all underlying streams. This stream can no longer be used after close()
                     * has been called.
                     *
                     * @throws IOException
                     *             If an error occurs while closing the data compression
                     *             process.</member>
        <member name="M:biz.ritter.javapi.util.zip.DeflaterOutputStream.finish">
                     * Writes any unwritten data to the underlying stream. Does not close the
                     * stream.
                     *
                     * @throws IOException
                     *             If an error occurs.</member>
        <member name="M:biz.ritter.javapi.util.zip.DeflaterOutputStream.write(System.Byte[],System.Int32,System.Int32)">
                     * Compresses {@code nbytes} of data from {@code buf} starting at
                     * {@code off} and writes it to the underlying stream.
                     *
                     * @param buffer
                     *            the buffer of data to compress.
                     * @param off
                     *            offset in buffer to extract data from.
                     * @param nbytes
                     *            the number of bytes of data to read from the buffer.
                     * @throws IOException
                     *             If an error occurs during writing.</member>
        <member name="M:biz.ritter.javapi.util.Properties.setProperty(System.String,System.String)">
            <summary>
            Set the property value for name
            </summary>
            <param name="name">Name of property</param>
            <param name="value">Value of property called name</param>
            <returns>same as Hashtable.put(key,value)</returns>
            <see cref="!:biz.ritter.javapi.util.Hashtable.put(String,String)" />
        </member>
        <member name="M:biz.ritter.javapi.util.Properties.#ctor(System.Collections.IDictionary)">
            <summary>
            Helpermethod for easier .net implementation
            </summary>
            <param name="defaultJ">
            </param>
        </member>
        <member name="M:biz.ritter.javapi.util.IAC_PropertyNameEnumeration.nextElement">
                     * Returns the next element in this {@code Enumeration}.
                     *
                     * @return the next element..
                     * @throws NoSuchElementException
                     *             if there are no more elements.
                     * @see #hasMoreElements</member>
        <member name="T:biz.ritter.javapi.util.zip.InflaterOutputStream">
                 * An ouput stream filter to decompress data compressed in the format of
                 * Deflater.</member>
        <member name="F:biz.ritter.javapi.util.zip.InflaterOutputStream.inf">
                     * The inflater used by InflaterOutputStream to decompress data.</member>
        <member name="F:biz.ritter.javapi.util.zip.InflaterOutputStream.buf">
                     * The internal output buffer.</member>
        <member name="M:biz.ritter.javapi.util.zip.InflaterOutputStream.#ctor(biz.ritter.javapi.io.OutputStream)">
                     * Constructs an InflaterOutputStream with the default Inflater and internal
                     * output buffer size.
                     *
                     * @param out
                     *            the output stream that InflaterOutputStream will write
                     *            compressed data into.</member>
        <member name="M:biz.ritter.javapi.util.zip.InflaterOutputStream.#ctor(biz.ritter.javapi.io.OutputStream,biz.ritter.javapi.util.zip.Inflater)">
                     * Constructs an InflaterOutputStream with the specifed Inflater and the
                     * default internal output buffer size.
                     *
                     * @param out
                     *            the output stream that InflaterOutputStream will write
                     *            compressed data into.
                     * @param infl
                     *            the Inflater used by the InflaterOutputStream to decompress
                     *            data.</member>
        <member name="M:biz.ritter.javapi.util.zip.InflaterOutputStream.#ctor(biz.ritter.javapi.io.OutputStream,biz.ritter.javapi.util.zip.Inflater,System.Int32)">
                     * Constructs an InflaterOutputStream with the specifed Inflater and
                     * internal output buffer size.
                     *
                     * @param out
                     *            the output stream that InflaterOutputStream will write
                     *            compressed data into.
                     * @param infl
                     *            the Inflater used by the InflaterOutputStream to decompress
                     *            data.
                     * @param bufLen the size of the internal output buffer.</member>
        <member name="M:biz.ritter.javapi.util.zip.InflaterOutputStream.close">
                     * Writes remaining data into the output stream and closes the underling
                     * output stream data.</member>
        <member name="M:biz.ritter.javapi.util.zip.InflaterOutputStream.flush">
                     * Flushes the output stream.</member>
        <member name="M:biz.ritter.javapi.util.zip.InflaterOutputStream.finish">
                     * Finishes writing current uncompressed data into the InflaterOutputStream
                     * but not closes it.
                     *
                     * @throws IOException
                     *             if the stream has been closed or some I/O error occurs.</member>
        <member name="M:biz.ritter.javapi.util.zip.InflaterOutputStream.write(System.Int32)">
                     * Writes a bit to the uncompressing output stream.
                     *
                     * @param b
                     *            the bit to write to the uncompressing output stream.
                     * @throws IOException
                     *             if the stream has been closed or some I/O error occurs.
                     * @throws ZipException
                     *             if a zip exception occurs.</member>
        <member name="M:biz.ritter.javapi.util.zip.InflaterOutputStream.write(System.Byte[],System.Int32,System.Int32)">
                     * Writes a bit to the uncompressing output stream.
                     *
                     * @param b
                     *            the byte array to write to the uncompressing output stream.
                     * @param off
                     *            the offset in the byte array where the data is first to be
                     *            uncompressed.
                     * @param len
                     *            the number of the bytes to be uncompressed.
                     * @throws IOException
                     *             if the stream has been closed or some I/O error occurs.
                     * @throws ZipException
                     *             if a zip exception occurs.
                     * @throws NullPointerException
                     *             if the byte array is null.
                     * @throws IndexOutOfBoundsException
                     *             if the off less than zero or len less than zero or off + len
                     *             is greater than the byte array length.</member>
        <member name="T:biz.ritter.javapi.util.zip.ZipEntry">
                 * An instance of {@code ZipEntry} represents an entry within a <i>ZIP-archive</i>.
                 * An entry has attributes such as name (= path) or the size of its data. While
                 * an entry identifies data stored in an archive, it does not hold the data
                 * itself. For example when reading a <i>ZIP-file</i> you will first retrieve
                 * all its entries in a collection and then read the data for a specific entry
                 * through an input stream.
                 *
                 * @see ZipFile
                 * @see ZipOutputStream</member>
        <member name="F:biz.ritter.javapi.util.zip.ZipEntry.DEFLATED">
                     * Zip entry state: Deflated.</member>
        <member name="F:biz.ritter.javapi.util.zip.ZipEntry.STORED">
                     * Zip entry state: Stored.</member>
        <member name="M:biz.ritter.javapi.util.zip.ZipEntry.#ctor(System.String)">
                     * Constructs a new {@code ZipEntry} with the specified name.
                     *
                     * @param name
                     *            the name of the ZIP entry.
                     * @throws IllegalArgumentException
                     *             if the name length is outside the range (&gt; 0xFFFF).</member>
        <member name="M:biz.ritter.javapi.util.zip.ZipEntry.getComment">
                     * Gets the comment for this {@code ZipEntry}.
                     *
                     * @return the comment for this {@code ZipEntry}, or {@code null} if there
                     *         is no comment. If we're reading an archive with
                     *         {@code ZipInputStream} the comment is not available.</member>
        <member name="M:biz.ritter.javapi.util.zip.ZipEntry.getCompressedSize">
                     * Gets the compressed size of this {@code ZipEntry}.
                     *
                     * @return the compressed size, or -1 if the compressed size has not been
                     *         set.</member>
        <member name="M:biz.ritter.javapi.util.zip.ZipEntry.getCrc">
                     * Gets the checksum for this {@code ZipEntry}.
                     *
                     * @return the checksum, or -1 if the checksum has not been set.</member>
        <member name="M:biz.ritter.javapi.util.zip.ZipEntry.getExtra">
                     * Gets the extra information for this {@code ZipEntry}.
                     *
                     * @return a byte array containing the extra information, or {@code null} if
                     *         there is none.</member>
        <member name="M:biz.ritter.javapi.util.zip.ZipEntry.getMethod">
                     * Gets the compression method for this {@code ZipEntry}.
                     *
                     * @return the compression method, either {@code DEFLATED}, {@code STORED}
                     *         or -1 if the compression method has not been set.</member>
        <member name="M:biz.ritter.javapi.util.zip.ZipEntry.getName">
                     * Gets the name of this {@code ZipEntry}.
                     *
                     * @return the entry name.</member>
        <member name="M:biz.ritter.javapi.util.zip.ZipEntry.getSize">
                     * Gets the uncompressed size of this {@code ZipEntry}.
                     *
                     * @return the uncompressed size, or {@code -1} if the size has not been
                     *         set.</member>
        <member name="M:biz.ritter.javapi.util.zip.ZipEntry.getTime">
                     * Gets the last modification time of this {@code ZipEntry}.
                     *
                     * @return the last modification time as the number of milliseconds since
                     *         Jan. 1, 1970.</member>
        <member name="M:biz.ritter.javapi.util.zip.ZipEntry.isDirectory">
                     * Determine whether or not this {@code ZipEntry} is a directory.
                     *
                     * @return {@code true} when this {@code ZipEntry} is a directory, {@code
                     *         false} otherwise.</member>
        <member name="M:biz.ritter.javapi.util.zip.ZipEntry.setComment(System.String)">
                     * Sets the comment for this {@code ZipEntry}.
                     *
                     * @param string
                     *            the comment for this entry.</member>
        <member name="M:biz.ritter.javapi.util.zip.ZipEntry.setCompressedSize(System.Int64)">
                     * Sets the compressed size for this {@code ZipEntry}.
                     *
                     * @param value
                     *            the compressed size (in bytes).</member>
        <member name="M:biz.ritter.javapi.util.zip.ZipEntry.setCrc(System.Int64)">
                     * Sets the checksum for this {@code ZipEntry}.
                     *
                     * @param value
                     *            the checksum for this entry.
                     * @throws IllegalArgumentException
                     *             if {@code value} is &lt; 0 or &gt; 0xFFFFFFFFL.</member>
        <member name="M:biz.ritter.javapi.util.zip.ZipEntry.setExtra(System.Byte[])">
                     * Sets the extra information for this {@code ZipEntry}.
                     *
                     * @param data
                     *            a byte array containing the extra information.
                     * @throws IllegalArgumentException
                     *             when the length of data is greater than 0xFFFF bytes.</member>
        <member name="M:biz.ritter.javapi.util.zip.ZipEntry.setMethod(System.Int32)">
                     * Sets the compression method for this {@code ZipEntry}.
                     *
                     * @param value
                     *            the compression method, either {@code DEFLATED} or {@code
                     *            STORED}.
                     * @throws IllegalArgumentException
                     *             when value is not {@code DEFLATED} or {@code STORED}.</member>
        <member name="M:biz.ritter.javapi.util.zip.ZipEntry.setSize(System.Int64)">
                     * Sets the uncompressed size of this {@code ZipEntry}.
                     *
                     * @param value
                     *            the uncompressed size for this entry.
                     * @throws IllegalArgumentException
                     *             if {@code value} &lt; 0 or {@code value} &gt; 0xFFFFFFFFL.</member>
        <member name="M:biz.ritter.javapi.util.zip.ZipEntry.setTime(System.Int64)">
                     * Sets the modification time of this {@code ZipEntry}.
                     *
                     * @param value
                     *            the modification time as the number of milliseconds since Jan.
                     *            1, 1970.</member>
        <member name="M:biz.ritter.javapi.util.zip.ZipEntry.ToString">
                     * Returns the string representation of this {@code ZipEntry}.
                     *
                     * @return the string representation of this {@code ZipEntry}.</member>
        <member name="M:biz.ritter.javapi.util.zip.ZipEntry.#ctor(biz.ritter.javapi.util.zip.ZipEntry)">
                     * Constructs a new {@code ZipEntry} using the values obtained from {@code
                     * ze}.
                     *
                     * @param ze
                     *            the {@code ZipEntry} from which to obtain values.</member>
        <member name="M:biz.ritter.javapi.util.zip.ZipEntry.clone">
                     * Returns a shallow copy of this entry.
                     *
                     * @return a copy of this entry.</member>
        <member name="M:biz.ritter.javapi.util.zip.ZipEntry.GetHashCode">
                     * Returns the hash code for this {@code ZipEntry}.
                     *
                     * @return the hash code of the entry.</member>
        <member name="T:biz.ritter.javapi.util.zip.ZipError">
                 * This error is thrown when an unrecoverable ZIP error has occurred.</member>
        <member name="M:biz.ritter.javapi.util.zip.ZipError.#ctor(System.String)">
                     * the Constructor
                     *
                     * @param s
                     *            the message</member>
        <member name="T:biz.ritter.javapi.util.zip.ZipException">
                 * This runtime exception is thrown by {@code ZipFile} and {@code
                 * ZipInputStream} when the file or stream is not a valid ZIP file.
                 *
                 * @see ZipFile
                 * @see ZipInputStream</member>
        <member name="M:biz.ritter.javapi.util.zip.ZipException.#ctor">
                     * Constructs a new {@code ZipException} instance.</member>
        <member name="M:biz.ritter.javapi.util.zip.ZipException.#ctor(System.String)">
                     * Constructs a new {@code ZipException} instance with the specified
                     * message.
                     *
                     * @param detailMessage
                     *            the detail message for the exception.</member>
        <member name="T:biz.ritter.javapi.util.Arrays`1">
                 * {@code Arrays} contains static methods which operate on arrays.
                 *
                 * @since 1.2</member>
        <member name="M:biz.ritter.javapi.util.Arrays`1.fill(System.Byte[],System.Byte)">
                     * Fills the specified array with the specified element.
                     * @param array
                     *            the {@code byte} array to fill.
                     * @param value
                     *            the {@code byte} element.</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.util.Arrays`1.fill(System.Byte[],System.Int32,System.Int32,System.Byte)-->
        <member name="M:biz.ritter.javapi.util.Arrays`1.fill(System.Int16[],System.Int16)">
                     * Fills the specified array with the specified element.
                     *
                     * @param array
                     *            the {@code short} array to fill.
                     * @param value
                     *            the {@code short} element.</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.util.Arrays`1.fill(System.Int16[],System.Int32,System.Int32,System.Int16)-->
        <member name="M:biz.ritter.javapi.util.Arrays`1.fill(System.Char[],System.Char)">
                     * Fills the specified array with the specified element.
                     *
                     * @param array
                     *            the {@code char} array to fill.
                     * @param value
                     *            the {@code char} element.</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.util.Arrays`1.fill(System.Char[],System.Int32,System.Int32,System.Char)-->
        <member name="M:biz.ritter.javapi.util.Arrays`1.fill(System.Int32[],System.Int32)">
                     * Fills the specified array with the specified element.
                     *
                     * @param array
                     *            the {@code int} array to fill.
                     * @param value
                     *            the {@code int} element.</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.util.Arrays`1.fill(System.Int32[],System.Int32,System.Int32,System.Int32)-->
        <member name="M:biz.ritter.javapi.util.Arrays`1.fill(System.Int64[],System.Int64)">
                     * Fills the specified array with the specified element.
                     *
                     * @param array
                     *            the {@code long} array to fill.
                     * @param value
                     *            the {@code long} element.</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.util.Arrays`1.fill(System.Int64[],System.Int32,System.Int32,System.Int64)-->
        <member name="M:biz.ritter.javapi.util.Arrays`1.fill(System.Single[],System.Single)">
                     * Fills the specified array with the specified element.
                     *
                     * @param array
                     *            the {@code float} array to fill.
                     * @param value
                     *            the {@code float} element.</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.util.Arrays`1.fill(System.Single[],System.Int32,System.Int32,System.Single)-->
        <member name="M:biz.ritter.javapi.util.Arrays`1.fill(System.Double[],System.Double)">
                     * Fills the specified array with the specified element.
                     *
                     * @param array
                     *            the {@code double} array to fill.
                     * @param value
                     *            the {@code double} element.</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.util.Arrays`1.fill(System.Double[],System.Int32,System.Int32,System.Double)-->
        <member name="M:biz.ritter.javapi.util.Arrays`1.fill(System.Boolean[],System.Boolean)">
                     * Fills the specified array with the specified element.
                     *
                     * @param array
                     *            the {@code boolean} array to fill.
                     * @param value
                     *            the {@code boolean} element.</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.util.Arrays`1.fill(System.Boolean[],System.Int32,System.Int32,System.Boolean)-->
        <member name="M:biz.ritter.javapi.util.Arrays`1.fill(System.Object[],System.Object)">
                     * Fills the specified array with the specified element.
                     *
                     * @param array
                     *            the {@code Object} array to fill.
                     * @param value
                     *            the {@code Object} element.</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.util.Arrays`1.fill(System.Object[],System.Int32,System.Int32,System.Object)-->
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.util.Arrays`1.fill(`0[],System.Int32,System.Int32,`0)-->
        <member name="M:biz.ritter.javapi.util.Arrays`1.equals(System.Byte[],System.Byte[])">
                     * Compares the two arrays.
                     *
                     * @param array1
                     *            the first {@code byte} array.
                     * @param array2
                     *            the second {@code byte} array.
                     * @return {@code true} if both arrays are {@code null} or if the arrays have the
                     *         same length and the elements at each index in the two arrays are
                     *         equal, {@code false} otherwise.</member>
        <member name="M:biz.ritter.javapi.util.Arrays`1.equals(System.Int16[],System.Int16[])">
                     * Compares the two arrays.
                     *
                     * @param array1
                     *            the first {@code short} array.
                     * @param array2
                     *            the second {@code short} array.
                     * @return {@code true} if both arrays are {@code null} or if the arrays have the
                     *         same length and the elements at each index in the two arrays are
                     *         equal, {@code false} otherwise.</member>
        <member name="M:biz.ritter.javapi.util.Arrays`1.equals(System.Char[],System.Char[])">
                     * Compares the two arrays.
                     *
                     * @param array1
                     *            the first {@code char} array.
                     * @param array2
                     *            the second {@code char} array.
                     * @return {@code true} if both arrays are {@code null} or if the arrays have the
                     *         same length and the elements at each index in the two arrays are
                     *         equal, {@code false} otherwise.</member>
        <member name="M:biz.ritter.javapi.util.Arrays`1.equals(System.Int32[],System.Int32[])">
                     * Compares the two arrays.
                     *
                     * @param array1
                     *            the first {@code int} array.
                     * @param array2
                     *            the second {@code int} array.
                     * @return {@code true} if both arrays are {@code null} or if the arrays have the
                     *         same length and the elements at each index in the two arrays are
                     *         equal, {@code false} otherwise.</member>
        <member name="M:biz.ritter.javapi.util.Arrays`1.equals(System.Int64[],System.Int64[])">
                     * Compares the two arrays.
                     *
                     * @param array1
                     *            the first {@code long} array.
                     * @param array2
                     *            the second {@code long} array.
                     * @return {@code true} if both arrays are {@code null} or if the arrays have the
                     *         same length and the elements at each index in the two arrays are
                     *         equal, {@code false} otherwise.</member>
        <member name="M:biz.ritter.javapi.util.Arrays`1.equals(System.Boolean[],System.Boolean[])">
                     * Compares the two arrays.
                     *
                     * @param array1
                     *            the first {@code boolean} array.
                     * @param array2
                     *            the second {@code boolean} array.
                     * @return {@code true} if both arrays are {@code null} or if the arrays have the
                     *         same length and the elements at each index in the two arrays are
                     *         equal, {@code false} otherwise.</member>
        <member name="M:biz.ritter.javapi.util.Arrays`1.equals(System.Object[],System.Object[])">
                     * Compares the two arrays.
                     *
                     * @param array1
                     *            the first {@code Object} array.
                     * @param array2
                     *            the second {@code Object} array.
                     * @return {@code true} if both arrays are {@code null} or if the arrays have the
                     *         same length and the elements at each index in the two arrays are
                     *         equal according to {@code equals()}, {@code false} otherwise.</member>
        <member name="M:biz.ritter.javapi.util.Arrays`1.binarySearch(System.Int32[],System.Int32,System.Int32,System.Int32)">
                     * Performs a binary search for the specified element in a part of the
                     * specified sorted array.
                     *
                     * @param array
                     *            the sorted int array to search
                     * @param startIndex
                     *            the inclusive start index
                     * @param endIndex
                     *            the exclusive end index
                     * @param value
                     *            the int element to find
                     * @return the non-negative index of the element, or a negative index which
                     *         is the -index - 1 where the element would be inserted
                     * @throws IllegalArgumentException -
                     *             if startIndex is bigger than endIndex
                     * @throws ArrayIndexOutOfBoundsException -
                     *             if startIndex is smaller than zero or or endIndex is bigger
                     *             than length of array
                     * @since 1.6</member>
        <member name="M:biz.ritter.javapi.util.Arrays`1.binarySearch(System.Int32[],System.Int32)">
                     * Performs a binary search for the specified element in the specified
                     * sorted array.
                     *
                     * @param array
                     *            the sorted int array to search
                     * @param value
                     *            the int element to find
                     * @return the non-negative index of the element, or a negative index which
                     *         is the -index - 1 where the element would be inserted</member>
        <member name="M:biz.ritter.javapi.util.Arrays`1.checkIndexForBinarySearch(System.Int32,System.Int32,System.Int32)">
                     * Fills the array with the given value.
                     *
                     * @param length
                     *            length of the array
                     * @param start
                     *            start index
                     * @param end
                     *            end index</member>
        <member name="M:biz.ritter.javapi.util.Arrays`1.asList``1(``0[])">
                     * Returns a {@code List} of the objects in the specified array. The size of the
                     * {@code List} cannot be modified, i.e. adding and removing are unsupported, but
                     * the elements can be set. Setting an element modifies the underlying
                     * array.
                     *
                     * @param array
                     *            the array.
                     * @return a {@code List} of the elements of the specified array.</member>
        <member name="M:biz.ritter.javapi.util.Arrays`1.sort``1(``0[],System.Int32,System.Int32,biz.ritter.javapi.util.Comparator{``0})">
                     * Sorts the specified range in the array using the specified {@code Comparator}.
                     * All elements must be comparable to each other without a
                     * {@code ClassCastException} being thrown.
                     *
                     * @param array
                     *            the {@code Object} array to be sorted.
                     * @param start
                     *            the start index to sort.
                     * @param end
                     *            the last + 1 index to sort.
                     * @param comparator
                     *            the {@code Comparator}.
                     * @throws ClassCastException
                     *                if elements in the array cannot be compared to each other
                     *                using the {@code Comparator}.
                     * @throws IllegalArgumentException
                     *                if {@code start &gt; end}.
                     * @throws ArrayIndexOutOfBoundsException
                     *                if {@code start &lt; 0} or {@code end &gt; array.length}.</member>
        <member name="M:biz.ritter.javapi.util.Arrays`1.sort``1(``0[],biz.ritter.javapi.util.Comparator{``0})">
                     * Sorts the specified array using the specified {@code Comparator}. All elements
                     * must be comparable to each other without a {@code ClassCastException} being thrown.
                     *
                     * @param array
                     *            the {@code Object} array to be sorted.
                     * @param comparator
                     *            the {@code Comparator}.
                     * @throws ClassCastException
                     *                if elements in the array cannot be compared to each other
                     *                using the {@code Comparator}.</member>
        <member name="M:biz.ritter.javapi.util.Arrays`1.sort(System.Object[],System.Int32,System.Int32)">
                     * Sorts the specified range in the array in ascending natural order. All
                     * elements must implement the {@code Comparable} interface and must be
                     * comparable to each other without a {@code ClassCastException} being
                     * thrown.
                     *
                     * @param array
                     *            the {@code Object} array to be sorted.
                     * @param start
                     *            the start index to sort.
                     * @param end
                     *            the last + 1 index to sort.
                     * @throws ClassCastException
                     *                if an element in the array does not implement {@code Comparable}
                     *                or some elements cannot be compared to each other.
                     * @throws IllegalArgumentException
                     *                if {@code start &gt; end}.
                     * @throws ArrayIndexOutOfBoundsException
                     *                if {@code start &lt; 0} or {@code end &gt; array.length}.</member>
        <member name="M:biz.ritter.javapi.util.Arrays`1.mergeSort(System.Object[],System.Object[],System.Int32,System.Int32)">
                     * Performs a sort on the section of the array between the given indices
                     * using a mergesort with exponential search algorithm (in which the merge
                     * is performed by exponential search). n*log(n) performance is guaranteed
                     * and in the average case it will be faster then any mergesort in which the
                     * merge is performed by linear search.
                     *
                     * @param in -
                     *            the array for sorting.
                     * @param out -
                     *            the result, sorted array.
                     * @param start
                     *            the start index
                     * @param end
                     *            the end index + 1</member>
        <member name="M:biz.ritter.javapi.util.Arrays`1.mergeSort(System.Object[],System.Object[],System.Int32,System.Int32,biz.ritter.javapi.util.Comparator{System.Object})">
                     * Performs a sort on the section of the array between the given indices
                     * using a mergesort with exponential search algorithm (in which the merge
                     * is performed by exponential search). n*log(n) performance is guaranteed
                     * and in the average case it will be faster then any mergesort in which the
                     * merge is performed by linear search.
                     *
                     * @param in -
                     *            the array for sorting.
                     * @param out -
                     *            the result, sorted array.
                     * @param start
                     *            the start index
                     * @param end
                     *            the end index + 1
                     * @param c -
                     *            the comparator to determine the order of the array.</member>
        <member name="M:biz.ritter.javapi.util.Arrays`1.stableStringSort(System.String[],System.Int32,System.Int32)">
                     * Performs a sort on the given String array. Elements will be re-ordered into
                     * ascending order.
                     *
                     * @param arr -
                     *            the array to sort
                     * @param start -
                     *            the start index
                     * @param end -
                     *            the end index + 1</member>
        <member name="M:biz.ritter.javapi.util.Arrays`1.stableStringSort(System.String[],System.String[],System.String[],System.Int32,System.Int32,System.Int32)">
                     * Performs a sort on the given String array. Elements will be re-ordered into
                     * ascending order. Uses a stable ternary quick sort algorithm.
                     *
                     * @param arr -
                     *            the array to sort
                     * @param src -
                     *            auxiliary array
                     * @param dst -
                     *            auxiliary array
                     * @param start -
                     *            the start index
                     * @param end -
                     *            the end index + 1
                     * @param chId -
                     *            index of char for current sorting</member>
        <member name="M:biz.ritter.javapi.util.Arrays`1.copySwap(System.Object[],System.Int32,System.Object[],System.Int32,System.Int32)">
                     * Copies object from one array to another array with reverse of objects
                     * order. Source and destination arrays may be the same.
                     *
                     * @param src -
                     *            the source array.
                     * @param from -
                     *            starting position in the source array.
                     * @param dst -
                     *            the destination array.
                     * @param to -
                     *            starting position in the destination array.
                     * @param len -
                     *            the number of array elements to be copied.</member>
        <member name="M:biz.ritter.javapi.util.Arrays`1.swap(System.Int32,System.Int32,System.Object[])">
                     * Swaps the elements at the given indices in the array.
                     *
                     * @param a -
                     *            the index of one element to be swapped.
                     * @param b -
                     *            the index of the other element to be swapped.
                     * @param arr -
                     *            the array in which to swap elements.</member>
        <member name="M:biz.ritter.javapi.util.Arrays`1.find(System.Object[],System.Object,System.Int32,System.Int32,System.Int32,biz.ritter.javapi.util.Comparator{System.Object})">
                     * Finds the place of specified range of specified sorted array, where the
                     * element should be inserted for getting sorted array. Uses exponential
                     * search algorithm.
                     *
                     * @param arr -
                     *            the array with already sorted range
                     * @param val -
                     *            object to be inserted
                     * @param l -
                     *            the start index
                     * @param r -
                     *            the end index
                     * @param bnd -
                     *            possible values 0,-1. "-1" - val is located at index more then
                     *            elements equals to val. "0" - val is located at index less
                     *            then elements equals to val.
                     * @param c -
                     *            the comparator used to compare Objects</member>
        <member name="M:biz.ritter.javapi.util.Arrays`1.find(System.Object[],biz.ritter.javapi.lang.Comparable{System.Object},System.Int32,System.Int32,System.Int32)">
                     * Finds the place in the given range of specified sorted array, where the
                     * element should be inserted for getting sorted array. Uses exponential
                     * search algorithm.
                     *
                     * @param arr -
                     *            the array with already sorted range
                     *
                     * @param val -
                     *            object to be inserted
                     *
                     * @param l -
                     *            the start index
                     *
                     * @param r -
                     *            the end index
                     *
                     * @param bnd -
                     *            possible values 0,-1. "-1" - val is located at index more then
                     *            elements equals to val. "0" - val is located at index less
                     *            then elements equals to val.
                     *</member>
        <member name="M:biz.ritter.javapi.util.Arrays`1.copy(System.Int32[])">
            <summary>
            Copy an int[] values to a new int[].
            </summary>
            <param name="source">
            </param>
            <returns>
            </returns>
            <author>Bastie</author>
        </member>
        <member name="M:biz.ritter.javapi.util.Arrays`1.copy(System.String[])">
            <summary>
            Copy an String[] values to a new String[].
            </summary>
            <param name="source">
            </param>
            <returns>
            </returns>
            <author>Bastie</author>
        </member>
        <member name="M:biz.ritter.javapi.util.Arrays`1.getIndexArray(`0[0:,0:],System.Int32)">
            <summary>
            Creates an 1-dim-array. This includes all values / references of the indexed dim of [,] source.
            Implements the Java equivalent...
            <code>char [] zeroDim = (new char [][] {{'0','1','2','3','4','5'},{'A','B','C','D','E','F'}})[index];</code></summary>
            <param name="source">
            </param>
            <param name="index">
            </param>
            <returns>
            </returns>
        </member>
        <member name="T:biz.ritter.javapi.nio.ReadOnlyCharArrayBuffer">
                 * CharArrayBuffer, ReadWriteCharArrayBuffer and ReadOnlyCharArrayBuffer compose
                 * the implementation of array based char buffers.
                 * <p>
                 * ReadOnlyCharArrayBuffer extends CharArrayBuffer with all the write methods
                 * throwing read only exception.
                 * </p>
                 * <p>
                 * This class is marked final for runtime performance.
                 * </p>
                 *</member>
        <member name="T:biz.ritter.javapi.util.LinkedHashMap`2">
            <summary>
            LinkedHashMap implementation
            </summary>
            <typeparam name="TKey">
            </typeparam>
            <typeparam name="TValue">
            </typeparam>
        </member>
        <member name="M:biz.ritter.javapi.util.LinkedHashMap`2.#ctor">
            <summary>
            Create a new LinkedHashMap
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.util.LinkedHashMap`2.#ctor(System.Int32,System.Single)">
            <summary>
            Create a new LinkedHashMap.
            </summary>
            <param name="initialCapacity">
            </param>
            <param name="ignoredLoadFactor">ignored</param>
        </member>
        <member name="T:biz.ritter.javapi.util.zip.ZipFile">
                 * This class provides random read access to a <i>ZIP-archive</i> file.
                 * <p />
                 * While {@code ZipInputStream} provides stream based read access to a
                 * <i>ZIP-archive</i>, this class implements more efficient (file based) access
                 * and makes use of the <i>central directory</i> within a <i>ZIP-archive</i>.
                 * <p />
                 * Use {@code ZipOutputStream} if you want to create an archive.
                 * <p />
                 * A temporary ZIP file can be marked for automatic deletion upon closing it.
                 *
                 * @see ZipEntry
                 * @see ZipOutputStream</member>
        <member name="F:biz.ritter.javapi.util.zip.ZipFile.LOCSIG">
            <summary>
            Constant for ZIP file handling.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.util.zip.ZipFile.LOCHDR">
            <summary>
            Constant for ZIP file handling.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.util.zip.ZipFile.OPEN_READ">
                     * Open ZIP file for read.</member>
        <member name="F:biz.ritter.javapi.util.zip.ZipFile.OPEN_DELETE">
                     * Delete ZIP file when closed.</member>
        <member name="M:biz.ritter.javapi.util.zip.ZipFile.#ctor(biz.ritter.javapi.io.File)">
                     * Constructs a new {@code ZipFile} with the specified file.
                     *
                     * @param file
                     *            the file to read from.
                     * @throws ZipException
                     *             if a ZIP error occurs.
                     * @throws IOException
                     *             if an {@code IOException} occurs.</member>
        <member name="M:biz.ritter.javapi.util.zip.ZipFile.#ctor(biz.ritter.javapi.io.File,System.Int32)">
                     * Opens a file as <i>ZIP-archive</i>. "mode" must be {@code OPEN_READ} or
                     * {@code OPEN_DELETE} . The latter sets the "delete on exit" flag through a
                     * file.
                     *
                     * @param file
                     *            the ZIP file to read.
                     * @param mode
                     *            the mode of the file open operation.
                     * @throws IOException
                     *             if an {@code IOException} occurs.</member>
        <member name="M:biz.ritter.javapi.util.zip.ZipFile.#ctor(System.String)">
                     * Opens a ZIP archived file.
                     *
                     * @param name
                     *            the name of the ZIP file.
                     * @throws IOException
                     *             if an IOException occurs.</member>
        <member name="M:biz.ritter.javapi.util.zip.ZipFile.Finalize">
            <summary>
            Destruct instance.
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.util.zip.ZipFile.finalize">
            <summary>
            Clean up instance
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.util.zip.ZipFile.close">
                     * Closes this ZIP file. This method is idempotent.
                     *
                     * @throws IOException
                     *             if an IOException occurs.</member>
        <member name="M:biz.ritter.javapi.util.zip.ZipFile.entries">
                     * Returns an enumeration of the entries. The entries are listed in the
                     * order in which they appear in the ZIP archive.
                     *
                     * @return the enumeration of the entries.
                     * @throws IllegalStateException if this ZIP file has been closed.</member>
        <member name="M:biz.ritter.javapi.util.zip.ZipFile.getEntry(System.String)">
                     * Gets the ZIP entry with the specified name from this {@code ZipFile}.
                     *
                     * @param entryName
                     *            the name of the entry in the ZIP file.
                     * @return a {@code ZipEntry} or {@code null} if the entry name does not
                     *         exist in the ZIP file.
                     * @throws IllegalStateException if this ZIP file has been closed.</member>
        <member name="M:biz.ritter.javapi.util.zip.ZipFile.getInputStream(biz.ritter.javapi.util.zip.ZipEntry)">
                     * Returns an input stream on the data of the specified {@code ZipEntry}.
                     *
                     * @param entry
                     *            the ZipEntry.
                     * @return an input stream of the data contained in the {@code ZipEntry}.
                     * @throws IOException
                     *             if an {@code IOException} occurs.
                     * @throws IllegalStateException if this ZIP file has been closed.</member>
        <member name="M:biz.ritter.javapi.util.zip.ZipFile.getName">
                     * Gets the file name of this {@code ZipFile}.
                     *
                     * @return the file name of this {@code ZipFile}.</member>
        <member name="M:biz.ritter.javapi.util.zip.ZipFile.size">
                     * Returns the number of {@code ZipEntries} in this {@code ZipFile}.
                     *
                     * @return the number of entries in this file.
                     * @throws IllegalStateException if this ZIP file has been closed.</member>
        <member name="M:biz.ritter.javapi.util.zip.ZipFile.readCentralDir">
                     * Find the central directory and read the contents.
                     *
                     * <p>The central directory can be followed by a variable-length comment
                     * field, so we have to scan through it backwards.  The comment is at
                     * most 64K, plus we have 18 bytes for the end-of-central-dir stuff
                     * itself, plus apparently sometimes people throw random junk on the end
                     * just for the fun of it.</p>
                     *
                     * <p>This is all a little wobbly.  If the wrong value ends up in the EOCD
                     * area, we're hosed. This appears to be the way that everybody handles
                     * it though, so we're in good company if this fails.</p></member>
        <member name="T:biz.ritter.javapi.util.zip.RAFStream">
                    * Wrap a stream around a RandomAccessFile.  The RandomAccessFile is shared
                    * among all streams returned by getInputStream(), so we have to synchronize
                    * access to it.  (We can optimize this by adding buffering here to reduce
                    * collisions.)
                    *
                    * <p>We could support mark/reset, but we don't currently need them.</p></member>
        <!--FIXME: Invalid documentation markup was found for member T:biz.ritter.javapi.util.zip.ZipInputStream-->
        <member name="M:biz.ritter.javapi.util.zip.ZipInputStream.#ctor(biz.ritter.javapi.io.InputStream)">
                     * Constructs a new {@code ZipInputStream} from the specified input stream.
                     *
                     * @param stream
                     *            the input stream to representing a ZIP archive.</member>
        <member name="M:biz.ritter.javapi.util.zip.ZipInputStream.close">
                     * Closes this {@code ZipInputStream}.
                     *
                     * @throws IOException
                     *             if an {@code IOException} occurs.</member>
        <member name="M:biz.ritter.javapi.util.zip.ZipInputStream.closeEntry">
                     * Closes the current ZIP entry and positions to read the next entry.
                     *
                     * @throws IOException
                     *             if an {@code IOException} occurs.</member>
        <member name="M:biz.ritter.javapi.util.zip.ZipInputStream.getNextEntry">
                     * Reads the next entry from this {@code ZipInputStream} or {@code null} if
                     * no more entries are present.
                     *
                     * @return the next {@code ZipEntry} contained in the input stream.
                     * @throws IOException
                     *             if an {@code IOException} occurs.
                     * @see ZipEntry</member>
        <member name="M:biz.ritter.javapi.util.zip.ZipInputStream.read(System.Byte[],System.Int32,System.Int32)">
                     * Reads up to the specified number of uncompressed bytes into the buffer
                     * starting at the offset.
                     *
                     * @param buffer
                     *            a byte array
                     * @param start
                     *            the starting offset into the buffer
                     * @param length
                     *            the number of bytes to read
                     * @return the number of bytes read</member>
        <member name="M:biz.ritter.javapi.util.zip.ZipInputStream.skip(System.Int64)">
                     * Skips up to the specified number of bytes in the current ZIP entry.
                     *
                     * @param value
                     *            the number of bytes to skip.
                     * @return the number of bytes skipped.
                     * @throws IOException
                     *             if an {@code IOException} occurs.</member>
        <member name="M:biz.ritter.javapi.util.zip.ZipInputStream.available">
                     * Returns 0 if the {@code EOF} has been reached, otherwise returns 1.
                     *
                     * @return 0 after {@code EOF} of current entry, 1 otherwise.
                     * @throws IOException
                     *             if an IOException occurs.</member>
        <member name="M:biz.ritter.javapi.util.zip.ZipInputStream.createZipEntry(System.String)">
                     * creates a {@link ZipEntry } with the given name.
                     *
                     * @param name
                     *            the name of the entry.
                     * @return the created {@code ZipEntry}.</member>
        <!--FIXME: Invalid documentation markup was found for member T:biz.ritter.javapi.util.zip.ZipOutputStream-->
        <member name="F:biz.ritter.javapi.util.zip.ZipOutputStream.DEFLATED">
                     * Indicates deflated entries.</member>
        <member name="F:biz.ritter.javapi.util.zip.ZipOutputStream.STORED">
                     * Indicates uncompressed entries.</member>
        <member name="M:biz.ritter.javapi.util.zip.ZipOutputStream.#ctor(biz.ritter.javapi.io.OutputStream)">
                     * Constructs a new {@code ZipOutputStream} with the specified output
                     * stream.
                     *
                     * @param p1
                     *            the {@code OutputStream} to write the data to.</member>
        <member name="M:biz.ritter.javapi.util.zip.ZipOutputStream.close">
                     * Closes the current {@code ZipEntry}, if any, and the underlying output
                     * stream. If the stream is already closed this method does nothing.
                     *
                     * @throws IOException
                     *             If an error occurs closing the stream.</member>
        <member name="M:biz.ritter.javapi.util.zip.ZipOutputStream.closeEntry">
                     * Closes the current {@code ZipEntry}. Any entry terminal data is written
                     * to the underlying stream.
                     *
                     * @throws IOException
                     *             If an error occurs closing the entry.</member>
        <member name="M:biz.ritter.javapi.util.zip.ZipOutputStream.finish">
                     * Indicates that all entries have been written to the stream. Any terminal
                     * information is written to the underlying stream.
                     *
                     * @throws IOException
                     *             if an error occurs while terminating the stream.</member>
        <member name="M:biz.ritter.javapi.util.zip.ZipOutputStream.putNextEntry(biz.ritter.javapi.util.zip.ZipEntry)">
                     * Writes entry information to the underlying stream. Data associated with
                     * the entry can then be written using {@code write()}. After data is
                     * written {@code closeEntry()} must be called to complete the writing of
                     * the entry to the underlying stream.
                     *
                     * @param ze
                     *            the {@code ZipEntry} to store.
                     * @throws IOException
                     *             If an error occurs storing the entry.
                     * @see #write</member>
        <member name="M:biz.ritter.javapi.util.zip.ZipOutputStream.setComment(System.String)">
                     * Sets the {@code ZipFile} comment associated with the file being written.
                     *
                     * @param comment
                     *            the comment associated with the file.</member>
        <member name="M:biz.ritter.javapi.util.zip.ZipOutputStream.setLevel(System.Int32)">
                     * Sets the compression level to be used for writing entry data. This level
                     * may be set on a per entry basis. The level must have a value between -1
                     * and 8 according to the {@code Deflater} compression level bounds.
                     *
                     * @param level
                     *            the compression level (ranging from -1 to 8).
                     * @see Deflater</member>
        <member name="M:biz.ritter.javapi.util.zip.ZipOutputStream.setMethod(System.Int32)">
                     * Sets the compression method to be used when compressing entry data.
                     * method must be one of {@code STORED} (for no compression) or {@code
                     * DEFLATED}.
                     *
                     * @param method
                     *            the compression method to use.</member>
        <member name="M:biz.ritter.javapi.util.zip.ZipOutputStream.write(System.Byte[],System.Int32,System.Int32)">
                     * Writes data for the current entry to the underlying stream.
                     *
                     * @exception IOException
                     *                If an error occurs writing to the stream</member>
        <member name="T:biz.ritter.javapi.util.MissingFormatArgumentException">
                 * A {@code MissingFormatArgumentException} will be thrown if there is no
                 * corresponding argument with the specified conversion or an argument index
                 * that refers to a missing argument.
                 *
                 * @see java.lang.RuntimeException</member>
        <member name="M:biz.ritter.javapi.util.MissingFormatArgumentException.#ctor(System.String)">
                     * Constructs a new {@code MissingFormatArgumentException} with the
                     * specified conversion that lacks the argument.
                     *
                     * @param s
                     *           the specified conversion that lacks the argument.</member>
        <member name="M:biz.ritter.javapi.util.MissingFormatArgumentException.getFormatSpecifier">
                     * Returns the conversion associated with the exception.
                     *
                     * @return the conversion associated with the exception.</member>
        <member name="M:biz.ritter.javapi.util.MissingFormatArgumentException.getMessage">
                     * Returns the message of the exception.
                     *
                     * @return the message of the exception.</member>
        <member name="T:org.apache.harmony.archive.util.Util">
                 * Helpers for the archive module.</member>
        <member name="M:org.apache.harmony.archive.util.Util.asciiEndsWithIgnoreCase(System.String,System.String)">
                     * Returns whether the given source string ends with the suffix, ignoring
                     * case and assuming that the strings are ascii encoded.
                     *
                     * @param source
                     *            the string to match.
                     * @param suffix
                     *            the suffix to test.
                     * @return {@code true} if the source does end with the given suffix, or
                     *         {@code false} if not.</member>
        <member name="M:org.apache.harmony.archive.util.Util.asciiEqualsIgnoreCase(System.Byte[],System.Byte[])">
                     * Compares the given byte arrays and returns whether they are equal,
                     * ignoring case differences and assuming they are ascii-encoded strings.
                     *
                     * @param buf1
                     *            first byte array to compare.
                     * @param buf2
                     *            second byte array to compare.
                     * @return the result of the comparison.</member>
        <member name="M:org.apache.harmony.archive.util.Util.asciiEqualsIgnoreCase(System.String,System.String)">
                     * Compares the given strings and returns whether they are equal, ignoring
                     * case differences and assuming they are ascii-encoded strings.
                     *
                     * @param s1
                     *            first string to compare.
                     * @param s2
                     *            second string to compare.
                     * @return the result of the comparison.</member>
        <member name="M:org.apache.harmony.awt.gl.color.ColorScaler.loadScalingData(biz.ritter.javapi.awt.color.ICC_Profile)">
                     * Use this method only for double of float transfer types.
                     * Extracts scaling data from the color space signature
                     * and other tags, stored in the profile
                     * @param pf - ICC profile</member>
        <member name="M:org.apache.harmony.awt.gl.color.ColorScaler.loadScalingData(biz.ritter.javapi.awt.color.ColorSpace)">
                     * Extracts scaling data from the color space
                     * @param cs - color space</member>
        <member name="M:org.apache.harmony.awt.gl.color.ColorScaler.scale(System.Single[],System.Int16[],System.Int32)">
                    * Scales one pixel and puts obtained values to the chanData
                    * @param pixelData - input pixel
                    * @param chanData - output buffer
                    * @param chanDataOffset - output buffer offset</member>
        <member name="M:org.apache.harmony.awt.gl.color.ColorScaler.unscale(System.Single[],System.Int16[],System.Int32)">
                     * Unscales one pixel and puts obtained values to the pixelData
                     * @param pixelData - output pixel
                     * @param chanData - input buffer
                     * @param chanDataOffset - input buffer offset</member>
        <member name="T:org.apache.harmony.awt.gl.color.ICC_Transform">
                 * @author Oleg V. Khaschansky
                 * This class encapsulates native ICC transform object, is responsible for its
                 * creation, destruction and passing its handle to the native CMM.</member>
        <member name="M:org.apache.harmony.awt.gl.color.ICC_Transform.getNumInputChannels">
                     * @return Returns the number of input channels.</member>
        <member name="M:org.apache.harmony.awt.gl.color.ICC_Transform.getNumOutputChannels">
                     * @return Returns the number of output channels.</member>
        <member name="M:org.apache.harmony.awt.gl.color.ICC_Transform.getDst">
                     * @return Returns the dst.</member>
        <member name="M:org.apache.harmony.awt.gl.color.ICC_Transform.getSrc">
                     * @return Returns the src.</member>
        <member name="M:org.apache.harmony.awt.gl.color.ICC_Transform.#ctor(biz.ritter.javapi.awt.color.ICC_Profile[],System.Int32[])">
                     * Constructs a multiprofile ICC transform
                     * @param profiles - list of ICC profiles
                     * @param renderIntents - only hints for CMM</member>
        <member name="M:org.apache.harmony.awt.gl.color.ICC_Transform.#ctor(biz.ritter.javapi.awt.color.ICC_Profile[])">
                     * This constructor is able to set intents by default
                     * @param profiles - list of ICC profiles</member>
        <member name="T:org.apache.harmony.awt.gl.color.LUTColorConverter">
                 * @author Igor V. Stolyarov</member>
        <member name="T:org.apache.harmony.awt.gl.image.DataBufferListener">
                 * @author Igor V. Stolyarov
                 * Created on 13.03.2006
                 *</member>
        <member name="T:org.apache.harmony.awt.gl.AwtImageBackdoorAccessor">
                 * This class give an opportunity to get access to private data of
                 * some java.awt.image classes
                 * Implementation of this class placed in java.awt.image package
                 * @author Igor V. Stolyarov
                 * Created on 23.11.2005</member>
        <member name="T:org.apache.harmony.awt.gl.Crossing">
                 * @author Denis M. Kishenko</member>
        <member name="F:org.apache.harmony.awt.gl.Crossing.DELTA">
                     * Allowable tolerance for bounds comparison</member>
        <member name="F:org.apache.harmony.awt.gl.Crossing.ROOT_DELTA">
                     * If roots have distance less then <code>ROOT_DELTA</code> they are double</member>
        <member name="F:org.apache.harmony.awt.gl.Crossing.CROSSING">
                     * Rectangle cross segment</member>
        <member name="F:org.apache.harmony.awt.gl.Crossing.UNKNOWN">
                     * Unknown crossing result</member>
        <member name="M:org.apache.harmony.awt.gl.Crossing.solveQuad(System.Double[],System.Double[])">
                     * Solves quadratic equation
                     * @param eqn - the coefficients of the equation
                     * @param res - the roots of the equation
                     * @return a number of roots</member>
        <member name="M:org.apache.harmony.awt.gl.Crossing.solveCubic(System.Double[],System.Double[])">
                     * Solves cubic equation
                     * @param eqn - the coefficients of the equation
                     * @param res - the roots of the equation
                     * @return a number of roots</member>
        <member name="M:org.apache.harmony.awt.gl.Crossing.fixRoots(System.Double[],System.Int32)">
                     * Excludes double roots. Roots are double if they lies enough close with each other.
                     * @param res - the roots
                     * @param rc - the roots count
                     * @return new roots count</member>
        <member name="T:org.apache.harmony.awt.gl.Crossing.QuadCurve">
                     * QuadCurve class provides basic functionality to find curve crossing and calculating bounds</member>
        <member name="T:org.apache.harmony.awt.gl.Crossing.CubicCurve">
                     * CubicCurve class provides basic functionality to find curve crossing and calculating bounds</member>
        <member name="M:org.apache.harmony.awt.gl.Crossing.crossLine(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
                     * Returns how many times ray from point (x,y) cross line.</member>
        <member name="M:org.apache.harmony.awt.gl.Crossing.crossQuad(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
                     * Returns how many times ray from point (x,y) cross quard curve</member>
        <member name="M:org.apache.harmony.awt.gl.Crossing.crossCubic(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
                     * Returns how many times ray from point (x,y) cross cubic curve</member>
        <member name="M:org.apache.harmony.awt.gl.Crossing.crossPath(biz.ritter.javapi.awt.geom.PathIterator,System.Double,System.Double)">
                     * Returns how many times ray from point (x,y) cross path</member>
        <member name="M:org.apache.harmony.awt.gl.Crossing.crossShape(biz.ritter.javapi.awt.Shape,System.Double,System.Double)">
                     * Returns how many times ray from point (x,y) cross shape</member>
        <member name="M:org.apache.harmony.awt.gl.Crossing.isZero(System.Double)">
                     * Returns true if value enough small</member>
        <member name="M:org.apache.harmony.awt.gl.Crossing.sortBound(System.Double[],System.Int32)">
                     * Sort bound array</member>
        <member name="M:org.apache.harmony.awt.gl.Crossing.crossBound(System.Double[],System.Int32,System.Double,System.Double)">
                     * Returns are bounds intersect or not intersect rectangle</member>
        <member name="M:org.apache.harmony.awt.gl.Crossing.intersectLine(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
                     * Returns how many times rectangle stripe cross line or the are intersect</member>
        <member name="M:org.apache.harmony.awt.gl.Crossing.intersectQuad(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
                     * Returns how many times rectangle stripe cross quad curve or the are intersect</member>
        <member name="M:org.apache.harmony.awt.gl.Crossing.intersectCubic(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
                     * Returns how many times rectangle stripe cross cubic curve or the are intersect</member>
        <member name="M:org.apache.harmony.awt.gl.Crossing.intersectPath(biz.ritter.javapi.awt.geom.PathIterator,System.Double,System.Double,System.Double,System.Double)">
                     * Returns how many times rectangle stripe cross path or the are intersect</member>
        <member name="M:org.apache.harmony.awt.gl.Crossing.intersectShape(biz.ritter.javapi.awt.Shape,System.Double,System.Double,System.Double,System.Double)">
                     * Returns how many times rectangle stripe cross shape or the are intersect</member>
        <member name="M:org.apache.harmony.awt.gl.Crossing.isInsideNonZero(System.Int32)">
                     * Returns true if cross count correspond inside location for non zero path rule</member>
        <member name="M:org.apache.harmony.awt.gl.Crossing.isInsideEvenOdd(System.Int32)">
                     * Returns true if cross count correspond inside location for even-odd path rule</member>
        <member name="T:org.apache.harmony.awt.Utils">
            <summary>
            Helper class
            <remarks>JavApi implementation without PrivilegeAction, so direct using of java.lang.SystemJ is no bad idea...</remarks></summary>
        </member>
        <member name="M:org.apache.harmony.luni.util.BinarySearch.binarySearch(System.String,System.Char)">
                     * Search the sorted characters in the string and return an exact index or
                     * -1.
                     *
                     * @param data
                     *            the String to search
                     * @param value
                     *            the character to search for
                     * @return the matching index, or -1</member>
        <member name="M:org.apache.harmony.luni.util.BinarySearch.binarySearchRange(System.String,System.Char)">
                     * Search the sorted characters in the string and return the nearest index.
                     *
                     * @param data
                     *            the String to search
                     * @param c
                     *            the character to search for
                     * @return the nearest index</member>
        <member name="T:org.apache.harmony.luni.util.InputStreamHelper">
                 * The class contains static {@link java.io.InputStream} utilities.</member>
        <member name="M:org.apache.harmony.luni.util.InputStreamHelper.expose(biz.ritter.javapi.io.ByteArrayInputStream)">
                     * Reads all bytes from {@link java.io.ByteArrayInputStream} using its
                     * underlying buffer directly.
                     *
                     * @return an underlying buffer, if a current position is at the buffer
                     *         beginning, and an end position is at the buffer end, or a copy of
                     *         the underlying buffer part.</member>
        <member name="M:org.apache.harmony.luni.util.InputStreamHelper.expose(biz.ritter.javapi.io.InputStream)">
                     * The utility method for reading the whole input stream into a snapshot
                     * buffer. To speed up the access it works with an underlying buffer for a
                     * given {@link java.io.ByteArrayInputStream}.
                     *
                     * @param is
                     *            the stream to be read.
                     * @return the snapshot wrapping the buffer where the bytes are read to.
                     * @throws UnsupportedOperationException
                     *             if the input stream data cannot be exposed</member>
        <member name="M:org.apache.harmony.luni.util.InputStreamHelper.readFullyAndClose(biz.ritter.javapi.io.InputStream)">
                     * Reads all the bytes from the given input stream.
                     *
                     * Calls read multiple times on the given input stream until it receives an
                     * end of file marker. Returns the combined results as a byte array. Note
                     * that this method may block if the underlying stream read blocks.
                     *
                     * @param is
                     *            the input stream to be read.
                     * @return the content of the stream as a byte array.
                     * @throws IOException
                     *             if a read error occurs.</member>
        <member name="T:org.apache.harmony.luni.util.ExposedByteArrayInputStream">
                    * The extension of <code>ByteArrayInputStream</code> which exposes an
                    * underlying buffer.</member>
        <member name="M:org.apache.harmony.luni.util.ExposedByteArrayInputStream.#ctor(System.Byte[])">
                        * @see java.io.ByteArrayInputStream(byte[])</member>
        <member name="M:org.apache.harmony.luni.util.ExposedByteArrayInputStream.#ctor(System.Byte[],System.Int32,System.Int32)">
                        * @see java.io.ByteArrayInputStream(byte[], int, int)</member>
        <member name="M:org.apache.harmony.luni.util.ExposedByteArrayInputStream.expose">
                        * Reads the whole stream and returns the stream snapshot.</member>
        <member name="M:org.apache.harmony.luni.util.URLUtil.canonicalizePath(System.String)">
                     * Canonicalize the path, i.e. remove ".." and "." occurences.
                     *
                     * @param path the path to be canonicalized
                     * @return the canonicalized path</member>
        <!--FIXME: Invalid documentation markup was found for member T:org.apache.harmony.misc.HashCode-->
        <member name="F:org.apache.harmony.misc.HashCode.EMPTY_HASH_CODE">
                 * The hashCode value before any data is appended, equals to 1.
                 * @see java.util.List#hashCode()</member>
        <member name="M:org.apache.harmony.misc.HashCode.hashCode">
                 * Returns accumulated hashCode</member>
        <member name="M:org.apache.harmony.misc.HashCode.combine(System.Int32,System.Boolean)">
                 * Combines hashCode of previous elements sequence and value's hashCode.
                 * @param hashCode previous hashCode value
                 * @param value new element
                 * @return combined hashCode</member>
        <member name="M:org.apache.harmony.misc.HashCode.combine(System.Int32,System.Int64)">
                 * Combines hashCode of previous elements sequence and value's hashCode.
                 * @param hashCode previous hashCode value
                 * @param value new element
                 * @return combined hashCode</member>
        <member name="M:org.apache.harmony.misc.HashCode.combine(System.Int32,System.Single)">
                 * Combines hashCode of previous elements sequence and value's hashCode.
                 * @param hashCode previous hashCode value
                 * @param value new element
                 * @return combined hashCode</member>
        <member name="M:org.apache.harmony.misc.HashCode.combine(System.Int32,System.Double)">
                 * Combines hashCode of previous elements sequence and value's hashCode.
                 * @param hashCode previous hashCode value
                 * @param value new element
                 * @return combined hashCode</member>
        <member name="M:org.apache.harmony.misc.HashCode.combine(System.Int32,System.Object)">
                 * Combines hashCode of previous elements sequence and value's hashCode.
                 * @param hashCode previous hashCode value
                 * @param value new element
                 * @return combined hashCode</member>
        <member name="M:org.apache.harmony.misc.HashCode.combine(System.Int32,System.Int32)">
                 * Combines hashCode of previous elements sequence and value's hashCode.
                 * @param hashCode previous hashCode value
                 * @param value new element
                 * @return combined hashCode</member>
        <member name="M:org.apache.harmony.misc.HashCode.append(System.Int32)">
                 * Appends value's hashCode to the current hashCode.
                 * @param value new element
                 * @return this</member>
        <member name="M:org.apache.harmony.misc.HashCode.append(System.Int64)">
                 * Appends value's hashCode to the current hashCode.
                 * @param value new element
                 * @return this</member>
        <member name="M:org.apache.harmony.misc.HashCode.append(System.Single)">
                 * Appends value's hashCode to the current hashCode.
                 * @param value new element
                 * @return this</member>
        <member name="M:org.apache.harmony.misc.HashCode.append(System.Double)">
                 * Appends value's hashCode to the current hashCode.
                 * @param value new element
                 * @return this</member>
        <member name="M:org.apache.harmony.misc.HashCode.append(System.Boolean)">
                 * Appends value's hashCode to the current hashCode.
                 * @param value new element
                 * @return this</member>
        <member name="M:org.apache.harmony.misc.HashCode.append(System.Object)">
                 * Appends value's hashCode to the current hashCode.
                 * @param value new element
                 * @return this</member>
        <!--FIXME: Invalid documentation markup was found for member T:org.apache.harmony.security.fortress.DefaultPolicy-->
        <member name="T:org.apache.harmony.security.fortress.Engine">
                 *
                 * This class implements common functionality for all engine classes
                 * @author Boris V. Kuznetsov</member>
        <member name="F:org.apache.harmony.security.fortress.Engine.provider">
                     * Provider</member>
        <member name="F:org.apache.harmony.security.fortress.Engine.spi">
                     * SPI instance</member>
        <member name="F:org.apache.harmony.security.fortress.Engine.door">
                     * Access to package visible api in java.security</member>
        <member name="M:org.apache.harmony.security.fortress.Engine.#ctor(System.String)">
                     * Creates a Engine object
                     *
                     * @param service</member>
        <member name="M:org.apache.harmony.security.fortress.Engine.getInstance(System.String,System.Object)">
                     *
                     * Finds the appropriate service implementation and creates instance of the
                     * class that implements corresponding Service Provider Interface.
                     *
                     * @param algorithm
                     * @param service
                     * @throws NoSuchAlgorithmException</member>
        <member name="M:org.apache.harmony.security.fortress.Engine.getInstance(System.String,biz.ritter.javapi.security.Provider,System.Object)">
                     *
                     * Finds the appropriate service implementation and creates instance of the
                     * class that implements corresponding Service Provider Interface.
                     *
                     * @param algorithm
                     * @param service
                     * @param provider
                     * @throws NoSuchAlgorithmException</member>
        <member name="T:org.apache.harmony.security.fortress.PolicyUtils.ExpansionFailedException">
                     * Specific exception to signal that property expansion failed
                     * due to unknown key.</member>
        <member name="F:org.apache.harmony.security.fortress.PolicyUtils.ExpansionFailedException.serialVersionUID">
                         * @serial</member>
        <member name="M:org.apache.harmony.security.fortress.PolicyUtils.ExpansionFailedException.#ctor(System.String)">
                         * Constructor with user-friendly message parameter.</member>
        <member name="M:org.apache.harmony.security.fortress.PolicyUtils.ExpansionFailedException.#ctor(System.String,biz.ritter.javapi.lang.Throwable)">
                         * Constructor with user-friendly message and causing error.</member>
        <member name="M:org.apache.harmony.security.fortress.PolicyUtils.expand(System.String,biz.ritter.javapi.util.Properties)">
                     * Substitutes all entries like ${some.key}, found in specified string,
                     * for specified values.
                     * If some key is unknown, throws ExpansionFailedException.
                     * @param str the string to be expanded
                     * @param properties available key-value mappings
                     * @return expanded string
                     * @throws ExpansionFailedException</member>
        <member name="M:org.apache.harmony.security.fortress.PolicyUtils.matchSubset(System.Object[],System.Object[])">
                     * Checks whether the objects from <code>what</code> array are all
                     * presented in <code>where</code> array.
                     *
                     * @param what first array, may be <code>null</code>
                     * @param where  second array, may be <code>null</code>
                     * @return <code>true</code> if the first array is <code>null</code>
                     * or if each and every object (ignoring null values)
                     * from the first array has a twin in the second array; <code>false</code> otherwise</member>
        <member name="M:org.apache.harmony.security.fortress.PolicyUtils.instantiatePermission(biz.ritter.javapi.lang.Class,System.String,System.String)">
                     * Tries to find a suitable constructor and instantiate a new Permission
                     * with specified parameters.
                     *
                     * @param targetType class of expected Permission instance
                     * @param targetName name of expected Permission instance
                     * @param targetActions actions of expected Permission instance
                     * @return a new Permission instance
                     * @throws IllegalArgumentException if no suitable constructor found
                     * @throws Exception any exception thrown by Constructor.newInstance()</member>
        <member name="T:org.apache.harmony.security.fortress.PolicyUtils.SecurityPropertyAccessor">
                     * Auxiliary action for accessing specific security property.</member>
        <member name="M:org.apache.harmony.security.fortress.PolicyUtils.SecurityPropertyAccessor.#ctor(System.String)">
                         * Constructor with a property key parameter.</member>
        <member name="M:org.apache.harmony.security.fortress.PolicyUtils.SecurityPropertyAccessor.run">
                         * Returns specified security property.</member>
        <member name="T:org.apache.harmony.security.fortress.SecurityAccess">
                 *
                 * This interface provides access to package visible api in java.security
                 * @author Boris V. Kuznetsov</member>
        <member name="M:org.apache.harmony.security.fortress.SecurityAccess.renumProviders">
                     * Access to Security.renumProviders()
                     *</member>
        <member name="M:org.apache.harmony.security.fortress.SecurityAccess.getAliases(biz.ritter.javapi.security.Provider.Service)">
                     * Access to Service.getAliases()
                     * @param s
                     * @return</member>
        <member name="M:org.apache.harmony.security.fortress.SecurityAccess.getService(biz.ritter.javapi.security.Provider,System.String)">
                     * Access to Provider.getService(String type)
                     * @param p
                     * @param type
                     * @return</member>
        <member name="T:org.apache.harmony.security.fortress.Services">
                 * This class contains information about all registered providers and preferred
                 * implementations for all "serviceName.algName".
                 *</member>
        <member name="F:org.apache.harmony.security.fortress.Services.refreshNumber">
                     * Refresh number</member>
        <member name="M:org.apache.harmony.security.fortress.Services.getProviders">
                     * Returns registered providers
                     *
                     * @return</member>
        <member name="M:org.apache.harmony.security.fortress.Services.getProvidersList">
                     * Returns registered providers as List
                     *
                     * @return</member>
        <member name="M:org.apache.harmony.security.fortress.Services.getProvider(System.String)">
                     * Returns the provider with the specified name
                     *
                     * @param name
                     * @return</member>
        <member name="M:org.apache.harmony.security.fortress.Services.insertProviderAt(biz.ritter.javapi.security.Provider,System.Int32)">
                     * Inserts a provider at a specified position
                     *
                     * @param provider
                     * @param position
                     * @return</member>
        <member name="M:org.apache.harmony.security.fortress.Services.removeProvider(System.Int32)">
                     * Removes the provider
                     *
                     * @param providerNumber</member>
        <member name="M:org.apache.harmony.security.fortress.Services.initServiceInfo(biz.ritter.javapi.security.Provider)">
                     *
                     * Adds information about provider services into HashMap.
                     *
                     * @param p</member>
        <member name="M:org.apache.harmony.security.fortress.Services.updateServiceInfo">
                     *
                     * Updates services hashtable for all registered providers
                     *</member>
        <member name="M:org.apache.harmony.security.fortress.Services.isEmpty">
                     * Returns true if services contain any provider information
                     * @return</member>
        <member name="M:org.apache.harmony.security.fortress.Services.getService(System.String)">
                     *
                     * Returns service description.
                     * Call refresh() before.
                     *
                     * @param key
                     * @return</member>
        <member name="M:org.apache.harmony.security.fortress.Services.printServices">
                     * Prints Services content</member>
        <member name="M:org.apache.harmony.security.fortress.Services.setNeedRefresh">
                     * Set flag needRefresh
                     *</member>
        <member name="M:org.apache.harmony.security.fortress.Services.refresh">
                     * Refresh services info
                     *</member>
        <member name="T:org.xml.sax.ext.Attributes2">
                 * SAX2 extension to augment the per-attribute information
                 * provided though {@link Attributes}.
                 * If an implementation supports this extension, the attributes
                 * provided in {@link org.xml.sax.ContentHandler#startElement
                 * ContentHandler.startElement() } will implement this interface,
                 * and the <em>http://xml.org/sax/features/use-attributes2</em>
                 * feature flag will have the value <em>true</em>.
                 *
                 * <blockquote>
                 * <em>This module, both source code and documentation, is in the
                 * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>
                 * </blockquote>
                 *
                 * <p> XMLReader implementations are not required to support this
                 * information, and it is not part of core-only SAX2 distributions.</p>
                 *
                 * <p>Note that if an attribute was defaulted (<em>!isSpecified()</em>)
                 * it will of necessity also have been declared (<em>isDeclared()</em>)
                 * in the DTD.
                 * Similarly if an attribute's type is anything except CDATA, then it
                 * must have been declared.
                 * </p>
                 *
                 * @since SAX 2.0 (extensions 1.1 alpha)
                 * @author David Brownell
                 * @version TBS</member>
        <member name="M:org.xml.sax.ext.Attributes2.isDeclared(System.Int32)">
                     * Returns false unless the attribute was declared in the DTD.
                     * This helps distinguish two kinds of attributes that SAX reports
                     * as CDATA:  ones that were declared (and hence are usually valid),
                     * and those that were not (and which are never valid).
                     *
                     * @param index The attribute index (zero-based).
                     * @return true if the attribute was declared in the DTD,
                     *		false otherwise.
                     * @exception java.lang.ArrayIndexOutOfBoundsException When the
                     *            supplied index does not identify an attribute.</member>
        <member name="M:org.xml.sax.ext.Attributes2.isDeclared(System.String)">
                     * Returns false unless the attribute was declared in the DTD.
                     * This helps distinguish two kinds of attributes that SAX reports
                     * as CDATA:  ones that were declared (and hence are usually valid),
                     * and those that were not (and which are never valid).
                     *
                     * @param qName The XML qualified (prefixed) name.
                     * @return true if the attribute was declared in the DTD,
                     *		false otherwise.
                     * @exception java.lang.IllegalArgumentException When the
                     *            supplied name does not identify an attribute.</member>
        <!--FIXME: Invalid documentation markup was found for member M:org.xml.sax.ext.Attributes2.isDeclared(System.String,System.String)-->
        <member name="M:org.xml.sax.ext.Attributes2.isSpecified(System.Int32)">
                     * Returns true unless the attribute value was provided
                     * by DTD defaulting.
                     *
                     * @param index The attribute index (zero-based).
                     * @return true if the value was found in the XML text,
                     *		false if the value was provided by DTD defaulting.
                     * @exception java.lang.ArrayIndexOutOfBoundsException When the
                     *            supplied index does not identify an attribute.</member>
        <member name="M:org.xml.sax.ext.Attributes2.isSpecified(System.String,System.String)">
                     * Returns true unless the attribute value was provided
                     * by DTD defaulting.
                     *
                     * <p>Remember that since DTDs do not "understand" namespaces, the
                     * namespace URI associated with an attribute may not have come from
                     * the DTD.  The declaration will have applied to the attribute's
                     * <em>qName</em>.
                     * </p>
                     * @param uri The Namespace URI, or the empty string if
                     *        the name has no Namespace URI.
                     * @param localName The attribute's local name.
                     * @return true if the value was found in the XML text,
                     *		false if the value was provided by DTD defaulting.
                     * @exception java.lang.IllegalArgumentException When the
                     *            supplied names do not identify an attribute.</member>
        <member name="M:org.xml.sax.ext.Attributes2.isSpecified(System.String)">
                     * Returns true unless the attribute value was provided
                     * by DTD defaulting.
                     *
                     * @param qName The XML qualified (prefixed) name.
                     * @return true if the value was found in the XML text,
                     *		false if the value was provided by DTD defaulting.
                     * @exception java.lang.IllegalArgumentException When the
                     *            supplied name does not identify an attribute.</member>
        <member name="T:org.xml.sax.ext.Attributes2Impl">
                 * SAX2 extension helper for additional Attributes information,
                 * implementing the {@link Attributes2} interface.
                 *
                 * <blockquote>
                 * <em>This module, both source code and documentation, is in the
                 * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>
                 * </blockquote>
                 *
                 * <p>This is not part of core-only SAX2 distributions.</p>
                 *
                 * <p>The <em>specified</em> flag for each attribute will always
                 * be true, unless it has been set to false in the copy constructor
                 * or using {@link #setSpecified}.
                 * Similarly, the <em>declared</em> flag for each attribute will
                 * always be false, except for defaulted attributes (<em>specified</em>
                 * is false), non-CDATA attributes, or when it is set to true using
                 * {@link #setDeclared}.
                 * If you change an attribute's type by hand, you may need to modify
                 * its <em>declared</em> flag to match.
                 * </p>
                 *
                 * @since SAX 2.0 (extensions 1.1 alpha)
                 * @author David Brownell
                 * @version TBS</member>
        <member name="M:org.xml.sax.ext.Attributes2Impl.#ctor">
                     * Construct a new, empty Attributes2Impl object.</member>
        <member name="M:org.xml.sax.ext.Attributes2Impl.#ctor(org.xml.sax.Attributes)">
                     * Copy an existing Attributes or Attributes2 object.
                     * If the object implements Attributes2, values of the
                     * <em>specified</em> and <em>declared</em> flags for each
                     * attribute are copied.
                     * Otherwise the flag values are defaulted to assume no DTD was used,
                     * unless there is evidence to the contrary (such as attributes with
                     * type other than CDATA, which must have been <em>declared</em>).
                     *
                     * <p>This constructor is especially useful inside a
                     * {@link org.xml.sax.ContentHandler#startElement startElement} event.</p>
                     *
                     * @param atts The existing Attributes object.</member>
        <member name="M:org.xml.sax.ext.Attributes2Impl.isDeclared(System.Int32)">
                     * Returns the current value of the attribute's "declared" flag.</member>
        <member name="M:org.xml.sax.ext.Attributes2Impl.isDeclared(System.String,System.String)">
                     * Returns the current value of the attribute's "declared" flag.</member>
        <member name="M:org.xml.sax.ext.Attributes2Impl.isDeclared(System.String)">
                     * Returns the current value of the attribute's "declared" flag.</member>
        <member name="M:org.xml.sax.ext.Attributes2Impl.isSpecified(System.Int32)">
                     * Returns the current value of an attribute's "specified" flag.
                     *
                     * @param index The attribute index (zero-based).
                     * @return current flag value
                     * @exception java.lang.ArrayIndexOutOfBoundsException When the
                     *            supplied index does not identify an attribute.</member>
        <member name="M:org.xml.sax.ext.Attributes2Impl.isSpecified(System.String,System.String)">
                     * Returns the current value of an attribute's "specified" flag.
                     *
                     * @param uri The Namespace URI, or the empty string if
                     *        the name has no Namespace URI.
                     * @param localName The attribute's local name.
                     * @return current flag value
                     * @exception java.lang.IllegalArgumentException When the
                     *            supplied names do not identify an attribute.</member>
        <member name="M:org.xml.sax.ext.Attributes2Impl.isSpecified(System.String)">
                     * Returns the current value of an attribute's "specified" flag.
                     *
                     * @param qName The XML qualified (prefixed) name.
                     * @return current flag value
                     * @exception java.lang.IllegalArgumentException When the
                     *            supplied name does not identify an attribute.</member>
        <member name="M:org.xml.sax.ext.Attributes2Impl.setAttributes(org.xml.sax.Attributes)">
                     * Copy an entire Attributes object.  The "specified" flags are
                     * assigned as true, and "declared" flags as false (except when
                     * an attribute's type is not CDATA),
                     * unless the object is an Attributes2 object.
                     * In that case those flag values are all copied.
                     *
                     * @see AttributesImpl#setAttributes</member>
        <!--FIXME: Invalid documentation markup was found for member M:org.xml.sax.ext.Attributes2Impl.addAttribute(System.String,System.String,System.String,System.String,System.String)-->
        <member name="M:org.xml.sax.ext.Attributes2Impl.setDeclared(System.Int32,System.Boolean)">
                     * Assign a value to the "declared" flag of a specific attribute.
                     * This is normally needed only for attributes of type CDATA,
                     * including attributes whose type is changed to or from CDATA.
                     *
                     * @param index The index of the attribute (zero-based).
                     * @param value The desired flag value.
                     * @exception java.lang.ArrayIndexOutOfBoundsException When the
                     *            supplied index does not identify an attribute.
                     * @see #setType</member>
        <member name="M:org.xml.sax.ext.Attributes2Impl.setSpecified(System.Int32,System.Boolean)">
                     * Assign a value to the "specified" flag of a specific attribute.
                     * This is the only way this flag can be cleared, except clearing
                     * by initialization with the copy constructor.
                     *
                     * @param index The index of the attribute (zero-based).
                     * @param value The desired flag value.
                     * @exception java.lang.ArrayIndexOutOfBoundsException When the
                     *            supplied index does not identify an attribute.</member>
        <member name="T:org.xml.sax.ext.DeclHandler">
                 * SAX2 extension handler for DTD declaration events.
                 *
                 * <blockquote>
                 * <em>This module, both source code and documentation, is in the
                 * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>
                 * See <a href="http://www.saxproject.org">http://www.saxproject.org</a>
                 * for further information.
                 * </blockquote>
                 *
                 * <p>This is an optional extension handler for SAX2 to provide more
                 * complete information about DTD declarations in an XML document.
                 * XML readers are not required to recognize this handler, and it
                 * is not part of core-only SAX2 distributions.</p>
                 *
                 * <p>Note that data-related DTD declarations (unparsed entities and
                 * notations) are already reported through the {@link
                 * org.xml.sax.DTDHandler DTDHandler} interface.</p>
                 *
                 * <p>If you are using the declaration handler together with a lexical
                 * handler, all of the events will occur between the
                 * {@link org.xml.sax.ext.LexicalHandler#startDTD startDTD} and the
                 * {@link org.xml.sax.ext.LexicalHandler#endDTD endDTD} events.</p>
                 *
                 * <p>To set the DeclHandler for an XML reader, use the
                 * {@link org.xml.sax.XMLReader#setProperty setProperty} method
                 * with the property name
                 * <code>http://xml.org/sax/properties/declaration-handler</code>
                 * and an object implementing this interface (or null) as the value.
                 * If the reader does not report declaration events, it will throw a
                 * {@link org.xml.sax.SAXNotRecognizedException SAXNotRecognizedException}
                 * when you attempt to register the handler.</p>
                 *
                 * @since SAX 2.0 (extensions 1.0)
                 * @author David Megginson
                 * @version 2.0.1 (sax2r2)</member>
        <member name="M:org.xml.sax.ext.DeclHandler.elementDecl(System.String,System.String)">
                     * Report an element type declaration.
                     *
                     * <p>The content model will consist of the string "EMPTY", the
                     * string "ANY", or a parenthesised group, optionally followed
                     * by an occurrence indicator.  The model will be normalized so
                     * that all parameter entities are fully resolved and all whitespace
                     * is removed,and will include the enclosing parentheses.  Other
                     * normalization (such as removing redundant parentheses or
                     * simplifying occurrence indicators) is at the discretion of the
                     * parser.</p>
                     *
                     * @param name The element type name.
                     * @param model The content model as a normalized string.
                     * @exception SAXException The application may raise an exception.</member>
        <member name="M:org.xml.sax.ext.DeclHandler.attributeDecl(System.String,System.String,System.String,System.String,System.String)">
                     * Report an attribute type declaration.
                     *
                     * <p>Only the effective (first) declaration for an attribute will
                     * be reported.  The type will be one of the strings "CDATA",
                     * "ID", "IDREF", "IDREFS", "NMTOKEN", "NMTOKENS", "ENTITY",
                     * "ENTITIES", a parenthesized token group with
                     * the separator "|" and all whitespace removed, or the word
                     * "NOTATION" followed by a space followed by a parenthesized
                     * token group with all whitespace removed.</p>
                     *
                     * <p>The value will be the value as reported to applications,
                     * appropriately normalized and with entity and character
                     * references expanded.  </p>
                     *
                     * @param eName The name of the associated element.
                     * @param aName The name of the attribute.
                     * @param type A string representing the attribute type.
                     * @param mode A string representing the attribute defaulting mode
                     *        ("#IMPLIED", "#REQUIRED", or "#FIXED") or null if
                     *        none of these applies.
                     * @param value A string representing the attribute's default value,
                     *        or null if there is none.
                     * @exception SAXException The application may raise an exception.</member>
        <member name="M:org.xml.sax.ext.DeclHandler.internalEntityDecl(System.String,System.String)">
                     * Report an internal entity declaration.
                     *
                     * <p>Only the effective (first) declaration for each entity
                     * will be reported.  All parameter entities in the value
                     * will be expanded, but general entities will not.</p>
                     *
                     * @param name The name of the entity.  If it is a parameter
                     *        entity, the name will begin with '%'.
                     * @param value The replacement text of the entity.
                     * @exception SAXException The application may raise an exception.
                     * @see #externalEntityDecl
                     * @see org.xml.sax.DTDHandler#unparsedEntityDecl</member>
        <member name="M:org.xml.sax.ext.DeclHandler.externalEntityDecl(System.String,System.String,System.String)">
                     * Report a parsed external entity declaration.
                     *
                     * <p>Only the effective (first) declaration for each entity
                     * will be reported.</p>
                     *
                     * <p>If the system identifier is a URL, the parser must resolve it
                     * fully before passing it to the application.</p>
                     *
                     * @param name The name of the entity.  If it is a parameter
                     *        entity, the name will begin with '%'.
                     * @param publicId The entity's public identifier, or null if none
                     *        was given.
                     * @param systemId The entity's system identifier.
                     * @exception SAXException The application may raise an exception.
                     * @see #internalEntityDecl
                     * @see org.xml.sax.DTDHandler#unparsedEntityDecl</member>
        <!--FIXME: Invalid documentation markup was found for member T:org.xml.sax.ext.DefaultHandler2-->
        <member name="M:org.xml.sax.ext.DefaultHandler2.#ctor">
             Constructs a handler which ignores all parsing events.</member>
        <member name="M:org.xml.sax.ext.DefaultHandler2.getExternalSubset(System.String,System.String)">
                     * Tells the parser that if no external subset has been declared
                     * in the document text, none should be used.</member>
        <member name="M:org.xml.sax.ext.DefaultHandler2.resolveEntity(System.String,System.String,System.String,System.String)">
                     * Tells the parser to resolve the systemId against the baseURI
                     * and read the entity text from that resulting absolute URI.
                     * Note that because the older
                     * {@link DefaultHandler#resolveEntity DefaultHandler.resolveEntity()},
                     * method is overridden to call this one, this method may sometimes
                     * be invoked with null <em>name</em> and <em>baseURI</em>, and
                     * with the <em>systemId</em> already absolutized.</member>
        <member name="M:org.xml.sax.ext.DefaultHandler2.resolveEntity(System.String,System.String)">
                     * Invokes
                     * {@link EntityResolver2#resolveEntity EntityResolver2.resolveEntity()}
                     * with null entity name and base URI.
                     * You only need to override that method to use this class.</member>
        <member name="T:org.xml.sax.ext.EntityResolver2">
                 * Extended interface for mapping external entity references to input
                 * sources, or providing a missing external subset.  The
                 * {@link XMLReader#setEntityResolver XMLReader.setEntityResolver()} method
                 * is used to provide implementations of this interface to parsers.
                 * When a parser uses the methods in this interface, the
                 * {@link EntityResolver2#resolveEntity EntityResolver2.resolveEntity()}
                 * method (in this interface) is used <em>instead of</em> the older (SAX 1.0)
                 * {@link EntityResolver#resolveEntity EntityResolver.resolveEntity()} method.
                 *
                 * <blockquote>
                 * <em>This module, both source code and documentation, is in the
                 * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>
                 * </blockquote>
                 *
                 * <p>If a SAX application requires the customized handling which this
                 * interface defines for external entities, it must ensure that it uses
                 * an XMLReader with the
                 * <em>http://xml.org/sax/features/use-entity-resolver2</em> feature flag
                 * set to <em>true</em> (which is its default value when the feature is
                 * recognized).  If that flag is unrecognized, or its value is false,
                 * or the resolver does not implement this interface, then only the
                 * {@link EntityResolver} method will be used.
                 * </p>
                 *
                 * <p>That supports three categories of application that modify entity
                 * resolution.  <em>Old Style</em> applications won't know about this interface;
                 * they will provide an EntityResolver.
                 * <em>Transitional Mode</em> provide an EntityResolver2 and automatically
                 * get the benefit of its methods in any systems (parsers or other tools)
                 * supporting it, due to polymorphism.
                 * Both <em>Old Style</em> and <em>Transitional Mode</em> applications will
                 * work with any SAX2 parser.
                 * <em>New style</em> applications will fail to run except on SAX2 parsers
                 * that support this particular feature.
                 * They will insist that feature flag have a value of "true", and the
                 * EntityResolver2 implementation they provide  might throw an exception
                 * if the original SAX 1.0 style entity resolution method is invoked.
                 * </p>
                 *
                 * @see org.xml.sax.XMLReader#setEntityResolver
                 *
                 * @since SAX 2.0 (extensions 1.1 alpha)
                 * @author David Brownell
                 * @version TBD</member>
        <!--FIXME: Invalid documentation markup was found for member M:org.xml.sax.ext.EntityResolver2.getExternalSubset(System.String,System.String)-->
        <!--FIXME: Invalid documentation markup was found for member M:org.xml.sax.ext.EntityResolver2.resolveEntity(System.String,System.String,System.String,System.String)-->
        <member name="T:org.xml.sax.ext.LexicalHandler">
                 * SAX2 extension handler for lexical events.
                 *
                 * <blockquote>
                 * <em>This module, both source code and documentation, is in the
                 * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>
                 * See <a href="http://www.saxproject.org">http://www.saxproject.org</a>
                 * for further information.
                 * </blockquote>
                 *
                 * <p>This is an optional extension handler for SAX2 to provide
                 * lexical information about an XML document, such as comments
                 * and CDATA section boundaries.
                 * XML readers are not required to recognize this handler, and it
                 * is not part of core-only SAX2 distributions.</p>
                 *
                 * <p>The events in the lexical handler apply to the entire document,
                 * not just to the document element, and all lexical handler events
                 * must appear between the content handler's startDocument and
                 * endDocument events.</p>
                 *
                 * <p>To set the LexicalHandler for an XML reader, use the
                 * {@link org.xml.sax.XMLReader#setProperty setProperty} method
                 * with the property name
                 * <code>http://xml.org/sax/properties/lexical-handler</code>
                 * and an object implementing this interface (or null) as the value.
                 * If the reader does not report lexical events, it will throw a
                 * {@link org.xml.sax.SAXNotRecognizedException SAXNotRecognizedException}
                 * when you attempt to register the handler.</p>
                 *
                 * @since SAX 2.0 (extensions 1.0)
                 * @author David Megginson
                 * @version 2.0.1 (sax2r2)</member>
        <member name="M:org.xml.sax.ext.LexicalHandler.startDTD(System.String,System.String,System.String)">
                     * Report the start of DTD declarations, if any.
                     *
                     * <p>This method is intended to report the beginning of the
                     * DOCTYPE declaration; if the document has no DOCTYPE declaration,
                     * this method will not be invoked.</p>
                     *
                     * <p>All declarations reported through
                     * {@link org.xml.sax.DTDHandler DTDHandler} or
                     * {@link org.xml.sax.ext.DeclHandler DeclHandler} events must appear
                     * between the startDTD and {@link #endDTD endDTD} events.
                     * Declarations are assumed to belong to the internal DTD subset
                     * unless they appear between {@link #startEntity startEntity}
                     * and {@link #endEntity endEntity} events.  Comments and
                     * processing instructions from the DTD should also be reported
                     * between the startDTD and endDTD events, in their original
                     * order of (logical) occurrence; they are not required to
                     * appear in their correct locations relative to DTDHandler
                     * or DeclHandler events, however.</p>
                     *
                     * <p>Note that the start/endDTD events will appear within
                     * the start/endDocument events from ContentHandler and
                     * before the first
                     * {@link org.xml.sax.ContentHandler#startElement startElement}
                     * event.</p>
                     *
                     * @param name The document type name.
                     * @param publicId The declared public identifier for the
                     *        external DTD subset, or null if none was declared.
                     * @param systemId The declared system identifier for the
                     *        external DTD subset, or null if none was declared.
                     *        (Note that this is not resolved against the document
                     *        base URI.)
                     * @exception SAXException The application may raise an
                     *            exception.
                     * @see #endDTD
                     * @see #startEntity</member>
        <member name="M:org.xml.sax.ext.LexicalHandler.endDTD">
                     * Report the end of DTD declarations.
                     *
                     * <p>This method is intended to report the end of the
                     * DOCTYPE declaration; if the document has no DOCTYPE declaration,
                     * this method will not be invoked.</p>
                     *
                     * @exception SAXException The application may raise an exception.
                     * @see #startDTD</member>
        <!--FIXME: Invalid documentation markup was found for member M:org.xml.sax.ext.LexicalHandler.startEntity(System.String)-->
        <member name="M:org.xml.sax.ext.LexicalHandler.endEntity(System.String)">
                     * Report the end of an entity.
                     *
                     * @param name The name of the entity that is ending.
                     * @exception SAXException The application may raise an exception.
                     * @see #startEntity</member>
        <member name="M:org.xml.sax.ext.LexicalHandler.startCDATA">
                     * Report the start of a CDATA section.
                     *
                     * <p>The contents of the CDATA section will be reported through
                     * the regular {@link org.xml.sax.ContentHandler#characters
                     * characters} event; this event is intended only to report
                     * the boundary.</p>
                     *
                     * @exception SAXException The application may raise an exception.
                     * @see #endCDATA</member>
        <member name="M:org.xml.sax.ext.LexicalHandler.endCDATA">
                     * Report the end of a CDATA section.
                     *
                     * @exception SAXException The application may raise an exception.
                     * @see #startCDATA</member>
        <member name="M:org.xml.sax.ext.LexicalHandler.comment(System.Char[],System.Int32,System.Int32)">
                     * Report an XML comment anywhere in the document.
                     *
                     * <p>This callback will be used for comments inside or outside the
                     * document element, including comments in the external DTD
                     * subset (if read).  Comments in the DTD must be properly
                     * nested inside start/endDTD and start/endEntity events (if
                     * used).</p>
                     *
                     * @param ch An array holding the characters in the comment.
                     * @param start The starting position in the array.
                     * @param length The number of characters to use from the array.
                     * @exception SAXException The application may raise an exception.</member>
        <member name="T:org.xml.sax.ext.Locator2">
                 * SAX2 extension to augment the entity information provided
                 * though a {@link Locator}.
                 * If an implementation supports this extension, the Locator
                 * provided in {@link org.xml.sax.ContentHandler#setDocumentLocator
                 * ContentHandler.setDocumentLocator() } will implement this
                 * interface, and the
                 * <em>http://xml.org/sax/features/use-locator2</em> feature
                 * flag will have the value <em>true</em>.
                 *
                 * <blockquote>
                 * <em>This module, both source code and documentation, is in the
                 * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>
                 * </blockquote>
                 *
                 * <p> XMLReader implementations are not required to support this
                 * information, and it is not part of core-only SAX2 distributions.</p>
                 *
                 * @since SAX 2.0 (extensions 1.1 alpha)
                 * @author David Brownell
                 * @version TBS</member>
        <!--FIXME: Invalid documentation markup was found for member M:org.xml.sax.ext.Locator2.getXMLVersion-->
        <!--FIXME: Invalid documentation markup was found for member M:org.xml.sax.ext.Locator2.getEncoding-->
        <member name="T:org.xml.sax.ext.Locator2Impl">
                 * SAX2 extension helper for holding additional Entity information,
                 * implementing the {@link Locator2} interface.
                 *
                 * <blockquote>
                 * <em>This module, both source code and documentation, is in the
                 * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>
                 * </blockquote>
                 *
                 * <p> This is not part of core-only SAX2 distributions.</p>
                 *
                 * @since SAX 2.0.2
                 * @author David Brownell
                 * @version TBS</member>
        <member name="M:org.xml.sax.ext.Locator2Impl.#ctor">
                     * Construct a new, empty Locator2Impl object.
                     * This will not normally be useful, since the main purpose
                     * of this class is to make a snapshot of an existing Locator.</member>
        <member name="M:org.xml.sax.ext.Locator2Impl.#ctor(org.xml.sax.Locator)">
                     * Copy an existing Locator or Locator2 object.
                     * If the object implements Locator2, values of the
                     * <em>encoding</em> and <em>version</em>strings are copied,
                     * otherwise they set to <em>null</em>.
                     *
                     * @param locator The existing Locator object.</member>
        <member name="M:org.xml.sax.ext.Locator2Impl.getXMLVersion">
                     * Returns the current value of the version property.
                     *
                     * @see #setXMLVersion</member>
        <member name="M:org.xml.sax.ext.Locator2Impl.getEncoding">
                     * Returns the current value of the encoding property.
                     *
                     * @see #setEncoding</member>
        <member name="M:org.xml.sax.ext.Locator2Impl.setXMLVersion(System.String)">
                     * Assigns the current value of the version property.
                     *
                     * @param version the new "version" value
                     * @see #getXMLVersion</member>
        <member name="M:org.xml.sax.ext.Locator2Impl.setEncoding(System.String)">
                     * Assigns the current value of the encoding property.
                     *
                     * @param encoding the new "encoding" value
                     * @see #getEncoding</member>
        <member name="T:org.xml.sax.helpers.XMLReaderAdapter">
                 * Adapt a SAX2 XMLReader as a SAX1 Parser.
                 *
                 * <blockquote>
                 * <em>This module, both source code and documentation, is in the
                 * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>
                 * See <a href="http://www.saxproject.org">http://www.saxproject.org</a>
                 * for further information.
                 * </blockquote>
                 *
                 * <p>This class wraps a SAX2 {@link org.xml.sax.XMLReader XMLReader}
                 * and makes it act as a SAX1 {@link org.xml.sax.Parser Parser}.  The XMLReader
                 * must support a true value for the
                 * http://xml.org/sax/features/namespace-prefixes property or parsing will fail
                 * with a {@link org.xml.sax.SAXException SAXException}; if the XMLReader
                 * supports a false value for the http://xml.org/sax/features/namespaces
                 * property, that will also be used to improve efficiency.</p>
                 *
                 * @since SAX 2.0
                 * @author David Megginson
                 * @version 2.0.1 (sax2r2)
                 * @see org.xml.sax.Parser
                 * @see org.xml.sax.XMLReader</member>
        <member name="M:org.xml.sax.helpers.XMLReaderAdapter.#ctor">
                     * Create a new adapter.
                     *
                     * <p>Use the "org.xml.sax.driver" property to locate the SAX2
                     * driver to embed.</p>
                     *
                     * @exception org.xml.sax.SAXException If the embedded driver
                     *            cannot be instantiated or if the
                     *            org.xml.sax.driver property is not specified.</member>
        <member name="M:org.xml.sax.helpers.XMLReaderAdapter.#ctor(org.xml.sax.XMLReader)">
                     * Create a new adapter.
                     *
                     * <p>Create a new adapter, wrapped around a SAX2 XMLReader.
                     * The adapter will make the XMLReader act like a SAX1
                     * Parser.</p>
                     *
                     * @param xmlReader The SAX2 XMLReader to wrap.
                     * @exception java.lang.NullPointerException If the argument is null.</member>
        <member name="M:org.xml.sax.helpers.XMLReaderAdapter.setup(org.xml.sax.XMLReader)">
                     * Internal setup.
                     *
                     * @param xmlReader The embedded XMLReader.</member>
        <member name="M:org.xml.sax.helpers.XMLReaderAdapter.setLocale(biz.ritter.javapi.util.Locale)">
                     * Set the locale for error reporting.
                     *
                     * <p>This is not supported in SAX2, and will always throw
                     * an exception.</p>
                     *
                     * @param locale the locale for error reporting.
                     * @see org.xml.sax.Parser#setLocale
                     * @exception org.xml.sax.SAXException Thrown unless overridden.</member>
        <member name="M:org.xml.sax.helpers.XMLReaderAdapter.setEntityResolver(org.xml.sax.EntityResolver)">
                     * Register the entity resolver.
                     *
                     * @param resolver The new resolver.
                     * @see org.xml.sax.Parser#setEntityResolver</member>
        <member name="M:org.xml.sax.helpers.XMLReaderAdapter.setDTDHandler(org.xml.sax.DTDHandler)">
                     * Register the DTD event handler.
                     *
                     * @param handler The new DTD event handler.
                     * @see org.xml.sax.Parser#setDTDHandler</member>
        <member name="M:org.xml.sax.helpers.XMLReaderAdapter.setDocumentHandler(org.xml.sax.DocumentHandler)">
                     * Register the SAX1 document event handler.
                     *
                     * <p>Note that the SAX1 document handler has no Namespace
                     * support.</p>
                     *
                     * @param handler The new SAX1 document event handler.
                     * @see org.xml.sax.Parser#setDocumentHandler</member>
        <member name="M:org.xml.sax.helpers.XMLReaderAdapter.setErrorHandler(org.xml.sax.ErrorHandler)">
                     * Register the error event handler.
                     *
                     * @param handler The new error event handler.
                     * @see org.xml.sax.Parser#setErrorHandler</member>
        <member name="M:org.xml.sax.helpers.XMLReaderAdapter.parse(System.String)">
                     * Parse the document.
                     *
                     * <p>This method will throw an exception if the embedded
                     * XMLReader does not support the
                     * http://xml.org/sax/features/namespace-prefixes property.</p>
                     *
                     * @param systemId The absolute URL of the document.
                     * @exception java.io.IOException If there is a problem reading
                     *            the raw content of the document.
                     * @exception org.xml.sax.SAXException If there is a problem
                     *            processing the document.
                     * @see #parse(org.xml.sax.InputSource)
                     * @see org.xml.sax.Parser#parse(java.lang.String)</member>
        <member name="M:org.xml.sax.helpers.XMLReaderAdapter.parse(org.xml.sax.InputSource)">
                     * Parse the document.
                     *
                     * <p>This method will throw an exception if the embedded
                     * XMLReader does not support the
                     * http://xml.org/sax/features/namespace-prefixes property.</p>
                     *
                     * @param input An input source for the document.
                     * @exception java.io.IOException If there is a problem reading
                     *            the raw content of the document.
                     * @exception org.xml.sax.SAXException If there is a problem
                     *            processing the document.
                     * @see #parse(java.lang.String)
                     * @see org.xml.sax.Parser#parse(org.xml.sax.InputSource)</member>
        <member name="M:org.xml.sax.helpers.XMLReaderAdapter.setupXMLReader">
                     * Set up the XML reader.</member>
        <member name="M:org.xml.sax.helpers.XMLReaderAdapter.setDocumentLocator(org.xml.sax.Locator)">
                     * Set a document locator.
                     *
                     * @param locator The document locator.
                     * @see org.xml.sax.ContentHandler#setDocumentLocator</member>
        <member name="M:org.xml.sax.helpers.XMLReaderAdapter.startDocument">
                     * Start document event.
                     *
                     * @exception org.xml.sax.SAXException The client may raise a
                     *            processing exception.
                     * @see org.xml.sax.ContentHandler#startDocument</member>
        <member name="M:org.xml.sax.helpers.XMLReaderAdapter.endDocument">
                     * End document event.
                     *
                     * @exception org.xml.sax.SAXException The client may raise a
                     *            processing exception.
                     * @see org.xml.sax.ContentHandler#endDocument</member>
        <member name="M:org.xml.sax.helpers.XMLReaderAdapter.startPrefixMapping(System.String,System.String)">
                     * Adapt a SAX2 start prefix mapping event.
                     *
                     * @param prefix The prefix being mapped.
                     * @param uri The Namespace URI being mapped to.
                     * @see org.xml.sax.ContentHandler#startPrefixMapping</member>
        <member name="M:org.xml.sax.helpers.XMLReaderAdapter.endPrefixMapping(System.String)">
                     * Adapt a SAX2 end prefix mapping event.
                     *
                     * @param prefix The prefix being mapped.
                     * @see org.xml.sax.ContentHandler#endPrefixMapping</member>
        <member name="M:org.xml.sax.helpers.XMLReaderAdapter.startElement(System.String,System.String,System.String,org.xml.sax.Attributes)">
                     * Adapt a SAX2 start element event.
                     *
                     * @param uri The Namespace URI.
                     * @param localName The Namespace local name.
                     * @param qName The qualified (prefixed) name.
                     * @param atts The SAX2 attributes.
                     * @exception org.xml.sax.SAXException The client may raise a
                     *            processing exception.
                     * @see org.xml.sax.ContentHandler#endDocument</member>
        <member name="M:org.xml.sax.helpers.XMLReaderAdapter.endElement(System.String,System.String,System.String)">
                     * Adapt a SAX2 end element event.
                     *
                     * @param uri The Namespace URI.
                     * @param localName The Namespace local name.
                     * @param qName The qualified (prefixed) name.
                     * @exception org.xml.sax.SAXException The client may raise a
                     *            processing exception.
                     * @see org.xml.sax.ContentHandler#endElement</member>
        <member name="M:org.xml.sax.helpers.XMLReaderAdapter.characters(System.Char[],System.Int32,System.Int32)">
                     * Adapt a SAX2 characters event.
                     *
                     * @param ch An array of characters.
                     * @param start The starting position in the array.
                     * @param length The number of characters to use.
                     * @exception org.xml.sax.SAXException The client may raise a
                     *            processing exception.
                     * @see org.xml.sax.ContentHandler#characters</member>
        <member name="M:org.xml.sax.helpers.XMLReaderAdapter.ignorableWhitespace(System.Char[],System.Int32,System.Int32)">
                     * Adapt a SAX2 ignorable whitespace event.
                     *
                     * @param ch An array of characters.
                     * @param start The starting position in the array.
                     * @param length The number of characters to use.
                     * @exception org.xml.sax.SAXException The client may raise a
                     *            processing exception.
                     * @see org.xml.sax.ContentHandler#ignorableWhitespace</member>
        <member name="M:org.xml.sax.helpers.XMLReaderAdapter.processingInstruction(System.String,System.String)">
                     * Adapt a SAX2 processing instruction event.
                     *
                     * @param target The processing instruction target.
                     * @param data The remainder of the processing instruction
                     * @exception org.xml.sax.SAXException The client may raise a
                     *            processing exception.
                     * @see org.xml.sax.ContentHandler#processingInstruction</member>
        <member name="M:org.xml.sax.helpers.XMLReaderAdapter.skippedEntity(System.String)">
                     * Adapt a SAX2 skipped entity event.
                     *
                     * @param name The name of the skipped entity.
                     * @see org.xml.sax.ContentHandler#skippedEntity
                     * @exception org.xml.sax.SAXException Throwable by subclasses.</member>
        <member name="T:org.xml.sax.helpers.XMLReaderAdapter.AttributesAdapter">
                     * Internal class to wrap a SAX2 Attributes object for SAX1.</member>
        <member name="M:org.xml.sax.helpers.XMLReaderAdapter.AttributesAdapter.setAttributes(org.xml.sax.Attributes)">
                         * Set the embedded Attributes object.
                         *
                         * @param The embedded SAX2 Attributes.</member>
        <member name="M:org.xml.sax.helpers.XMLReaderAdapter.AttributesAdapter.getLength">
                         * Return the number of attributes.
                         *
                         * @return The length of the attribute list.
                         * @see org.xml.sax.AttributeList#getLength</member>
        <member name="M:org.xml.sax.helpers.XMLReaderAdapter.AttributesAdapter.getName(System.Int32)">
                         * Return the qualified (prefixed) name of an attribute by position.
                         *
                         * @return The qualified name.
                         * @see org.xml.sax.AttributeList#getName</member>
        <member name="M:org.xml.sax.helpers.XMLReaderAdapter.AttributesAdapter.getType(System.Int32)">
                         * Return the type of an attribute by position.
                         *
                         * @return The type.
                         * @see org.xml.sax.AttributeList#getType(int)</member>
        <member name="M:org.xml.sax.helpers.XMLReaderAdapter.AttributesAdapter.getValue(System.Int32)">
                         * Return the value of an attribute by position.
                         *
                         * @return The value.
                         * @see org.xml.sax.AttributeList#getValue(int)</member>
        <member name="M:org.xml.sax.helpers.XMLReaderAdapter.AttributesAdapter.getType(System.String)">
                         * Return the type of an attribute by qualified (prefixed) name.
                         *
                         * @return The type.
                         * @see org.xml.sax.AttributeList#getType(java.lang.String)</member>
        <member name="M:org.xml.sax.helpers.XMLReaderAdapter.AttributesAdapter.getValue(System.String)">
                         * Return the value of an attribute by qualified (prefixed) name.
                         *
                         * @return The value.
                         * @see org.xml.sax.AttributeList#getValue(java.lang.String)</member>
        <member name="T:org.xml.sax.InputSource">
                 * A single input source for an XML entity.
                 *
                 * <blockquote>
                 * <em>This module, both source code and documentation, is in the
                 * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>
                 * See <a href="http://www.saxproject.org">http://www.saxproject.org</a>
                 * for further information.
                 * </blockquote>
                 *
                 * <p>This class allows a SAX application to encapsulate information
                 * about an input source in a single object, which may include
                 * a public identifier, a system identifier, a byte stream (possibly
                 * with a specified encoding), and/or a character stream.</p>
                 *
                 * <p>There are two places that the application can deliver an
                 * input source to the parser: as the argument to the Parser.parse
                 * method, or as the return value of the EntityResolver.resolveEntity
                 * method.</p>
                 *
                 * <p>The SAX parser will use the InputSource object to determine how
                 * to read XML input.  If there is a character stream available, the
                 * parser will read that stream directly, disregarding any text
                 * encoding declaration found in that stream.
                 * If there is no character stream, but there is
                 * a byte stream, the parser will use that byte stream, using the
                 * encoding specified in the InputSource or else (if no encoding is
                 * specified) autodetecting the character encoding using an algorithm
                 * such as the one in the XML specification.  If neither a character
                 * stream nor a
                 * byte stream is available, the parser will attempt to open a URI
                 * connection to the resource identified by the system
                 * identifier.</p>
                 *
                 * <p>An InputSource object belongs to the application: the SAX parser
                 * shall never modify it in any way (it may modify a copy if
                 * necessary).  However, standard processing of both byte and
                 * character streams is to close them on as part of end-of-parse cleanup,
                 * so applications should not attempt to re-use such streams after they
                 * have been handed to a parser.  </p>
                 *
                 * @since SAX 1.0
                 * @author David Megginson
                 * @version 2.0.1 (sax2r2)
                 * @see org.xml.sax.XMLReader#parse(org.xml.sax.InputSource)
                 * @see org.xml.sax.EntityResolver#resolveEntity
                 * @see java.io.InputStream
                 * @see java.io.Reader</member>
        <member name="M:org.xml.sax.InputSource.#ctor">
                     * Zero-argument default constructor.
                     *
                     * @see #setPublicId
                     * @see #setSystemId
                     * @see #setByteStream
                     * @see #setCharacterStream
                     * @see #setEncoding</member>
        <member name="M:org.xml.sax.InputSource.#ctor(System.String)">
                     * Create a new input source with a system identifier.
                     *
                     * <p>Applications may use setPublicId to include a
                     * public identifier as well, or setEncoding to specify
                     * the character encoding, if known.</p>
                     *
                     * <p>If the system identifier is a URL, it must be fully
                     * resolved (it may not be a relative URL).</p>
                     *
                     * @param systemId The system identifier (URI).
                     * @see #setPublicId
                     * @see #setSystemId
                     * @see #setByteStream
                     * @see #setEncoding
                     * @see #setCharacterStream</member>
        <member name="M:org.xml.sax.InputSource.#ctor(biz.ritter.javapi.io.InputStream)">
                     * Create a new input source with a byte stream.
                     *
                     * <p>Application writers should use setSystemId() to provide a base
                     * for resolving relative URIs, may use setPublicId to include a
                     * public identifier, and may use setEncoding to specify the object's
                     * character encoding.</p>
                     *
                     * @param byteStream The raw byte stream containing the document.
                     * @see #setPublicId
                     * @see #setSystemId
                     * @see #setEncoding
                     * @see #setByteStream
                     * @see #setCharacterStream</member>
        <member name="M:org.xml.sax.InputSource.#ctor(biz.ritter.javapi.io.Reader)">
                     * Create a new input source with a character stream.
                     *
                     * <p>Application writers should use setSystemId() to provide a base
                     * for resolving relative URIs, and may use setPublicId to include a
                     * public identifier.</p>
                     *
                     * <p>The character stream shall not include a byte order mark.</p>
                     *
                     * @see #setPublicId
                     * @see #setSystemId
                     * @see #setByteStream
                     * @see #setCharacterStream</member>
        <member name="M:org.xml.sax.InputSource.setPublicId(System.String)">
                     * Set the public identifier for this input source.
                     *
                     * <p>The public identifier is always optional: if the application
                     * writer includes one, it will be provided as part of the
                     * location information.</p>
                     *
                     * @param publicId The public identifier as a string.
                     * @see #getPublicId
                     * @see org.xml.sax.Locator#getPublicId
                     * @see org.xml.sax.SAXParseException#getPublicId</member>
        <member name="M:org.xml.sax.InputSource.getPublicId">
                     * Get the public identifier for this input source.
                     *
                     * @return The public identifier, or null if none was supplied.
                     * @see #setPublicId</member>
        <member name="M:org.xml.sax.InputSource.setSystemId(System.String)">
                     * Set the system identifier for this input source.
                     *
                     * <p>The system identifier is optional if there is a byte stream
                     * or a character stream, but it is still useful to provide one,
                     * since the application can use it to resolve relative URIs
                     * and can include it in error messages and warnings (the parser
                     * will attempt to open a connection to the URI only if
                     * there is no byte stream or character stream specified).</p>
                     *
                     * <p>If the application knows the character encoding of the
                     * object pointed to by the system identifier, it can register
                     * the encoding using the setEncoding method.</p>
                     *
                     * <p>If the system identifier is a URL, it must be fully
                     * resolved (it may not be a relative URL).</p>
                     *
                     * @param systemId The system identifier as a string.
                     * @see #setEncoding
                     * @see #getSystemId
                     * @see org.xml.sax.Locator#getSystemId
                     * @see org.xml.sax.SAXParseException#getSystemId</member>
        <member name="M:org.xml.sax.InputSource.getSystemId">
                     * Get the system identifier for this input source.
                     *
                     * <p>The getEncoding method will return the character encoding
                     * of the object pointed to, or null if unknown.</p>
                     *
                     * <p>If the system ID is a URL, it will be fully resolved.</p>
                     *
                     * @return The system identifier, or null if none was supplied.
                     * @see #setSystemId
                     * @see #getEncoding</member>
        <member name="M:org.xml.sax.InputSource.setByteStream(biz.ritter.javapi.io.InputStream)">
                     * Set the byte stream for this input source.
                     *
                     * <p>The SAX parser will ignore this if there is also a character
                     * stream specified, but it will use a byte stream in preference
                     * to opening a URI connection itself.</p>
                     *
                     * <p>If the application knows the character encoding of the
                     * byte stream, it should set it with the setEncoding method.</p>
                     *
                     * @param byteStream A byte stream containing an XML document or
                     *        other entity.
                     * @see #setEncoding
                     * @see #getByteStream
                     * @see #getEncoding
                     * @see java.io.InputStream</member>
        <member name="M:org.xml.sax.InputSource.getByteStream">
                     * Get the byte stream for this input source.
                     *
                     * <p>The getEncoding method will return the character
                     * encoding for this byte stream, or null if unknown.</p>
                     *
                     * @return The byte stream, or null if none was supplied.
                     * @see #getEncoding
                     * @see #setByteStream</member>
        <member name="M:org.xml.sax.InputSource.setEncoding(System.String)">
                     * Set the character encoding, if known.
                     *
                     * <p>The encoding must be a string acceptable for an
                     * XML encoding declaration (see section 4.3.3 of the XML 1.0
                     * recommendation).</p>
                     *
                     * <p>This method has no effect when the application provides a
                     * character stream.</p>
                     *
                     * @param encoding A string describing the character encoding.
                     * @see #setSystemId
                     * @see #setByteStream
                     * @see #getEncoding</member>
        <member name="M:org.xml.sax.InputSource.getEncoding">
                     * Get the character encoding for a byte stream or URI.
                     * This value will be ignored when the application provides a
                     * character stream.
                     *
                     * @return The encoding, or null if none was supplied.
                     * @see #setByteStream
                     * @see #getSystemId
                     * @see #getByteStream</member>
        <member name="M:org.xml.sax.InputSource.setCharacterStream(biz.ritter.javapi.io.Reader)">
                     * Set the character stream for this input source.
                     *
                     * <p>If there is a character stream specified, the SAX parser
                     * will ignore any byte stream and will not attempt to open
                     * a URI connection to the system identifier.</p>
                     *
                     * @param characterStream The character stream containing the
                     *        XML document or other entity.
                     * @see #getCharacterStream
                     * @see java.io.Reader</member>
        <member name="M:org.xml.sax.InputSource.getCharacterStream">
                     * Get the character stream for this input source.
                     *
                     * @return The character stream, or null if none was supplied.
                     * @see #setCharacterStream</member>
        <!--FIXME: Invalid documentation markup was found for member T:org.xml.sax.AttributeList-->
        <member name="M:org.xml.sax.AttributeList.getLength">
                     * Return the number of attributes in this list.
                     *
                     * <p>The SAX parser may provide attributes in any
                     * arbitrary order, regardless of the order in which they were
                     * declared or specified.  The number of attributes may be
                     * zero.</p>
                     *
                     * @return The number of attributes in the list.</member>
        <member name="M:org.xml.sax.AttributeList.getName(System.Int32)">
                     * Return the name of an attribute in this list (by position).
                     *
                     * <p>The names must be unique: the SAX parser shall not include the
                     * same attribute twice.  Attributes without values (those declared
                     * #IMPLIED without a value specified in the start tag) will be
                     * omitted from the list.</p>
                     *
                     * <p>If the attribute name has a namespace prefix, the prefix
                     * will still be attached.</p>
                     *
                     * @param i The index of the attribute in the list (starting at 0).
                     * @return The name of the indexed attribute, or null
                     *         if the index is out of range.
                     * @see #getLength</member>
        <member name="M:org.xml.sax.AttributeList.getType(System.Int32)">
                     * Return the type of an attribute in the list (by position).
                     *
                     * <p>The attribute type is one of the strings "CDATA", "ID",
                     * "IDREF", "IDREFS", "NMTOKEN", "NMTOKENS", "ENTITY", "ENTITIES",
                     * or "NOTATION" (always in upper case).</p>
                     *
                     * <p>If the parser has not read a declaration for the attribute,
                     * or if the parser does not report attribute types, then it must
                     * return the value "CDATA" as stated in the XML 1.0 Recommentation
                     * (clause 3.3.3, "Attribute-Value Normalization").</p>
                     *
                     * <p>For an enumerated attribute that is not a notation, the
                     * parser will report the type as "NMTOKEN".</p>
                     *
                     * @param i The index of the attribute in the list (starting at 0).
                     * @return The attribute type as a string, or
                     *         null if the index is out of range.
                     * @see #getLength
                     * @see #getType(java.lang.String)</member>
        <member name="M:org.xml.sax.AttributeList.getValue(System.Int32)">
                     * Return the value of an attribute in the list (by position).
                     *
                     * <p>If the attribute value is a list of tokens (IDREFS,
                     * ENTITIES, or NMTOKENS), the tokens will be concatenated
                     * into a single string separated by whitespace.</p>
                     *
                     * @param i The index of the attribute in the list (starting at 0).
                     * @return The attribute value as a string, or
                     *         null if the index is out of range.
                     * @see #getLength
                     * @see #getValue(java.lang.String)</member>
        <member name="M:org.xml.sax.AttributeList.getType(System.String)">
                     * Return the type of an attribute in the list (by name).
                     *
                     * <p>The return value is the same as the return value for
                     * getType(int).</p>
                     *
                     * <p>If the attribute name has a namespace prefix in the document,
                     * the application must include the prefix here.</p>
                     *
                     * @param name The name of the attribute.
                     * @return The attribute type as a string, or null if no
                     *         such attribute exists.
                     * @see #getType(int)</member>
        <member name="M:org.xml.sax.AttributeList.getValue(System.String)">
                     * Return the value of an attribute in the list (by name).
                     *
                     * <p>The return value is the same as the return value for
                     * getValue(int).</p>
                     *
                     * <p>If the attribute name has a namespace prefix in the document,
                     * the application must include the prefix here.</p>
                     *
                     * @param name the name of the attribute to return
                     * @return The attribute value as a string, or null if
                     *         no such attribute exists.
                     * @see #getValue(int)</member>
        <member name="T:org.xml.sax.Attributes">
                 * Interface for a list of XML attributes.
                 *
                 * <blockquote>
                 * <em>This module, both source code and documentation, is in the
                 * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>
                 * See <a href="http://www.saxproject.org">http://www.saxproject.org</a>
                 * for further information.
                 * </blockquote>
                 *
                 * <p>This interface allows access to a list of attributes in
                 * three different ways:</p>
                 *
                 * <ol>
                 * <li>by attribute index;</li>
                 * <li>by Namespace-qualified name; or</li>
                 * <li>by qualified (prefixed) name.</li>
                 * </ol>
                 *
                 * <p>The list will not contain attributes that were declared
                 * #IMPLIED but not specified in the start tag.  It will also not
                 * contain attributes used as Namespace declarations (xmlns*) unless
                 * the <code>http://xml.org/sax/features/namespace-prefixes</code>
                 * feature is set to <var>true</var> (it is <var>false</var> by
                 * default).
                 * Because SAX2 conforms to the original "Namespaces in XML"
                 * recommendation, it normally does not
                 * give namespace declaration attributes a namespace URI.
                 * </p>
                 *
                 * <p>Some SAX2 parsers may support using an optional feature flag
                 * (<code>http://xml.org/sax/features/xmlns-uris</code>) to request
                 * that those attributes be given URIs, conforming to a later
                 * backwards-incompatible revision of that recommendation.  (The
                 * attribute's "local name" will be the prefix, or "xmlns" when
                 * defining a default element namespace.)  For portability, handler
                 * code should always resolve that conflict, rather than requiring
                 * parsers that can change the setting of that feature flag.  </p>
                 *
                 * <p>If the namespace-prefixes feature (see above) is
                 * <var>false</var>, access by qualified name may not be available; if
                 * the <code>http://xml.org/sax/features/namespaces</code> feature is
                 * <var>false</var>, access by Namespace-qualified names may not be
                 * available.</p>
                 *
                 * <p>This interface replaces the now-deprecated SAX1 {@link
                 * org.xml.sax.AttributeList AttributeList} interface, which does not
                 * contain Namespace support.  In addition to Namespace support, it
                 * adds the <var>getIndex</var> methods (below).</p>
                 *
                 * <p>The order of attributes in the list is unspecified, and will
                 * vary from implementation to implementation.</p>
                 *
                 * @since SAX 2.0
                 * @author David Megginson
                 * @version 2.0.1 (sax2r2)
                 * @see org.xml.sax.helpers.AttributesImpl
                 * @see org.xml.sax.ext.DeclHandler#attributeDecl</member>
        <member name="M:org.xml.sax.Attributes.getLength">
                     * Return the number of attributes in the list.
                     *
                     * <p>Once you know the number of attributes, you can iterate
                     * through the list.</p>
                     *
                     * @return The number of attributes in the list.
                     * @see #getURI(int)
                     * @see #getLocalName(int)
                     * @see #getQName(int)
                     * @see #getType(int)
                     * @see #getValue(int)</member>
        <member name="M:org.xml.sax.Attributes.getURI(System.Int32)">
                     * Look up an attribute's Namespace URI by index.
                     *
                     * @param index The attribute index (zero-based).
                     * @return The Namespace URI, or the empty string if none
                     *         is available, or null if the index is out of
                     *         range.
                     * @see #getLength</member>
        <member name="M:org.xml.sax.Attributes.getLocalName(System.Int32)">
                     * Look up an attribute's local name by index.
                     *
                     * @param index The attribute index (zero-based).
                     * @return The local name, or the empty string if Namespace
                     *         processing is not being performed, or null
                     *         if the index is out of range.
                     * @see #getLength</member>
        <member name="M:org.xml.sax.Attributes.getQName(System.Int32)">
                     * Look up an attribute's XML qualified (prefixed) name by index.
                     *
                     * @param index The attribute index (zero-based).
                     * @return The XML qualified name, or the empty string
                     *         if none is available, or null if the index
                     *         is out of range.
                     * @see #getLength</member>
        <member name="M:org.xml.sax.Attributes.getType(System.Int32)">
                     * Look up an attribute's type by index.
                     *
                     * <p>The attribute type is one of the strings "CDATA", "ID",
                     * "IDREF", "IDREFS", "NMTOKEN", "NMTOKENS", "ENTITY", "ENTITIES",
                     * or "NOTATION" (always in upper case).</p>
                     *
                     * <p>If the parser has not read a declaration for the attribute,
                     * or if the parser does not report attribute types, then it must
                     * return the value "CDATA" as stated in the XML 1.0 Recommendation
                     * (clause 3.3.3, "Attribute-Value Normalization").</p>
                     *
                     * <p>For an enumerated attribute that is not a notation, the
                     * parser will report the type as "NMTOKEN".</p>
                     *
                     * @param index The attribute index (zero-based).
                     * @return The attribute's type as a string, or null if the
                     *         index is out of range.
                     * @see #getLength</member>
        <member name="M:org.xml.sax.Attributes.getValue(System.Int32)">
                     * Look up an attribute's value by index.
                     *
                     * <p>If the attribute value is a list of tokens (IDREFS,
                     * ENTITIES, or NMTOKENS), the tokens will be concatenated
                     * into a single string with each token separated by a
                     * single space.</p>
                     *
                     * @param index The attribute index (zero-based).
                     * @return The attribute's value as a string, or null if the
                     *         index is out of range.
                     * @see #getLength</member>
        <member name="M:org.xml.sax.Attributes.getIndex(System.String,System.String)">
                     * Look up the index of an attribute by Namespace name.
                     *
                     * @param uri The Namespace URI, or the empty string if
                     *        the name has no Namespace URI.
                     * @param localName The attribute's local name.
                     * @return The index of the attribute, or -1 if it does not
                     *         appear in the list.</member>
        <member name="M:org.xml.sax.Attributes.getIndex(System.String)">
                     * Look up the index of an attribute by XML qualified (prefixed) name.
                     *
                     * @param qName The qualified (prefixed) name.
                     * @return The index of the attribute, or -1 if it does not
                     *         appear in the list.</member>
        <member name="M:org.xml.sax.Attributes.getType(System.String,System.String)">
                     * Look up an attribute's type by Namespace name.
                     *
                     * <p>See {@link #getType(int) getType(int)} for a description
                     * of the possible types.</p>
                     *
                     * @param uri The Namespace URI, or the empty String if the
                     *        name has no Namespace URI.
                     * @param localName The local name of the attribute.
                     * @return The attribute type as a string, or null if the
                     *         attribute is not in the list or if Namespace
                     *         processing is not being performed.</member>
        <member name="M:org.xml.sax.Attributes.getType(System.String)">
                     * Look up an attribute's type by XML qualified (prefixed) name.
                     *
                     * <p>See {@link #getType(int) getType(int)} for a description
                     * of the possible types.</p>
                     *
                     * @param qName The XML qualified name.
                     * @return The attribute type as a string, or null if the
                     *         attribute is not in the list or if qualified names
                     *         are not available.</member>
        <member name="M:org.xml.sax.Attributes.getValue(System.String,System.String)">
                     * Look up an attribute's value by Namespace name.
                     *
                     * <p>See {@link #getValue(int) getValue(int)} for a description
                     * of the possible values.</p>
                     *
                     * @param uri The Namespace URI, or the empty String if the
                     *        name has no Namespace URI.
                     * @param localName The local name of the attribute.
                     * @return The attribute value as a string, or null if the
                     *         attribute is not in the list.</member>
        <member name="M:org.xml.sax.Attributes.getValue(System.String)">
                     * Look up an attribute's value by XML qualified (prefixed) name.
                     *
                     * <p>See {@link #getValue(int) getValue(int)} for a description
                     * of the possible values.</p>
                     *
                     * @param qName The XML qualified name.
                     * @return The attribute value as a string, or null if the
                     *         attribute is not in the list or if qualified names
                     *         are not available.</member>
        <member name="T:org.xml.sax.ContentHandler">
             * Receive notification of the logical content of a document.
             *
             * <blockquote>
             * <em>This module, both source code and documentation, is in the
             * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>
             * See <a href="http://www.saxproject.org">http://www.saxproject.org</a>
             * for further information.
             * </blockquote>
             *
             * <p>This is the main interface that most SAX applications
             * implement: if the application needs to be informed of basic parsing
             * events, it implements this interface and registers an instance with
             * the SAX parser using the {@link org.xml.sax.XMLReader#setContentHandler
             * setContentHandler} method.  The parser uses the instance to report
             * basic document-related events like the start and end of elements
             * and character data.</p>
             *
             * <p>The order of events in this interface is very important, and
             * mirrors the order of information in the document itself.  For
             * example, all of an element's content (character data, processing
             * instructions, and/or subelements) will appear, in order, between
             * the startElement event and the corresponding endElement event.</p>
             *
             * <p>This interface is similar to the now-deprecated SAX 1.0
             * DocumentHandler interface, but it adds support for Namespaces
             * and for reporting skipped entities (in non-validating XML
             * processors).</p>
             *
             * <p>Implementors should note that there is also a
             * <code>ContentHandler</code> class in the <code>java.net</code>
             * package; that means that it's probably a bad idea to do</p>
             *
             * <pre>import java.net.*;
             * import org.xml.sax.*;
             * </pre>
             *
             * <p>In fact, "import ...*" is usually a sign of sloppy programming
             * anyway, so the user should consider this a feature rather than a
             * bug.</p>
             *
             * @since SAX 2.0
             * @author David Megginson
             * @version 2.0.1+ (sax2r3pre1)
             * @see org.xml.sax.XMLReader
             * @see org.xml.sax.DTDHandler
             * @see org.xml.sax.ErrorHandler</member>
        <member name="M:org.xml.sax.ContentHandler.setDocumentLocator(org.xml.sax.Locator)">
                 * Receive an object for locating the origin of SAX document events.
                 *
                 * <p>SAX parsers are strongly encouraged (though not absolutely
                 * required) to supply a locator: if it does so, it must supply
                 * the locator to the application by invoking this method before
                 * invoking any of the other methods in the ContentHandler
                 * interface.</p>
                 *
                 * <p>The locator allows the application to determine the end
                 * position of any document-related event, even if the parser is
                 * not reporting an error.  Typically, the application will
                 * use this information for reporting its own errors (such as
                 * character content that does not match an application's
                 * business rules).  The information returned by the locator
                 * is probably not sufficient for use with a search engine.</p>
                 *
                 * <p>Note that the locator will return correct information only
                 * during the invocation SAX event callbacks after
                 * {@link #startDocument startDocument} returns and before
                 * {@link #endDocument endDocument} is called.  The
                 * application should not attempt to use it at any other time.</p>
                 *
                 * @param locator an object that can return the location of
                 *                any SAX document event
                 * @see org.xml.sax.Locator</member>
        <member name="M:org.xml.sax.ContentHandler.startDocument">
                 * Receive notification of the beginning of a document.
                 *
                 * <p>The SAX parser will invoke this method only once, before any
                 * other event callbacks (except for {@link #setDocumentLocator
                 * setDocumentLocator}).</p>
                 *
                 * @throws org.xml.sax.SAXException any SAX exception, possibly
                 *            wrapping another exception
                 * @see #endDocument</member>
        <member name="M:org.xml.sax.ContentHandler.endDocument">
                 * Receive notification of the end of a document.
                 *
                 * <p><strong>There is an apparent contradiction between the
                 * documentation for this method and the documentation for {@link
                 * org.xml.sax.ErrorHandler#fatalError}.  Until this ambiguity is
                 * resolved in a future major release, clients should make no
                 * assumptions about whether endDocument() will or will not be
                 * invoked when the parser has reported a fatalError() or thrown
                 * an exception.</strong></p>
                 *
                 * <p>The SAX parser will invoke this method only once, and it will
                 * be the last method invoked during the parse.  The parser shall
                 * not invoke this method until it has either abandoned parsing
                 * (because of an unrecoverable error) or reached the end of
                 * input.</p>
                 *
                 * @throws org.xml.sax.SAXException any SAX exception, possibly
                 *            wrapping another exception
                 * @see #startDocument</member>
        <member name="M:org.xml.sax.ContentHandler.startPrefixMapping(System.String,System.String)">
                 * Begin the scope of a prefix-URI Namespace mapping.
                 *
                 * <p>The information from this event is not necessary for
                 * normal Namespace processing: the SAX XML reader will
                 * automatically replace prefixes for element and attribute
                 * names when the <code>http://xml.org/sax/features/namespaces</code>
                 * feature is <var>true</var> (the default).</p>
                 *
                 * <p>There are cases, however, when applications need to
                 * use prefixes in character data or in attribute values,
                 * where they cannot safely be expanded automatically; the
                 * start/endPrefixMapping event supplies the information
                 * to the application to expand prefixes in those contexts
                 * itself, if necessary.</p>
                 *
                 * <p>Note that start/endPrefixMapping events are not
                 * guaranteed to be properly nested relative to each other:
                 * all startPrefixMapping events will occur immediately before the
                 * corresponding {@link #startElement startElement} event,
                 * and all {@link #endPrefixMapping endPrefixMapping}
                 * events will occur immediately after the corresponding
                 * {@link #endElement endElement} event,
                 * but their order is not otherwise
                 * guaranteed.</p>
                 *
                 * <p>There should never be start/endPrefixMapping events for the
                 * "xml" prefix, since it is predeclared and immutable.</p>
                 *
                 * @param prefix the Namespace prefix being declared.
                 *	An empty string is used for the default element namespace,
                 *	which has no prefix.
                 * @param uri the Namespace URI the prefix is mapped to
                 * @throws org.xml.sax.SAXException the client may throw
                 *            an exception during processing
                 * @see #endPrefixMapping
                 * @see #startElement</member>
        <member name="M:org.xml.sax.ContentHandler.endPrefixMapping(System.String)">
                 * End the scope of a prefix-URI mapping.
                 *
                 * <p>See {@link #startPrefixMapping startPrefixMapping} for
                 * details.  These events will always occur immediately after the
                 * corresponding {@link #endElement endElement} event, but the order of
                 * {@link #endPrefixMapping endPrefixMapping} events is not otherwise
                 * guaranteed.</p>
                 *
                 * @param prefix the prefix that was being mapped.
                 *	This is the empty string when a default mapping scope ends.
                 * @throws org.xml.sax.SAXException the client may throw
                 *            an exception during processing
                 * @see #startPrefixMapping
                 * @see #endElement</member>
        <member name="M:org.xml.sax.ContentHandler.startElement(System.String,System.String,System.String,org.xml.sax.Attributes)">
                 * Receive notification of the beginning of an element.
                 *
                 * <p>The Parser will invoke this method at the beginning of every
                 * element in the XML document; there will be a corresponding
                 * {@link #endElement endElement} event for every startElement event
                 * (even when the element is empty). All of the element's content will be
                 * reported, in order, before the corresponding endElement
                 * event.</p>
                 *
                 * <p>This event allows up to three name components for each
                 * element:</p>
                 *
                 * <ol>
                 * <li>the Namespace URI;</li>
                 * <li>the local name; and</li>
                 * <li>the qualified (prefixed) name.</li>
                 * </ol>
                 *
                 * <p>Any or all of these may be provided, depending on the
                 * values of the <var>http://xml.org/sax/features/namespaces</var>
                 * and the <var>http://xml.org/sax/features/namespace-prefixes</var>
                 * properties:</p>
                 *
                 * <ul>
                 * <li>the Namespace URI and local name are required when
                 * the namespaces property is <var>true</var> (the default), and are
                 * optional when the namespaces property is <var>false</var> (if one is
                 * specified, both must be);</li>
                 * <li>the qualified name is required when the namespace-prefixes property
                 * is <var>true</var>, and is optional when the namespace-prefixes property
                 * is <var>false</var> (the default).</li>
                 * </ul>
                 *
                 * <p>Note that the attribute list provided will contain only
                 * attributes with explicit values (specified or defaulted):
                 * #IMPLIED attributes will be omitted.  The attribute list
                 * will contain attributes used for Namespace declarations
                 * (xmlns* attributes) only if the
                 * <code>http://xml.org/sax/features/namespace-prefixes</code>
                 * property is true (it is false by default, and support for a
                 * true value is optional).</p>
                 *
                 * <p>Like {@link #characters characters()}, attribute values may have
                 * characters that need more than one <code>char</code> value.  </p>
                 *
                 * @param uri the Namespace URI, or the empty string if the
                 *        element has no Namespace URI or if Namespace
                 *        processing is not being performed
                 * @param localName the local name (without prefix), or the
                 *        empty string if Namespace processing is not being
                 *        performed
                 * @param qName the qualified name (with prefix), or the
                 *        empty string if qualified names are not available
                 * @param atts the attributes attached to the element.  If
                 *        there are no attributes, it shall be an empty
                 *        Attributes object.  The value of this object after
                 *        startElement returns is undefined
                 * @throws org.xml.sax.SAXException any SAX exception, possibly
                 *            wrapping another exception
                 * @see #endElement
                 * @see org.xml.sax.Attributes
                 * @see org.xml.sax.helpers.AttributesImpl</member>
        <member name="M:org.xml.sax.ContentHandler.endElement(System.String,System.String,System.String)">
                 * Receive notification of the end of an element.
                 *
                 * <p>The SAX parser will invoke this method at the end of every
                 * element in the XML document; there will be a corresponding
                 * {@link #startElement startElement} event for every endElement
                 * event (even when the element is empty).</p>
                 *
                 * <p>For information on the names, see startElement.</p>
                 *
                 * @param uri the Namespace URI, or the empty string if the
                 *        element has no Namespace URI or if Namespace
                 *        processing is not being performed
                 * @param localName the local name (without prefix), or the
                 *        empty string if Namespace processing is not being
                 *        performed
                 * @param qName the qualified XML name (with prefix), or the
                 *        empty string if qualified names are not available
                 * @throws org.xml.sax.SAXException any SAX exception, possibly
                 *            wrapping another exception</member>
        <member name="M:org.xml.sax.ContentHandler.characters(System.Char[],System.Int32,System.Int32)">
                 * Receive notification of character data.
                 *
                 * <p>The Parser will call this method to report each chunk of
                 * character data.  SAX parsers may return all contiguous character
                 * data in a single chunk, or they may split it into several
                 * chunks; however, all of the characters in any single event
                 * must come from the same external entity so that the Locator
                 * provides useful information.</p>
                 *
                 * <p>The application must not attempt to read from the array
                 * outside of the specified range.</p>
                 *
                 * <p>Individual characters may consist of more than one Java
                 * <code>char</code> value.  There are two important cases where this
                 * happens, because characters can't be represented in just sixteen bits.
                 * In one case, characters are represented in a <em>Surrogate Pair</em>,
                 * using two special Unicode values. Such characters are in the so-called
                 * "Astral Planes", with a code point above U+FFFF.  A second case involves
                 * composite characters, such as a base character combining with one or
                 * more accent characters. </p>
                 *
                 * <p> Your code should not assume that algorithms using
                 * <code>char</code>-at-a-time idioms will be working in character
                 * units; in some cases they will split characters.  This is relevant
                 * wherever XML permits arbitrary characters, such as attribute values,
                 * processing instruction data, and comments as well as in data reported
                 * from this method.  It's also generally relevant whenever Java code
                 * manipulates internationalized text; the issue isn't unique to XML.</p>
                 *
                 * <p>Note that some parsers will report whitespace in element
                 * content using the {@link #ignorableWhitespace ignorableWhitespace}
                 * method rather than this one (validating parsers <em>must</em>
                 * do so).</p>
                 *
                 * @param ch the characters from the XML document
                 * @param start the start position in the array
                 * @param length the number of characters to read from the array
                 * @throws org.xml.sax.SAXException any SAX exception, possibly
                 *            wrapping another exception
                 * @see #ignorableWhitespace
                 * @see org.xml.sax.Locator</member>
        <member name="M:org.xml.sax.ContentHandler.ignorableWhitespace(System.Char[],System.Int32,System.Int32)">
                 * Receive notification of ignorable whitespace in element content.
                 *
                 * <p>Validating Parsers must use this method to report each chunk
                 * of whitespace in element content (see the W3C XML 1.0
                 * recommendation, section 2.10): non-validating parsers may also
                 * use this method if they are capable of parsing and using
                 * content models.</p>
                 *
                 * <p>SAX parsers may return all contiguous whitespace in a single
                 * chunk, or they may split it into several chunks; however, all of
                 * the characters in any single event must come from the same
                 * external entity, so that the Locator provides useful
                 * information.</p>
                 *
                 * <p>The application must not attempt to read from the array
                 * outside of the specified range.</p>
                 *
                 * @param ch the characters from the XML document
                 * @param start the start position in the array
                 * @param length the number of characters to read from the array
                 * @throws org.xml.sax.SAXException any SAX exception, possibly
                 *            wrapping another exception
                 * @see #characters</member>
        <member name="M:org.xml.sax.ContentHandler.processingInstruction(System.String,System.String)">
                 * Receive notification of a processing instruction.
                 *
                 * <p>The Parser will invoke this method once for each processing
                 * instruction found: note that processing instructions may occur
                 * before or after the main document element.</p>
                 *
                 * <p>A SAX parser must never report an XML declaration (XML 1.0,
                 * section 2.8) or a text declaration (XML 1.0, section 4.3.1)
                 * using this method.</p>
                 *
                 * <p>Like {@link #characters characters()}, processing instruction
                 * data may have characters that need more than one <code>char</code>
                 * value. </p>
                 *
                 * @param target the processing instruction target
                 * @param data the processing instruction data, or null if
                 *        none was supplied.  The data does not include any
                 *        whitespace separating it from the target
                 * @throws org.xml.sax.SAXException any SAX exception, possibly
                 *            wrapping another exception</member>
        <member name="M:org.xml.sax.ContentHandler.skippedEntity(System.String)">
                 * Receive notification of a skipped entity.
                 * This is not called for entity references within markup constructs
                 * such as element start tags or markup declarations.  (The XML
                 * recommendation requires reporting skipped external entities.
                 * SAX also reports internal entity expansion/non-expansion, except
                 * within markup constructs.)
                 *
                 * <p>The Parser will invoke this method each time the entity is
                 * skipped.  Non-validating processors may skip entities if they
                 * have not seen the declarations (because, for example, the
                 * entity was declared in an external DTD subset).  All processors
                 * may skip external entities, depending on the values of the
                 * <code>http://xml.org/sax/features/external-general-entities</code>
                 * and the
                 * <code>http://xml.org/sax/features/external-parameter-entities</code>
                 * properties.</p>
                 *
                 * @param name the name of the skipped entity.  If it is a
                 *        parameter entity, the name will begin with '%', and if
                 *        it is the external DTD subset, it will be the string
                 *        "[dtd]"
                 * @throws org.xml.sax.SAXException any SAX exception, possibly
                 *            wrapping another exception</member>
        <member name="T:org.xml.sax.DocumentHandler">
             * Receive notification of general document events.
             *
             * <blockquote>
             * <em>This module, both source code and documentation, is in the
             * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>
             * See <a href="http://www.saxproject.org">http://www.saxproject.org</a>
             * for further information.
             * </blockquote>
             *
             * <p>This was the main event-handling interface for SAX1; in
             * SAX2, it has been replaced by {@link org.xml.sax.ContentHandler
             * ContentHandler}, which provides Namespace support and reporting
             * of skipped entities.  This interface is included in SAX2 only
             * to support legacy SAX1 applications.</p>
             *
             * <p>The order of events in this interface is very important, and
             * mirrors the order of information in the document itself.  For
             * example, all of an element's content (character data, processing
             * instructions, and/or subelements) will appear, in order, between
             * the startElement event and the corresponding endElement event.</p>
             *
             * <p>Application writers who do not want to implement the entire
             * interface can derive a class from HandlerBase, which implements
             * the default functionality; parser writers can instantiate
             * HandlerBase to obtain a default handler.  The application can find
             * the location of any document event using the Locator interface
             * supplied by the Parser through the setDocumentLocator method.</p>
             *
             * @deprecated This interface has been replaced by the SAX2
             *             {@link org.xml.sax.ContentHandler ContentHandler}
             *             interface, which includes Namespace support.
             * @since SAX 1.0
             * @author David Megginson
             * @version 2.0.1 (sax2r2)
             * @see org.xml.sax.Parser#setDocumentHandler
             * @see org.xml.sax.Locator
             * @see org.xml.sax.HandlerBase</member>
        <member name="M:org.xml.sax.DocumentHandler.setDocumentLocator(org.xml.sax.Locator)">
                 * Receive an object for locating the origin of SAX document events.
                 *
                 * <p>SAX parsers are strongly encouraged (though not absolutely
                 * required) to supply a locator: if it does so, it must supply
                 * the locator to the application by invoking this method before
                 * invoking any of the other methods in the DocumentHandler
                 * interface.</p>
                 *
                 * <p>The locator allows the application to determine the end
                 * position of any document-related event, even if the parser is
                 * not reporting an error.  Typically, the application will
                 * use this information for reporting its own errors (such as
                 * character content that does not match an application's
                 * business rules).  The information returned by the locator
                 * is probably not sufficient for use with a search engine.</p>
                 *
                 * <p>Note that the locator will return correct information only
                 * during the invocation of the events in this interface.  The
                 * application should not attempt to use it at any other time.</p>
                 *
                 * @param locator An object that can return the location of
                 *                any SAX document event.
                 * @see org.xml.sax.Locator</member>
        <member name="M:org.xml.sax.DocumentHandler.startDocument">
                 * Receive notification of the beginning of a document.
                 *
                 * <p>The SAX parser will invoke this method only once, before any
                 * other methods in this interface or in DTDHandler (except for
                 * setDocumentLocator).</p>
                 *
                 * @exception org.xml.sax.SAXException Any SAX exception, possibly
                 *            wrapping another exception.</member>
        <member name="M:org.xml.sax.DocumentHandler.endDocument">
                 * Receive notification of the end of a document.
                 *
                 * <p>The SAX parser will invoke this method only once, and it will
                 * be the last method invoked during the parse.  The parser shall
                 * not invoke this method until it has either abandoned parsing
                 * (because of an unrecoverable error) or reached the end of
                 * input.</p>
                 *
                 * @exception org.xml.sax.SAXException Any SAX exception, possibly
                 *            wrapping another exception.</member>
        <member name="M:org.xml.sax.DocumentHandler.startElement(System.String,org.xml.sax.AttributeList)">
                 * Receive notification of the beginning of an element.
                 *
                 * <p>The Parser will invoke this method at the beginning of every
                 * element in the XML document; there will be a corresponding
                 * endElement() event for every startElement() event (even when the
                 * element is empty). All of the element's content will be
                 * reported, in order, before the corresponding endElement()
                 * event.</p>
                 *
                 * <p>If the element name has a namespace prefix, the prefix will
                 * still be attached.  Note that the attribute list provided will
                 * contain only attributes with explicit values (specified or
                 * defaulted): #IMPLIED attributes will be omitted.</p>
                 *
                 * @param name The element type name.
                 * @param atts The attributes attached to the element, if any.
                 * @exception org.xml.sax.SAXException Any SAX exception, possibly
                 *            wrapping another exception.
                 * @see #endElement
                 * @see org.xml.sax.AttributeList</member>
        <member name="M:org.xml.sax.DocumentHandler.endElement(System.String)">
                 * Receive notification of the end of an element.
                 *
                 * <p>The SAX parser will invoke this method at the end of every
                 * element in the XML document; there will be a corresponding
                 * startElement() event for every endElement() event (even when the
                 * element is empty).</p>
                 *
                 * <p>If the element name has a namespace prefix, the prefix will
                 * still be attached to the name.</p>
                 *
                 * @param name The element type name
                 * @exception org.xml.sax.SAXException Any SAX exception, possibly
                 *            wrapping another exception.</member>
        <member name="M:org.xml.sax.DocumentHandler.characters(System.Char[],System.Int32,System.Int32)">
                 * Receive notification of character data.
                 *
                 * <p>The Parser will call this method to report each chunk of
                 * character data.  SAX parsers may return all contiguous character
                 * data in a single chunk, or they may split it into several
                 * chunks; however, all of the characters in any single event
                 * must come from the same external entity, so that the Locator
                 * provides useful information.</p>
                 *
                 * <p>The application must not attempt to read from the array
                 * outside of the specified range.</p>
                 *
                 * <p>Note that some parsers will report whitespace using the
                 * ignorableWhitespace() method rather than this one (validating
                 * parsers must do so).</p>
                 *
                 * @param ch The characters from the XML document.
                 * @param start The start position in the array.
                 * @param length The number of characters to read from the array.
                 * @exception org.xml.sax.SAXException Any SAX exception, possibly
                 *            wrapping another exception.
                 * @see #ignorableWhitespace
                 * @see org.xml.sax.Locator</member>
        <member name="M:org.xml.sax.DocumentHandler.ignorableWhitespace(System.Char[],System.Int32,System.Int32)">
                 * Receive notification of ignorable whitespace in element content.
                 *
                 * <p>Validating Parsers must use this method to report each chunk
                 * of ignorable whitespace (see the W3C XML 1.0 recommendation,
                 * section 2.10): non-validating parsers may also use this method
                 * if they are capable of parsing and using content models.</p>
                 *
                 * <p>SAX parsers may return all contiguous whitespace in a single
                 * chunk, or they may split it into several chunks; however, all of
                 * the characters in any single event must come from the same
                 * external entity, so that the Locator provides useful
                 * information.</p>
                 *
                 * <p>The application must not attempt to read from the array
                 * outside of the specified range.</p>
                 *
                 * @param ch The characters from the XML document.
                 * @param start The start position in the array.
                 * @param length The number of characters to read from the array.
                 * @exception org.xml.sax.SAXException Any SAX exception, possibly
                 *            wrapping another exception.
                 * @see #characters</member>
        <member name="M:org.xml.sax.DocumentHandler.processingInstruction(System.String,System.String)">
                 * Receive notification of a processing instruction.
                 *
                 * <p>The Parser will invoke this method once for each processing
                 * instruction found: note that processing instructions may occur
                 * before or after the main document element.</p>
                 *
                 * <p>A SAX parser should never report an XML declaration (XML 1.0,
                 * section 2.8) or a text declaration (XML 1.0, section 4.3.1)
                 * using this method.</p>
                 *
                 * @param target The processing instruction target.
                 * @param data The processing instruction data, or null if
                 *        none was supplied.
                 * @exception org.xml.sax.SAXException Any SAX exception, possibly
                 *            wrapping another exception.</member>
        <member name="T:org.xml.sax.DTDHandler">
                 * Receive notification of basic DTD-related events.
                 *
                 * <blockquote>
                 * <em>This module, both source code and documentation, is in the
                 * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>
                 * See <a href="http://www.saxproject.org">http://www.saxproject.org</a>
                 * for further information.
                 * </blockquote>
                 *
                 * <p>If a SAX application needs information about notations and
                 * unparsed entities, then the application implements this
                 * interface and registers an instance with the SAX parser using
                 * the parser's setDTDHandler method.  The parser uses the
                 * instance to report notation and unparsed entity declarations to
                 * the application.</p>
                 *
                 * <p>Note that this interface includes only those DTD events that
                 * the XML recommendation <em>requires</em> processors to report:
                 * notation and unparsed entity declarations.</p>
                 *
                 * <p>The SAX parser may report these events in any order, regardless
                 * of the order in which the notations and unparsed entities were
                 * declared; however, all DTD events must be reported after the
                 * document handler's startDocument event, and before the first
                 * startElement event.
                 * (If the {@link org.xml.sax.ext.LexicalHandler LexicalHandler} is
                 * used, these events must also be reported before the endDTD event.)
                 * </p>
                 *
                 * <p>It is up to the application to store the information for
                 * future use (perhaps in a hash table or object tree).
                 * If the application encounters attributes of type "NOTATION",
                 * "ENTITY", or "ENTITIES", it can use the information that it
                 * obtained through this interface to find the entity and/or
                 * notation corresponding with the attribute value.</p>
                 *
                 * @since SAX 1.0
                 * @author David Megginson
                 * @version 2.0.1 (sax2r2)
                 * @see org.xml.sax.XMLReader#setDTDHandler</member>
        <member name="M:org.xml.sax.DTDHandler.notationDecl(System.String,System.String,System.String)">
                     * Receive notification of a notation declaration event.
                     *
                     * <p>It is up to the application to record the notation for later
                     * reference, if necessary;
                     * notations may appear as attribute values and in unparsed entity
                     * declarations, and are sometime used with processing instruction
                     * target names.</p>
                     *
                     * <p>At least one of publicId and systemId must be non-null.
                     * If a system identifier is present, and it is a URL, the SAX
                     * parser must resolve it fully before passing it to the
                     * application through this event.</p>
                     *
                     * <p>There is no guarantee that the notation declaration will be
                     * reported before any unparsed entities that use it.</p>
                     *
                     * @param name The notation name.
                     * @param publicId The notation's public identifier, or null if
                     *        none was given.
                     * @param systemId The notation's system identifier, or null if
                     *        none was given.
                     * @exception org.xml.sax.SAXException Any SAX exception, possibly
                     *            wrapping another exception.
                     * @see #unparsedEntityDecl
                     * @see org.xml.sax.Attributes</member>
        <member name="M:org.xml.sax.DTDHandler.unparsedEntityDecl(System.String,System.String,System.String,System.String)">
                     * Receive notification of an unparsed entity declaration event.
                     *
                     * <p>Note that the notation name corresponds to a notation
                     * reported by the {@link #notationDecl notationDecl} event.
                     * It is up to the application to record the entity for later
                     * reference, if necessary;
                     * unparsed entities may appear as attribute values.
                     * </p>
                     *
                     * <p>If the system identifier is a URL, the parser must resolve it
                     * fully before passing it to the application.</p>
                     *
                     * @exception org.xml.sax.SAXException Any SAX exception, possibly
                     *            wrapping another exception.
                     * @param name The unparsed entity's name.
                     * @param publicId The entity's public identifier, or null if none
                     *        was given.
                     * @param systemId The entity's system identifier.
                     * @param notationName The name of the associated notation.
                     * @see #notationDecl
                     * @see org.xml.sax.Attributes</member>
        <member name="T:org.xml.sax.EntityResolver">
                 * Basic interface for resolving entities.
                 *
                 * <blockquote>
                 * <em>This module, both source code and documentation, is in the
                 * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>
                 * See <a href="http://www.saxproject.org">http://www.saxproject.org</a>
                 * for further information.
                 * </blockquote>
                 *
                 * <p>If a SAX application needs to implement customized handling
                 * for external entities, it must implement this interface and
                 * register an instance with the SAX driver using the
                 * {@link org.xml.sax.XMLReader#setEntityResolver setEntityResolver}
                 * method.</p>
                 *
                 * <p>The XML reader will then allow the application to intercept any
                 * external entities (including the external DTD subset and external
                 * parameter entities, if any) before including them.</p>
                 *
                 * <p>Many SAX applications will not need to implement this interface,
                 * but it will be especially useful for applications that build
                 * XML documents from databases or other specialised input sources,
                 * or for applications that use URI types other than URLs.</p>
                 *
                 * <p>The following resolver would provide the application
                 * with a special character stream for the entity with the system
                 * identifier "http://www.myhost.com/today":</p>
                 *
                 * <pre>
                 * import org.xml.sax.EntityResolver;
                 * import org.xml.sax.InputSource;
                 *
                 * public class MyResolver implements EntityResolver {
                 *   public InputSource resolveEntity (String publicId, String systemId)
                 *   {
                 *     if (systemId.equals("http://www.myhost.com/today")) {
                 *              // return a special input source
                 *       MyReader reader = new MyReader();
                 *       return new InputSource(reader);
                 *     } else {
                 *              // use the default behaviour
                 *       return null;
                 *     }
                 *   }
                 * }
                 * </pre>
                 *
                 * <p>The application can also use this interface to redirect system
                 * identifiers to local URIs or to look up replacements in a catalog
                 * (possibly by using the public identifier).</p>
                 *
                 * @since SAX 1.0
                 * @author David Megginson
                 * @version 2.0.1 (sax2r2)
                 * @see org.xml.sax.XMLReader#setEntityResolver
                 * @see org.xml.sax.InputSource</member>
        <member name="M:org.xml.sax.EntityResolver.resolveEntity(System.String,System.String)">
                     * Allow the application to resolve external entities.
                     *
                     * <p>The parser will call this method before opening any external
                     * entity except the top-level document entity.  Such entities include
                     * the external DTD subset and external parameter entities referenced
                     * within the DTD (in either case, only if the parser reads external
                     * parameter entities), and external general entities referenced
                     * within the document element (if the parser reads external general
                     * entities).  The application may request that the parser locate
                     * the entity itself, that it use an alternative URI, or that it
                     * use data provided by the application (as a character or byte
                     * input stream).</p>
                     *
                     * <p>Application writers can use this method to redirect external
                     * system identifiers to secure and/or local URIs, to look up
                     * public identifiers in a catalogue, or to read an entity from a
                     * database or other input source (including, for example, a dialog
                     * box).  Neither XML nor SAX specifies a preferred policy for using
                     * public or system IDs to resolve resources.  However, SAX specifies
                     * how to interpret any InputSource returned by this method, and that
                     * if none is returned, then the system ID will be dereferenced as
                     * a URL.  </p>
                     *
                     * <p>If the system identifier is a URL, the SAX parser must
                     * resolve it fully before reporting it to the application.</p>
                     *
                     * @param publicId The public identifier of the external entity
                     *        being referenced, or null if none was supplied.
                     * @param systemId The system identifier of the external entity
                     *        being referenced.
                     * @return An InputSource object describing the new input source,
                     *         or null to request that the parser open a regular
                     *         URI connection to the system identifier.
                     * @exception org.xml.sax.SAXException Any SAX exception, possibly
                     *            wrapping another exception.
                     * @exception java.io.IOException A Java-specific IO exception,
                     *            possibly the result of creating a new InputStream
                     *            or Reader for the InputSource.
                     * @see org.xml.sax.InputSource</member>
        <member name="T:org.xml.sax.ErrorHandler">
                 * Basic interface for SAX error handlers.
                 *
                 * <blockquote>
                 * <em>This module, both source code and documentation, is in the
                 * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>
                 * See <a href="http://www.saxproject.org">http://www.saxproject.org</a>
                 * for further information.
                 * </blockquote>
                 *
                 * <p>If a SAX application needs to implement customized error
                 * handling, it must implement this interface and then register an
                 * instance with the XML reader using the
                 * {@link org.xml.sax.XMLReader#setErrorHandler setErrorHandler}
                 * method.  The parser will then report all errors and warnings
                 * through this interface.</p>
                 *
                 * <p><strong>WARNING:</strong> If an application does <em>not</em>
                 * register an ErrorHandler, XML parsing errors will go unreported,
                 * except that <em>SAXParseException</em>s will be thrown for fatal errors.
                 * In order to detect validity errors, an ErrorHandler that does something
                 * with {@link #error error()} calls must be registered.</p>
                 *
                 * <p>For XML processing errors, a SAX driver must use this interface
                 * in preference to throwing an exception: it is up to the application
                 * to decide whether to throw an exception for different types of
                 * errors and warnings.  Note, however, that there is no requirement that
                 * the parser continue to report additional errors after a call to
                 * {@link #fatalError fatalError}.  In other words, a SAX driver class
                 * may throw an exception after reporting any fatalError.
                 * Also parsers may throw appropriate exceptions for non-XML errors.
                 * For example, {@link XMLReader#parse XMLReader.parse()} would throw
                 * an IOException for errors accessing entities or the document.</p>
                 *
                 * @since SAX 1.0
                 * @author David Megginson
                 * @version 2.0.1+ (sax2r3pre1)
                 * @see org.xml.sax.XMLReader#setErrorHandler
                 * @see org.xml.sax.SAXParseException</member>
        <member name="M:org.xml.sax.ErrorHandler.warning(org.xml.sax.SAXParseException)">
                     * Receive notification of a warning.
                     *
                     * <p>SAX parsers will use this method to report conditions that
                     * are not errors or fatal errors as defined by the XML
                     * recommendation.  The default behaviour is to take no
                     * action.</p>
                     *
                     * <p>The SAX parser must continue to provide normal parsing events
                     * after invoking this method: it should still be possible for the
                     * application to process the document through to the end.</p>
                     *
                     * <p>Filters may use this method to report other, non-XML warnings
                     * as well.</p>
                     *
                     * @param exception The warning information encapsulated in a
                     *                  SAX parse exception.
                     * @exception org.xml.sax.SAXException Any SAX exception, possibly
                     *            wrapping another exception.
                     * @see org.xml.sax.SAXParseException</member>
        <member name="M:org.xml.sax.ErrorHandler.error(org.xml.sax.SAXParseException)">
                     * Receive notification of a recoverable error.
                     *
                     * <p>This corresponds to the definition of "error" in section 1.2
                     * of the W3C XML 1.0 Recommendation.  For example, a validating
                     * parser would use this callback to report the violation of a
                     * validity constraint.  The default behaviour is to take no
                     * action.</p>
                     *
                     * <p>The SAX parser must continue to provide normal parsing
                     * events after invoking this method: it should still be possible
                     * for the application to process the document through to the end.
                     * If the application cannot do so, then the parser should report
                     * a fatal error even if the XML recommendation does not require
                     * it to do so.</p>
                     *
                     * <p>Filters may use this method to report other, non-XML errors
                     * as well.</p>
                     *
                     * @param exception The error information encapsulated in a
                     *                  SAX parse exception.
                     * @exception org.xml.sax.SAXException Any SAX exception, possibly
                     *            wrapping another exception.
                     * @see org.xml.sax.SAXParseException</member>
        <member name="M:org.xml.sax.ErrorHandler.fatalError(org.xml.sax.SAXParseException)">
                     * Receive notification of a non-recoverable error.
                     *
                     * <p><strong>There is an apparent contradiction between the
                     * documentation for this method and the documentation for {@link
                     * org.xml.sax.ContentHandler#endDocument}.  Until this ambiguity
                     * is resolved in a future major release, clients should make no
                     * assumptions about whether endDocument() will or will not be
                     * invoked when the parser has reported a fatalError() or thrown
                     * an exception.</strong></p>
                     *
                     * <p>This corresponds to the definition of "fatal error" in
                     * section 1.2 of the W3C XML 1.0 Recommendation.  For example, a
                     * parser would use this callback to report the violation of a
                     * well-formedness constraint.</p>
                     *
                     * <p>The application must assume that the document is unusable
                     * after the parser has invoked this method, and should continue
                     * (if at all) only for the sake of collecting additional error
                     * messages: in fact, SAX parsers are free to stop reporting any
                     * other events once this method has been invoked.</p>
                     *
                     * @param exception The error information encapsulated in a
                     *                  SAX parse exception.
                     * @exception org.xml.sax.SAXException Any SAX exception, possibly
                     *            wrapping another exception.
                     * @see org.xml.sax.SAXParseException</member>
        <member name="T:org.xml.sax.HandlerBase">
                 * Default base class for handlers.
                 *
                 * <blockquote>
                 * <em>This module, both source code and documentation, is in the
                 * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>
                 * See <a href="http://www.saxproject.org">http://www.saxproject.org</a>
                 * for further information.
                 * </blockquote>
                 *
                 * <p>This class implements the default behaviour for four SAX1
                 * interfaces: EntityResolver, DTDHandler, DocumentHandler,
                 * and ErrorHandler.  It is now obsolete, but is included in SAX2 to
                 * support legacy SAX1 applications.  SAX2 applications should use
                 * the {@link org.xml.sax.helpers.DefaultHandler DefaultHandler}
                 * class instead.</p>
                 *
                 * <p>Application writers can extend this class when they need to
                 * implement only part of an interface; parser writers can
                 * instantiate this class to provide default handlers when the
                 * application has not supplied its own.</p>
                 *
                 * <p>Note that the use of this class is optional.</p>
                 *
                 * @deprecated This class works with the deprecated
                 *             {@link org.xml.sax.DocumentHandler DocumentHandler}
                 *             interface.  It has been replaced by the SAX2
                 *             {@link org.xml.sax.helpers.DefaultHandler DefaultHandler}
                 *             class.
                 * @since SAX 1.0
                 * @author David Megginson
                 * @version 2.0.1 (sax2r2)
                 * @see org.xml.sax.EntityResolver
                 * @see org.xml.sax.DTDHandler
                 * @see org.xml.sax.DocumentHandler
                 * @see org.xml.sax.ErrorHandler</member>
        <member name="M:org.xml.sax.HandlerBase.resolveEntity(System.String,System.String)">
                     * Resolve an external entity.
                     *
                     * <p>Always return null, so that the parser will use the system
                     * identifier provided in the XML document.  This method implements
                     * the SAX default behaviour: application writers can override it
                     * in a subclass to do special translations such as catalog lookups
                     * or URI redirection.</p>
                     *
                     * @param publicId The public identifer, or null if none is
                     *                 available.
                     * @param systemId The system identifier provided in the XML
                     *                 document.
                     * @return The new input source, or null to require the
                     *         default behaviour.
                     * @exception org.xml.sax.SAXException Any SAX exception, possibly
                     *            wrapping another exception.
                     * @see org.xml.sax.EntityResolver#resolveEntity</member>
        <member name="M:org.xml.sax.HandlerBase.notationDecl(System.String,System.String,System.String)">
                     * Receive notification of a notation declaration.
                     *
                     * <p>By default, do nothing.  Application writers may override this
                     * method in a subclass if they wish to keep track of the notations
                     * declared in a document.</p>
                     *
                     * @param name The notation name.
                     * @param publicId The notation public identifier, or null if not
                     *                 available.
                     * @param systemId The notation system identifier.
                     * @see org.xml.sax.DTDHandler#notationDecl</member>
        <member name="M:org.xml.sax.HandlerBase.unparsedEntityDecl(System.String,System.String,System.String,System.String)">
                     * Receive notification of an unparsed entity declaration.
                     *
                     * <p>By default, do nothing.  Application writers may override this
                     * method in a subclass to keep track of the unparsed entities
                     * declared in a document.</p>
                     *
                     * @param name The entity name.
                     * @param publicId The entity public identifier, or null if not
                     *                 available.
                     * @param systemId The entity system identifier.
                     * @param notationName The name of the associated notation.
                     * @see org.xml.sax.DTDHandler#unparsedEntityDecl</member>
        <member name="M:org.xml.sax.HandlerBase.setDocumentLocator(org.xml.sax.Locator)">
                     * Receive a Locator object for document events.
                     *
                     * <p>By default, do nothing.  Application writers may override this
                     * method in a subclass if they wish to store the locator for use
                     * with other document events.</p>
                     *
                     * @param locator A locator for all SAX document events.
                     * @see org.xml.sax.DocumentHandler#setDocumentLocator
                     * @see org.xml.sax.Locator</member>
        <member name="M:org.xml.sax.HandlerBase.startDocument">
                     * Receive notification of the beginning of the document.
                     *
                     * <p>By default, do nothing.  Application writers may override this
                     * method in a subclass to take specific actions at the beginning
                     * of a document (such as allocating the root node of a tree or
                     * creating an output file).</p>
                     *
                     * @exception org.xml.sax.SAXException Any SAX exception, possibly
                     *            wrapping another exception.
                     * @see org.xml.sax.DocumentHandler#startDocument</member>
        <member name="M:org.xml.sax.HandlerBase.endDocument">
                     * Receive notification of the end of the document.
                     *
                     * <p>By default, do nothing.  Application writers may override this
                     * method in a subclass to take specific actions at the beginning
                     * of a document (such as finalising a tree or closing an output
                     * file).</p>
                     *
                     * @exception org.xml.sax.SAXException Any SAX exception, possibly
                     *            wrapping another exception.
                     * @see org.xml.sax.DocumentHandler#endDocument</member>
        <member name="M:org.xml.sax.HandlerBase.startElement(System.String,org.xml.sax.AttributeList)">
                     * Receive notification of the start of an element.
                     *
                     * <p>By default, do nothing.  Application writers may override this
                     * method in a subclass to take specific actions at the start of
                     * each element (such as allocating a new tree node or writing
                     * output to a file).</p>
                     *
                     * @param name The element type name.
                     * @param attributes The specified or defaulted attributes.
                     * @exception org.xml.sax.SAXException Any SAX exception, possibly
                     *            wrapping another exception.
                     * @see org.xml.sax.DocumentHandler#startElement</member>
        <member name="M:org.xml.sax.HandlerBase.endElement(System.String)">
                     * Receive notification of the end of an element.
                     *
                     * <p>By default, do nothing.  Application writers may override this
                     * method in a subclass to take specific actions at the end of
                     * each element (such as finalising a tree node or writing
                     * output to a file).</p>
                     *
                     * @param name the element name
                     * @exception org.xml.sax.SAXException Any SAX exception, possibly
                     *            wrapping another exception.
                     * @see org.xml.sax.DocumentHandler#endElement</member>
        <member name="M:org.xml.sax.HandlerBase.characters(System.Char[],System.Int32,System.Int32)">
                     * Receive notification of character data inside an element.
                     *
                     * <p>By default, do nothing.  Application writers may override this
                     * method to take specific actions for each chunk of character data
                     * (such as adding the data to a node or buffer, or printing it to
                     * a file).</p>
                     *
                     * @param ch The characters.
                     * @param start The start position in the character array.
                     * @param length The number of characters to use from the
                     *               character array.
                     * @exception org.xml.sax.SAXException Any SAX exception, possibly
                     *            wrapping another exception.
                     * @see org.xml.sax.DocumentHandler#characters</member>
        <member name="M:org.xml.sax.HandlerBase.ignorableWhitespace(System.Char[],System.Int32,System.Int32)">
                     * Receive notification of ignorable whitespace in element content.
                     *
                     * <p>By default, do nothing.  Application writers may override this
                     * method to take specific actions for each chunk of ignorable
                     * whitespace (such as adding data to a node or buffer, or printing
                     * it to a file).</p>
                     *
                     * @param ch The whitespace characters.
                     * @param start The start position in the character array.
                     * @param length The number of characters to use from the
                     *               character array.
                     * @exception org.xml.sax.SAXException Any SAX exception, possibly
                     *            wrapping another exception.
                     * @see org.xml.sax.DocumentHandler#ignorableWhitespace</member>
        <member name="M:org.xml.sax.HandlerBase.processingInstruction(System.String,System.String)">
                     * Receive notification of a processing instruction.
                     *
                     * <p>By default, do nothing.  Application writers may override this
                     * method in a subclass to take specific actions for each
                     * processing instruction, such as setting status variables or
                     * invoking other methods.</p>
                     *
                     * @param target The processing instruction target.
                     * @param data The processing instruction data, or null if
                     *             none is supplied.
                     * @exception org.xml.sax.SAXException Any SAX exception, possibly
                     *            wrapping another exception.
                     * @see org.xml.sax.DocumentHandler#processingInstruction</member>
        <member name="M:org.xml.sax.HandlerBase.warning(org.xml.sax.SAXParseException)">
                     * Receive notification of a parser warning.
                     *
                     * <p>The default implementation does nothing.  Application writers
                     * may override this method in a subclass to take specific actions
                     * for each warning, such as inserting the message in a log file or
                     * printing it to the console.</p>
                     *
                     * @param e The warning information encoded as an exception.
                     * @exception org.xml.sax.SAXException Any SAX exception, possibly
                     *            wrapping another exception.
                     * @see org.xml.sax.ErrorHandler#warning
                     * @see org.xml.sax.SAXParseException</member>
        <member name="M:org.xml.sax.HandlerBase.error(org.xml.sax.SAXParseException)">
                     * Receive notification of a recoverable parser error.
                     *
                     * <p>The default implementation does nothing.  Application writers
                     * may override this method in a subclass to take specific actions
                     * for each error, such as inserting the message in a log file or
                     * printing it to the console.</p>
                     *
                     * @param e The warning information encoded as an exception.
                     * @exception org.xml.sax.SAXException Any SAX exception, possibly
                     *            wrapping another exception.
                     * @see org.xml.sax.ErrorHandler#warning
                     * @see org.xml.sax.SAXParseException</member>
        <member name="M:org.xml.sax.HandlerBase.fatalError(org.xml.sax.SAXParseException)">
                     * Report a fatal XML parsing error.
                     *
                     * <p>The default implementation throws a SAXParseException.
                     * Application writers may override this method in a subclass if
                     * they need to take specific actions for each fatal error (such as
                     * collecting all of the errors into a single report): in any case,
                     * the application must stop all regular processing when this
                     * method is invoked, since the document is no longer reliable, and
                     * the parser may no longer report parsing events.</p>
                     *
                     * @param e The error information encoded as an exception.
                     * @exception org.xml.sax.SAXException Any SAX exception, possibly
                     *            wrapping another exception.
                     * @see org.xml.sax.ErrorHandler#fatalError
                     * @see org.xml.sax.SAXParseException</member>
        <member name="T:org.xml.sax.Locator">
                 * Interface for associating a SAX event with a document location.
                 *
                 * <blockquote>
                 * <em>This module, both source code and documentation, is in the
                 * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>
                 * See <a href="http://www.saxproject.org">http://www.saxproject.org</a>
                 * for further information.
                 * </blockquote>
                 *
                 * <p>If a SAX parser provides location information to the SAX
                 * application, it does so by implementing this interface and then
                 * passing an instance to the application using the content
                 * handler's {@link org.xml.sax.ContentHandler#setDocumentLocator
                 * setDocumentLocator} method.  The application can use the
                 * object to obtain the location of any other SAX event
                 * in the XML source document.</p>
                 *
                 * <p>Note that the results returned by the object will be valid only
                 * during the scope of each callback method: the application
                 * will receive unpredictable results if it attempts to use the
                 * locator at any other time, or after parsing completes.</p>
                 *
                 * <p>SAX parsers are not required to supply a locator, but they are
                 * very strongly encouraged to do so.  If the parser supplies a
                 * locator, it must do so before reporting any other document events.
                 * If no locator has been set by the time the application receives
                 * the {@link org.xml.sax.ContentHandler#startDocument startDocument}
                 * event, the application should assume that a locator is not
                 * available.</p>
                 *
                 * @since SAX 1.0
                 * @author David Megginson
                 * @version 2.0.1 (sax2r2)
                 * @see org.xml.sax.ContentHandler#setDocumentLocator</member>
        <member name="M:org.xml.sax.Locator.getPublicId">
                     * Return the public identifier for the current document event.
                     *
                     * <p>The return value is the public identifier of the document
                     * entity or of the external parsed entity in which the markup
                     * triggering the event appears.</p>
                     *
                     * @return A string containing the public identifier, or
                     *         null if none is available.
                     * @see #getSystemId</member>
        <member name="M:org.xml.sax.Locator.getSystemId">
                     * Return the system identifier for the current document event.
                     *
                     * <p>The return value is the system identifier of the document
                     * entity or of the external parsed entity in which the markup
                     * triggering the event appears.</p>
                     *
                     * <p>If the system identifier is a URL, the parser must resolve it
                     * fully before passing it to the application.  For example, a file
                     * name must always be provided as a <em>file:...</em> URL, and other
                     * kinds of relative URI are also resolved against their bases.</p>
                     *
                     * @return A string containing the system identifier, or null
                     *         if none is available.
                     * @see #getPublicId</member>
        <member name="M:org.xml.sax.Locator.getLineNumber">
                     * Return the line number where the current document event ends.
                     * Lines are delimited by line ends, which are defined in
                     * the XML specification.
                     *
                     * <p><strong>Warning:</strong> The return value from the method
                     * is intended only as an approximation for the sake of diagnostics;
                     * it is not intended to provide sufficient information
                     * to edit the character content of the original XML document.
                     * In some cases, these "line" numbers match what would be displayed
                     * as columns, and in others they may not match the source text
                     * due to internal entity expansion.  </p>
                     *
                     * <p>The return value is an approximation of the line number
                     * in the document entity or external parsed entity where the
                     * markup triggering the event appears.</p>
                     *
                     * <p>If possible, the SAX driver should provide the line position
                     * of the first character after the text associated with the document
                     * event.  The first line is line 1.</p>
                     *
                     * @return The line number, or -1 if none is available.
                     * @see #getColumnNumber</member>
        <member name="M:org.xml.sax.Locator.getColumnNumber">
                     * Return the column number where the current document event ends.
                     * This is one-based number of Java <code>char</code> values since
                     * the last line end.
                     *
                     * <p><strong>Warning:</strong> The return value from the method
                     * is intended only as an approximation for the sake of diagnostics;
                     * it is not intended to provide sufficient information
                     * to edit the character content of the original XML document.
                     * For example, when lines contain combining character sequences, wide
                     * characters, surrogate pairs, or bi-directional text, the value may
                     * not correspond to the column in a text editor's display. </p>
                     *
                     * <p>The return value is an approximation of the column number
                     * in the document entity or external parsed entity where the
                     * markup triggering the event appears.</p>
                     *
                     * <p>If possible, the SAX driver should provide the line position
                     * of the first character after the text associated with the document
                     * event.  The first column in each line is column 1.</p>
                     *
                     * @return The column number, or -1 if none is available.
                     * @see #getLineNumber</member>
        <member name="T:org.xml.sax.Parser">
                 * Basic interface for SAX (Simple API for XML) parsers.
                 *
                 * <blockquote>
                 * <em>This module, both source code and documentation, is in the
                 * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>
                 * See <a href="http://www.saxproject.org">http://www.saxproject.org</a>
                 * for further information.
                 * </blockquote>
                 *
                 * <p>This was the main event supplier interface for SAX1; it has
                 * been replaced in SAX2 by {@link org.xml.sax.XMLReader XMLReader},
                 * which includes Namespace support and sophisticated configurability
                 * and extensibility.</p>
                 *
                 * <p>All SAX1 parsers must implement this basic interface: it allows
                 * applications to register handlers for different types of events
                 * and to initiate a parse from a URI, or a character stream.</p>
                 *
                 * <p>All SAX1 parsers must also implement a zero-argument constructor
                 * (though other constructors are also allowed).</p>
                 *
                 * <p>SAX1 parsers are reusable but not re-entrant: the application
                 * may reuse a parser object (possibly with a different input source)
                 * once the first parse has completed successfully, but it may not
                 * invoke the parse() methods recursively within a parse.</p>
                 *
                 * @deprecated This interface has been replaced by the SAX2
                 *             {@link org.xml.sax.XMLReader XMLReader}
                 *             interface, which includes Namespace support.
                 * @since SAX 1.0
                 * @author David Megginson
                 * @version 2.0.1 (sax2r2)
                 * @see org.xml.sax.EntityResolver
                 * @see org.xml.sax.DTDHandler
                 * @see org.xml.sax.DocumentHandler
                 * @see org.xml.sax.ErrorHandler
                 * @see org.xml.sax.HandlerBase
                 * @see org.xml.sax.InputSource</member>
        <member name="M:org.xml.sax.Parser.setLocale(biz.ritter.javapi.util.Locale)">
                     * Allow an application to request a locale for errors and warnings.
                     *
                     * <p>SAX parsers are not required to provide localisation for errors
                     * and warnings; if they cannot support the requested locale,
                     * however, they must throw a SAX exception.  Applications may
                     * not request a locale change in the middle of a parse.</p>
                     *
                     * @param locale A Java Locale object.
                     * @exception org.xml.sax.SAXException Throws an exception
                     *            (using the previous or default locale) if the
                     *            requested locale is not supported.
                     * @see org.xml.sax.SAXException
                     * @see org.xml.sax.SAXParseException</member>
        <member name="M:org.xml.sax.Parser.setEntityResolver(org.xml.sax.EntityResolver)">
                     * Allow an application to register a custom entity resolver.
                     *
                     * <p>If the application does not register an entity resolver, the
                     * SAX parser will resolve system identifiers and open connections
                     * to entities itself (this is the default behaviour implemented in
                     * HandlerBase).</p>
                     *
                     * <p>Applications may register a new or different entity resolver
                     * in the middle of a parse, and the SAX parser must begin using
                     * the new resolver immediately.</p>
                     *
                     * @param resolver The object for resolving entities.
                     * @see EntityResolver
                     * @see HandlerBase</member>
        <member name="M:org.xml.sax.Parser.setDTDHandler(org.xml.sax.DTDHandler)">
                     * Allow an application to register a DTD event handler.
                     *
                     * <p>If the application does not register a DTD handler, all DTD
                     * events reported by the SAX parser will be silently
                     * ignored (this is the default behaviour implemented by
                     * HandlerBase).</p>
                     *
                     * <p>Applications may register a new or different
                     * handler in the middle of a parse, and the SAX parser must
                     * begin using the new handler immediately.</p>
                     *
                     * @param handler The DTD handler.
                     * @see DTDHandler
                     * @see HandlerBase</member>
        <member name="M:org.xml.sax.Parser.setDocumentHandler(org.xml.sax.DocumentHandler)">
                     * Allow an application to register a document event handler.
                     *
                     * <p>If the application does not register a document handler, all
                     * document events reported by the SAX parser will be silently
                     * ignored (this is the default behaviour implemented by
                     * HandlerBase).</p>
                     *
                     * <p>Applications may register a new or different handler in the
                     * middle of a parse, and the SAX parser must begin using the new
                     * handler immediately.</p>
                     *
                     * @param handler The document handler.
                     * @see DocumentHandler
                     * @see HandlerBase</member>
        <member name="M:org.xml.sax.Parser.setErrorHandler(org.xml.sax.ErrorHandler)">
                     * Allow an application to register an error event handler.
                     *
                     * <p>If the application does not register an error event handler,
                     * all error events reported by the SAX parser will be silently
                     * ignored, except for fatalError, which will throw a SAXException
                     * (this is the default behaviour implemented by HandlerBase).</p>
                     *
                     * <p>Applications may register a new or different handler in the
                     * middle of a parse, and the SAX parser must begin using the new
                     * handler immediately.</p>
                     *
                     * @param handler The error handler.
                     * @see ErrorHandler
                     * @see SAXException
                     * @see HandlerBase</member>
        <member name="M:org.xml.sax.Parser.parse(org.xml.sax.InputSource)">
                     * Parse an XML document.
                     *
                     * <p>The application can use this method to instruct the SAX parser
                     * to begin parsing an XML document from any valid input
                     * source (a character stream, a byte stream, or a URI).</p>
                     *
                     * <p>Applications may not invoke this method while a parse is in
                     * progress (they should create a new Parser instead for each
                     * additional XML document).  Once a parse is complete, an
                     * application may reuse the same Parser object, possibly with a
                     * different input source.</p>
                     *
                     * @param source The input source for the top-level of the
                     *        XML document.
                     * @exception org.xml.sax.SAXException Any SAX exception, possibly
                     *            wrapping another exception.
                     * @exception java.io.IOException An IO exception from the parser,
                     *            possibly from a byte stream or character stream
                     *            supplied by the application.
                     * @see org.xml.sax.InputSource
                     * @see #parse(java.lang.String)
                     * @see #setEntityResolver
                     * @see #setDTDHandler
                     * @see #setDocumentHandler
                     * @see #setErrorHandler</member>
        <member name="M:org.xml.sax.Parser.parse(System.String)">
                     * Parse an XML document from a system identifier (URI).
                     *
                     * <p>This method is a shortcut for the common case of reading a
                     * document from a system identifier.  It is the exact
                     * equivalent of the following:</p>
                     *
                     * <pre>
                     * parse(new InputSource(systemId));
                     * </pre>
                     *
                     * <p>If the system identifier is a URL, it must be fully resolved
                     * by the application before it is passed to the parser.</p>
                     *
                     * @param systemId The system identifier (URI).
                     * @exception org.xml.sax.SAXException Any SAX exception, possibly
                     *            wrapping another exception.
                     * @exception java.io.IOException An IO exception from the parser,
                     *            possibly from a byte stream or character stream
                     *            supplied by the application.
                     * @see #parse(org.xml.sax.InputSource)</member>
        <member name="T:org.xml.sax.SAXException">
                 * Encapsulate a general SAX error or warning.
                 *
                 * <blockquote>
                 * <em>This module, both source code and documentation, is in the
                 * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>
                 * See <a href="http://www.saxproject.org">http://www.saxproject.org</a>
                 * for further information.
                 * </blockquote>
                 *
                 * <p />This class can contain basic error or warning information from
                 * either the XML parser or the application: a parser writer or
                 * application writer can subclass it to provide additional
                 * functionality.  SAX handlers may throw this exception or
                 * any exception subclassed from it.
                 *
                 * <p />If the application needs to pass through other types of
                 * exceptions, it must wrap those exceptions in a SAXException
                 * or an exception derived from a SAXException.
                 *
                 * <p />If the parser or application needs to include information about a
                 * specific location in an XML document, it should use the
                 * {@link org.xml.sax.SAXParseException SAXParseException} subclass.
                 *
                 * @since SAX 1.0
                 * @author David Megginson
                 * @version 2.0.1 (sax2r2)
                 * @see org.xml.sax.SAXParseException</member>
        <member name="M:org.xml.sax.SAXException.#ctor">
                     * Create a new SAXException.</member>
        <member name="M:org.xml.sax.SAXException.#ctor(System.String)">
                     * Create a new SAXException.
                     *
                     * @param message The error or warning message.</member>
        <member name="M:org.xml.sax.SAXException.#ctor(System.Exception)">
                     * Create a new SAXException wrapping an existing exception.
                     *
                     * <p />The existing exception will be embedded in the new
                     * one, and its message will become the default message for
                     * the SAXException.
                     *
                     * @param e The exception to be wrapped in a SAXException.</member>
        <member name="M:org.xml.sax.SAXException.#ctor(System.String,System.Exception)">
                     * Create a new SAXException from an existing exception.
                     *
                     * <p />The existing exception will be embedded in the new
                     * one, but the new exception will have its own message.
                     *
                     * @param message The detail message.
                     * @param e The exception to be wrapped in a SAXException.</member>
        <member name="M:org.xml.sax.SAXException.getMessage">
                     * Return a detail message for this exception.
                     *
                     * <p />If there is an embedded exception, and if the SAXException
                     * has no detail message of its own, this method will return
                     * the detail message from the embedded exception.
                     *
                     * @return The error or warning message.</member>
        <member name="M:org.xml.sax.SAXException.getException">
                     * Return the embedded exception, if any.
                     *
                     * @return The embedded exception, or null if there is none.</member>
        <member name="M:org.xml.sax.SAXException.ToString">
                     * Override toString to pick up any embedded exception.
                     *
                     * @return A string representation of this exception.</member>
        <member name="F:org.xml.sax.SAXException.exception">
                     * @serial The embedded exception if tunnelling, or null.</member>
        <member name="T:org.xml.sax.SAXNotRecognizedException">
                 * Exception class for an unrecognized identifier.
                 *
                 * <blockquote>
                 * <em>This module, both source code and documentation, is in the
                 * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>
                 * See <a href="http://www.saxproject.org">http://www.saxproject.org</a>
                 * for further information.
                 * </blockquote>
                 *
                 * <p>An XMLReader will throw this exception when it finds an
                 * unrecognized feature or property identifier; SAX applications and
                 * extensions may use this class for other, similar purposes.</p>
                 *
                 * @since SAX 2.0
                 * @author David Megginson
                 * @version 2.0.1 (sax2r2)
                 * @see org.xml.sax.SAXNotSupportedException</member>
        <member name="M:org.xml.sax.SAXNotRecognizedException.#ctor">
                     * Default constructor.</member>
        <member name="M:org.xml.sax.SAXNotRecognizedException.#ctor(System.String)">
                     * Construct a new exception with the given message.
                     *
                     * @param message The text message of the exception.</member>
        <member name="T:org.xml.sax.SAXNotSupportedException">
                 * Exception class for an unsupported operation.
                 *
                 * <blockquote>
                 * <em>This module, both source code and documentation, is in the
                 * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>
                 * See <a href="http://www.saxproject.org">http://www.saxproject.org</a>
                 * for further information.
                 * </blockquote>
                 *
                 * <p>An XMLReader will throw this exception when it recognizes a
                 * feature or property identifier, but cannot perform the requested
                 * operation (setting a state or value).  Other SAX2 applications and
                 * extensions may use this class for similar purposes.</p>
                 *
                 * @since SAX 2.0
                 * @author David Megginson
                 * @version 2.0.1 (sax2r2)
                 * @see org.xml.sax.SAXNotRecognizedException</member>
        <member name="M:org.xml.sax.SAXNotSupportedException.#ctor">
                     * Construct a new exception with no message.</member>
        <member name="M:org.xml.sax.SAXNotSupportedException.#ctor(System.String)">
                     * Construct a new exception with the given message.
                     *
                     * @param message The text message of the exception.</member>
        <member name="T:org.xml.sax.XMLFilter">
                 * Interface for an XML filter.
                 *
                 * <blockquote>
                 * <em>This module, both source code and documentation, is in the
                 * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>
                 * See <a href="http://www.saxproject.org">http://www.saxproject.org</a>
                 * for further information.
                 * </blockquote>
                 *
                 * <p>An XML filter is like an XML reader, except that it obtains its
                 * events from another XML reader rather than a primary source like
                 * an XML document or database.  Filters can modify a stream of
                 * events as they pass on to the final application.</p>
                 *
                 * <p>The XMLFilterImpl helper class provides a convenient base
                 * for creating SAX2 filters, by passing on all {@link org.xml.sax.EntityResolver
                 * EntityResolver}, {@link org.xml.sax.DTDHandler DTDHandler},
                 * {@link org.xml.sax.ContentHandler ContentHandler} and {@link org.xml.sax.ErrorHandler
                 * ErrorHandler} events automatically.</p>
                 *
                 * @since SAX 2.0
                 * @author David Megginson
                 * @version 2.0.1 (sax2r2)
                 * @see org.xml.sax.helpers.XMLFilterImpl</member>
        <member name="M:org.xml.sax.XMLFilter.setParent(org.xml.sax.XMLReader)">
                     * Set the parent reader.
                     *
                     * <p>This method allows the application to link the filter to
                     * a parent reader (which may be another filter).  The argument
                     * may not be null.</p>
                     *
                     * @param parent The parent reader.</member>
        <member name="M:org.xml.sax.XMLFilter.getParent">
                     * Get the parent reader.
                     *
                     * <p>This method allows the application to query the parent
                     * reader (which may be another filter).  It is generally a
                     * bad idea to perform any operations on the parent reader
                     * directly: they should all pass through this filter.</p>
                     *
                     * @return The parent filter, or null if none has been set.</member>
        <member name="T:org.xml.sax.XMLReader">
                 * Interface for reading an XML document using callbacks.
                 *
                 * <blockquote>
                 * <em>This module, both source code and documentation, is in the
                 * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>
                 * See <a href="http://www.saxproject.org">http://www.saxproject.org</a>
                 * for further information.
                 * </blockquote>
                 *
                 * <p><strong>Note:</strong> despite its name, this interface does
                 * <em>not</em> extend the standard Java {@link java.io.Reader Reader}
                 * interface, because reading XML is a fundamentally different activity
                 * than reading character data.</p>
                 *
                 * <p>XMLReader is the interface that an XML parser's SAX2 driver must
                 * implement.  This interface allows an application to set and
                 * query features and properties in the parser, to register
                 * event handlers for document processing, and to initiate
                 * a document parse.</p>
                 *
                 * <p>All SAX interfaces are assumed to be synchronous: the
                 * {@link #parse parse} methods must not return until parsing
                 * is complete, and readers must wait for an event-handler callback
                 * to return before reporting the next event.</p>
                 *
                 * <p>This interface replaces the (now deprecated) SAX 1.0 {@link
                 * org.xml.sax.Parser Parser} interface.  The XMLReader interface
                 * contains two important enhancements over the old Parser
                 * interface (as well as some minor ones):</p>
                 *
                 * <ol>
                 * <li>it adds a standard way to query and set features and
                 *  properties; and</li>
                 * <li>it adds Namespace support, which is required for many
                 *  higher-level XML standards.</li>
                 * </ol>
                 *
                 * <p>There are adapters available to convert a SAX1 Parser to
                 * a SAX2 XMLReader and vice-versa.</p>
                 *
                 * @since SAX 2.0
                 * @author David Megginson
                 * @version 2.0.1+ (sax2r3pre1)
                 * @see org.xml.sax.XMLFilter
                 * @see org.xml.sax.helpers.ParserAdapter
                 * @see org.xml.sax.helpers.XMLReaderAdapter</member>
        <member name="M:org.xml.sax.XMLReader.getFeature(System.String)">
                     * Look up the value of a feature flag.
                     *
                     * <p>The feature name is any fully-qualified URI.  It is
                     * possible for an XMLReader to recognize a feature name but
                     * temporarily be unable to return its value.
                     * Some feature values may be available only in specific
                     * contexts, such as before, during, or after a parse.
                     * Also, some feature values may not be programmatically accessible.
                     * (In the case of an adapter for SAX1 {@link Parser}, there is no
                     * implementation-independent way to expose whether the underlying
                     * parser is performing validation, expanding external entities,
                     * and so forth.) </p>
                     *
                     * <p>All XMLReaders are required to recognize the
                     * http://xml.org/sax/features/namespaces and the
                     * http://xml.org/sax/features/namespace-prefixes feature names.</p>
                     *
                     * <p>Typical usage is something like this:</p>
                     *
                     * <pre>
                     * XMLReader r = new MySAXDriver();
                     *
                     *                         // try to activate validation
                     * try {
                     *   r.setFeature("http://xml.org/sax/features/validation", true);
                     * } catch (SAXException e) {
                     *   System.err.println("Cannot activate validation.");
                     * }
                     *
                     *                         // register event handlers
                     * r.setContentHandler(new MyContentHandler());
                     * r.setErrorHandler(new MyErrorHandler());
                     *
                     *                         // parse the first document
                     * try {
                     *   r.parse("http://www.foo.com/mydoc.xml");
                     * } catch (IOException e) {
                     *   System.err.println("I/O exception reading XML document");
                     * } catch (SAXException e) {
                     *   System.err.println("XML exception reading document.");
                     * }
                     * </pre>
                     *
                     * <p>Implementors are free (and encouraged) to invent their own features,
                     * using names built on their own URIs.</p>
                     *
                     * @param name The feature name, which is a fully-qualified URI.
                     * @return The current value of the feature (true or false).
                     * @exception org.xml.sax.SAXNotRecognizedException If the feature
                     *            value can't be assigned or retrieved.
                     * @exception org.xml.sax.SAXNotSupportedException When the
                     *            XMLReader recognizes the feature name but
                     *            cannot determine its value at this time.
                     * @see #setFeature</member>
        <member name="M:org.xml.sax.XMLReader.setFeature(System.String,System.Boolean)">
                     * Set the value of a feature flag.
                     *
                     * <p>The feature name is any fully-qualified URI.  It is
                     * possible for an XMLReader to expose a feature value but
                     * to be unable to change the current value.
                     * Some feature values may be immutable or mutable only
                     * in specific contexts, such as before, during, or after
                     * a parse.</p>
                     *
                     * <p>All XMLReaders are required to support setting
                     * http://xml.org/sax/features/namespaces to true and
                     * http://xml.org/sax/features/namespace-prefixes to false.</p>
                     *
                     * @param name The feature name, which is a fully-qualified URI.
                     * @param value The requested value of the feature (true or false).
                     * @exception org.xml.sax.SAXNotRecognizedException If the feature
                     *            value can't be assigned or retrieved.
                     * @exception org.xml.sax.SAXNotSupportedException When the
                     *            XMLReader recognizes the feature name but
                     *            cannot set the requested value.
                     * @see #getFeature</member>
        <member name="M:org.xml.sax.XMLReader.getProperty(System.String)">
                     * Look up the value of a property.
                     *
                     * <p>The property name is any fully-qualified URI.  It is
                     * possible for an XMLReader to recognize a property name but
                     * temporarily be unable to return its value.
                     * Some property values may be available only in specific
                     * contexts, such as before, during, or after a parse.</p>
                     *
                     * <p>XMLReaders are not required to recognize any specific
                     * property names, though an initial core set is documented for
                     * SAX2.</p>
                     *
                     * <p>Implementors are free (and encouraged) to invent their own properties,
                     * using names built on their own URIs.</p>
                     *
                     * @param name The property name, which is a fully-qualified URI.
                     * @return The current value of the property.
                     * @exception org.xml.sax.SAXNotRecognizedException If the property
                     *            value can't be assigned or retrieved.
                     * @exception org.xml.sax.SAXNotSupportedException When the
                     *            XMLReader recognizes the property name but
                     *            cannot determine its value at this time.
                     * @see #setProperty</member>
        <member name="M:org.xml.sax.XMLReader.setProperty(System.String,System.Object)">
                     * Set the value of a property.
                     *
                     * <p>The property name is any fully-qualified URI.  It is
                     * possible for an XMLReader to recognize a property name but
                     * to be unable to change the current value.
                     * Some property values may be immutable or mutable only
                     * in specific contexts, such as before, during, or after
                     * a parse.</p>
                     *
                     * <p>XMLReaders are not required to recognize setting
                     * any specific property names, though a core set is defined by
                     * SAX2.</p>
                     *
                     * <p>This method is also the standard mechanism for setting
                     * extended handlers.</p>
                     *
                     * @param name The property name, which is a fully-qualified URI.
                     * @param value The requested value for the property.
                     * @exception org.xml.sax.SAXNotRecognizedException If the property
                     *            value can't be assigned or retrieved.
                     * @exception org.xml.sax.SAXNotSupportedException When the
                     *            XMLReader recognizes the property name but
                     *            cannot set the requested value.</member>
        <member name="M:org.xml.sax.XMLReader.setEntityResolver(org.xml.sax.EntityResolver)">
                     * Allow an application to register an entity resolver.
                     *
                     * <p>If the application does not register an entity resolver,
                     * the XMLReader will perform its own default resolution.</p>
                     *
                     * <p>Applications may register a new or different resolver in the
                     * middle of a parse, and the SAX parser must begin using the new
                     * resolver immediately.</p>
                     *
                     * @param resolver The entity resolver.
                     * @see #getEntityResolver</member>
        <member name="M:org.xml.sax.XMLReader.getEntityResolver">
                     * Return the current entity resolver.
                     *
                     * @return The current entity resolver, or null if none
                     *         has been registered.
                     * @see #setEntityResolver</member>
        <member name="M:org.xml.sax.XMLReader.setDTDHandler(org.xml.sax.DTDHandler)">
                     * Allow an application to register a DTD event handler.
                     *
                     * <p>If the application does not register a DTD handler, all DTD
                     * events reported by the SAX parser will be silently ignored.</p>
                     *
                     * <p>Applications may register a new or different handler in the
                     * middle of a parse, and the SAX parser must begin using the new
                     * handler immediately.</p>
                     *
                     * @param handler The DTD handler.
                     * @see #getDTDHandler</member>
        <member name="M:org.xml.sax.XMLReader.getDTDHandler">
                     * Return the current DTD handler.
                     *
                     * @return The current DTD handler, or null if none
                     *         has been registered.
                     * @see #setDTDHandler</member>
        <member name="M:org.xml.sax.XMLReader.setContentHandler(org.xml.sax.ContentHandler)">
                     * Allow an application to register a content event handler.
                     *
                     * <p>If the application does not register a content handler, all
                     * content events reported by the SAX parser will be silently
                     * ignored.</p>
                     *
                     * <p>Applications may register a new or different handler in the
                     * middle of a parse, and the SAX parser must begin using the new
                     * handler immediately.</p>
                     *
                     * @param handler The content handler.
                     * @see #getContentHandler</member>
        <member name="M:org.xml.sax.XMLReader.getContentHandler">
                     * Return the current content handler.
                     *
                     * @return The current content handler, or null if none
                     *         has been registered.
                     * @see #setContentHandler</member>
        <member name="M:org.xml.sax.XMLReader.setErrorHandler(org.xml.sax.ErrorHandler)">
                     * Allow an application to register an error event handler.
                     *
                     * <p>If the application does not register an error handler, all
                     * error events reported by the SAX parser will be silently
                     * ignored; however, normal processing may not continue.  It is
                     * highly recommended that all SAX applications implement an
                     * error handler to avoid unexpected bugs.</p>
                     *
                     * <p>Applications may register a new or different handler in the
                     * middle of a parse, and the SAX parser must begin using the new
                     * handler immediately.</p>
                     *
                     * @param handler The error handler.
                     * @see #getErrorHandler</member>
        <member name="M:org.xml.sax.XMLReader.getErrorHandler">
                     * Return the current error handler.
                     *
                     * @return The current error handler, or null if none
                     *         has been registered.
                     * @see #setErrorHandler</member>
        <member name="M:org.xml.sax.XMLReader.parse(org.xml.sax.InputSource)">
                     * Parse an XML document.
                     *
                     * <p>The application can use this method to instruct the XML
                     * reader to begin parsing an XML document from any valid input
                     * source (a character stream, a byte stream, or a URI).</p>
                     *
                     * <p>Applications may not invoke this method while a parse is in
                     * progress (they should create a new XMLReader instead for each
                     * nested XML document).  Once a parse is complete, an
                     * application may reuse the same XMLReader object, possibly with a
                     * different input source.
                     * Configuration of the XMLReader object (such as handler bindings and
                     * values established for feature flags and properties) is unchanged
                     * by completion of a parse, unless the definition of that aspect of
                     * the configuration explicitly specifies other behavior.
                     * (For example, feature flags or properties exposing
                     * characteristics of the document being parsed.)
                     * </p>
                     *
                     * <p>During the parse, the XMLReader will provide information
                     * about the XML document through the registered event
                     * handlers.</p>
                     *
                     * <p>This method is synchronous: it will not return until parsing
                     * has ended.  If a client application wants to terminate
                     * parsing early, it should throw an exception.</p>
                     *
                     * @param input The input source for the top-level of the
                     *        XML document.
                     * @exception org.xml.sax.SAXException Any SAX exception, possibly
                     *            wrapping another exception.
                     * @exception java.io.IOException An IO exception from the parser,
                     *            possibly from a byte stream or character stream
                     *            supplied by the application.
                     * @see org.xml.sax.InputSource
                     * @see #parse(java.lang.String)
                     * @see #setEntityResolver
                     * @see #setDTDHandler
                     * @see #setContentHandler
                     * @see #setErrorHandler</member>
        <member name="M:org.xml.sax.XMLReader.parse(System.String)">
                     * Parse an XML document from a system identifier (URI).
                     *
                     * <p>This method is a shortcut for the common case of reading a
                     * document from a system identifier.  It is the exact
                     * equivalent of the following:</p>
                     *
                     * <pre>
                     * parse(new InputSource(systemId));
                     * </pre>
                     *
                     * <p>If the system identifier is a URL, it must be fully resolved
                     * by the application before it is passed to the parser.</p>
                     *
                     * @param systemId The system identifier (URI).
                     * @exception org.xml.sax.SAXException Any SAX exception, possibly
                     *            wrapping another exception.
                     * @exception java.io.IOException An IO exception from the parser,
                     *            possibly from a byte stream or character stream
                     *            supplied by the application.
                     * @see #parse(org.xml.sax.InputSource)</member>
        <member name="T:org.xml.sax.SAXParseException">
                 * Encapsulate an XML parse error or warning.
                 *
                 * <blockquote>
                 * <em>This module, both source code and documentation, is in the
                 * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>
                 * See <a href="http://www.saxproject.org">http://www.saxproject.org</a>
                 * for further information.
                 * </blockquote>
                 *
                 * <p>This exception may include information for locating the error
                 * in the original XML document, as if it came from a {@link Locator}
                 * object.  Note that although the application
                 * will receive a SAXParseException as the argument to the handlers
                 * in the {@link org.xml.sax.ErrorHandler ErrorHandler} interface,
                 * the application is not actually required to throw the exception;
                 * instead, it can simply read the information in it and take a
                 * different action.</p>
                 *
                 * <p>Since this exception is a subclass of {@link org.xml.sax.SAXException
                 * SAXException}, it inherits the ability to wrap another exception.</p>
                 *
                 * @since SAX 1.0
                 * @author David Megginson
                 * @version 2.0.1 (sax2r2)
                 * @see org.xml.sax.SAXException
                 * @see org.xml.sax.Locator
                 * @see org.xml.sax.ErrorHandler</member>
        <member name="M:org.xml.sax.SAXParseException.#ctor(System.String,org.xml.sax.Locator)">
                     * Create a new SAXParseException from a message and a Locator.
                     *
                     * <p>This constructor is especially useful when an application is
                     * creating its own exception from within a {@link org.xml.sax.ContentHandler
                     * ContentHandler} callback.</p>
                     *
                     * @param message The error or warning message.
                     * @param locator The locator object for the error or warning (may be
                     *        null).
                     * @see org.xml.sax.Locator</member>
        <member name="M:org.xml.sax.SAXParseException.#ctor(System.String,org.xml.sax.Locator,System.Exception)">
                     * Wrap an existing exception in a SAXParseException.
                     *
                     * <p>This constructor is especially useful when an application is
                     * creating its own exception from within a {@link org.xml.sax.ContentHandler
                     * ContentHandler} callback, and needs to wrap an existing exception that is not a
                     * subclass of {@link org.xml.sax.SAXException SAXException}.</p>
                     *
                     * @param message The error or warning message, or null to
                     *                use the message from the embedded exception.
                     * @param locator The locator object for the error or warning (may be
                     *        null).
                     * @param e Any exception.
                     * @see org.xml.sax.Locator</member>
        <member name="M:org.xml.sax.SAXParseException.#ctor(System.String,System.String,System.String,System.Int32,System.Int32)">
                     * Create a new SAXParseException.
                     *
                     * <p>This constructor is most useful for parser writers.</p>
                     *
                     * <p>All parameters except the message are as if
                     * they were provided by a {@link Locator}.  For example, if the
                     * system identifier is a URL (including relative filename), the
                     * caller must resolve it fully before creating the exception.</p>
                     *
                     *
                     * @param message The error or warning message.
                     * @param publicId The public identifier of the entity that generated
                     *                 the error or warning.
                     * @param systemId The system identifier of the entity that generated
                     *                 the error or warning.
                     * @param lineNumber The line number of the end of the text that
                     *                   caused the error or warning.
                     * @param columnNumber The column number of the end of the text that
                     *                     cause the error or warning.</member>
        <member name="M:org.xml.sax.SAXParseException.#ctor(System.String,System.String,System.String,System.Int32,System.Int32,System.Exception)">
                     * Create a new SAXParseException with an embedded exception.
                     *
                     * <p>This constructor is most useful for parser writers who
                     * need to wrap an exception that is not a subclass of
                     * {@link org.xml.sax.SAXException SAXException}.</p>
                     *
                     * <p>All parameters except the message and exception are as if
                     * they were provided by a {@link Locator}.  For example, if the
                     * system identifier is a URL (including relative filename), the
                     * caller must resolve it fully before creating the exception.</p>
                     *
                     * @param message The error or warning message, or null to use
                     *                the message from the embedded exception.
                     * @param publicId The public identifier of the entity that generated
                     *                 the error or warning.
                     * @param systemId The system identifier of the entity that generated
                     *                 the error or warning.
                     * @param lineNumber The line number of the end of the text that
                     *                   caused the error or warning.
                     * @param columnNumber The column number of the end of the text that
                     *                     cause the error or warning.
                     * @param e Another exception to embed in this one.</member>
        <member name="M:org.xml.sax.SAXParseException.init(System.String,System.String,System.Int32,System.Int32)">
                     * Internal initialization method.
                     *
                     * @param publicId The public identifier of the entity which generated the exception,
                     *        or null.
                     * @param systemId The system identifier of the entity which generated the exception,
                     *        or null.
                     * @param lineNumber The line number of the error, or -1.
                     * @param columnNumber The column number of the error, or -1.</member>
        <member name="M:org.xml.sax.SAXParseException.getPublicId">
                     * Get the public identifier of the entity where the exception occurred.
                     *
                     * @return A string containing the public identifier, or null
                     *         if none is available.
                     * @see org.xml.sax.Locator#getPublicId</member>
        <member name="M:org.xml.sax.SAXParseException.getSystemId">
                     * Get the system identifier of the entity where the exception occurred.
                     *
                     * <p>If the system identifier is a URL, it will have been resolved
                     * fully.</p>
                     *
                     * @return A string containing the system identifier, or null
                     *         if none is available.
                     * @see org.xml.sax.Locator#getSystemId</member>
        <member name="M:org.xml.sax.SAXParseException.getLineNumber">
                     * The line number of the end of the text where the exception occurred.
                     *
                     * <p>The first line is line 1.</p>
                     *
                     * @return An integer representing the line number, or -1
                     *         if none is available.
                     * @see org.xml.sax.Locator#getLineNumber</member>
        <member name="M:org.xml.sax.SAXParseException.getColumnNumber">
                     * The column number of the end of the text where the exception occurred.
                     *
                     * <p>The first column in a line is position 1.</p>
                     *
                     * @return An integer representing the column number, or -1
                     *         if none is available.
                     * @see org.xml.sax.Locator#getColumnNumber</member>
        <member name="F:org.xml.sax.SAXParseException.publicId">
                     * @serial The public identifier, or null.
                     * @see #getPublicId</member>
        <member name="F:org.xml.sax.SAXParseException.systemId">
                     * @serial The system identifier, or null.
                     * @see #getSystemId</member>
        <member name="F:org.xml.sax.SAXParseException.lineNumber">
                     * @serial The line number, or -1.
                     * @see #getLineNumber</member>
        <member name="F:org.xml.sax.SAXParseException.columnNumber">
                     * @serial The column number, or -1.
                     * @see #getColumnNumber</member>
        <member name="M:System.JavaExtensions.matches(System.String,System.String)">
            <summary>
            Check string instance for matching giving regular expression.
            </summary>
            <param name="str">instance</param>
            <param name="expr">regular expression</param>
            <returns>
            </returns>
        </member>
        <member name="M:System.JavaExtensions.getWrapperInstance(System.String)">
            <summary>
            Helper method to create a Java like String wrapper object instance. You can use this wrapper if
            implemented interface like java.lang.Appendable is needed.
            </summary>
            <param name="str">base .net String instance or null</param>
            <returns>Wrapper for given String instance</returns>
        </member>
        <member name="M:System.JavaExtensions.lastIndexOf(System.String,System.Char,System.Int32)">
            <summary>
            Identify the last index of char - Java like.
            </summary>
            <param name="str">
            </param>
            <param name="c">
            </param>
            <param name="startIndex">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:System.JavaExtensions.valueOf(System.String,System.Boolean)">
                     * Converts the specified boolean to its string representation. When the
                     * boolean is {@code true} return {@code "true"}, otherwise return {@code
                     * "false"}.
                     *
                     * @param value
                     *            the boolean.
                     * @return the boolean converted to a string.</member>
        <member name="M:System.JavaExtensions.getBytes(System.String)">
            <summary>
            Extends System.String
            Encodes this {@code String} into a sequence of bytes using the
            platform's default charset, storing the result into a new byte array.
            </summary>
            <param name="str">
            </param>
            <returns>The resultant byte array</returns>
        </member>
        <member name="M:System.JavaExtensions.getBytes(System.String,System.String)">
            <summary>
            Extends System.String
            Encodes this {@code String} into a sequence of bytes using the named
            charset, storing the result into a new byte array.
            </summary>
            <exception cref="T:biz.ritter.javapi.io.UnsupportedEncodingException">If the named charset is not supported</exception>
            <param name="str">
            </param>
            <param name="charsetName">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:System.JavaExtensions.getResource(System.Object,System.String)">
            <summary>
            All Java classes can get resources over method java.net.URL java.lang.Class.getResource();
            </summary>
            <param name="t">an instance</param>
            <param name="name">named resource</param>
            <returns>
            </returns>
        </member>
        <member name="M:System.JavaExtensions.toInt(System.DayOfWeek)">
            <summary>
            Convert enumeration value to int valie based on
            </summary>
            <param name="dayOfWeek">enum value of System.DayOfWeek</param>
            <returns>Sunday == 1, Monday == 2, ...</returns>
            <see cref="T:System.DayOfWeek" />
        </member>
        <member name="M:System.JavaExtensions.getTime(System.DateTime)">
            <summary>
            Returns milliseconds since 01.01.1970
            </summary>
            <param name="s">
            </param>
            <returns>
            </returns>
        </member>
        <member name="T:biz.ritter.javapi.util.spi.CurrencyNameProvider">
                 * CurrencyNameProvider is an abstract class to get localized currency symbols
                 * from service providers.
                 *
                 * @since 1.6
                 *</member>
        <member name="M:biz.ritter.javapi.util.spi.CurrencyNameProvider.#ctor">
                     * The constructor
                     *</member>
        <member name="M:biz.ritter.javapi.util.spi.CurrencyNameProvider.getSymbol(System.String,biz.ritter.javapi.util.Locale)">
                     * Returns the symbol for the specified currency
                     *
                     * @param code
                     *            the code of the specified currency in "ISO 4217"
                     * @param locale
                     *            the locale
                     * @return the symbol or null if there is no available symbol in the locale
                     * @throws NullPointerException
                     *             if code or locale is null
                     * @throws IllegalArgumentException
                     *             if code or locale is not in a legal format or not available</member>
        <member name="T:biz.ritter.javapi.util.spi.LocaleNameProvider">
                 * LocaleNameProvider is an abstract class to get localized names from service
                 * providers.
                 *
                 * @since 1.6
                 *</member>
        <member name="M:biz.ritter.javapi.util.spi.LocaleNameProvider.#ctor">
                     * The constructor
                     *</member>
        <member name="M:biz.ritter.javapi.util.spi.LocaleNameProvider.getDisplayLanguage(System.String,biz.ritter.javapi.util.Locale)">
                     * Gets the localized name for the specified language code in "ISO 639" and
                     * the specified locale to display.
                     *
                     * @param code
                     *            the code of language in "ISO 639"
                     * @param locale
                     *            the locale
                     * @return the name or null if unavailable
                     * @throws NullPointerException
                     *             if code or locale is null
                     * @throws IllegalArgumentException
                     *             if code or locale is not in a legal format or not available</member>
        <member name="M:biz.ritter.javapi.util.spi.LocaleNameProvider.getDisplayCountry(System.String,biz.ritter.javapi.util.Locale)">
                     * Gets the localized name for the specified country code in "ISO 3166" and
                     * the specified locale to display.
                     *
                     * @param code
                     *            the code of country in "ISO 3166"
                     * @param locale
                     *            the locale
                     * @return the name or null if unavailable
                     * @throws NullPointerException
                     *             if code or locale is null
                     * @throws IllegalArgumentException
                     *             if code or locale is not in a legal format or not available</member>
        <member name="M:biz.ritter.javapi.util.spi.LocaleNameProvider.getDisplayVariant(System.String,biz.ritter.javapi.util.Locale)">
                     * Gets the localized name for the specified variant code and the specified
                     * locale to display.
                     *
                     * @param variant
                     *            the variant code
                     * @param locale
                     *            the locale
                     * @return the name or null if unavailable
                     * @throws NullPointerException
                     *             if variant code or locale is null
                     * @throws IllegalArgumentException
                     *             if locale is not available</member>
        <member name="T:biz.ritter.javapi.util.spi.LocaleServiceProvider">
                 * The base class for all the locale related service provider interfaces (SPIs).
                 *
                 * @since 1.6</member>
        <member name="M:biz.ritter.javapi.util.spi.LocaleServiceProvider.#ctor">
                     * The constructor
                     *</member>
        <member name="M:biz.ritter.javapi.util.spi.LocaleServiceProvider.getAvailableLocales">
                     * Gets all available locales that has localized objects or names from this
                     * locale service provider.
                     *
                     * @return all available locales that has localized objects or names from
                     *         this locale service provider</member>
        <member name="T:biz.ritter.javapi.util.spi.TimeZoneNameProvider">
                 * TimeZoneNameProvider is an abstract class to get localized time zone names
                 * from service providers.
                 *
                 * @since 1.6
                 *</member>
        <member name="M:biz.ritter.javapi.util.spi.TimeZoneNameProvider.#ctor">
                     * The constructor
                     *</member>
        <member name="M:biz.ritter.javapi.util.spi.TimeZoneNameProvider.getDisplayName(System.String,System.Boolean,System.Int32,biz.ritter.javapi.util.Locale)">
                     * Gets the name of the specified time zone ID that's suitable to display to
                     * the user.
                     *
                     * @param id
                     *            id of time zone
                     * @param daylight
                     *            true to return the daylight saving time.
                     * @param style
                     *            TimeZone.LONG or TimeZone.SHORT
                     * @param locale
                     *            the locale
                     * @return the readable time zone name, or null if it is unavailable
                     * @throws NullPointerException
                     *             if id or locale is null
                     * @throws IllegalArgumentException
                     *             if locale is not available or style is invalid</member>
        <member name="T:biz.ritter.javapi.util.prefs.BackingStoreException">
                 * An exception to indicate that an error was encountered while accessing the
                 * backing store.
                 *
                 * @since 1.4</member>
        <member name="M:biz.ritter.javapi.util.prefs.BackingStoreException.#ctor(System.String)">
                     * Constructs a new {@code BackingStoreException} instance with a detailed
                     * exception message.
                     *
                     * @param s
                     *            the detailed exception message.</member>
        <member name="M:biz.ritter.javapi.util.prefs.BackingStoreException.#ctor(biz.ritter.javapi.lang.Throwable)">
                     * Constructs a new {@code BackingStoreException} instance with a nested
                     * {@code Throwable}.
                     *
                     * @param t
                     *            the nested {@code Throwable}.</member>
        <member name="T:biz.ritter.javapi.util.prefs.InvalidPreferencesFormatException">
                 * An exception to indicate that the input XML file is not well-formed or could
                 * not be validated against the appropriate document type (specified by
                 * in the {@code Preferences}).</member>
        <member name="M:biz.ritter.javapi.util.prefs.InvalidPreferencesFormatException.#ctor(System.String)">
                     * Constructs a new {@code InvalidPreferencesFormatException} instance with
                     * a detailed exception message.
                     *
                     * @param s
                     *            the detailed exception message.</member>
        <member name="M:biz.ritter.javapi.util.prefs.InvalidPreferencesFormatException.#ctor(System.String,biz.ritter.javapi.lang.Throwable)">
                     * Constructs a new {@code InvalidPreferencesFormatException} instance with
                     * a detailed exception message and a nested {@code Throwable}.
                     *
                     * @param s
                     *            the detailed exception message.
                     * @param t
                     *            the nested {@code Throwable}.</member>
        <member name="M:biz.ritter.javapi.util.prefs.InvalidPreferencesFormatException.#ctor(biz.ritter.javapi.lang.Throwable)">
                     * Constructs a new {@code InvalidPreferencesFormatException} instance with
                     * a nested {@code Throwable}.
                     *
                     * @param t
                     *            the nested {@code Throwable}.</member>
        <member name="T:biz.ritter.javapi.util.prefs.NodeChangeEvent">
                 * This is the event class to indicate that one child of the preference node has
                 * been added or deleted.
                 * <p />
                 * Please note that although the class is marked as {@code Serializable} by
                 * inheritance from {@code EventObject}, this type is not intended to be
                 * serialized so the serialization methods do nothing but throw a {@code
                 * NotSerializableException}.
                 *
                 * @see java.util.prefs.Preferences
                 * @see java.util.prefs.NodeChangeListener
                 *
                 * @since 1.4</member>
        <member name="M:biz.ritter.javapi.util.prefs.NodeChangeEvent.#ctor(biz.ritter.javapi.util.prefs.Preferences,biz.ritter.javapi.util.prefs.Preferences)">
                     * Constructs a new {@code NodeChangeEvent} instance.
                     *
                     * @param p
                     *            the {@code Preferences} instance that fired this event; this
                     *            object is considered as the event source.
                     * @param c
                     *            the child {@code Preferences} instance that was added or
                     *            deleted.</member>
        <member name="M:biz.ritter.javapi.util.prefs.NodeChangeEvent.getParent">
                     * Gets the {@code Preferences} instance that fired this event.
                     *
                     * @return the {@code Preferences} instance that fired this event.</member>
        <member name="M:biz.ritter.javapi.util.prefs.NodeChangeEvent.getChild">
                     * Gets the child {@code Preferences} node that was added or removed.
                     *
                     * @return the added or removed child {@code Preferences} node.</member>
        <member name="M:biz.ritter.javapi.util.prefs.NodeChangeEvent.writeObject(biz.ritter.javapi.io.ObjectOutputStream)">
                     * This method always throws a {@code NotSerializableException}, because
                     * this object cannot be serialized,</member>
        <member name="M:biz.ritter.javapi.util.prefs.NodeChangeEvent.readObject(biz.ritter.javapi.io.ObjectInputStream)">
                     * This method always throws a {@code NotSerializableException}, because
                     * this object cannot be serialized,</member>
        <member name="T:biz.ritter.javapi.util.prefs.NodeChangeListener">
                 * This interface is used to handle preference node change events. The
                 * implementation of this interface can be installed by the {@code Preferences}
                 * instance.
                 *
                 * @see Preferences
                 * @see NodeChangeEvent
                 *
                 * @since 1.4</member>
        <member name="M:biz.ritter.javapi.util.prefs.NodeChangeListener.childAdded(biz.ritter.javapi.util.prefs.NodeChangeEvent)">
                     * This method gets called whenever a child node is added to another node.
                     *
                     * @param e
                     *            the node change event.</member>
        <member name="M:biz.ritter.javapi.util.prefs.NodeChangeListener.childRemoved(biz.ritter.javapi.util.prefs.NodeChangeEvent)">
                     * This method gets called whenever a child node is removed from another
                     * node.
                     *
                     * @param e
                     *            the node change event.</member>
        <!--FIXME: Invalid documentation markup was found for member T:biz.ritter.javapi.util.prefs.PreferenceChangeEvent-->
        <member name="M:biz.ritter.javapi.util.prefs.PreferenceChangeEvent.#ctor(biz.ritter.javapi.util.prefs.Preferences,System.String,System.String)">
                     * Construct a new {@code PreferenceChangeEvent} instance.
                     *
                     * @param p
                     *            the {@code Preferences} instance that fired this event; this object is
                     *            considered as the event's source.
                     * @param k
                     *            the changed preference key.
                     * @param v
                     *            the new value of the changed preference, this value can be
                     *            {@code null}, which means the preference has been removed.</member>
        <member name="M:biz.ritter.javapi.util.prefs.PreferenceChangeEvent.getKey">
                     * Gets the key of the changed preference.
                     *
                     * @return the changed preference's key.</member>
        <member name="M:biz.ritter.javapi.util.prefs.PreferenceChangeEvent.getNewValue">
                     * Gets the new value of the changed preference or {@code null} if the
                     * preference has been removed.
                     *
                     * @return the new value of the changed preference or {@code null} if the
                     *         preference has been removed.</member>
        <member name="M:biz.ritter.javapi.util.prefs.PreferenceChangeEvent.getNode">
                     * Gets the {@code Preferences} instance that fired this event.
                     *
                     * @return the {@code Preferences} instance that fired this event.</member>
        <member name="M:biz.ritter.javapi.util.prefs.PreferenceChangeEvent.writeObject(biz.ritter.javapi.io.ObjectOutputStream)">
                     * This method always throws a {@code NotSerializableException},
                     * because this object cannot be serialized,</member>
        <member name="M:biz.ritter.javapi.util.prefs.PreferenceChangeEvent.readObject(biz.ritter.javapi.io.ObjectInputStream)">
                     * This method always throws a {@code NotSerializableException},
                     * because this object cannot be serialized,</member>
        <member name="T:biz.ritter.javapi.util.prefs.PreferenceChangeListener">
                 * This interface is used to handle preferences change events. The
                 * implementation of this interface can be installed by the {@code Preferences}
                 * instance.
                 *
                 * @see Preferences
                 * @see PreferenceChangeEvent
                 *
                 *
                 * @since 1.4</member>
        <member name="M:biz.ritter.javapi.util.prefs.PreferenceChangeListener.preferenceChange(biz.ritter.javapi.util.prefs.PreferenceChangeEvent)">
                     * This method gets invoked whenever a preference is added, deleted or
                     * updated.
                     *
                     * @param pce
                     *            the event instance which describes the changed {@code
                     *            Preferences} instance and the preference value.</member>
        <member name="T:biz.ritter.javapi.util.prefs.Preferences">
                 * An instance of the class {@code Preferences} represents one node in a
                 * preference tree, which provides a mechanism to store and access configuration
                 * data in a hierarchical way. Two hierarchy trees are maintained, one for
                 * system preferences shared by all users and the other for user preferences
                 * specific to the user. {@code Preferences} hierarchy trees and data are stored
                 * in an implementation-dependent back-end.
                 * <p />
                 * Every node has one name and one unique absolute path following the same
                 * notational conventions as directories in a file system. The root node's name
                 * is "", and other node name strings cannot contain the slash character and
                 * cannot be empty. The root node's absolute path is "/", and all other nodes'
                 * absolute paths are constructed in the standard way: &lt;parent's absolute
                 * path&gt; + "/" + &lt;node's name&gt;. Since the set of nodes forms a tree
                 * with the root node at its base, all absolute paths start with the slash
                 * character. Every node has one relative path to each of its ancestors. The
                 * relative path doesn't start with slash: it equals the node's absolute path
                 * with leading substring removed corresponding to the ancestor's absolute path
                 * and a slash.
                 * <p />
                 * Modification to preferences data may be asynchronous, which means that
                 * preference update method calls may return immediately instead of blocking.
                 * The {@code flush()} and {@code sync()} methods force the back-end to
                 * synchronously perform all pending updates, but the implementation is
                 * permitted to perform the modifications on the underlying back-end data at any
                 * time between the moment the request is made and the moment the {@code
                 * flush()} or {@code sync()} method returns. Please note that if the JVM exits
                 * normally, the implementation must assure all modifications are persisted
                 * implicitly.
                 * <p />
                 * When invoking a method that retrieves preferences, the user must provide a
                 * default value. The default value is returned when the preferences cannot be
                 * found or the back-end is unavailable. Some other methods will throw {@code
                 * BackingStoreException} when the back-end is unavailable.
                 *
                 * <p />
                 * Preferences can be exported to and imported from an XML files. These
                 * documents must have an XML DOCTYPE declaration:
                 *
                 * <pre>
                 * @code
                 * &lt;!DOCTYPE preferences SYSTEM "http://java.sun.com/dtd/preferences.dtd"&gt;
                 * }
                 * </pre>
                 *
                 * This system URI is not accessed, it is only a identification string for
                 * verifying parsers. Visit the DTD location to see the actual format permitted.
                 * <p />
                 * There must be a concrete {@code PreferencesFactory} type for every concrete
                 * {@code Preferences} type developed. Every implementation must provide a
                 * default implementation for every supported platform, and must also provide a
                 * means of replacing the default implementation. This implementation uses the
                 * system property {@code java.util.prefs.PreferencesFactory} to determine which
                 * preferences implementation to use.
                 * <p />
                 * The methods of this class are thread-safe. If multiple JVMs are using the
                 * same back-end concurrently, the back-end won't be corrupted, but no other
                 * behavior guarantees are made.
                 *
                 * @see PreferencesFactory
                 *
                 * @since 1.4</member>
        <member name="F:biz.ritter.javapi.util.prefs.Preferences.MAX_KEY_LENGTH">
                     * Maximum size in characters allowed for a preferences key.</member>
        <member name="F:biz.ritter.javapi.util.prefs.Preferences.MAX_NAME_LENGTH">
                     * Maximum size in characters allowed for a preferences name.</member>
        <member name="F:biz.ritter.javapi.util.prefs.Preferences.MAX_VALUE_LENGTH">
                     * Maximum size in characters allowed for a preferences value.</member>
        <member name="M:biz.ritter.javapi.util.prefs.Preferences.#ctor">
                     * Default constructor, for use by subclasses only.</member>
        <member name="M:biz.ritter.javapi.util.prefs.Preferences.absolutePath">
                     * Gets the absolute path string of this preference node.
                     *
                     * @return the preference node's absolute path string.</member>
        <member name="M:biz.ritter.javapi.util.prefs.Preferences.childrenNames">
                     * Returns the names of all children of this node or an empty string if this
                     * node has no children.
                     *
                     * @return the names of all children of this node.
                     * @throws BackingStoreException
                     *             if backing store is unavailable or causes an operation
                     *             failure.
                     * @throws IllegalStateException
                     *             if this node has been removed.</member>
        <member name="M:biz.ritter.javapi.util.prefs.Preferences.clear">
                     * Removes all preferences of this node.
                     *
                     * @throws BackingStoreException
                     *             if backing store is unavailable or causes an operation
                     *             failure.
                     * @throws IllegalStateException
                     *             if this node has been removed.</member>
        <member name="M:biz.ritter.javapi.util.prefs.Preferences.exportNode(biz.ritter.javapi.io.OutputStream)">
                     * Exports all of the preferences of this node to a XML document using the
                     * given output stream.
                     * <p>
                     * This XML document uses the UTF-8 encoding and is written according to the
                     * DTD in its DOCTYPE declaration, which is the following:
                     *
                     * <pre>
                     * &lt;!DOCTYPE preferences SYSTEM "http://java.sun.com/dtd/preferences.dtd"&gt;
                     * </pre>
                     *
                     * <i>Please note that (unlike the methods of this class that don't concern
                     * serialization), this call is not thread-safe.</i>
                     * </p>
                     *
                     * @param ostream
                     *            the output stream to write the XML-formatted data to.
                     * @throws IOException
                     *             if an error occurs while exporting.
                     * @throws BackingStoreException
                     *             if the backing store is unavailable or causes an operation
                     *             failure.
                     * @throws IllegalStateException
                     *             if this node has been removed.</member>
        <member name="M:biz.ritter.javapi.util.prefs.Preferences.exportSubtree(biz.ritter.javapi.io.OutputStream)">
                     * Exports all of the preferences of this node and all its descendants to a
                     * XML document using the given output stream.
                     * <p>
                     * This XML document uses the UTF-8 encoding and is written according to the
                     * DTD in its DOCTYPE declaration, which is the following:
                     *
                     * <pre>
                     * &lt;!DOCTYPE preferences SYSTEM "http://java.sun.com/dtd/preferences.dtd"&gt;
                     * </pre>
                     *
                     * <i>Please note that (unlike the methods of this class that don't concern
                     * serialization), this call is not thread-safe.</i>
                     * </p>
                     *
                     * @param ostream
                     *            the output stream to write the XML-formatted data to.
                     * @throws IOException
                     *             if an error occurs while exporting.
                     * @throws BackingStoreException
                     *             if the backing store is unavailable or causes an operation
                     *             failure.
                     * @throws IllegalStateException
                     *             if this node has been removed.</member>
        <member name="M:biz.ritter.javapi.util.prefs.Preferences.flush">
                     * Forces all pending updates to this node and its descendants to be
                     * persisted in the backing store.
                     * <p>
                     * If this node has been removed, the invocation of this method only flushes
                     * this node, not its descendants.
                     * </p>
                     *
                     * @throws BackingStoreException
                     *             if the backing store is unavailable or causes an operation
                     *             failure.</member>
        <member name="M:biz.ritter.javapi.util.prefs.Preferences.get(System.String,System.String)">
                     * Gets the {@code String} value mapped to the given key or its default
                     * value if no value is mapped or no backing store is available.
                     * <p>
                     * Some implementations may store default values in backing stores. In this
                     * case, if there is no value mapped to the given key, the stored default
                     * value is returned.
                     * </p>
                     *
                     * @param key
                     *            the preference key.
                     * @param deflt
                     *            the default value, which will be returned if no value is
                     *            mapped to the given key or no backing store is available.
                     * @return the preference value mapped to the given key.
                     * @throws IllegalStateException
                     *             if this node has been removed.
                     * @throws NullPointerException
                     *             if the parameter {@code key} is {@code null}.</member>
        <member name="M:biz.ritter.javapi.util.prefs.Preferences.getBoolean(System.String,System.Boolean)">
                     * Gets the {@code boolean} value mapped to the given key or its default
                     * value if no value is mapped, if the backing store is unavailable, or if
                     * the value is invalid.
                     * <p>
                     * The only valid values are the {@code String} "true", which represents
                     * {@code true} and "false", which represents {@code false}, ignoring case.
                     * </p>
                     * <p>
                     * Some implementations may store default values in backing stores. In this
                     * case, if there is no value mapped to the given key, the stored default
                     * value is returned.
                     * </p>
                     *
                     * @param key
                     *            the preference key.
                     * @param deflt
                     *            the default value, which will be returned if no value is
                     *            mapped to the given key, if the backing store is unavailable,
                     *            or if the value is invalid.
                     * @return the boolean value mapped to the given key.
                     * @throws IllegalStateException
                     *             if this node has been removed.
                     * @throws NullPointerException
                     *             if the parameter {@code key} is {@code null}.</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.util.prefs.Preferences.getByteArray(System.String,System.Byte[])-->
        <member name="M:biz.ritter.javapi.util.prefs.Preferences.getDouble(System.String,System.Double)">
                     * Gets the {@code double} value mapped to the given key or its default
                     * value if no value is mapped, if the backing store is unavailable, or if
                     * the value is an invalid string.
                     * <p />
                     * To be valid, the value string must be a string that can be converted to a
                     * {@code double} by {@link Double#parseDouble(String)
                     * Double.parseDouble(String)}.
                     * <p>
                     * Some implementations may store default values in backing stores. In this
                     * case, if there is no value mapped to the given key, the stored default
                     * value is returned.
                     * </p>
                     *
                     * @param key
                     *            the preference key.
                     * @param deflt
                     *            the default value, which will be returned if no value is
                     *            mapped to the given key, if the backing store is unavailable, or if the
                     *            value is invalid.
                     * @return the double value mapped to the given key.
                     * @throws IllegalStateException
                     *             if this node has been removed.
                     * @throws NullPointerException
                     *             if the parameter {@code key} is {@code null}.</member>
        <member name="M:biz.ritter.javapi.util.prefs.Preferences.getFloat(System.String,System.Single)">
                     * Gets the {@code float} value mapped to the given key or its default value
                     * if no value is mapped, if the backing store is unavailable, or if the
                     * value is an invalid string.
                     * <p>
                     * To be valid, the value string must be a string that can be converted to a
                     * {@code float} by {@link Float#parseFloat(String)
                     * Float.parseFloat(String)}.
                     * </p>
                     * <p>
                     * Some implementations may store default values in backing stores. In this
                     * case, if there is no value mapped to the given key, the stored default
                     * value is returned.
                     * </p>
                     *
                     * @param key
                     *            the preference key.
                     * @param deflt
                     *            the default value, which will be returned if no value is
                     *            mapped to the given key, if the backing store is unavailable, or if the
                     *            value is invalid.
                     * @return the float value mapped to the given key.
                     * @throws IllegalStateException
                     *             if this node has been removed.
                     * @throws NullPointerException
                     *             if the parameter {@code key} is {@code null}.</member>
        <member name="M:biz.ritter.javapi.util.prefs.Preferences.getInt(System.String,System.Int32)">
                     * Gets the {@code int} value mapped to the given key or its default value
                     * if no value is mapped, if the backing store is unavailable, or if the
                     * value is an invalid string.
                     * <p>
                     * To be valid, the value string must be a string that can be converted to
                     * an {@code int} by {@link Integer#parseInt(String)
                     * Integer.parseInt(String)}.
                     * </p>
                     * <p>
                     * Some implementations may store default values in backing stores. In this
                     * case, if there is no value mapped to the given key, the stored default
                     * value is returned.
                     * </p>
                     *
                     * @param key
                     *            the preference key.
                     * @param deflt
                     *            the default value, which will be returned if no value is
                     *            mapped to the given key, if the backing store is unavailable,
                     *            or if the value is invalid.
                     * @return the integer value mapped to the given key.
                     * @throws IllegalStateException
                     *             if this node has been removed.
                     * @throws NullPointerException
                     *             if the parameter {@code key} is {@code null}.</member>
        <member name="M:biz.ritter.javapi.util.prefs.Preferences.getLong(System.String,System.Int64)">
                     * Gets the {@code long} value mapped to the given key or its default value
                     * if no value is mapped, if the backing store is unavailable, or if the
                     * value is an invalid string.
                     * <p>
                     * To be valid, the value string must be a string that can be converted to a
                     * {@code long} by {@link Long#parseLong(String) Long.parseLong(String)}.
                     * </p>
                     * <p>
                     * Some implementations may store default values in backing stores. In this
                     * case, if there is no value mapped to the given key, the stored default
                     * value is returned.
                     * </p>
                     *
                     * @param key
                     *            the preference key.
                     * @param deflt
                     *            the default value, which will be returned if no value is
                     *            mapped to the given key, if the backing store is unavailable,
                     *            or if the value is invalid.
                     * @return the long value mapped to the given key.
                     * @throws IllegalStateException
                     *             if this node has been removed.
                     * @throws NullPointerException
                     *             if the parameter {@code key} is {@code null}.</member>
        <member name="M:biz.ritter.javapi.util.prefs.Preferences.importPreferences(biz.ritter.javapi.io.InputStream)">
                     * Imports all the preferences from an XML document using the given input
                     * stream.
                     * <p>
                     * This XML document uses the UTF-8 encoding and must be written according
                     * to the DTD in its DOCTYPE declaration, which must be the following:
                     *
                     * <pre>
                     * &lt;!DOCTYPE preferences SYSTEM "http://java.sun.com/dtd/preferences.dtd"&gt;
                     * </pre>
                     *
                     * <i>Please note that (unlike the methods of this class that don't concern
                     * serialization), this call is not thread-safe.</i>
                     * </p>
                     *
                     * @param istream
                     *            the input stream to read the data from.
                     * @throws InvalidPreferencesFormatException
                     *             if the data read from the given input stream is not from a
                     *             valid XML document.
                     * @throws IOException
                     *             if an error occurs while importing.
                     * @throws SecurityException
                     *             if {@code RuntimePermission("preferences")} is denied by a
                     *             SecurityManager.</member>
        <member name="M:biz.ritter.javapi.util.prefs.Preferences.isUserNode">
                     * Returns whether this is a user preference node.
                     *
                     * @return {@code true}, if this is a user preference node, {@code false} if
                     *         this is a system preference node.</member>
        <member name="M:biz.ritter.javapi.util.prefs.Preferences.keys">
                     * Returns all preference keys stored in this node or an empty array if no
                     * key was found.
                     *
                     * @return the list of all preference keys of this node.
                     * @throws BackingStoreException
                     *             if the backing store is unavailable or causes an operation
                     *             failure.
                     * @throws IllegalStateException
                     *             if this node has been removed.</member>
        <member name="M:biz.ritter.javapi.util.prefs.Preferences.name">
                     * Returns the name of this node.
                     *
                     * @return the name of this node.</member>
        <member name="M:biz.ritter.javapi.util.prefs.Preferences.node(System.String)">
                     * Returns the preference node with the given path name. The path name can
                     * be relative or absolute. The requested node and its ancestors will
                     * be created if they do not exist.
                     * <p>
                     * The path is treated as relative to this node if it doesn't start with a
                     * slash, otherwise it will be treated as an absolute path.
                     * </p>
                     *
                     * @param path
                     *            the path name of the requested preference node.
                     * @return the requested preference node.
                     * @throws IllegalStateException
                     *             if this node has been removed.
                     * @throws IllegalArgumentException
                     *             if the path name is invalid.
                     * @throws NullPointerException
                     *             if the given path is {@code null}.</member>
        <member name="M:biz.ritter.javapi.util.prefs.Preferences.nodeExists(System.String)">
                     * Returns whether the preference node with the given path name exists. The
                     * path is treated as relative to this node if it doesn't start with a slash,
                     * otherwise it is treated as an absolute path.
                     * <p>
                     * Please note that if this node has been removed, an invocation of this
                     * node will throw an {@code IllegalStateException} unless the given path is
                     * an empty string, which will return {@code false}.
                     * </p>
                     *
                     * @param path
                     *            the path name of the preference node to query.
                     * @return {@code true}, if the queried preference node exists, {@code false}
                     *         otherwise.
                     * @throws IllegalStateException
                     *             if this node has been removed and the path is not an empty
                     *             string.
                     * @throws IllegalArgumentException
                     *             if the path name is invalid.
                     * @throws NullPointerException
                     *             if the given path is {@code null}.
                     * @throws BackingStoreException
                     *             if the backing store is unavailable or causes an operation
                     *             failure.</member>
        <member name="M:biz.ritter.javapi.util.prefs.Preferences.parent">
                     * Returns the parent preference node of this node or {@code null} if this
                     * node is the root node.
                     *
                     * @return the parent preference node of this node.
                     * @throws IllegalStateException
                     *             if this node has been removed.</member>
        <member name="M:biz.ritter.javapi.util.prefs.Preferences.put(System.String,System.String)">
                     * Adds a new preference to this node using the given key and value or
                     * updates the value if a preference with the given key already exists.
                     *
                     * @param key
                     *            the preference key to be added or updated.
                     * @param value
                     *            the preference value for the given key.
                     * @throws NullPointerException
                     *             if the given key or value is {@code null}.
                     * @throws IllegalArgumentException
                     *             if the given key's length is bigger than {@code
                     *             MAX_KEY_LENGTH} or the value's length is bigger than {@code
                     *             MAX_VALUE_LENGTH}.
                     * @throws IllegalStateException
                     *             if this node has been removed.</member>
        <member name="M:biz.ritter.javapi.util.prefs.Preferences.putBoolean(System.String,System.Boolean)">
                     * Adds a new preference with a {@code boolean} value to this node using the
                     * given key and value or updates the value if a preference with the given
                     * key already exists.
                     *
                     * @param key
                     *            the preference key to be added or updated.
                     * @param value
                     *            the preference {@code boolean} value for the given key.
                     * @throws NullPointerException
                     *             if the given key is {@code null}.
                     * @throws IllegalArgumentException
                     *             if the given key's length is bigger than {@code
                     *             MAX_KEY_LENGTH}.
                     * @throws IllegalStateException
                     *             if this node has been removed.</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.util.prefs.Preferences.putByteArray(System.String,System.Byte[])-->
        <member name="M:biz.ritter.javapi.util.prefs.Preferences.putDouble(System.String,System.Double)">
                     * Adds a new preference to this node using the given key and {@code double}
                     * value or updates the value if a preference with the
                     * given key already exists.
                     * <p>
                     * The value is stored in its string form, which is the result of invoking
                     * {@link Double#toString(double) Double.toString(double)}.
                     * </p>
                     *
                     * @param key
                     *            the preference key to be added or updated.
                     * @param value
                     *            the preference value for the given key.
                     * @throws NullPointerException
                     *             if the given key is {@code null}.
                     * @throws IllegalArgumentException
                     *             if the given key's length is bigger than {@code
                     *             MAX_KEY_LENGTH}.
                     * @throws IllegalStateException
                     *             if this node has been removed.</member>
        <member name="M:biz.ritter.javapi.util.prefs.Preferences.putFloat(System.String,System.Single)">
                     * Adds a new preference to this node using the given key and {@code float}
                     * value or updates the value if a preference with the
                     * given key already exists.
                     * <p>
                     * The value is stored in its string form, which is the result of invoking
                     * {@link Float#toString(float) Float.toString(float)}.
                     * </p>
                     *
                     * @param key
                     *            the preference key to be added or updated.
                     * @param value
                     *            the preference value for the given key.
                     * @throws NullPointerException
                     *             if the given key is {@code null}.
                     * @throws IllegalArgumentException
                     *             if the given key's length is bigger than {@code
                     *             MAX_KEY_LENGTH}.
                     * @throws IllegalStateException
                     *             if this node has been removed.</member>
        <member name="M:biz.ritter.javapi.util.prefs.Preferences.putInt(System.String,System.Int32)">
                     * Adds a new preference to this node using the given key and {@code int}
                     * value or updates the value if a preference with the
                     * given key already exists.
                     * <p>
                     * The value is stored in its string form, which is the result of invoking
                     * {@link Integer#toString(int) Integer.toString(int)}.
                     * </p>
                     *
                     * @param key
                     *            the preference key to be added or updated.
                     * @param value
                     *            the preference value for the given key.
                     * @throws NullPointerException
                     *             if the given key is {@code null}.
                     * @throws IllegalArgumentException
                     *             if the given key's length is bigger than {@code
                     *             MAX_KEY_LENGTH}.
                     * @throws IllegalStateException
                     *             if this node has been removed.</member>
        <member name="M:biz.ritter.javapi.util.prefs.Preferences.putLong(System.String,System.Int64)">
                     * Adds a new preference to this node using the given key and {@code long}
                     * value or updates the value if a preference with the
                     * given key already exists.
                     * <p>
                     * The value is stored in its string form, which is the result of invoking
                     * {@link Long#toString(long) Long.toString(long)}.
                     * </p>
                     *
                     * @param key
                     *            the preference key to be added or updated.
                     * @param value
                     *            the preference value for the given key.
                     * @throws NullPointerException
                     *             if the given key is {@code null}.
                     * @throws IllegalArgumentException
                     *             if the given key's length is bigger than {@code
                     *             MAX_KEY_LENGTH}.
                     * @throws IllegalStateException
                     *             if this node has been removed.</member>
        <member name="M:biz.ritter.javapi.util.prefs.Preferences.remove(System.String)">
                     * Removes the preference mapped to the given key from this node.
                     *
                     * @param key
                     *            the key of the preference to be removed.
                     * @throws NullPointerException
                     *             if the given key is {@code null}.
                     * @throws IllegalStateException
                     *             if this node has been removed.</member>
        <member name="M:biz.ritter.javapi.util.prefs.Preferences.removeNode">
                     * Removes this preference node with all its descendants. The removal won't
                     * necessarily be persisted until the method {@code flush()} is invoked.
                     *
                     * @throws BackingStoreException
                     *             if the backing store is unavailable or causes an operation
                     *             failure.
                     * @throws IllegalStateException
                     *             if this node has been removed.
                     * @throws UnsupportedOperationException
                     *             if this is a root node.</member>
        <member name="M:biz.ritter.javapi.util.prefs.Preferences.addNodeChangeListener(biz.ritter.javapi.util.prefs.NodeChangeListener)">
                     * Registers a {@code NodeChangeListener} instance for this node, which will
                     * handle {@code NodeChangeEvent}s. {@code NodeChangeEvent}s will be fired
                     * when a child node has been added to or removed from this node.
                     *
                     * @param ncl
                     *            the listener to be registered.
                     * @throws NullPointerException
                     *             if the given listener is {@code null}.
                     * @throws IllegalStateException
                     *             if this node has been removed.</member>
        <member name="M:biz.ritter.javapi.util.prefs.Preferences.addPreferenceChangeListener(biz.ritter.javapi.util.prefs.PreferenceChangeListener)">
                     * Registers a {@code PreferenceChangeListener} instance for this node,
                     * which will handle {@code PreferenceChangeEvent}s. {@code
                     * PreferenceChangeEvent}s will be fired when a preference has been added
                     * to, removed from, or updated for this node.
                     *
                     * @param pcl
                     *            the listener to be registered.
                     * @throws NullPointerException
                     *             if the given listener is {@code null}.
                     * @throws IllegalStateException
                     *             if this node has been removed.</member>
        <member name="M:biz.ritter.javapi.util.prefs.Preferences.removeNodeChangeListener(biz.ritter.javapi.util.prefs.NodeChangeListener)">
                     * Removes the given {@code NodeChangeListener} instance from this node.
                     *
                     * @param ncl
                     *            the listener to be removed.
                     * @throws IllegalArgumentException
                     *             if the given listener is {@code null}.
                     * @throws IllegalStateException
                     *             if this node has been removed.</member>
        <member name="M:biz.ritter.javapi.util.prefs.Preferences.removePreferenceChangeListener(biz.ritter.javapi.util.prefs.PreferenceChangeListener)">
                     * Removes the given {@code PreferenceChangeListener} instance from this
                     * node.
                     *
                     * @param pcl
                     *            the listener to be removed.
                     * @throws IllegalArgumentException
                     *             if the given listener is {@code null}.
                     * @throws IllegalStateException
                     *             if this node has been removed.</member>
        <member name="M:biz.ritter.javapi.util.prefs.Preferences.sync">
                     * Synchronizes the data of this preference node and its descendants with
                     * the back-end preference store. Any changes found in the back-end data
                     * should be reflected in this node and its descendants, and at the same
                     * time any local changes to this node and descendants should be persisted.
                     *
                     * @throws BackingStoreException
                     *             if the backing store is unavailable or causes an operation
                     *             failure.
                     * @throws IllegalStateException
                     *             if this node has been removed.</member>
        <member name="M:biz.ritter.javapi.util.prefs.Preferences.systemNodeForPackage(biz.ritter.javapi.lang.Class)">
                     * Returns the system preference node for the package of the given class.
                     * The absolute path of the returned node is one slash followed by the given
                     * class's full package name, replacing each period character ('.') with
                     * a slash. For example, the absolute path of the preference associated with
                     * the class Object would be "/java/lang". As a special case, the unnamed
                     * package is associated with a preference node "/&lt;unnamed&gt;". This
                     * method will create the node and its ancestors as needed. Any nodes created
                     * by this method won't necessarily be persisted until the method {@code
                     * flush()} is invoked.
                     *
                     * @param c
                     *            the given class.
                     * @return the system preference node for the package of the given class.
                     * @throws NullPointerException
                     *             if the given class is {@code null}.
                     * @throws SecurityException
                     *             if the {@code RuntimePermission("preferences")} is denied by
                     *             a SecurityManager.</member>
        <member name="M:biz.ritter.javapi.util.prefs.Preferences.systemRoot">
                     * Returns the root node of the system preference hierarchy.
                     *
                     * @return the system preference hierarchy root node.
                     * @throws SecurityException
                     *             if the {@code RuntimePermission("preferences")} is denied by
                     *             a SecurityManager.</member>
        <member name="M:biz.ritter.javapi.util.prefs.Preferences.userNodeForPackage(biz.ritter.javapi.lang.Class)">
                     * Returns the user preference node for the package of the given class.
                     * The absolute path of the returned node is one slash followed by the given
                     * class's full package name, replacing each period character ('.') with
                     * a slash. For example, the absolute path of the preference associated with
                     * the class Object would be "/java/lang". As a special case, the unnamed
                     * package is associated with a preference node "/&lt;unnamed&gt;". This
                     * method will create the node and its ancestors as needed. Any nodes created
                     * by this method won't necessarily be persisted until the method {@code
                     * flush()} is invoked.
                     *
                     * @param c
                     *            the given class.
                     * @return the user preference node for the package of the given class.
                     * @throws NullPointerException
                     *             if the given class is {@code null}.
                     * @throws SecurityException
                     *             if the {@code RuntimePermission("preferences")} is denied by
                     *             a SecurityManager.</member>
        <member name="M:biz.ritter.javapi.util.prefs.Preferences.userRoot">
                     * Returns the root node of the user preference hierarchy.
                     *
                     * @return the user preference hierarchy root node.
                     * @throws SecurityException
                     *             if the {@code RuntimePermission("preferences")} is denied by
                     *             a SecurityManager.</member>
        <member name="M:biz.ritter.javapi.util.prefs.Preferences.ToString">
                     * Returns a string representation of this node. The format is "User/System
                     * Preference Node: " followed by this node's absolute path.
                     *
                     * @return the string representation of this node.</member>
        <member name="T:biz.ritter.javapi.util.prefs.PreferencesFactory">
                 * This interface is used by the {@link Preferences} class as factory class to
                 * create {@code Preferences} instances. This interface can be implemented and
                 * installed to replace the default preferences implementation.
                 *
                 * @see java.util.prefs.Preferences
                 *
                 * @since 1.4</member>
        <member name="M:biz.ritter.javapi.util.prefs.PreferencesFactory.userRoot">
                     * Returns the root node of the preferences hierarchy for the calling user
                     * context.
                     *
                     * @return the user preferences hierarchy root node.</member>
        <member name="M:biz.ritter.javapi.util.prefs.PreferencesFactory.systemRoot">
                     * Returns the root node of the system preferences hierarchy.
                     *
                     * @return the system preferences hierarchy root node.</member>
        <!--FIXME: Invalid documentation markup was found for member T:biz.ritter.javapi.util.SimpleTimeZone-->
        <member name="F:biz.ritter.javapi.util.SimpleTimeZone.UTC_TIME">
                     * The constant for representing a start or end time in GMT time mode.</member>
        <member name="F:biz.ritter.javapi.util.SimpleTimeZone.STANDARD_TIME">
                     * The constant for representing a start or end time in standard local time mode,
                     * based on timezone's raw offset from GMT; does not include Daylight
                     * savings.</member>
        <member name="F:biz.ritter.javapi.util.SimpleTimeZone.WALL_TIME">
                     * The constant for representing a start or end time in local wall clock time
                     * mode, based on timezone's adjusted offset from GMT; includes
                     * Daylight savings.</member>
        <member name="M:biz.ritter.javapi.util.SimpleTimeZone.clone">
                     * Returns a new {@code SimpleTimeZone} with the same ID, {@code rawOffset} and daylight
                     * savings time rules as this SimpleTimeZone.
                     *
                     * @return a shallow copy of this {@code SimpleTimeZone}.
                     * @see java.lang.Cloneable</member>
        <member name="M:biz.ritter.javapi.util.SimpleTimeZone.Equals(System.Object)">
                     * Compares the specified object to this {@code SimpleTimeZone} and returns whether they
                     * are equal. The object must be an instance of {@code SimpleTimeZone} and have the
                     * same internal data.
                     *
                     * @param object
                     *            the object to compare with this object.
                     * @return {@code true} if the specified object is equal to this
                     *         {@code SimpleTimeZone}, {@code false} otherwise.
                     * @see #hashCode</member>
        <member name="M:biz.ritter.javapi.util.SimpleTimeZone.GetHashCode">
                     * Returns an integer hash code for the receiver. Objects which are equal
                     * return the same value for this method.
                     *
                     * @return the receiver's hash.
                     * @see #equals</member>
        <member name="M:biz.ritter.javapi.util.SimpleTimeZone.setDSTSavings(System.Int32)">
                     * Sets the daylight savings offset in milliseconds for this {@code SimpleTimeZone}.
                     *
                     * @param milliseconds
                     *            the daylight savings offset in milliseconds.</member>
        <member name="M:biz.ritter.javapi.util.SimpleTimeZone.setStartYear(System.Int32)">
                     * Sets the starting year for daylight savings time in this {@code SimpleTimeZone}.
                     * Years before this start year will always be in standard time.
                     *
                     * @param year
                     *            the starting year.</member>
        <member name="M:biz.ritter.javapi.util.SimpleTimeZone.ToString">
                     * Returns the string representation of this {@code SimpleTimeZone}.
                     *
                     * @return the string representation of this {@code SimpleTimeZone}.</member>
        <member name="M:biz.ritter.javapi.util.SimpleTimeZone.#ctor(System.Int32,System.String)">
                     * Constructs a {@code SimpleTimeZone} with the given base time zone offset from GMT
                     * and time zone ID. Timezone IDs can be obtained from
                     * {@code TimeZone.getAvailableIDs}. Normally you should use {@code TimeZone.getDefault} to
                     * construct a {@code TimeZone}.
                     *
                     * @param offset
                     *            the given base time zone offset to GMT.
                     * @param name
                     *            the time zone ID which is obtained from
                     *            {@code TimeZone.getAvailableIDs}.</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.util.SimpleTimeZone.#ctor(System.Int32,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)-->
        <member name="M:biz.ritter.javapi.util.SimpleTimeZone.#ctor(System.Int32,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
                     * Constructs a {@code SimpleTimeZone} with the given base time zone offset from GMT,
                     * time zone ID, times to start and end the daylight savings time, and
                     * the daylight savings time difference in milliseconds.
                     *
                     * @param offset
                     *            the given base time zone offset to GMT.
                     * @param name
                     *            the time zone ID which is obtained from
                     *            {@code TimeZone.getAvailableIDs}.
                     * @param startMonth
                     *            the daylight savings starting month. Month is 0-based. eg, 0
                     *            for January.
                     * @param startDay
                     *            the daylight savings starting day-of-week-in-month. Please see
                     *            the description of {@link #SimpleTimeZone(int, String, int, int, int, int, int, int, int, int)} for an example.
                     * @param startDayOfWeek
                     *            the daylight savings starting day-of-week. Please see the
                     *            description of {@link #SimpleTimeZone(int, String, int, int, int, int, int, int, int, int)} for an example.
                     * @param startTime
                     *            The daylight savings starting time in local wall time, which
                     *            is standard time in this case. Please see the description of
                     *            {@link #SimpleTimeZone(int, String, int, int, int, int, int, int, int, int)} for an example.
                     * @param endMonth
                     *            the daylight savings ending month. Month is 0-based. eg, 0 for
                     *            January.
                     * @param endDay
                     *            the daylight savings ending day-of-week-in-month. Please see
                     *            the description of {@link #SimpleTimeZone(int, String, int, int, int, int, int, int, int, int)} for an example.
                     * @param endDayOfWeek
                     *            the daylight savings ending day-of-week. Please see the description of
                     *            {@link #SimpleTimeZone(int, String, int, int, int, int, int, int, int, int)} for an example.
                     * @param endTime
                     *            the daylight savings ending time in local wall time, which is
                     *            daylight time in this case. Please see the description of {@link #SimpleTimeZone(int, String, int, int, int, int, int, int, int, int)}
                     *            for an example.
                     * @param daylightSavings
                     *            the daylight savings time difference in milliseconds.
                     * @throws IllegalArgumentException
                     *                if the month, day, dayOfWeek, or time parameters are out of
                     *                range for the start or end rule.</member>
        <member name="M:biz.ritter.javapi.util.SimpleTimeZone.#ctor(System.Int32,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
                     * Construct a {@code SimpleTimeZone} with the given base time zone offset from GMT,
                     * time zone ID, times to start and end the daylight savings time including a
                     * mode specifier, the daylight savings time difference in milliseconds.
                     * The mode specifies either {@link #WALL_TIME}, {@link #STANDARD_TIME}, or
                     * {@link #UTC_TIME}.
                     *
                     * @param offset
                     *            the given base time zone offset to GMT.
                     * @param name
                     *            the time zone ID which is obtained from
                     *            {@code TimeZone.getAvailableIDs}.
                     * @param startMonth
                     *            the daylight savings starting month. The month indexing is 0-based. eg, 0
                     *            for January.
                     * @param startDay
                     *            the daylight savings starting day-of-week-in-month. Please see
                     *            the description of {@link #SimpleTimeZone(int, String, int, int, int, int, int, int, int, int)} for an example.
                     * @param startDayOfWeek
                     *            the daylight savings starting day-of-week. Please see the
                     *            description of {@link #SimpleTimeZone(int, String, int, int, int, int, int, int, int, int)} for an example.
                     * @param startTime
                     *            the time of day in milliseconds on which daylight savings
                     *            time starts, based on the {@code startTimeMode}.
                     * @param startTimeMode
                     *            the mode (UTC, standard, or wall time) of the start time
                     *            value.
                     * @param endDay
                     *            the day of the week on which daylight savings time ends.
                     * @param endMonth
                     *            the daylight savings ending month. The month indexing is 0-based. eg, 0 for
                     *            January.
                     * @param endDayOfWeek
                     *            the daylight savings ending day-of-week. Please see the description of
                     *            {@link #SimpleTimeZone(int, String, int, int, int, int, int, int, int, int)} for an example.
                     * @param endTime
                     *            the time of day in milliseconds on which daylight savings
                     *            time ends, based on the {@code endTimeMode}.
                     * @param endTimeMode
                     *            the mode (UTC, standard, or wall time) of the end time value.
                     * @param daylightSavings
                     *            the daylight savings time difference in milliseconds.
                     * @throws IllegalArgumentException
                     *             if the month, day, dayOfWeek, or time parameters are out of
                     *             range for the start or end rule.</member>
        <member name="M:biz.ritter.javapi.util.SimpleTimeZone.getOffset(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
                     * Gets the offset from GMT of this {@code TimeZone} for the specified date and
                     * time. The offset includes daylight savings time if the specified date and
                     * time are within the daylight savings time period.
                     *
                     * @param era
                     *            the {@code GregorianCalendar} era, either {@code GregorianCalendar.BC} or
                     *            {@code GregorianCalendar.AD}.
                     * @param year
                     *            the year.
                     * @param month
                     *            the {@code Calendar} month.
                     * @param day
                     *            the day of the month.
                     * @param dayOfWeek
                     *            the {@code Calendar} day of the week.
                     * @param time
                     *            the time of day in milliseconds.
                     * @return the offset from GMT in milliseconds.</member>
        <member name="M:biz.ritter.javapi.util.SimpleTimeZone.inDaylightTime(biz.ritter.javapi.util.Date)">
                     * Returns whether the specified {@code Date} is in the daylight savings time period for
                     * this {@code TimeZone}.
                     *
                     * @param time
                     *            a {@code Date}.
                     * @return {@code true} when the {@code Date} is in the daylight savings time period, {@code false}
                     *         otherwise.</member>
        <member name="M:biz.ritter.javapi.util.SimpleTimeZone.setRawOffset(System.Int32)">
                     * Sets the offset for standard time from GMT for this {@code TimeZone}.
                     *
                     * @param offset
                     *            the offset from GMT in milliseconds.</member>
        <member name="T:biz.ritter.javapi.util.TooManyListenersException">
                 * A {@code TooManyListenersException} is thrown when an attempt is made to add
                 * more than one listener to an event source which only supports a single
                 * listener. It is also thrown when the same listener is added more than once.</member>
        <member name="M:biz.ritter.javapi.util.TooManyListenersException.#ctor">
                     * Constructs a new {@code TooManyListenersException} with the current stack
                     * trace filled in.</member>
        <member name="M:biz.ritter.javapi.util.TooManyListenersException.#ctor(System.String)">
                     * Constructs a new {@code TooManyListenersException} with the stack trace
                     * and message filled in.
                     *
                     * @param detailMessage
                     *            the detail message for the exception.</member>
        <!--FIXME: Invalid documentation markup was found for member T:biz.ritter.javapi.nio.Buffer-->
        <member name="F:biz.ritter.javapi.nio.Buffer.UNSET_MARK">
                     * <code>UNSET_MARK</code> means the mark has not been set.</member>
        <member name="F:biz.ritter.javapi.nio.Buffer.capacityJ">
            <summary>
            The capacity of this buffer, which never change.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.nio.Buffer.limitJ">
                     * <code>limit - 1</code> is the last element that can be read or written.
                     * Limit must be no less than zero and no greater than <code>capacity</code>.</member>
        <member name="F:biz.ritter.javapi.nio.Buffer.markJ">
                     * Mark is where position will be set when <code>reset()</code> is called.
                     * Mark is not set by default. Mark is always no less than zero and no
                     * greater than <code>position</code>.</member>
        <member name="F:biz.ritter.javapi.nio.Buffer.positionJ">
            <summary>
            The current position of this buffer. Position is always no less than zero
            and no greater than <code>limit</code>.
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.nio.Buffer.#ctor(System.Int32)">
                     * Construct a buffer with the specified capacity.
                     *
                     * @param capacity
                     *            The capacity of this buffer</member>
        <member name="M:biz.ritter.javapi.nio.Buffer.array">
                     * Answers the array that backs this buffer.
                     *
                     * It wants to allow array-backed buffers to be passed to native code more
                     * efficiently. Subclasses provide more concrete return values for this
                     * method.
                     *
                     * Modifications to this buffer's content will cause the returned array's
                     * content to be modified, and vice versa.
                     *
                     * Invoking the <code>hasArray</code> method before invoking this method
                     * can guarantee it to be called safely.
                     *
                     * @return The array that backs this buffer
                     *
                     * @throws ReadOnlyBufferException -
                     *             If this buffer is backed by an array but is read-only
                     *         UnsupportedOperationException - If this buffer is not backed
                     *             by an accessible array
                     * @since 1.6
                     *</member>
        <member name="M:biz.ritter.javapi.nio.Buffer.arrayOffset">
                     * Returns the offset within this buffer's backing array of the first
                     * element of the buffer (optional operation).
                     *
                     * If this buffer is backed by an array then buffer position p corresponds
                     * to array index p + arrayOffset().
                     *
                     * Invoke the hasArray method before invoking this method in order to ensure
                     * that this buffer has an accessible backing array.
                     *
                     * @return The offset within this buffer's array of the first element of the
                     *         buffer
                     *
                     * @throws ReadOnlyBufferException -
                     *             If this buffer is backed by an array but is read-only
                     *         UnsupportedOperationException - If this buffer is not backed
                     *             by an accessible array
                     *
                     * @since 1.6</member>
        <member name="M:biz.ritter.javapi.nio.Buffer.capacity">
                     * Returns the capacity of this buffer.
                     *
                     * @return the number of elements that are contained in this buffer.</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.nio.Buffer.clear-->
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.nio.Buffer.flip-->
        <member name="M:biz.ritter.javapi.nio.Buffer.hasArray">
                     * Answers if this buffer is backed by an available array.
                     *
                     * If it returns true then the <code>array</code> and
                     * <code>arrayOffset</code> methods can be called safely.
                     *
                     * @return true if and only if this buffer is backed by an array and is
                     *         not read-only.
                     *
                     * @since 1.6</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.nio.Buffer.hasRemaining-->
        <member name="M:biz.ritter.javapi.nio.Buffer.isDirect">
                     * Answers if this buffer is direct.
                     *
                     * @return true if and only if this buffer is direct
                     *
                     * @since 1.6</member>
        <member name="M:biz.ritter.javapi.nio.Buffer.isReadOnly">
                     * Indicates whether this buffer is read-only.
                     *
                     * @return {@code true} if this buffer is read-only, {@code false}
                     *         otherwise.</member>
        <member name="M:biz.ritter.javapi.nio.Buffer.limit">
                     * Returns the limit of this buffer.
                     *
                     * @return the limit of this buffer.</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.nio.Buffer.limit(System.Int32)-->
        <member name="M:biz.ritter.javapi.nio.Buffer.mark">
                     * Marks the current position, so that the position may return to this point
                     * later by calling <code>reset()</code>.
                     *
                     * @return this buffer.</member>
        <member name="M:biz.ritter.javapi.nio.Buffer.position">
                     * Returns the position of this buffer.
                     *
                     * @return the value of this buffer's current position.</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.nio.Buffer.position(System.Int32)-->
        <member name="M:biz.ritter.javapi.nio.Buffer.remaining">
            <summary>
            Returns the number of remaining elements in this buffer, that is
            <c>limit - position</c>.
            </summary>
            <returns>the number of remaining elements in this buffer.</returns>
        </member>
        <member name="M:biz.ritter.javapi.nio.Buffer.reset">
                     * Resets the position of this buffer to the <code>mark</code>.
                     *
                     * @return this buffer.
                     * @exception InvalidMarkException
                     *                if the mark is not set.</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.nio.Buffer.rewind-->
        <!--FIXME: Invalid documentation markup was found for member T:biz.ritter.javapi.lang.AbstractMethodError-->
        <member name="M:biz.ritter.javapi.lang.AbstractMethodError.#ctor">
            	     * Constructs a new {@code AbstractMethodError} that includes the current
            	     * stack trace.</member>
        <member name="M:biz.ritter.javapi.lang.AbstractMethodError.#ctor(System.String)">
            	     * Constructs a new {@code AbstractMethodError} with the current stack trace
            	     * and the specified detail message.
            	     *
            	     * @param detailMessage
            	     *            the detail message for this error.</member>
        <!--FIXME: Invalid documentation markup was found for member T:biz.ritter.javapi.lang.ClassCircularityError-->
        <member name="M:biz.ritter.javapi.lang.ClassCircularityError.#ctor">
                 * Constructs a new {@code ClassCircularityError} that include the current
                 * stack trace.</member>
        <member name="M:biz.ritter.javapi.lang.ClassCircularityError.#ctor(System.String)">
                 * Constructs a new {@code ClassCircularityError} with the current stack
                 * trace and the specified detail message.
                 *
                 * @param detailMessage
                 *            the detail message for this error.</member>
        <member name="T:biz.ritter.javapi.lang.ClassFormatError">
             * Thrown by a class loader when a class file has an illegal format or if the
             * data that it contains can not be interpreted as a class.</member>
        <member name="M:biz.ritter.javapi.lang.ClassFormatError.#ctor">
                 * Constructs a new {@code ClassFormatError} that includes the current stack
                 * trace.</member>
        <member name="M:biz.ritter.javapi.lang.ClassFormatError.#ctor(System.String)">
                 * Constructs a new {@code ClassFormatError} with the current stack trace
                 * and the specified detail message.
                 *
                 * @param detailMessage
                 *            the detail message for this error.</member>
        <!--FIXME: Invalid documentation markup was found for member T:biz.ritter.javapi.lang.InstantiationError-->
        <member name="M:biz.ritter.javapi.lang.InstantiationError.#ctor">
                 * Constructs a new {@code InstantiationError} that includes the current
                 * stack trace.</member>
        <member name="M:biz.ritter.javapi.lang.InstantiationError.#ctor(System.String)">
                 * Constructs a new {@code InstantiationError} with the current stack trace
                 * and the specified detail message.
                 *
                 * @param detailMessage
                 *            the detail message for this error.</member>
        <member name="M:biz.ritter.javapi.lang.InstantiationError.#ctor(biz.ritter.javapi.lang.Class)">
                 * Constructs a new {@code InstantiationError} with the current stack trace
                 * and the class that caused this error.
                 *
                 * @param clazz
                 *            the class that can not be instantiated.</member>
        <member name="T:biz.ritter.javapi.lang.IncompatibleClassChangeError">
            	 * {@code IncompatibleClassChangeError} is the superclass of all classes which
            	 * represent errors that occur when inconsistent class files are loaded into
            	 * the same running image.
            	 *
            	 * @see Error</member>
        <member name="M:biz.ritter.javapi.lang.IncompatibleClassChangeError.#ctor">
            	     * Constructs a new {@code IncompatibleClassChangeError} that includes the
            	     * current stack trace.</member>
        <member name="M:biz.ritter.javapi.lang.IncompatibleClassChangeError.#ctor(System.String)">
            	     * Constructs a new {@code IncompatibleClassChangeError} with the current
            	     * stack trace and the specified detail message.
            	     *
            	     * @param detailMessage
            	     *            the detail message for this error.</member>
        <!--FIXME: Invalid documentation markup was found for member T:biz.ritter.javapi.lang.NoSuchFieldError-->
        <member name="M:biz.ritter.javapi.lang.NoSuchFieldError.#ctor">
                 * Constructs a new {@code NoSuchFieldError} that includes the current stack
                 * trace.</member>
        <member name="M:biz.ritter.javapi.lang.NoSuchFieldError.#ctor(System.String)">
                 * Constructs a new {@code NoSuchFieldError} with the current stack trace
                 * and the specified detail message.
                 *
                 * @param detailMessage
                 *            the detail message for this error.</member>
        <member name="T:biz.ritter.javapi.lang.NoSuchFieldException">
             * Thrown when the virtual machine notices that a program tries to reference,
             * on a class or object, a field that does not exist.</member>
        <member name="M:biz.ritter.javapi.lang.NoSuchFieldException.#ctor">
                 * Constructs a new {@code NoSuchFieldException} that includes the current
                 * stack trace.</member>
        <member name="M:biz.ritter.javapi.lang.NoSuchFieldException.#ctor(System.String)">
                 * Constructs a new {@code NoSuchFieldException} with the current stack
                 * trace and the specified detail message.
                 *
                 * @param detailMessage
                 *            the detail message for this exception.</member>
        <member name="T:biz.ritter.javapi.lang.NoSuchMethodError">
             * Thrown when the virtual machine notices that a program tries to reference,
             * on a class or object, a method that does not exist.</member>
        <member name="M:biz.ritter.javapi.lang.NoSuchMethodError.#ctor">
                 * Constructs a new {@code NoSuchMethodError} that includes the current
                 * stack trace.</member>
        <member name="M:biz.ritter.javapi.lang.NoSuchMethodError.#ctor(System.String)">
                 * Constructs a new {@code NoSuchMethodError} with the current stack trace
                 * and the specified detail message.
                 *
                 * @param detailMessage
                 *            the detail message for this exception.</member>
        <member name="T:biz.ritter.javapi.lang.ProcessBuilder">
             * Creates operating system processes.
             *
             * @since 1.5</member>
        <member name="M:biz.ritter.javapi.lang.ProcessBuilder.#ctor(System.String[])">
                 * Constructs a new {@code ProcessBuilder} instance with the specified
                 * operating system program and its arguments.
                 *
                 * @param command
                 *            the requested operating system program and its arguments.</member>
        <member name="M:biz.ritter.javapi.lang.ProcessBuilder.#ctor(biz.ritter.javapi.util.List{System.String})">
                 * Constructs a new {@code ProcessBuilder} instance with the specified
                 * operating system program and its arguments. Note that the list passed to
                 * this constructor is not copied, so any subsequent updates to it are
                 * reflected in this instance's state.
                 *
                 * @param command
                 *            the requested operating system program and its arguments.
                 * @throws NullPointerException
                 *             if {@code command} is {@code null}.</member>
        <member name="M:biz.ritter.javapi.lang.ProcessBuilder.command">
                 * Returns this process builder's current program and arguments. Note that
                 * the returned list is not a copy and modifications to it will change the
                 * state of this instance.
                 *
                 * @return this process builder's program and arguments.</member>
        <member name="M:biz.ritter.javapi.lang.ProcessBuilder.command(System.String[])">
                 * Changes the program and arguments of this process builder.
                 *
                 * @param command
                 *            the new operating system program and its arguments.
                 * @return this process builder instance.</member>
        <member name="M:biz.ritter.javapi.lang.ProcessBuilder.command(biz.ritter.javapi.util.List{System.String})">
                 * Changes the program and arguments of this process builder. Note that the
                 * list passed to this method is not copied, so any subsequent updates to it
                 * are reflected in this instance's state.
                 *
                 * @param command
                 *            the new operating system program and its arguments.
                 * @return this process builder instance.
                 * @throws NullPointerException
                 *             if {@code command} is {@code null}.</member>
        <member name="M:biz.ritter.javapi.lang.ProcessBuilder.directory">
                 * Returns the working directory of this process builder. If {@code null} is
                 * returned, then the working directory of the Java process is used when a
                 * process is started.
                 *
                 * @return the current working directory, may be {@code null}.</member>
        <member name="M:biz.ritter.javapi.lang.ProcessBuilder.directory(biz.ritter.javapi.io.File)">
                 * Changes the working directory of this process builder. If the specified
                 * directory is {@code null}, then the working directory of the Java
                 * process is used when a process is started.
                 *
                 * @param directory
                 *            the new working directory for this process builder.
                 * @return this process builder instance.</member>
        <member name="M:biz.ritter.javapi.lang.ProcessBuilder.environment">
                 * Returns this process builder's current environment. When a process
                 * builder instance is created, the environment is populated with a copy of
                 * the environment, as returned by {@link System#getenv()}. Note that the
                 * map returned by this method is not a copy and any changes made to it are
                 * reflected in this instance's state.
                 *
                 * @return the map containing this process builder's environment variables.</member>
        <member name="M:biz.ritter.javapi.lang.ProcessBuilder.redirectErrorStream">
                 * Indicates whether the standard error should be redirected to standard
                 * output. If redirected, the {@link Process#getErrorStream()} will always
                 * return end of stream and standard error is written to
                 * {@link Process#getInputStream()}.
                 *
                 * @return {@code true} if the standard error is redirected; {@code false}
                 *         otherwise.</member>
        <member name="M:biz.ritter.javapi.lang.ProcessBuilder.redirectErrorStream(System.Boolean)">
                 * Changes the state of whether or not standard error is redirected to
                 * standard output.
                 *
                 * @param redirectErrorStream
                 *            {@code true} to redirect standard error, {@code false}
                 *            otherwise.
                 * @return this process builder instance.</member>
        <member name="M:biz.ritter.javapi.lang.ProcessBuilder.start">
                 * Starts a new process based on the current state of this process builder.
                 *
                 * @return the new {@code Process} instance.
                 * @throws NullPointerException
                 *             if any of the elements of {@link #command()} is {@code null}.
                 * @throws IndexOutOfBoundsException
                 *             if {@link #command()} is empty.
                 * @throws SecurityException
                 *             if {@link SecurityManager#checkExec(String)} doesn't allow
                 *             process creation.
                 * @throws IOException
                 *             if an I/O error happens.</member>
        <member name="T:biz.ritter.javapi.lang.StackOverflowError">
             * Thrown when the depth of the callstack of the running program excedes some
             * platform or virtual machine specific limit. Typically, this will occur only
             * when a program becomes infinitely recursive, but it can also occur in
             * correctly written (but deeply recursive) programs.</member>
        <member name="M:biz.ritter.javapi.lang.StackOverflowError.#ctor">
                 * Constructs a new {@code StackOverflowError} that includes the current
                 * stack trace.</member>
        <member name="M:biz.ritter.javapi.lang.StackOverflowError.#ctor(System.String)">
                 * Constructs a new {@code StackOverflowError} with the current stack trace
                 * and the specified detail message.
                 *
                 * @param detailMessage
                 *            the detail message for this exception.</member>
        <!--FIXME: Invalid documentation markup was found for member T:biz.ritter.javapi.lang.StrictMath-->
        <member name="F:biz.ritter.javapi.lang.StrictMath.E">
                 * The double value closest to e, the base of the natural logarithm.</member>
        <member name="F:biz.ritter.javapi.lang.StrictMath.PI">
                 * The double value closest to pi, the ratio of a circle's circumference to
                 * its diameter.</member>
        <member name="M:biz.ritter.javapi.lang.StrictMath.#ctor">
                 * Prevents this class from being instantiated.</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.lang.StrictMath.abs(System.Double)-->
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.lang.StrictMath.abs(System.Single)-->
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.lang.StrictMath.abs(System.Int32)-->
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.lang.StrictMath.abs(System.Int64)-->
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.lang.StrictMath.acos(System.Double)-->
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.lang.StrictMath.asin(System.Double)-->
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.lang.StrictMath.atan(System.Double)-->
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.lang.StrictMath.atan2(System.Double,System.Double)-->
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.lang.StrictMath.cbrt(System.Double)-->
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.lang.StrictMath.ceil(System.Double)-->
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.lang.StrictMath.cosh(System.Double)-->
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.lang.StrictMath.cos(System.Double)-->
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.lang.StrictMath.exp(System.Double)-->
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.lang.StrictMath.expm1(System.Double)-->
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.lang.StrictMath.floor(System.Double)-->
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.lang.StrictMath.hypot(System.Double,System.Double)-->
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.lang.StrictMath.IEEEremainder(System.Double,System.Double)-->
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.lang.StrictMath.log(System.Double)-->
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.lang.StrictMath.log10(System.Double)-->
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.lang.StrictMath.log1p(System.Double)-->
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.lang.StrictMath.max(System.Double,System.Double)-->
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.lang.StrictMath.max(System.Single,System.Single)-->
        <member name="M:biz.ritter.javapi.lang.StrictMath.max(System.Int32,System.Int32)">
                 * Returns the most positive (closest to positive infinity) of the two
                 * arguments.
                 *
                 * @param i1
                 *            the first argument.
                 * @param i2
                 *            the second argument.
                 * @return the larger of {@code i1} and {@code i2}.</member>
        <member name="M:biz.ritter.javapi.lang.StrictMath.max(System.Int64,System.Int64)">
                 * Returns the most positive (closest to positive infinity) of the two
                 * arguments.
                 *
                 * @param l1
                 *            the first argument.
                 * @param l2
                 *            the second argument.
                 * @return the larger of {@code l1} and {@code l2}.</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.lang.StrictMath.min(System.Double,System.Double)-->
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.lang.StrictMath.min(System.Single,System.Single)-->
        <member name="M:biz.ritter.javapi.lang.StrictMath.min(System.Int32,System.Int32)">
                 * Returns the most negative (closest to negative infinity) of the two
                 * arguments.
                 *
                 * @param i1
                 *            the first argument.
                 * @param i2
                 *            the second argument.
                 * @return the smaller of {@code i1} and {@code i2}.</member>
        <member name="M:biz.ritter.javapi.lang.StrictMath.min(System.Int64,System.Int64)">
                 * Returns the most negative (closest to negative infinity) of the two
                 * arguments.
                 *
                 * @param l1
                 *            the first argument.
                 * @param l2
                 *            the second argument.
                 * @return the smaller of {@code l1} and {@code l2}.</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.lang.StrictMath.pow(System.Double,System.Double)-->
        <member name="M:biz.ritter.javapi.lang.StrictMath.random">
                 * Returns a pseudo-random number between 0.0 (inclusive) and 1.0
                 * (exclusive).
                 *
                 * @return a pseudo-random number.</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.lang.StrictMath.rint(System.Double)-->
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.lang.StrictMath.round(System.Double)-->
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.lang.StrictMath.round(System.Single)-->
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.lang.StrictMath.signum(System.Double)-->
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.lang.StrictMath.signum(System.Single)-->
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.lang.StrictMath.sinh(System.Double)-->
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.lang.StrictMath.sin(System.Double)-->
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.lang.StrictMath.sqrt(System.Double)-->
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.lang.StrictMath.tan(System.Double)-->
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.lang.StrictMath.tanh(System.Double)-->
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.lang.StrictMath.toDegrees(System.Double)-->
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.lang.StrictMath.toRadians(System.Double)-->
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.lang.StrictMath.ulp(System.Double)-->
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.lang.StrictMath.ulp(System.Single)-->
        <member name="M:biz.ritter.javapi.lang.StrictMath.nextAfter(System.Double,System.Double)">
                 * Answers a double next to the first given double value in the direction of
                 * the second given double.
                 *
                 * @param start
                 *            the double value to start
                 * @param direction
                 *            the double indicating the direction
                 * @return a double next to the first given double value in the direction of
                 *         the second given double.
                 *
                 * @since 1.6</member>
        <member name="M:biz.ritter.javapi.lang.StrictMath.nextUp(System.Double)">
                 * Answers the next larger double value to d.
                 *
                 * @param d
                 *            the double value to start
                 * @return the next larger double value of d.
                 *
                 * @since 1.6</member>
        <member name="M:biz.ritter.javapi.lang.StrictMath.nextUp(System.Single)">
                 * Answers the next larger float value to d.
                 *
                 * @param f
                 *            the float value to start
                 * @return the next larger float value of d.
                 *
                 * @since 1.6</member>
        <member name="T:biz.ritter.javapi.lang.VerifyError">
             * Thrown when the virtual machine notices that an attempt is made to load a
             * class which does not pass the class verification phase.</member>
        <member name="M:biz.ritter.javapi.lang.VerifyError.#ctor">
                 * Constructs a new {@code VerifyError} that includes the current stack
                 * trace.</member>
        <member name="M:biz.ritter.javapi.lang.VerifyError.#ctor(System.String)">
                 * Constructs a new {@code VerifyError} with the current stack trace and the
                 * specified detail message.
                 *
                 * @param detailMessage
                 *            the detail message for this exception.</member>
        <member name="T:biz.ritter.javapi.lang.TypeNotPresentException">
             * Thrown when a program tries to access a class, interface, enum or annotation
             * type through a string that contains the type's name and the type cannot be
             * found. This exception is an unchecked alternative to
             * {@link java.lang.ClassNotFoundException}.
             *
             * @since 1.5</member>
        <member name="M:biz.ritter.javapi.lang.TypeNotPresentException.#ctor(System.String,biz.ritter.javapi.lang.Throwable)">
                 * Constructs a new {@code TypeNotPresentException} with the current stack
                 * trace, a detail message that includes the name of the type that could not
                 * be found and the {@code Throwable} that caused this exception.
                 *
                 * @param typeName
                 *            the fully qualified name of the type that could not be found.
                 * @param cause
                 *            the optional cause of this exception, may be {@code null}.</member>
        <member name="M:biz.ritter.javapi.lang.TypeNotPresentException.typeName">
                 * Gets the fully qualified name of the type that could not be found.
                 *
                 * @return the name of the type that caused this exception.</member>
        <member name="T:biz.ritter.javapi.lang.UnknownError">
             * Thrown when the virtual machine must throw an error which does not match any
             * known exceptional condition.</member>
        <member name="M:biz.ritter.javapi.lang.UnknownError.#ctor">
                 * Constructs a new {@code UnknownError} that includes the current stack
                 * trace.</member>
        <member name="M:biz.ritter.javapi.lang.UnknownError.#ctor(System.String)">
                 * Constructs a new {@code UnknownError} with the current stack trace and
                 * the specified detail message.
                 *
                 * @param detailMessage
                 *            the detail message for this exception.</member>
        <member name="T:biz.ritter.javapi.lang.UnsatisfiedLinkError">
             * Thrown when an attempt is made to invoke a native for which an implementation
             * could not be found.</member>
        <member name="M:biz.ritter.javapi.lang.UnsatisfiedLinkError.#ctor">
                 * Constructs a new {@code UnsatisfiedLinkError} that includes the current
                 * stack trace.</member>
        <member name="M:biz.ritter.javapi.lang.UnsatisfiedLinkError.#ctor(System.String)">
                 * Constructs a new {@code UnsatisfiedLinkError} with the current stack
                 * trace and the specified detail message.
                 *
                 * @param detailMessage
                 *            the detail message for this exception.</member>
        <member name="T:biz.ritter.javapi.lang.UnsupportedClassVersionError">
             * Thrown when an attempt is made to load a class with a format version that is
             * not supported by the virtual machine.</member>
        <member name="M:biz.ritter.javapi.lang.UnsupportedClassVersionError.#ctor">
                 * Constructs a new {@code UnsupportedClassVersionError} that includes the
                 * current stack trace.</member>
        <member name="M:biz.ritter.javapi.lang.UnsupportedClassVersionError.#ctor(System.String)">
                 * Constructs a new {@code UnsupportedClassVersionError} with the current
                 * stack trace and the specified detail message.
                 *
                 * @param detailMessage
                 *            the detail message for this exception.</member>
        <member name="T:biz.ritter.javapi.lang.AutoCloseable">
            <summary>
            Represent a resource that should be close if not using.
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.lang.AutoCloseable.close">
            <summary>
            Close resource, also from underlying system.
            </summary>
        </member>
        <member name="T:biz.ritter.javapi.io.IOError">
            <summary>
            This error is thrown when a severe I/O error has happened.
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.io.IOError.#ctor(biz.ritter.javapi.lang.Throwable)">
            <summary>
            Constructs a new instance of <see cref="T:biz.ritter.javapi.io.IOError" /> with its cause filled in.
            </summary>
            <param name="cause">The detail cause for the error.</param>
        </member>
        <member name="T:biz.ritter.javapi.io.WriteAbortedException">
             * Signals that the {@link ObjectInputStream#readObject()} method has detected
             * an exception marker in the input stream. This marker indicates that exception
             * occurred when the object was serialized, and this marker was inserted instead
             * of the original object. It is a way to "propagate" an exception from the code
             * that attempted to write the object to the code that is attempting to read the
             * object.
             *
             * @see ObjectInputStream#readObject()</member>
        <member name="F:biz.ritter.javapi.io.WriteAbortedException.detail">
                 * The exception that occured when writeObject() was attempting to serialize
                 * the object.</member>
        <member name="M:biz.ritter.javapi.io.WriteAbortedException.#ctor(System.String,biz.ritter.javapi.lang.Exception)">
                 * Constructs a new {@code WriteAbortedException} with its stack trace,
                 * detail message and the exception which caused the underlying problem when
                 * serializing the object filled in.
                 *
                 * @param detailMessage
                 *            the detail message for this exception.
                 * @param rootCause
                 *            the exception that was thrown when serializing the object.</member>
        <member name="M:biz.ritter.javapi.io.WriteAbortedException.getMessage">
                 * Gets the extra information message which was provided when this exception
                 * was created. Returns {@code null} if no message was provided at creation
                 * time.
                 *
                 * @return the exception message.</member>
        <member name="M:biz.ritter.javapi.io.WriteAbortedException.getCause">
                 * Gets the cause of this exception or {@code null} if there is no cause.
                 *
                 * @return the exception cause.</member>
        <member name="T:biz.ritter.javapi.io.StringReader">
             * A specialized {@link Reader} that reads characters from a {@code String} in
             * a sequential manner.
             *
             * @see StringWriter</member>
        <member name="M:biz.ritter.javapi.io.StringReader.#ctor(System.String)">
                 * Construct a new {@code StringReader} with {@code str} as source. The size
                 * of the reader is set to the {@code length()} of the string and the Object
                 * to synchronize access through is set to {@code str}.
                 *
                 * @param str
                 *            the source string for this reader.</member>
        <member name="M:biz.ritter.javapi.io.StringReader.close">
                 * Closes this reader. Once it is closed, read operations on this reader
                 * will throw an {@code IOException}. Only the first invocation of this
                 * method has any effect.</member>
        <member name="M:biz.ritter.javapi.io.StringReader.isClosed">
                 * Returns a boolean indicating whether this reader is closed.
                 *
                 * @return {@code true} if closed, otherwise {@code false}.</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.io.StringReader.mark(System.Int32)-->
        <member name="M:biz.ritter.javapi.io.StringReader.markSupported">
                 * Indicates whether this reader supports the {@code mark()} and {@code
                 * reset()} methods. This implementation returns {@code true}.
                 *
                 * @return always {@code true}.</member>
        <member name="M:biz.ritter.javapi.io.StringReader.read">
                 * Reads a single character from the source string and returns it as an
                 * integer with the two higher-order bytes set to 0. Returns -1 if the end
                 * of the source string has been reached.
                 *
                 * @return the character read or -1 if the end of the source string has been
                 *         reached.
                 * @throws IOException
                 *             if this reader is closed.</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.io.StringReader.read(System.Char[],System.Int32,System.Int32)-->
        <member name="M:biz.ritter.javapi.io.StringReader.ready">
                 * Indicates whether this reader is ready to be read without blocking. This
                 * implementation always returns {@code true}.
                 *
                 * @return always {@code true}.
                 * @throws IOException
                 *             if this reader is closed.
                 * @see #read()
                 * @see #read(char[], int, int)</member>
        <member name="M:biz.ritter.javapi.io.StringReader.reset">
                 * Resets this reader's position to the last {@code mark()} location.
                 * Invocations of {@code read()} and {@code skip()} will occur from this new
                 * location. If this reader has not been marked, it is reset to the
                 * beginning of the source string.
                 *
                 * @throws IOException
                 *             if this reader is closed.
                 * @see #mark(int)
                 * @see #markSupported()</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.io.StringReader.skip(System.Int64)-->
        <member name="T:biz.ritter.javapi.io.StringBufferInputStream">
             * A specialized {@link InputStream} that reads bytes from a {@code String} in
             * a sequential manner.
             *
             * @deprecated Use {@link StringReader}</member>
        <member name="F:biz.ritter.javapi.io.StringBufferInputStream.buffer">
                 * The source string containing the data to read.</member>
        <member name="F:biz.ritter.javapi.io.StringBufferInputStream.count">
                 * The total number of characters in the source string.</member>
        <member name="F:biz.ritter.javapi.io.StringBufferInputStream.pos">
                 * The current position within the source string.</member>
        <member name="M:biz.ritter.javapi.io.StringBufferInputStream.#ctor(System.String)">
                 * Construct a new {@code StringBufferInputStream} with {@code str} as
                 * source. The size of the stream is set to the {@code length()} of the
                 * string.
                 *
                 * @param str
                 *            the source string for this stream.
                 * @throws NullPointerException
                 *             if {@code str} is {@code null}.</member>
        <member name="M:biz.ritter.javapi.io.StringBufferInputStream.available">
                 * Returns the number of bytes that are available before this stream will
                 * block.
                 *
                 * @return the number of bytes available before blocking.</member>
        <member name="M:biz.ritter.javapi.io.StringBufferInputStream.read">
                 * Reads a single byte from the source string and returns it as an integer
                 * in the range from 0 to 255. Returns -1 if the end of the source string
                 * has been reached.
                 *
                 * @return the byte read or -1 if the end of the source string has been
                 *         reached.</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.io.StringBufferInputStream.read(System.Byte[],System.Int32,System.Int32)-->
        <member name="M:biz.ritter.javapi.io.StringBufferInputStream.reset">
                 * Resets this stream to the beginning of the source string.</member>
        <member name="M:biz.ritter.javapi.io.StringBufferInputStream.skip(System.Int64)">
                 * Skips {@code n} characters in the source string. It does nothing and
                 * returns 0 if {@code n} is negative. Less than {@code n} characters are
                 * skipped if the end of the source string is reached before the operation
                 * completes.
                 *
                 * @param n
                 *            the number of characters to skip.
                 * @return the number of characters actually skipped.</member>
        <member name="T:biz.ritter.javapi.io.StreamCorruptedException">
             * Signals that the {@link ObjectInputStream#readObject()} method could not
             * read an object due to missing information (for example, a cyclic reference
             * that doesn't match a previous instance, or a missing class descriptor for the
             * object to be loaded).
             *
             * @see ObjectInputStream
             * @see OptionalDataException</member>
        <member name="M:biz.ritter.javapi.io.StreamCorruptedException.#ctor">
                 * Constructs a new {@code StreamCorruptedException} with its stack trace
                 * filled in.</member>
        <member name="M:biz.ritter.javapi.io.StreamCorruptedException.#ctor(System.String)">
                 * Constructs a new {@code StreamCorruptedException} with its stack trace
                 * and detail message filled in.
                 *
                 * @param detailMessage
                 *            the detail message for this exception.</member>
        <member name="T:biz.ritter.javapi.io.SerializablePermission">
             * Is used to enable access to potentially unsafe serialization operations. It
             * does have a name but no action list. The following table lists valid
             * permission names:
             * <table>
             * <tr>
             * <td>enableSubclassImplementation</td>
             * <td>Subclasses can override serialization behavior.</td>
             * </tr>
             * <tr>
             * <td>enableSubstitution</td>
             * <td>Object substitution is allowed.</td>
             * </tr>
             * </table>
             *
             * @see ObjectStreamConstants</member>
        <member name="M:biz.ritter.javapi.io.SerializablePermission.#ctor(System.String)">
                 * Constructs a new {@code SerializablePermission} with the specified name.
                 *
                 * @param permissionName
                 *            the name of the new permission.</member>
        <member name="M:biz.ritter.javapi.io.SerializablePermission.#ctor(System.String,System.String)">
                 * Constructs a new {@code SerializablePermission} with the specified name.
                 * The action list is ignored.
                 *
                 * @param name
                 *            the name of the new permission.
                 * @param actions
                 *            ignored.</member>
        <member name="T:biz.ritter.javapi.io.SequenceInputStream">
             * Concatenates two or more existing {@link InputStream}s. Reads are taken from
             * the first stream until it ends, then the next stream is used, until the last
             * stream returns end of file.</member>
        <member name="F:biz.ritter.javapi.io.SequenceInputStream.e">
                 * An enumeration which will return types of InputStream.</member>
        <member name="F:biz.ritter.javapi.io.SequenceInputStream.inJ">
                 * The current input stream.</member>
        <member name="M:biz.ritter.javapi.io.SequenceInputStream.#ctor(biz.ritter.javapi.io.InputStream,biz.ritter.javapi.io.InputStream)">
                 * Constructs a new {@code SequenceInputStream} using the two streams
                 * {@code s1} and {@code s2} as the sequence of streams to read from.
                 *
                 * @param s1
                 *            the first stream to get bytes from.
                 * @param s2
                 *            the second stream to get bytes from.
                 * @throws NullPointerException
                 *             if {@code s1} is {@code null}.</member>
        <member name="M:biz.ritter.javapi.io.SequenceInputStream.#ctor(biz.ritter.javapi.util.Enumeration{biz.ritter.javapi.io.InputStream})">
                 * Constructs a new SequenceInputStream using the elements returned from
                 * Enumeration {@code e} as the stream sequence. The instances returned by
                 * {@code e.nextElement()} must be of type {@link InputStream}.
                 *
                 * @param e
                 *            the enumeration of {@code InputStreams} to get bytes from.
                 * @throws NullPointerException
                 *             if any of the elements in {@code e} is {@code null}.</member>
        <member name="M:biz.ritter.javapi.io.SequenceInputStream.available">
                 * Returns the number of bytes that are available before the current input stream will
                 * block.
                 *
                 * @return the number of bytes available in the current input stream before blocking.
                 * @throws IOException
                 *             if an I/O error occurs in the current input stream.</member>
        <member name="M:biz.ritter.javapi.io.SequenceInputStream.close">
                 * Closes all streams in this sequence of input stream.
                 *
                 * @throws IOException
                 *             if an error occurs while closing any of the input streams.</member>
        <member name="M:biz.ritter.javapi.io.SequenceInputStream.nextStream">
                 * Sets up the next InputStream or leaves it alone if there are none left.
                 *
                 * @throws IOException</member>
        <member name="M:biz.ritter.javapi.io.SequenceInputStream.read">
                 * Reads a single byte from this sequence of input streams and returns it as
                 * an integer in the range from 0 to 255. It tries to read from the current
                 * stream first; if the end of this stream has been reached, it reads from
                 * the next one. Blocks until one byte has been read, the end of the last
                 * input stream in the sequence has been reached, or an exception is thrown.
                 *
                 * @return the byte read or -1 if either the end of the last stream in the
                 *         sequence has been reached or this input stream sequence is
                 *         closed.
                 * @throws IOException
                 *             if an error occurs while reading the current source input
                 *             stream.</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.io.SequenceInputStream.read(System.Byte[],System.Int32,System.Int32)-->
        <member name="T:biz.ritter.javapi.io.PipedWriter">
             * Places information on a communications pipe. When two threads want to pass
             * data back and forth, one creates a piped writer and the other creates a piped
             * reader.
             *
             * @see PipedReader</member>
        <member name="F:biz.ritter.javapi.io.PipedWriter.dest">
                 * The destination PipedReader</member>
        <member name="M:biz.ritter.javapi.io.PipedWriter.#ctor">
                 * Constructs a new unconnected {@code PipedWriter}. The resulting writer
                 * must be connected to a {@code PipedReader} before data may be written to
                 * it.
                 *
                 * @see PipedReader</member>
        <member name="M:biz.ritter.javapi.io.PipedWriter.#ctor(biz.ritter.javapi.io.PipedReader)">
                 * Constructs a new {@code PipedWriter} connected to the {@link PipedReader}
                 * {@code dest}. Any data written to this writer can be read from {@code
                 * dest}.
                 *
                 * @param dest
                 *            the {@code PipedReader} to connect to.
                 * @throws IOException
                 *             if {@code dest} is already connected.</member>
        <member name="M:biz.ritter.javapi.io.PipedWriter.close">
                 * Closes this writer. If a {@link PipedReader} is connected to this writer,
                 * it is closed as well and the pipe is disconnected. Any data buffered in
                 * the reader can still be read.
                 *
                 * @throws IOException
                 *             if an error occurs while closing this writer.</member>
        <member name="M:biz.ritter.javapi.io.PipedWriter.connect(biz.ritter.javapi.io.PipedReader)">
                 * Connects this {@code PipedWriter} to a {@link PipedReader}. Any data
                 * written to this writer becomes readable in the reader.
                 *
                 * @param stream
                 *            the reader to connect to.
                 * @throws IOException
                 *             if this writer is closed or already connected, or if {@code
                 *             stream} is already connected.</member>
        <member name="M:biz.ritter.javapi.io.PipedWriter.flush">
                 * Notifies the readers of this {@code PipedReader} that characters can be read. This
                 * method does nothing if this Writer is not connected.
                 *
                 * @throws IOException
                 *             if an I/O error occurs while flushing this writer.</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.io.PipedWriter.write(System.Char[],System.Int32,System.Int32)-->
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.io.PipedWriter.write(System.Int32)-->
        <member name="T:biz.ritter.javapi.io.PipedReader">
             * Receives information on a communications pipe. When two threads want to pass
             * data back and forth, one creates a piped writer and the other creates a piped
             * reader.
             *
             * @see PipedWriter</member>
        <member name="F:biz.ritter.javapi.io.PipedReader.data">
                 * The circular buffer through which data is passed.</member>
        <member name="F:biz.ritter.javapi.io.PipedReader.inJ">
                 * The index in {@code buffer} where the next character will be
                 * written.</member>
        <member name="F:biz.ritter.javapi.io.PipedReader.outJ">
                 * The index in {@code buffer} where the next character will be read.</member>
        <member name="F:biz.ritter.javapi.io.PipedReader.PIPE_SIZE">
                 * The size of the default pipe in characters</member>
        <member name="F:biz.ritter.javapi.io.PipedReader.isConnected">
                 * Indicates if this pipe is connected</member>
        <member name="M:biz.ritter.javapi.io.PipedReader.#ctor">
                 * Constructs a new unconnected {@code PipedReader}. The resulting reader
                 * must be connected to a {@code PipedWriter} before data may be read from
                 * it.
                 *
                 * @see PipedWriter</member>
        <member name="M:biz.ritter.javapi.io.PipedReader.#ctor(System.Int32)">
                 * Constructs a new unconnected PipedReader and the buffer size is
                 * specified. The resulting Reader must be connected to a PipedWriter before
                 * data may be read from it.
                 *
                 * @param size
                 *            the size of the buffer.
                 * @throws IllegalArgumentException
                 *             if pipeSize is less than or equal to zero.
                 * @since 1.6</member>
        <member name="M:biz.ritter.javapi.io.PipedReader.#ctor(biz.ritter.javapi.io.PipedWriter,System.Int32)">
                 * Constructs a new PipedReader connected to the PipedWriter
                 * <code>out</code> and the buffer size is specified. Any data written to the writer can be read from the
                 * this reader.
                 *
                 * @param out
                 *            the PipedWriter to connect to.
                 * @param pipeSize
                 *            the size of the buffer.
                 * @throws IOException
                 *             if IO errors occur
                 * @throws IllegalArgumentException
                 *             if pipeSize is less than or equal to zero.
                 * @since 1.6</member>
        <member name="M:biz.ritter.javapi.io.PipedReader.#ctor(biz.ritter.javapi.io.PipedWriter)">
                 * Constructs a new {@code PipedReader} connected to the {@link PipedWriter}
                 * {@code out}. Any data written to the writer can be read from the this
                 * reader.
                 *
                 * @param out
                 *            the {@code PipedWriter} to connect to.
                 * @throws IOException
                 *             if {@code out} is already connected.</member>
        <member name="M:biz.ritter.javapi.io.PipedReader.close">
                 * Closes this reader. This implementation releases the buffer used for
                 * the pipe and notifies all threads waiting to read or write.
                 *
                 * @throws IOException
                 *             if an error occurs while closing this reader.</member>
        <member name="M:biz.ritter.javapi.io.PipedReader.connect(biz.ritter.javapi.io.PipedWriter)">
                 * Connects this {@code PipedReader} to a {@link PipedWriter}. Any data
                 * written to the writer becomes readable in this reader.
                 *
                 * @param src
                 *            the writer to connect to.
                 * @throws IOException
                 *             if this reader is closed or already connected, or if {@code
                 *             src} is already connected.</member>
        <member name="M:biz.ritter.javapi.io.PipedReader.establishConnection">
                 * Establishes the connection to the PipedWriter.
                 *
                 * @throws IOException
                 *             If this Reader is already connected.</member>
        <member name="M:biz.ritter.javapi.io.PipedReader.read">
                 * Reads a single character from this reader and returns it as an integer
                 * with the two higher-order bytes set to 0. Returns -1 if the end of the
                 * reader has been reached. If there is no data in the pipe, this method
                 * blocks until data is available, the end of the reader is detected or an
                 * exception is thrown.
                 * <p />
                 * Separate threads should be used to read from a {@code PipedReader} and to
                 * write to the connected {@link PipedWriter}. If the same thread is used,
                 * a deadlock may occur.
                 *
                 * @return the character read or -1 if the end of the reader has been
                 *         reached.
                 * @throws IOException
                 *             if this reader is closed or some other I/O error occurs.</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.io.PipedReader.read(System.Char[],System.Int32,System.Int32)-->
        <member name="M:biz.ritter.javapi.io.PipedReader.ready">
                 * Indicates whether this reader is ready to be read without blocking.
                 * Returns {@code true} if this reader will not block when {@code read} is
                 * called, {@code false} if unknown or blocking will occur. This
                 * implementation returns {@code true} if the internal buffer contains
                 * characters that can be read.
                 *
                 * @return always {@code false}.
                 * @throws IOException
                 *             if this reader is closed or not connected, or if some other
                 *             I/O error occurs.
                 * @see #read()
                 * @see #read(char[], int, int)</member>
        <member name="M:biz.ritter.javapi.io.PipedReader.receive(System.Char)">
                 * Receives a char and stores it into the PipedReader. This called by
                 * PipedWriter.write() when writes occur.
                 * <p />
                 * If the buffer is full and the thread sending #receive is interrupted, the
                 * InterruptedIOException will be thrown.
                 *
                 * @param oneChar
                 *            the char to store into the pipe.
                 *
                 * @throws IOException
                 *             If the stream is already closed or another IOException
                 *             occurs.</member>
        <member name="M:biz.ritter.javapi.io.PipedReader.receive(System.Char[],System.Int32,System.Int32)">
                 * Receives a char array and stores it into the PipedReader. This called by
                 * PipedWriter.write() when writes occur.
                 * <p />
                 * If the buffer is full and the thread sending #receive is interrupted, the
                 * InterruptedIOException will be thrown.
                 *
                 * @param chars
                 *            the char array to store into the pipe.
                 * @param offset
                 *            offset to start reading from
                 * @param count
                 *            total characters to read
                 *
                 * @throws IOException
                 *             If the stream is already closed or another IOException
                 *             occurs.</member>
        <member name="T:biz.ritter.javapi.io.OptionalDataException">
             * Signals that the {@link ObjectInputStream} class encountered a primitive type
             * ({@code int}, {@code char} etc.) instead of an object instance in the input
             * stream.
             *
             * @see ObjectInputStream#available()
             * @see ObjectInputStream#readObject()
             * @see ObjectInputStream#skipBytes(int)</member>
        <member name="F:biz.ritter.javapi.io.OptionalDataException.eof">
                 * {@code true} indicates that there is no more primitive data available.</member>
        <member name="F:biz.ritter.javapi.io.OptionalDataException.length">
                 * The number of bytes of primitive data (int, char, long etc.) that are
                 * available.</member>
        <member name="M:biz.ritter.javapi.io.OptionalDataException.#ctor">
                 * Constructs a new {@code OptionalDataException} with its stack trace
                 * filled in.</member>
        <member name="M:biz.ritter.javapi.io.OptionalDataException.#ctor(System.String)">
                 * Constructs a new {@code OptionalDataException} with its stack trace and
                 * detail message filled in.
                 *
                 * @param detailMessage
                 *            the detail message for this exception.</member>
        <member name="T:biz.ritter.javapi.io.LineNumberInputStream">
             * Wraps an existing {@link InputStream} and counts the line terminators
             * encountered while reading the data. Line numbering starts at 0. Recognized
             * line terminator sequences are {@code '\r'}, {@code '\n'} and {@code "\r\n"}.
             * When using {@code read}, line terminator sequences are always translated into
             * {@code '\n'}.
             *
             * @deprecated Use {@link LineNumberReader}</member>
        <member name="M:biz.ritter.javapi.io.LineNumberInputStream.#ctor(biz.ritter.javapi.io.InputStream)">
                 * Constructs a new {@code LineNumberInputStream} on the {@link InputStream}
                 * {@code in}. Line numbers are counted for all data read from this stream.
                 *
                 * @param in
                 *            The non-null input stream to count line numbers.</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.io.LineNumberInputStream.available-->
        <member name="M:biz.ritter.javapi.io.LineNumberInputStream.getLineNumber">
                 * Returns the current line number for this stream. Numbering starts at 0.
                 *
                 * @return the current line number.</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.io.LineNumberInputStream.mark(System.Int32)-->
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.io.LineNumberInputStream.read-->
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.io.LineNumberInputStream.read(System.Byte[],System.Int32,System.Int32)-->
        <member name="M:biz.ritter.javapi.io.LineNumberInputStream.reset">
                 * Resets this stream to the last marked location. It also resets the line
                 * count to what is was when this stream was marked.
                 *
                 * @throws IOException
                 *             if this stream is already closed, no mark has been set or the
                 *             mark is no longer valid because more than {@code readlimit}
                 *             bytes have been read since setting the mark.
                 * @see #mark(int)
                 * @see #markSupported()</member>
        <member name="M:biz.ritter.javapi.io.LineNumberInputStream.setLineNumber(System.Int32)">
                 * Sets the line number of this stream to the specified
                 * {@code lineNumber}. Note that this may have side effects on the
                 * line number associated with the last marked position.
                 *
                 * @param lineNumber
                 *            the new lineNumber value.
                 * @see #mark(int)
                 * @see #reset()</member>
        <member name="M:biz.ritter.javapi.io.LineNumberInputStream.skip(System.Int64)">
                 * Skips {@code count} number of bytes in this stream. Subsequent
                 * {@code read()}'s will not return these bytes unless {@code reset()} is
                 * used. This implementation skips {@code count} number of bytes in the
                 * filtered stream and increments the line number count whenever line
                 * terminator sequences are skipped.
                 *
                 * @param count
                 *            the number of bytes to skip.
                 * @return the number of bytes actually skipped.
                 * @throws IOException
                 *             if this stream is closed or another IOException occurs.
                 * @see #mark(int)
                 * @see #read()
                 * @see #reset()</member>
        <member name="T:biz.ritter.javapi.io.InvalidClassException">
             * Signals a problem during the serialization or deserialization of an
             * object. Possible reasons include:
             * <ul>
             * <li>The SUIDs of the class loaded by the VM and the serialized class info do
             * not match.</li>
             * <li>A serializable or externalizable object cannot be instantiated (when
             * deserializing) because the no-arg constructor that needs to be run is not
             * visible or fails.</li>
             * </ul>
             *
             * @see ObjectInputStream #readObject()
             * @see ObjectInputValidation#validateObject()</member>
        <member name="F:biz.ritter.javapi.io.InvalidClassException.classname">
                 * The fully qualified name of the class that caused the problem.</member>
        <member name="M:biz.ritter.javapi.io.InvalidClassException.#ctor(System.String)">
                 * Constructs a new {@code InvalidClassException} with its stack trace and
                 * detailed message filled in.
                 *
                 * @param detailMessage
                 *            the detail message for this exception.</member>
        <member name="M:biz.ritter.javapi.io.InvalidClassException.#ctor(System.String,System.String)">
                 * Constructs a new {@code InvalidClassException} with its stack trace,
                 * detail message and the fully qualified name of the class which caused the
                 * exception filled in.
                 *
                 * @param className
                 *            the name of the class that caused the exception.
                 * @param detailMessage
                 *            the detail message for this exception.</member>
        <member name="M:biz.ritter.javapi.io.InvalidClassException.getMessage">
                 * Returns the detail message which was provided when the exception was
                 * created. {@code null} is returned if no message was provided at creation
                 * time. If a detail message as well as a class name are provided, then the
                 * values are concatenated and returned.
                 *
                 * @return the detail message, possibly concatenated with the name of the
                 *         class that caused the problem.</member>
        <member name="T:biz.ritter.javapi.io.CharArrayReader">
             * A specialized {@link Reader} for reading the contents of a char array.
             *
             * @see CharArrayWriter</member>
        <member name="F:biz.ritter.javapi.io.CharArrayReader.buf">
                 * The buffer for characters.</member>
        <member name="F:biz.ritter.javapi.io.CharArrayReader.pos">
                 * The current buffer position.</member>
        <member name="F:biz.ritter.javapi.io.CharArrayReader.markedPos">
                 * The current mark position.</member>
        <member name="F:biz.ritter.javapi.io.CharArrayReader.count">
                 * The ending index of the buffer.</member>
        <member name="M:biz.ritter.javapi.io.CharArrayReader.#ctor(System.Char[])">
                 * Constructs a CharArrayReader on the char array {@code buf}. The size of
                 * the reader is set to the length of the buffer and the object to read
                 * from is set to {@code buf}.
                 *
                 * @param buf
                 *            the char array from which to read.</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.io.CharArrayReader.#ctor(System.Char[],System.Int32,System.Int32)-->
        <member name="M:biz.ritter.javapi.io.CharArrayReader.close">
                 * This method closes this CharArrayReader. Once it is closed, you can no
                 * longer read from it. Only the first invocation of this method has any
                 * effect.</member>
        <member name="M:biz.ritter.javapi.io.CharArrayReader.isOpen">
                 * Indicates whether this reader is open.
                 *
                 * @return {@code true} if the reader is open, {@code false} otherwise.</member>
        <member name="M:biz.ritter.javapi.io.CharArrayReader.isClosed">
                 * Indicates whether this reader is closed.
                 *
                 * @return {@code true} if the reader is closed, {@code false} otherwise.</member>
        <member name="M:biz.ritter.javapi.io.CharArrayReader.mark(System.Int32)">
                 * Sets a mark position in this reader. The parameter {@code readLimit} is
                 * ignored for CharArrayReaders. Calling {@code reset()} will reposition the
                 * reader back to the marked position provided the mark has not been
                 * invalidated.
                 *
                 * @param readLimit
                 *            ignored for CharArrayReaders.
                 * @throws IOException
                 *             if this reader is closed.</member>
        <member name="M:biz.ritter.javapi.io.CharArrayReader.markSupported">
                 * Indicates whether this reader supports the {@code mark()} and
                 * {@code reset()} methods.
                 *
                 * @return {@code true} for CharArrayReader.
                 * @see #mark(int)
                 * @see #reset()</member>
        <member name="M:biz.ritter.javapi.io.CharArrayReader.read">
                 * Reads a single character from this reader and returns it as an integer
                 * with the two higher-order bytes set to 0. Returns -1 if no more
                 * characters are available from this reader.
                 *
                 * @return the character read as an int or -1 if the end of the reader has
                 *         been reached.
                 * @throws IOException
                 *             if this reader is closed.</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.io.CharArrayReader.read(System.Char[],System.Int32,System.Int32)-->
        <member name="M:biz.ritter.javapi.io.CharArrayReader.ready">
                 * Indicates whether this reader is ready to be read without blocking.
                 * Returns {@code true} if the next {@code read} will not block. Returns
                 * {@code false} if this reader may or may not block when {@code read} is
                 * called. The implementation in CharArrayReader always returns {@code true}
                 * even when it has been closed.
                 *
                 * @return {@code true} if this reader will not block when {@code read} is
                 *         called, {@code false} if unknown or blocking will occur.
                 * @throws IOException
                 *             if this reader is closed.</member>
        <member name="M:biz.ritter.javapi.io.CharArrayReader.reset">
                 * Resets this reader's position to the last {@code mark()} location.
                 * Invocations of {@code read()} and {@code skip()} will occur from this new
                 * location. If this reader has not been marked, it is reset to the
                 * beginning of the string.
                 *
                 * @throws IOException
                 *             if this reader is closed.</member>
        <member name="M:biz.ritter.javapi.io.CharArrayReader.skip(System.Int64)">
                 * Skips {@code count} number of characters in this reader. Subsequent
                 * {@code read()}s will not return these characters unless {@code reset()}
                 * is used. This method does nothing and returns 0 if {@code n} is negative.
                 *
                 * @param n
                 *            the number of characters to skip.
                 * @return the number of characters actually skipped.
                 * @throws IOException
                 *             if this reader is closed.</member>
        <member name="T:biz.ritter.javapi.io.CharArrayWriter">
             * A specialized {@link Writer} for class for writing content to an (internal)
             * char array. As bytes are written to this writer, the char array may be
             * expanded to hold more characters. When the writing is considered to be
             * finished, a copy of the char array can be requested from the class.
             *
             * @see CharArrayReader</member>
        <member name="F:biz.ritter.javapi.io.CharArrayWriter.buf">
                 * The buffer for characters.</member>
        <member name="F:biz.ritter.javapi.io.CharArrayWriter.count">
                 * The ending index of the buffer.</member>
        <member name="M:biz.ritter.javapi.io.CharArrayWriter.#ctor">
                 * Constructs a new {@code CharArrayWriter} which has a buffer allocated
                 * with the default size of 32 characters. This buffer is also used as the
                 * {@code lock} to synchronize access to this writer.</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.io.CharArrayWriter.#ctor(System.Int32)-->
        <member name="M:biz.ritter.javapi.io.CharArrayWriter.close">
                 * Closes this writer. The implementation in {@code CharArrayWriter} does nothing.</member>
        <member name="M:biz.ritter.javapi.io.CharArrayWriter.flush">
                 * Flushes this writer. The implementation in {@code CharArrayWriter} does nothing.</member>
        <member name="M:biz.ritter.javapi.io.CharArrayWriter.reset">
                 * Resets this writer. The current write position is reset to the beginning
                 * of the buffer. All written characters are lost and the size of this
                 * writer is set to 0.</member>
        <member name="M:biz.ritter.javapi.io.CharArrayWriter.size">
                 * Returns the size of this writer, that is the number of characters it
                 * stores. This number changes if this writer is reset or when more
                 * characters are written to it.
                 *
                 * @return this CharArrayWriter's current size in characters.</member>
        <member name="M:biz.ritter.javapi.io.CharArrayWriter.toCharArray">
                 * Returns the contents of the receiver as a char array. The array returned
                 * is a copy and any modifications made to this writer after calling this
                 * method are not reflected in the result.
                 *
                 * @return this CharArrayWriter's contents as a new char array.</member>
        <member name="M:biz.ritter.javapi.io.CharArrayWriter.ToString">
                 * Returns the contents of this {@code CharArrayWriter} as a string. The
                 * string returned is a copy and any modifications made to this writer after
                 * calling this method are not reflected in the result.
                 *
                 * @return this CharArrayWriters contents as a new string.</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.io.CharArrayWriter.write(System.Char[],System.Int32,System.Int32)-->
        <member name="M:biz.ritter.javapi.io.CharArrayWriter.write(System.Int32)">
                 * Writes the specified character {@code oneChar} to this writer.
                 * This implementation writes the two low order bytes of the integer
                 * {@code oneChar} to the buffer.
                 *
                 * @param oneChar
                 *            the character to write.</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.io.CharArrayWriter.write(System.String,System.Int32,System.Int32)-->
        <member name="M:biz.ritter.javapi.io.CharArrayWriter.writeTo(biz.ritter.javapi.io.Writer)">
                 * Writes the contents of this {@code CharArrayWriter} to another {@code
                 * Writer}. The output is all the characters that have been written to the
                 * receiver since the last reset or since it was created.
                 *
                 * @param out
                 *            the non-null {@code Writer} on which to write the contents.
                 * @throws NullPointerException
                 *             if {@code out} is {@code null}.
                 * @throws IOException
                 *             if an error occurs attempting to write out the contents.</member>
        <member name="M:biz.ritter.javapi.io.CharArrayWriter.append(System.Char)">
                 * Appends a char {@code c} to the {@code CharArrayWriter}. The method works
                 * the same way as {@code write(c)}.
                 *
                 * @param c
                 *            the character appended to the CharArrayWriter.
                 * @return this CharArrayWriter.</member>
        <member name="M:biz.ritter.javapi.io.CharArrayWriter.append(biz.ritter.javapi.lang.CharSequence)">
                 * Appends a {@code CharSequence} to the {@code CharArrayWriter}. The method
                 * works the same way as {@code write(csq.toString())}. If {@code csq} is
                 * {@code null}, then it will be substituted with the string {@code "null"}.
                 *
                 * @param csq
                 *            the {@code CharSequence} appended to the {@code
                 *            CharArrayWriter}, may be {@code null}.
                 * @return this CharArrayWriter.</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.io.CharArrayWriter.append(biz.ritter.javapi.lang.CharSequence,System.Int32,System.Int32)-->
        <member name="T:biz.ritter.javapi.io.CharConversionException">
             * The top level class for character conversion exceptions.</member>
        <member name="M:biz.ritter.javapi.io.CharConversionException.#ctor">
                 * Constructs a new {@code CharConversionException} with its stack trace
                 * filled in.</member>
        <member name="M:biz.ritter.javapi.io.CharConversionException.#ctor(System.String)">
                 * Constructs a new {@code CharConversionException} with its stack trace and
                 * detail message filled in.
                 *
                 * @param detailMessage
                 *            the detail message for this exception.</member>
        <member name="T:biz.ritter.javapi.io.FilePermission">
             * A permission for accessing a file or directory. The FilePermission is made up
             * of a pathname and a set of actions which are valid for the pathname.
             * <p />
             * The {@code File.separatorChar} must be used in all pathnames when
             * constructing a FilePermission. The following descriptions will assume the
             * char is {@code /}. A pathname that ends in {@code /*} includes all the files
             * and directories contained in that directory. If the pathname
             * ends in {@code /-}, it includes all the files and directories in that
             * directory <i>recursively</i>. The following pathnames have a special meaning:
             * <ul>
             *   <li>
             *     "*": all files in the current directory;
             *   </li>
             *   <li>
             *     "-": recursively all files and directories in the current directory;
             *   </li>
             *   <li>
             *     "&lt;&lt;ALL FILES&gt;&gt;": any file and directory in the file system.
             *   </li>
             * </ul></member>
        <member name="M:biz.ritter.javapi.io.FilePermission.#ctor(System.String,System.String)">
                 * Constructs a new FilePermission with the path and actions specified.
                 *
                 * @param path
                 *            the pathname of the file or directory to apply the actions to.
                 * @param actions
                 *            the actions for the {@code path}. May be any combination of
                 *            "read", "write", "execute" and "delete".
                 * @throws IllegalArgumentException
                 *             if {@code actions} is {@code null} or an empty string, or if
                 *             it contains a string other than "read", "write", "execute"
                 *             and "delete".
                 * @throws NullPointerException
                 *             if {@code path} is {@code null}.</member>
        <member name="M:biz.ritter.javapi.io.FilePermission.toCanonicalActionString(System.String)">
                 * Returns the string representing this permission's actions. It must be of
                 * the form "read,write,execute,delete", all lower case and in the correct
                 * order if there is more than one action.
                 *
                 * @param action
                 *            the action name
                 * @return the string representing this permission's actions</member>
        <member name="M:biz.ritter.javapi.io.FilePermission.getMask(System.String)">
                 * Returns the numerical representation of the argument.
                 *
                 * @param actionNames
                 *            the action names
                 * @return the action mask</member>
        <member name="M:biz.ritter.javapi.io.FilePermission.getActions">
                 * Returns the actions associated with this file permission.
                 *
                 * @return the actions associated with this file permission.</member>
        <member name="M:biz.ritter.javapi.io.FilePermission.Equals(System.Object)">
                 * Indicates if this file permission is equal to another. The two are equal
                 * if {@code obj} is a FilePermission, they have the same path, and they
                 * have the same actions.
                 *
                 * @param obj
                 *            the object to check equality with.
                 * @return {@code true} if this file permission is equal to {@code obj},
                 *         {@code false} otherwise.</member>
        <member name="M:biz.ritter.javapi.io.FilePermission.implies(biz.ritter.javapi.security.Permission)">
                 * Indicates whether the permission {@code p} is implied by this file
                 * permission. This is the case if {@code p} is an instance of
                 * {@code FilePermission}, if {@code p}'s actions are a subset of this
                 * file permission's actions and if {@code p}'s path is implied by this
                 * file permission's path.
                 *
                 * @param p
                 *            the permission to check.
                 * @return {@code true} if the argument permission is implied by the
                 *         receiver, and {@code false} if it is not.</member>
        <member name="M:biz.ritter.javapi.io.FilePermission.impliesMask(biz.ritter.javapi.security.Permission)">
                 * Returns an int describing what masks are implied by a specific
                 * permission.
                 *
                 * @param p
                 *            the permission
                 * @return the mask applied to the given permission</member>
        <member name="M:biz.ritter.javapi.io.FilePermission.newPermissionCollection">
                 * Returns a new PermissionCollection in which to place FilePermission
                 * objects.
                 *
                 * @return A new PermissionCollection object suitable for storing
                 *         FilePermission objects.</member>
        <member name="M:biz.ritter.javapi.io.FilePermission.GetHashCode">
                 * Calculates the hash code value for this file permission.
                 *
                 * @return the hash code value for this file permission.</member>
        <member name="T:biz.ritter.javapi.io.FilePermissionCollection">
             * Collects {@link FilePermission} objects and allows to query whether a
             * particular permission is implied by it.</member>
        <member name="M:biz.ritter.javapi.io.FilePermissionCollection.#ctor">
                 * Construct a new FilePermissionCollection</member>
        <member name="M:biz.ritter.javapi.io.FilePermissionCollection.add(biz.ritter.javapi.security.Permission)">
                 * Add a permission object to the permission collection.
                 *
                 * @param permission
                 *            the FilePermission object to add to the collection.
                 * @throws IllegalArgumentException
                 *             if {@code permission} is not an instance of
                 *             {@code FilePermission}.
                 * @throws IllegalStateException
                 *             if this collection is read-only.
                 * @see java.security.PermissionCollection#add(java.security.Permission)</member>
        <member name="M:biz.ritter.javapi.io.FilePermissionCollection.elements">
                 * Returns an enumeration for the collection of permissions.
                 *
                 * @return a permission enumeration for this permission collection.
                 * @see java.security.PermissionCollection#elements()</member>
        <member name="M:biz.ritter.javapi.io.FilePermissionCollection.implies(biz.ritter.javapi.security.Permission)">
                 * Indicates whether this permissions collection implies a specific
                 * {@code permission}.
                 *
                 * @param permission
                 *            the permission to check.
                 * @see java.security.PermissionCollection#implies(java.security.Permission)</member>
        <member name="T:org.xml.sax.helpers.AttributeListImpl">
                 * Default implementation for AttributeList.
                 *
                 * <blockquote>
                 * <em>This module, both source code and documentation, is in the
                 * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>
                 * See <a href="http://www.saxproject.org">http://www.saxproject.org</a>
                 * for further information.
                 * </blockquote>
                 *
                 * <p>AttributeList implements the deprecated SAX1 {@link
                 * org.xml.sax.AttributeList AttributeList} interface, and has been
                 * replaced by the new SAX2 {@link org.xml.sax.helpers.AttributesImpl
                 * AttributesImpl} interface.</p>
                 *
                 * <p>This class provides a convenience implementation of the SAX
                 * {@link org.xml.sax.AttributeList AttributeList} interface.  This
                 * implementation is useful both for SAX parser writers, who can use
                 * it to provide attributes to the application, and for SAX application
                 * writers, who can use it to create a persistent copy of an element's
                 * attribute specifications:</p>
                 *
                 * <pre>
                 * private AttributeList myatts;
                 *
                 * public void startElement (String name, AttributeList atts)
                 * {
                 *              // create a persistent copy of the attribute list
                 *              // for use outside this method
                 *   myatts = new AttributeListImpl(atts);
                 *   [...]
                 * }
                 * </pre>
                 *
                 * <p>Please note that SAX parsers are not required to use this
                 * class to provide an implementation of AttributeList; it is
                 * supplied only as an optional convenience.  In particular,
                 * parser writers are encouraged to invent more efficient
                 * implementations.</p>
                 *
                 * @deprecated This class implements a deprecated interface,
                 *             {@link org.xml.sax.AttributeList AttributeList};
                 *             that interface has been replaced by
                 *             {@link org.xml.sax.Attributes Attributes},
                 *             which is implemented in the
                 *             {@link org.xml.sax.helpers.AttributesImpl
                 *            AttributesImpl} helper class.
                 * @since SAX 1.0
                 * @author David Megginson
                 * @version 2.0.1 (sax2r2)
                 * @see org.xml.sax.AttributeList
                 * @see org.xml.sax.DocumentHandler#startElement</member>
        <member name="M:org.xml.sax.helpers.AttributeListImpl.#ctor">
                     * Create an empty attribute list.
                     *
                     * <p>This constructor is most useful for parser writers, who
                     * will use it to create a single, reusable attribute list that
                     * can be reset with the clear method between elements.</p>
                     *
                     * @see #addAttribute
                     * @see #clear</member>
        <member name="M:org.xml.sax.helpers.AttributeListImpl.#ctor(org.xml.sax.AttributeList)">
                     * Construct a persistent copy of an existing attribute list.
                     *
                     * <p>This constructor is most useful for application writers,
                     * who will use it to create a persistent copy of an existing
                     * attribute list.</p>
                     *
                     * @param atts The attribute list to copy
                     * @see org.xml.sax.DocumentHandler#startElement</member>
        <member name="M:org.xml.sax.helpers.AttributeListImpl.setAttributeList(org.xml.sax.AttributeList)">
                     * Set the attribute list, discarding previous contents.
                     *
                     * <p>This method allows an application writer to reuse an
                     * attribute list easily.</p>
                     *
                     * @param atts The attribute list to copy.</member>
        <member name="M:org.xml.sax.helpers.AttributeListImpl.addAttribute(System.String,System.String,System.String)">
                     * Add an attribute to an attribute list.
                     *
                     * <p>This method is provided for SAX parser writers, to allow them
                     * to build up an attribute list incrementally before delivering
                     * it to the application.</p>
                     *
                     * @param name The attribute name.
                     * @param type The attribute type ("NMTOKEN" for an enumeration).
                     * @param value The attribute value (must not be null).
                     * @see #removeAttribute
                     * @see org.xml.sax.DocumentHandler#startElement</member>
        <member name="M:org.xml.sax.helpers.AttributeListImpl.removeAttribute(System.String)">
                     * Remove an attribute from the list.
                     *
                     * <p>SAX application writers can use this method to filter an
                     * attribute out of an AttributeList.  Note that invoking this
                     * method will change the length of the attribute list and
                     * some of the attribute's indices.</p>
                     *
                     * <p>If the requested attribute is not in the list, this is
                     * a no-op.</p>
                     *
                     * @param name The attribute name.
                     * @see #addAttribute</member>
        <member name="M:org.xml.sax.helpers.AttributeListImpl.clear">
                     * Clear the attribute list.
                     *
                     * <p>SAX parser writers can use this method to reset the attribute
                     * list between DocumentHandler.startElement events.  Normally,
                     * it will make sense to reuse the same AttributeListImpl object
                     * rather than allocating a new one each time.</p>
                     *
                     * @see org.xml.sax.DocumentHandler#startElement</member>
        <member name="M:org.xml.sax.helpers.AttributeListImpl.getLength">
                     * Return the number of attributes in the list.
                     *
                     * @return The number of attributes in the list.
                     * @see org.xml.sax.AttributeList#getLength</member>
        <member name="M:org.xml.sax.helpers.AttributeListImpl.getName(System.Int32)">
                     * Get the name of an attribute (by position).
                     *
                     * @param i The position of the attribute in the list.
                     * @return The attribute name as a string, or null if there
                     *         is no attribute at that position.
                     * @see org.xml.sax.AttributeList#getName(int)</member>
        <member name="M:org.xml.sax.helpers.AttributeListImpl.getType(System.Int32)">
                     * Get the type of an attribute (by position).
                     *
                     * @param i The position of the attribute in the list.
                     * @return The attribute type as a string ("NMTOKEN" for an
                     *         enumeration, and "CDATA" if no declaration was
                     *         read), or null if there is no attribute at
                     *         that position.
                     * @see org.xml.sax.AttributeList#getType(int)</member>
        <member name="M:org.xml.sax.helpers.AttributeListImpl.getValue(System.Int32)">
                     * Get the value of an attribute (by position).
                     *
                     * @param i The position of the attribute in the list.
                     * @return The attribute value as a string, or null if
                     *         there is no attribute at that position.
                     * @see org.xml.sax.AttributeList#getValue(int)</member>
        <member name="M:org.xml.sax.helpers.AttributeListImpl.getType(System.String)">
                     * Get the type of an attribute (by name).
                     *
                     * @param name The attribute name.
                     * @return The attribute type as a string ("NMTOKEN" for an
                     *         enumeration, and "CDATA" if no declaration was
                     *         read).
                     * @see org.xml.sax.AttributeList#getType(java.lang.String)</member>
        <member name="M:org.xml.sax.helpers.AttributeListImpl.getValue(System.String)">
                     * Get the value of an attribute (by name).
                     *
                     * @param name The attribute name.
                     * @see org.xml.sax.AttributeList#getValue(java.lang.String)</member>
        <member name="T:org.xml.sax.helpers.DefaultHandler">
                 * Default base class for SAX2 event handlers.
                 *
                 * <blockquote>
                 * <em>This module, both source code and documentation, is in the
                 * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>
                 * See <a href="http://www.saxproject.org">http://www.saxproject.org</a>
                 * for further information.
                 * </blockquote>
                 *
                 * <p>This class is available as a convenience base class for SAX2
                 * applications: it provides default implementations for all of the
                 * callbacks in the four core SAX2 handler classes:</p>
                 *
                 * <ul>
                 * <li>{@link org.xml.sax.EntityResolver EntityResolver}</li>
                 * <li>{@link org.xml.sax.DTDHandler DTDHandler}</li>
                 * <li>{@link org.xml.sax.ContentHandler ContentHandler}</li>
                 * <li>{@link org.xml.sax.ErrorHandler ErrorHandler}</li>
                 * </ul>
                 *
                 * <p>Application writers can extend this class when they need to
                 * implement only part of an interface; parser writers can
                 * instantiate this class to provide default handlers when the
                 * application has not supplied its own.</p>
                 *
                 * <p>This class replaces the deprecated SAX1
                 * {@link org.xml.sax.HandlerBase HandlerBase} class.</p>
                 *
                 * @since SAX 2.0
                 * @author David Megginson,
                 * @version 2.0.1 (sax2r2)
                 * @see org.xml.sax.EntityResolver
                 * @see org.xml.sax.DTDHandler
                 * @see org.xml.sax.ContentHandler
                 * @see org.xml.sax.ErrorHandler</member>
        <member name="M:org.xml.sax.helpers.DefaultHandler.resolveEntity(System.String,System.String)">
                     * Resolve an external entity.
                     *
                     * <p>Always return null, so that the parser will use the system
                     * identifier provided in the XML document.  This method implements
                     * the SAX default behaviour: application writers can override it
                     * in a subclass to do special translations such as catalog lookups
                     * or URI redirection.</p>
                     *
                     * @param publicId The public identifer, or null if none is
                     *                 available.
                     * @param systemId The system identifier provided in the XML
                     *                 document.
                     * @return The new input source, or null to require the
                     *         default behaviour.
                     * @exception java.io.IOException If there is an error setting
                     *            up the new input source.
                     * @exception org.xml.sax.SAXException Any SAX exception, possibly
                     *            wrapping another exception.
                     * @see org.xml.sax.EntityResolver#resolveEntity</member>
        <member name="M:org.xml.sax.helpers.DefaultHandler.notationDecl(System.String,System.String,System.String)">
                     * Receive notification of a notation declaration.
                     *
                     * <p>By default, do nothing.  Application writers may override this
                     * method in a subclass if they wish to keep track of the notations
                     * declared in a document.</p>
                     *
                     * @param name The notation name.
                     * @param publicId The notation public identifier, or null if not
                     *                 available.
                     * @param systemId The notation system identifier.
                     * @exception org.xml.sax.SAXException Any SAX exception, possibly
                     *            wrapping another exception.
                     * @see org.xml.sax.DTDHandler#notationDecl</member>
        <member name="M:org.xml.sax.helpers.DefaultHandler.unparsedEntityDecl(System.String,System.String,System.String,System.String)">
                     * Receive notification of an unparsed entity declaration.
                     *
                     * <p>By default, do nothing.  Application writers may override this
                     * method in a subclass to keep track of the unparsed entities
                     * declared in a document.</p>
                     *
                     * @param name The entity name.
                     * @param publicId The entity public identifier, or null if not
                     *                 available.
                     * @param systemId The entity system identifier.
                     * @param notationName The name of the associated notation.
                     * @exception org.xml.sax.SAXException Any SAX exception, possibly
                     *            wrapping another exception.
                     * @see org.xml.sax.DTDHandler#unparsedEntityDecl</member>
        <member name="M:org.xml.sax.helpers.DefaultHandler.setDocumentLocator(org.xml.sax.Locator)">
                     * Receive a Locator object for document events.
                     *
                     * <p>By default, do nothing.  Application writers may override this
                     * method in a subclass if they wish to store the locator for use
                     * with other document events.</p>
                     *
                     * @param locator A locator for all SAX document events.
                     * @see org.xml.sax.ContentHandler#setDocumentLocator
                     * @see org.xml.sax.Locator</member>
        <member name="M:org.xml.sax.helpers.DefaultHandler.startDocument">
                     * Receive notification of the beginning of the document.
                     *
                     * <p>By default, do nothing.  Application writers may override this
                     * method in a subclass to take specific actions at the beginning
                     * of a document (such as allocating the root node of a tree or
                     * creating an output file).</p>
                     *
                     * @exception org.xml.sax.SAXException Any SAX exception, possibly
                     *            wrapping another exception.
                     * @see org.xml.sax.ContentHandler#startDocument</member>
        <member name="M:org.xml.sax.helpers.DefaultHandler.endDocument">
                     * Receive notification of the end of the document.
                     *
                     * <p>By default, do nothing.  Application writers may override this
                     * method in a subclass to take specific actions at the end
                     * of a document (such as finalising a tree or closing an output
                     * file).</p>
                     *
                     * @exception org.xml.sax.SAXException Any SAX exception, possibly
                     *            wrapping another exception.
                     * @see org.xml.sax.ContentHandler#endDocument</member>
        <member name="M:org.xml.sax.helpers.DefaultHandler.startPrefixMapping(System.String,System.String)">
                     * Receive notification of the start of a Namespace mapping.
                     *
                     * <p>By default, do nothing.  Application writers may override this
                     * method in a subclass to take specific actions at the start of
                     * each Namespace prefix scope (such as storing the prefix mapping).</p>
                     *
                     * @param prefix The Namespace prefix being declared.
                     * @param uri The Namespace URI mapped to the prefix.
                     * @exception org.xml.sax.SAXException Any SAX exception, possibly
                     *            wrapping another exception.
                     * @see org.xml.sax.ContentHandler#startPrefixMapping</member>
        <member name="M:org.xml.sax.helpers.DefaultHandler.endPrefixMapping(System.String)">
                     * Receive notification of the end of a Namespace mapping.
                     *
                     * <p>By default, do nothing.  Application writers may override this
                     * method in a subclass to take specific actions at the end of
                     * each prefix mapping.</p>
                     *
                     * @param prefix The Namespace prefix being declared.
                     * @exception org.xml.sax.SAXException Any SAX exception, possibly
                     *            wrapping another exception.
                     * @see org.xml.sax.ContentHandler#endPrefixMapping</member>
        <member name="M:org.xml.sax.helpers.DefaultHandler.startElement(System.String,System.String,System.String,org.xml.sax.Attributes)">
                     * Receive notification of the start of an element.
                     *
                     * <p>By default, do nothing.  Application writers may override this
                     * method in a subclass to take specific actions at the start of
                     * each element (such as allocating a new tree node or writing
                     * output to a file).</p>
                     *
                     * @param uri The Namespace URI, or the empty string if the
                     *        element has no Namespace URI or if Namespace
                     *        processing is not being performed.
                     * @param localName The local name (without prefix), or the
                     *        empty string if Namespace processing is not being
                     *        performed.
                     * @param qName The qualified name (with prefix), or the
                     *        empty string if qualified names are not available.
                     * @param attributes The attributes attached to the element.  If
                     *        there are no attributes, it shall be an empty
                     *        Attributes object.
                     * @exception org.xml.sax.SAXException Any SAX exception, possibly
                     *            wrapping another exception.
                     * @see org.xml.sax.ContentHandler#startElement</member>
        <member name="M:org.xml.sax.helpers.DefaultHandler.endElement(System.String,System.String,System.String)">
                     * Receive notification of the end of an element.
                     *
                     * <p>By default, do nothing.  Application writers may override this
                     * method in a subclass to take specific actions at the end of
                     * each element (such as finalising a tree node or writing
                     * output to a file).</p>
                     *
                     * @param uri The Namespace URI, or the empty string if the
                     *        element has no Namespace URI or if Namespace
                     *        processing is not being performed.
                     * @param localName The local name (without prefix), or the
                     *        empty string if Namespace processing is not being
                     *        performed.
                     * @param qName The qualified name (with prefix), or the
                     *        empty string if qualified names are not available.
                     * @exception org.xml.sax.SAXException Any SAX exception, possibly
                     *            wrapping another exception.
                     * @see org.xml.sax.ContentHandler#endElement</member>
        <member name="M:org.xml.sax.helpers.DefaultHandler.characters(System.Char[],System.Int32,System.Int32)">
                     * Receive notification of character data inside an element.
                     *
                     * <p>By default, do nothing.  Application writers may override this
                     * method to take specific actions for each chunk of character data
                     * (such as adding the data to a node or buffer, or printing it to
                     * a file).</p>
                     *
                     * @param ch The characters.
                     * @param start The start position in the character array.
                     * @param length The number of characters to use from the
                     *               character array.
                     * @exception org.xml.sax.SAXException Any SAX exception, possibly
                     *            wrapping another exception.
                     * @see org.xml.sax.ContentHandler#characters</member>
        <member name="M:org.xml.sax.helpers.DefaultHandler.ignorableWhitespace(System.Char[],System.Int32,System.Int32)">
                     * Receive notification of ignorable whitespace in element content.
                     *
                     * <p>By default, do nothing.  Application writers may override this
                     * method to take specific actions for each chunk of ignorable
                     * whitespace (such as adding data to a node or buffer, or printing
                     * it to a file).</p>
                     *
                     * @param ch The whitespace characters.
                     * @param start The start position in the character array.
                     * @param length The number of characters to use from the
                     *               character array.
                     * @exception org.xml.sax.SAXException Any SAX exception, possibly
                     *            wrapping another exception.
                     * @see org.xml.sax.ContentHandler#ignorableWhitespace</member>
        <member name="M:org.xml.sax.helpers.DefaultHandler.processingInstruction(System.String,System.String)">
                     * Receive notification of a processing instruction.
                     *
                     * <p>By default, do nothing.  Application writers may override this
                     * method in a subclass to take specific actions for each
                     * processing instruction, such as setting status variables or
                     * invoking other methods.</p>
                     *
                     * @param target The processing instruction target.
                     * @param data The processing instruction data, or null if
                     *             none is supplied.
                     * @exception org.xml.sax.SAXException Any SAX exception, possibly
                     *            wrapping another exception.
                     * @see org.xml.sax.ContentHandler#processingInstruction</member>
        <member name="M:org.xml.sax.helpers.DefaultHandler.skippedEntity(System.String)">
                     * Receive notification of a skipped entity.
                     *
                     * <p>By default, do nothing.  Application writers may override this
                     * method in a subclass to take specific actions for each
                     * processing instruction, such as setting status variables or
                     * invoking other methods.</p>
                     *
                     * @param name The name of the skipped entity.
                     * @exception org.xml.sax.SAXException Any SAX exception, possibly
                     *            wrapping another exception.
                     * @see org.xml.sax.ContentHandler#processingInstruction</member>
        <member name="M:org.xml.sax.helpers.DefaultHandler.warning(org.xml.sax.SAXParseException)">
                     * Receive notification of a parser warning.
                     *
                     * <p>The default implementation does nothing.  Application writers
                     * may override this method in a subclass to take specific actions
                     * for each warning, such as inserting the message in a log file or
                     * printing it to the console.</p>
                     *
                     * @param e The warning information encoded as an exception.
                     * @exception org.xml.sax.SAXException Any SAX exception, possibly
                     *            wrapping another exception.
                     * @see org.xml.sax.ErrorHandler#warning
                     * @see org.xml.sax.SAXParseException</member>
        <member name="M:org.xml.sax.helpers.DefaultHandler.error(org.xml.sax.SAXParseException)">
                     * Receive notification of a recoverable parser error.
                     *
                     * <p>The default implementation does nothing.  Application writers
                     * may override this method in a subclass to take specific actions
                     * for each error, such as inserting the message in a log file or
                     * printing it to the console.</p>
                     *
                     * @param e The warning information encoded as an exception.
                     * @exception org.xml.sax.SAXException Any SAX exception, possibly
                     *            wrapping another exception.
                     * @see org.xml.sax.ErrorHandler#warning
                     * @see org.xml.sax.SAXParseException</member>
        <member name="M:org.xml.sax.helpers.DefaultHandler.fatalError(org.xml.sax.SAXParseException)">
                     * Report a fatal XML parsing error.
                     *
                     * <p>The default implementation throws a SAXParseException.
                     * Application writers may override this method in a subclass if
                     * they need to take specific actions for each fatal error (such as
                     * collecting all of the errors into a single report): in any case,
                     * the application must stop all regular processing when this
                     * method is invoked, since the document is no longer reliable, and
                     * the parser may no longer report parsing events.</p>
                     *
                     * @param e The error information encoded as an exception.
                     * @exception org.xml.sax.SAXException Any SAX exception, possibly
                     *            wrapping another exception.
                     * @see org.xml.sax.ErrorHandler#fatalError
                     * @see org.xml.sax.SAXParseException</member>
        <member name="T:org.xml.sax.helpers.LocatorImpl">
                 * Provide an optional convenience implementation of Locator.
                 *
                 * <blockquote>
                 * <em>This module, both source code and documentation, is in the
                 * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>
                 * See <a href="http://www.saxproject.org">http://www.saxproject.org</a>
                 * for further information.
                 * </blockquote>
                 *
                 * <p>This class is available mainly for application writers, who
                 * can use it to make a persistent snapshot of a locator at any
                 * point during a document parse:</p>
                 *
                 * <pre>
                 * Locator locator;
                 * Locator startloc;
                 *
                 * public void setLocator (Locator locator)
                 * {
                 *         // note the locator
                 *   this.locator = locator;
                 * }
                 *
                 * public void startDocument ()
                 * {
                 *         // save the location of the start of the document
                 *         // for future use.
                 *   Locator startloc = new LocatorImpl(locator);
                 * }
                 *</pre>
                 *
                 * <p>Normally, parser writers will not use this class, since it
                 * is more efficient to provide location information only when
                 * requested, rather than constantly updating a Locator object.</p>
                 *
                 * @since SAX 1.0
                 * @author David Megginson
                 * @version 2.0.1 (sax2r2)
                 * @see org.xml.sax.Locator Locator</member>
        <member name="M:org.xml.sax.helpers.LocatorImpl.#ctor">
                     * Zero-argument constructor.
                     *
                     * <p>This will not normally be useful, since the main purpose
                     * of this class is to make a snapshot of an existing Locator.</p></member>
        <member name="M:org.xml.sax.helpers.LocatorImpl.#ctor(org.xml.sax.Locator)">
                     * Copy constructor.
                     *
                     * <p>Create a persistent copy of the current state of a locator.
                     * When the original locator changes, this copy will still keep
                     * the original values (and it can be used outside the scope of
                     * DocumentHandler methods).</p>
                     *
                     * @param locator The locator to copy.</member>
        <member name="M:org.xml.sax.helpers.LocatorImpl.getPublicId">
                     * Return the saved public identifier.
                     *
                     * @return The public identifier as a string, or null if none
                     *         is available.
                     * @see org.xml.sax.Locator#getPublicId
                     * @see #setPublicId</member>
        <member name="M:org.xml.sax.helpers.LocatorImpl.getSystemId">
                     * Return the saved system identifier.
                     *
                     * @return The system identifier as a string, or null if none
                     *         is available.
                     * @see org.xml.sax.Locator#getSystemId
                     * @see #setSystemId</member>
        <member name="M:org.xml.sax.helpers.LocatorImpl.getLineNumber">
                     * Return the saved line number (1-based).
                     *
                     * @return The line number as an integer, or -1 if none is available.
                     * @see org.xml.sax.Locator#getLineNumber
                     * @see #setLineNumber</member>
        <member name="M:org.xml.sax.helpers.LocatorImpl.getColumnNumber">
                     * Return the saved column number (1-based).
                     *
                     * @return The column number as an integer, or -1 if none is available.
                     * @see org.xml.sax.Locator#getColumnNumber
                     * @see #setColumnNumber</member>
        <member name="M:org.xml.sax.helpers.LocatorImpl.setPublicId(System.String)">
                     * Set the public identifier for this locator.
                     *
                     * @param publicId The new public identifier, or null
                     *        if none is available.
                     * @see #getPublicId</member>
        <member name="M:org.xml.sax.helpers.LocatorImpl.setSystemId(System.String)">
                     * Set the system identifier for this locator.
                     *
                     * @param systemId The new system identifier, or null
                     *        if none is available.
                     * @see #getSystemId</member>
        <member name="M:org.xml.sax.helpers.LocatorImpl.setLineNumber(System.Int32)">
                     * Set the line number for this locator (1-based).
                     *
                     * @param lineNumber The line number, or -1 if none is available.
                     * @see #getLineNumber</member>
        <member name="M:org.xml.sax.helpers.LocatorImpl.setColumnNumber(System.Int32)">
                     * Set the column number for this locator (1-based).
                     *
                     * @param columnNumber The column number, or -1 if none is available.
                     * @see #getColumnNumber</member>
        <member name="T:org.xml.sax.helpers.NamespaceSupport">
             * Encapsulate Namespace logic for use by applications using SAX,
             * or internally by SAX drivers.
             *
             * <blockquote>
             * <em>This module, both source code and documentation, is in the
             * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>
             * See <a href="http://www.saxproject.org">http://www.saxproject.org</a>
             * for further information.
             * </blockquote>
             *
             * <p />This class encapsulates the logic of Namespace processing: it
             * tracks the declarations currently in force for each context and
             * automatically processes qualified XML names into their Namespace
             * parts; it can also be used in reverse for generating XML qnames
             * from Namespaces.
             *
             * <p />Namespace support objects are reusable, but the reset method
             * must be invoked between each session.
             *
             * <p />Here is a simple session:
             *
             * <pre>
             * String parts[] = new String[3];
             * NamespaceSupport support = new NamespaceSupport();
             *
             * support.pushContext();
             * support.declarePrefix("", "http://www.w3.org/1999/xhtml");
             * support.declarePrefix("dc", "http://www.purl.org/dc#");
             *
             * parts = support.processName("p", parts, false);
             * System.out.println("Namespace URI: " + parts[0]);
             * System.out.println("Local name: " + parts[1]);
             * System.out.println("Raw name: " + parts[2]);
             *
             * parts = support.processName("dc:title", parts, false);
             * System.out.println("Namespace URI: " + parts[0]);
             * System.out.println("Local name: " + parts[1]);
             * System.out.println("Raw name: " + parts[2]);
             *
             * support.popContext();
             * </pre>
             *
             * <p />Note that this class is optimized for the use case where most
             * elements do not contain Namespace declarations: if the same
             * prefix/URI mapping is repeated for each context (for example), this
             * class will be somewhat less efficient.
             *
             * <p />Although SAX drivers (parsers) may choose to use this class to
             * implement namespace handling, they are not required to do so.
             * Applications must track namespace information themselves if they
             * want to use namespace information.
             *
             * @since SAX 2.0
             * @author David Megginson
             * @version 2.0.1 (sax2r2)</member>
        <member name="F:org.xml.sax.helpers.NamespaceSupport.XMLNS">
                 * The XML Namespace URI as a constant.
                 * The value is <code>http://www.w3.org/XML/1998/namespace</code>
                 * as defined in the "Namespaces in XML" * recommendation.
                 *
                 * <p />This is the Namespace URI that is automatically mapped
                 * to the "xml" prefix.</member>
        <member name="F:org.xml.sax.helpers.NamespaceSupport.NSDECL">
                 * The namespace declaration URI as a constant.
                 * The value is <code>http://www.w3.org/xmlns/2000/</code>, as defined
                 * in a backwards-incompatible erratum to the "Namespaces in XML"
                 * recommendation.  Because that erratum postdated SAX2, SAX2 defaults
                 * to the original recommendation, and does not normally use this URI.
                 *
                 *
                 * <p />This is the Namespace URI that is optionally applied to
                 * <em>xmlns</em> and <em>xmlns:*</em> attributes, which are used to
                 * declare namespaces.
                 *
                 * @since SAX 2.1alpha
                 * @see #setNamespaceDeclUris
                 * @see #isNamespaceDeclUris</member>
        <member name="F:org.xml.sax.helpers.NamespaceSupport.EMPTY_ENUMERATION">
                 * An empty enumeration.</member>
        <member name="M:org.xml.sax.helpers.NamespaceSupport.#ctor">
                 * Create a new Namespace support object.</member>
        <member name="M:org.xml.sax.helpers.NamespaceSupport.reset">
                 * Reset this Namespace support object for reuse.
                 *
                 * <p />It is necessary to invoke this method before reusing the
                 * Namespace support object for a new session.  If namespace
                 * declaration URIs are to be supported, that flag must also
                 * be set to a non-default value.
                 *
                 *
                 * @see #setNamespaceDeclUris</member>
        <member name="M:org.xml.sax.helpers.NamespaceSupport.pushContext">
                 * Start a new Namespace context.
                 * The new context will automatically inherit
                 * the declarations of its parent context, but it will also keep
                 * track of which declarations were made within this context.
                 *
                 * <p />Event callback code should start a new context once per element.
                 * This means being ready to call this in either of two places.
                 * For elements that don't include namespace declarations, the
                 * <em>ContentHandler.startElement()</em> callback is the right place.
                 * For elements with such a declaration, it'd done in the first
                 * <em>ContentHandler.startPrefixMapping()</em> callback.
                 * A bool flag can be used to
                 * track whether a context has been started yet.  When either of
                 * those methods is called, it checks the flag to see if a new context
                 * needs to be started.  If so, it starts the context and sets the
                 * flag.  After <em>ContentHandler.startElement()</em>
                 * does that, it always clears the flag.
                 *
                 * <p />Normally, SAX drivers would push a new context at the beginning
                 * of each XML element.  Then they perform a first pass over the
                 * attributes to process all namespace declarations, making
                 * <em>ContentHandler.startPrefixMapping()</em> callbacks.
                 * Then a second pass is made, to determine the namespace-qualified
                 * names for all attributes and for the element name.
                 * Finally all the information for the
                 * <em>ContentHandler.startElement()</em> callback is available,
                 * so it can then be made.
                 *
                 * <p />The Namespace support object always starts with a base context
                 * already in force: in this context, only the "xml" prefix is
                 * declared.
                 *
                 * @see org.xml.sax.ContentHandler
                 * @see #popContext</member>
        <member name="M:org.xml.sax.helpers.NamespaceSupport.popContext">
                 * Revert to the previous Namespace context.
                 *
                 * <p />Normally, you should pop the context at the end of each
                 * XML element.  After popping the context, all Namespace prefix
                 * mappings that were previously in force are restored.
                 *
                 * <p />You must not attempt to declare additional Namespace
                 * prefixes after popping a context, unless you push another
                 * context first.
                 *
                 * @see #pushContext</member>
        <member name="M:org.xml.sax.helpers.NamespaceSupport.declarePrefix(System.String,System.String)">
                 * Declare a Namespace prefix.  All prefixes must be declared
                 * before they are referenced.  For example, a SAX driver (parser)
                 * would scan an element's attributes
                 * in two passes:  first for namespace declarations,
                 * then a second pass using {@link #processName processName()} to
                 * interpret prefixes against (potentially redefined) prefixes.
                 *
                 * <p />This method declares a prefix in the current Namespace
                 * context; the prefix will remain in force until this context
                 * is popped, unless it is shadowed in a descendant context.
                 *
                 * <p />To declare the default element Namespace, use the empty string as
                 * the prefix.
                 *
                 * <p />Note that you must <em>not</em> declare a prefix after
                 * you've pushed and popped another Namespace context, or
                 * treated the declarations phase as complete by processing
                 * a prefixed name.
                 *
                 * <p />Note that there is an asymmetry in this library: {@link
                 * #getPrefix getPrefix} will not return the "" prefix,
                 * even if you have declared a default element namespace.
                 * To check for a default namespace,
                 * you have to look it up explicitly using {@link #getURI getURI}.
                 * This asymmetry exists to make it easier to look up prefixes
                 * for attribute names, where the default prefix is not allowed.
                 *
                 * @param prefix The prefix to declare, or the empty string to
                 *	indicate the default element namespace.  This may never have
                 *	the value "xml" or "xmlns".
                 * @param uri The Namespace URI to associate with the prefix.
                 * @return true if the prefix was legal, false otherwise
                 *
                 * @see #processName
                 * @see #getURI
                 * @see #getPrefix</member>
        <member name="M:org.xml.sax.helpers.NamespaceSupport.processName(System.String,System.String[],System.Boolean)">
                 * Process a raw XML qualified name, after all declarations in the
                 * current context have been handled by {@link #declarePrefix
                 * declarePrefix()}.
                 *
                 * <p />This method processes a raw XML qualified name in the
                 * current context by removing the prefix and looking it up among
                 * the prefixes currently declared.  The return value will be the
                 * array supplied by the caller, filled in as follows:
                 *
                 * <dl>
                 * <dt>parts[0]</dt>
                 * <dd>The Namespace URI, or an empty string if none is
                 *  in use.</dd>
                 * <dt>parts[1]</dt>
                 * <dd>The local name (without prefix).</dd>
                 * <dt>parts[2]</dt>
                 * <dd>The original raw name.</dd>
                 * </dl>
                 *
                 * <p />All of the strings in the array will be internalized.  If
                 * the raw name has a prefix that has not been declared, then
                 * the return value will be null.
                 *
                 * <p />Note that attribute names are processed differently than
                 * element names: an unprefixed element name will receive the
                 * default Namespace (if any), while an unprefixed attribute name
                 * will not.
                 *
                 * @param qName The XML qualified name to be processed.
                 * @param parts An array supplied by the caller, capable of
                 *        holding at least three members.
                 * @param isAttribute A flag indicating whether this is an
                 *        attribute name (true) or an element name (false).
                 * @return The supplied array holding three internalized strings
                 *        representing the Namespace URI (or empty string), the
                 *        local name, and the XML qualified name; or null if there
                 *        is an undeclared prefix.
                 * @see #declarePrefix
                 * @see java.lang.String#intern</member>
        <member name="M:org.xml.sax.helpers.NamespaceSupport.getURI(System.String)">
                 * Look up a prefix and get the currently-mapped Namespace URI.
                 *
                 * <p />This method looks up the prefix in the current context.
                 * Use the empty string ("") for the default Namespace.
                 *
                 * @param prefix The prefix to look up.
                 * @return The associated Namespace URI, or null if the prefix
                 *         is undeclared in this context.
                 * @see #getPrefix
                 * @see #getPrefixes</member>
        <member name="M:org.xml.sax.helpers.NamespaceSupport.getPrefixes">
                 * Return anjava.util.Enumeration&lt;Object&gt; of all prefixes whose declarations are
                 * active in the current context.
                 * This includes declarations from parent contexts that have
                 * not been overridden.
                 *
                 * <p /><strong>Note:</strong> if there is a default prefix, it will not be
                 * returned in thisjava.util.Enumeration&lt;Object&gt;; check for the default prefix
                 * using the {@link #getURI getURI} with an argument of "".
                 *
                 * @return Anjava.util.Enumeration&lt;Object&gt; of prefixes (never empty).
                 * @see #getDeclaredPrefixes
                 * @see #getURI</member>
        <member name="M:org.xml.sax.helpers.NamespaceSupport.getPrefix(System.String)">
                 * Return one of the prefixes mapped to a Namespace URI.
                 *
                 * <p />If more than one prefix is currently mapped to the same
                 * URI, this method will make an arbitrary selection; if you
                 * want all of the prefixes, use the {@link #getPrefixes}
                 * method instead.
                 *
                 * <p /><strong>Note:</strong> this will never return the empty (default) prefix;
                 * to check for a default prefix, use the {@link #getURI getURI}
                 * method with an argument of "".
                 *
                 * @param uri the namespace URI
                 * @return one of the prefixes currently mapped to the URI supplied,
                 *         or null if none is mapped or if the URI is assigned to
                 *         the default namespace
                 * @see #getPrefixes(java.lang.String)
                 * @see #getURI</member>
        <member name="M:org.xml.sax.helpers.NamespaceSupport.getPrefixes(System.String)">
                 * Return anjava.util.Enumeration&lt;Object&gt; of all prefixes for a given URI whose
                 * declarations are active in the current context.
                 * This includes declarations from parent contexts that have
                 * not been overridden.
                 *
                 * <p />This method returns prefixes mapped to a specific Namespace
                 * URI.  The xml: prefix will be included.  If you want only one
                 * prefix that's mapped to the Namespace URI, and you don't care
                 * which one you get, use the {@link #getPrefix getPrefix}
                 *  method instead.
                 *
                 * <p /><strong>Note:</strong> the empty (default) prefix is <em>never</em> included
                 * in thisjava.util.Enumeration&lt;Object&gt;; to check for the presence of a default
                 * Namespace, use the {@link #getURI getURI} method with an
                 * argument of "".
                 *
                 * @param uri The Namespace URI.
                 * @return Anjava.util.Enumeration&lt;Object&gt; of prefixes (never empty).
                 * @see #getPrefix
                 * @see #getDeclaredPrefixes
                 * @see #getURI</member>
        <member name="M:org.xml.sax.helpers.NamespaceSupport.getDeclaredPrefixes">
                 * Return an enumeration of all prefixes declared in this context.
                 *
                 * <p />The empty (default) prefix will be included in this
                 * enumeration note that this behaviour differs from that of
                 * {@link #getPrefix} and {@link #getPrefixes}.
                 *
                 * @return An enumeration of all prefixes declared in this
                 *         context.
                 * @see #getPrefixes
                 * @see #getURI</member>
        <member name="M:org.xml.sax.helpers.NamespaceSupport.setNamespaceDeclUris(System.Boolean)">
                 * Controls whether namespace declaration attributes are placed
                 * into the {@link #NSDECL NSDECL} namespace
                 * by {@link #processName processName()}.  This may only be
                 * changed before any contexts have been pushed.
                 *
                 * @since SAX 2.1alpha
                 *
                 * @exception IllegalStateException when attempting to set this
                 *	after any context has been pushed.</member>
        <member name="M:org.xml.sax.helpers.NamespaceSupport.isNamespaceDeclUris">
                 * Returns true if namespace declaration attributes are placed into
                 * a namespace.  This behavior is not the default.
                 *
                 * @since SAX 2.1alpha</member>
        <member name="T:org.xml.sax.helpers.NamespaceSupport.Context">
                 * Internal class for a single Namespace context.
                 *
                 * <p />This module caches and reuses Namespace contexts,
                 * so the number allocated
                 * will be equal to the element depth of the document, not to the total
                 * number of elements (i.e. 5-10 rather than tens of thousands).
                 * Also, data structures used to represent contexts are shared when
                 * possible (child contexts without declarations) to further reduce
                 * the amount of memory that's consumed.
                 *</member>
        <member name="M:org.xml.sax.helpers.NamespaceSupport.Context.#ctor(org.xml.sax.helpers.NamespaceSupport)">
                 * Create the root-level Namespace context.</member>
        <member name="M:org.xml.sax.helpers.NamespaceSupport.Context.setParent(org.xml.sax.helpers.NamespaceSupport.Context)">
                 * (Re)set the parent of this Namespace context.
                 * The context must either have been freshly constructed,
                 * or must have been cleared.
                 *
                 * @param context The parent Namespace context object.</member>
        <member name="M:org.xml.sax.helpers.NamespaceSupport.Context.clear">
                 * Makes associated state become collectible,
                 * invalidating this context.
                 * {@link #setParent} must be called before
                 * this context may be used again.</member>
        <member name="M:org.xml.sax.helpers.NamespaceSupport.Context.declarePrefix(System.String,System.String)">
                 * Declare a Namespace prefix for this context.
                 *
                 * @param prefix The prefix to declare.
                 * @param uri The associated Namespace URI.
                 * @see org.xml.sax.helpers.NamespaceSupport#declarePrefix</member>
        <member name="M:org.xml.sax.helpers.NamespaceSupport.Context.processName(System.String,System.Boolean)">
                 * Process an XML qualified name in this context.
                 *
                 * @param qName The XML qualified name.
                 * @param isAttribute true if this is an attribute name.
                 * @return An array of three strings containing the
                 *         URI part (or empty string), the local part,
                 *         and the raw name, all internalized, or null
                 *         if there is an undeclared prefix.
                 * @see org.xml.sax.helpers.NamespaceSupport#processName</member>
        <member name="M:org.xml.sax.helpers.NamespaceSupport.Context.getURI(System.String)">
                 * Look up the URI associated with a prefix in this context.
                 *
                 * @param prefix The prefix to look up.
                 * @return The associated Namespace URI, or null if none is
                 *         declared.
                 * @see org.xml.sax.helpers.NamespaceSupport#getURI</member>
        <member name="M:org.xml.sax.helpers.NamespaceSupport.Context.getPrefix(System.String)">
                 * Look up one of the prefixes associated with a URI in this context.
                 *
                 * <p />Since many prefixes may be mapped to the same URI,
                 * the return value may be unreliable.
                 *
                 * @param uri The URI to look up.
                 * @return The associated prefix, or null if none is declared.
                 * @see org.xml.sax.helpers.NamespaceSupport#getPrefix</member>
        <member name="M:org.xml.sax.helpers.NamespaceSupport.Context.getDeclaredPrefixes">
                 * Return anjava.util.Enumeration&lt;Object&gt; of prefixes declared in this context.
                 *
                 * @return Anjava.util.Enumeration&lt;Object&gt; of prefixes (possibly empty).
                 * @see org.xml.sax.helpers.NamespaceSupport#getDeclaredPrefixes</member>
        <member name="M:org.xml.sax.helpers.NamespaceSupport.Context.getPrefixes">
                 * Return anjava.util.Enumeration&lt;Object&gt; of all prefixes currently in force.
                 *
                 * <p />The default prefix, if in force, is <em>not</em>
                 * returned, and will have to be checked for separately.
                 *
                 * @return Anjava.util.Enumeration&lt;Object&gt; of prefixes (never empty).
                 * @see org.xml.sax.helpers.NamespaceSupport#getPrefixes</member>
        <member name="M:org.xml.sax.helpers.NamespaceSupport.Context.copyTables">
                 * Copy on write for the internal tables in this context.
                 *
                 * <p />This class is optimized for the normal case where most
                 * elements do not contain Namespace declarations.</member>
        <member name="T:org.xml.sax.helpers.NewInstance">
             * Create a new instance of a class by name.
             *
             * <blockquote>
             * <em>This module, both source code and documentation, is in the
             * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>
             * See <a href="http://www.saxproject.org">http://www.saxproject.org</a>
             * for further information.
             * </blockquote>
             *
             * <p>This class contains a static method for creating an instance of a
             * class from an explicit class name.  It tries to use the thread's context
             * ClassLoader if possible and falls back to using
             * Class.forName(String).</p>
             *
             * <p>This code is designed to compile and run on JDK version 1.1 and later
             * including versions of Java 2.</p>
             *
             * @author Edwin Goei, David Brownell
             * @version 2.0.1 (sax2r2)</member>
        <member name="M:org.xml.sax.helpers.NewInstance.newInstance(biz.ritter.javapi.lang.ClassLoader,System.String)">
                 * Creates a new instance of the specified class name
                 *
                 * Package private so this code is not exposed at the API level.</member>
        <member name="M:org.xml.sax.helpers.NewInstance.getClassLoader">
                 * Figure out which ClassLoader to use.  For JDK 1.2 and later use
                 * the context ClassLoader.</member>
        <member name="T:org.xml.sax.helpers.ParserAdapter">
                 * Adapt a SAX1 Parser as a SAX2 XMLReader.
                 *
                 * <blockquote>
                 * <em>This module, both source code and documentation, is in the
                 * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>
                 * See <a href="http://www.saxproject.org">http://www.saxproject.org</a>
                 * for further information.
                 * </blockquote>
                 *
                 * <p>This class wraps a SAX1 {@link org.xml.sax.Parser Parser}
                 * and makes it act as a SAX2 {@link org.xml.sax.XMLReader XMLReader},
                 * with feature, property, and Namespace support.  Note
                 * that it is not possible to report {@link org.xml.sax.ContentHandler#skippedEntity
                 * skippedEntity} events, since SAX1 does not make that information available.</p>
                 *
                 * <p>This adapter does not test for duplicate Namespace-qualified
                 * attribute names.</p>
                 *
                 * @since SAX 2.0
                 * @author David Megginson
                 * @version 2.0.1 (sax2r2)
                 * @see org.xml.sax.helpers.XMLReaderAdapter
                 * @see org.xml.sax.XMLReader
                 * @see org.xml.sax.Parser</member>
        <member name="M:org.xml.sax.helpers.ParserAdapter.#ctor">
                     * Construct a new parser adapter.
                     *
                     * <p>Use the "org.xml.sax.parser" property to locate the
                     * embedded SAX1 driver.</p>
                     *
                     * @exception SAXException If the embedded driver
                     *            cannot be instantiated or if the
                     *            org.xml.sax.parser property is not specified.</member>
        <member name="M:org.xml.sax.helpers.ParserAdapter.#ctor(org.xml.sax.Parser)">
                     * Construct a new parser adapter.
                     *
                     * <p>Note that the embedded parser cannot be changed once the
                     * adapter is created; to embed a different parser, allocate
                     * a new ParserAdapter.</p>
                     *
                     * @param parser The SAX1 parser to embed.
                     * @exception java.lang.NullPointerException If the parser parameter
                     *            is null.</member>
        <member name="M:org.xml.sax.helpers.ParserAdapter.setup(org.xml.sax.Parser)">
                     * Internal setup method.
                     *
                     * @param parser The embedded parser.
                     * @exception java.lang.NullPointerException If the parser parameter
                     *            is null.</member>
        <member name="M:org.xml.sax.helpers.ParserAdapter.setFeature(System.String,System.Boolean)">
                     * Set a feature flag for the parser.
                     *
                     * <p>The only features recognized are namespaces and
                     * namespace-prefixes.</p>
                     *
                     * @param name The feature name, as a complete URI.
                     * @param value The requested feature value.
                     * @exception SAXNotRecognizedException If the feature
                     *            can't be assigned or retrieved.
                     * @exception SAXNotSupportedException If the feature
                     *            can't be assigned that value.
                     * @see org.xml.sax.XMLReader#setFeature</member>
        <member name="M:org.xml.sax.helpers.ParserAdapter.getFeature(System.String)">
                     * Check a parser feature flag.
                     *
                     * <p>The only features recognized are namespaces and
                     * namespace-prefixes.</p>
                     *
                     * @param name The feature name, as a complete URI.
                     * @return The current feature value.
                     * @exception SAXNotRecognizedException If the feature
                     *            value can't be assigned or retrieved.
                     * @exception SAXNotSupportedException If the
                     *            feature is not currently readable.
                     * @see org.xml.sax.XMLReader#setFeature</member>
        <member name="M:org.xml.sax.helpers.ParserAdapter.setProperty(System.String,System.Object)">
                     * Set a parser property.
                     *
                     * <p>No properties are currently recognized.</p>
                     *
                     * @param name The property name.
                     * @param value The property value.
                     * @exception SAXNotRecognizedException If the property
                     *            value can't be assigned or retrieved.
                     * @exception SAXNotSupportedException If the property
                     *            can't be assigned that value.
                     * @see org.xml.sax.XMLReader#setProperty</member>
        <member name="M:org.xml.sax.helpers.ParserAdapter.getProperty(System.String)">
                     * Get a parser property.
                     *
                     * <p>No properties are currently recognized.</p>
                     *
                     * @param name The property name.
                     * @return The property value.
                     * @exception SAXNotRecognizedException If the property
                     *            value can't be assigned or retrieved.
                     * @exception SAXNotSupportedException If the property
                     *            value is not currently readable.
                     * @see org.xml.sax.XMLReader#getProperty</member>
        <member name="M:org.xml.sax.helpers.ParserAdapter.setEntityResolver(org.xml.sax.EntityResolver)">
                     * Set the entity resolver.
                     *
                     * @param resolver The new entity resolver.
                     * @see org.xml.sax.XMLReader#setEntityResolver</member>
        <member name="M:org.xml.sax.helpers.ParserAdapter.getEntityResolver">
                     * Return the current entity resolver.
                     *
                     * @return The current entity resolver, or null if none was supplied.
                     * @see org.xml.sax.XMLReader#getEntityResolver</member>
        <member name="M:org.xml.sax.helpers.ParserAdapter.setDTDHandler(org.xml.sax.DTDHandler)">
                     * Set the DTD handler.
                     *
                     * @param handler the new DTD handler
                     * @see org.xml.sax.XMLReader#setEntityResolver</member>
        <member name="M:org.xml.sax.helpers.ParserAdapter.getDTDHandler">
                     * Return the current DTD handler.
                     *
                     * @return the current DTD handler, or null if none was supplied
                     * @see org.xml.sax.XMLReader#getEntityResolver</member>
        <member name="M:org.xml.sax.helpers.ParserAdapter.setContentHandler(org.xml.sax.ContentHandler)">
                     * Set the content handler.
                     *
                     * @param handler the new content handler
                     * @see org.xml.sax.XMLReader#setEntityResolver</member>
        <member name="M:org.xml.sax.helpers.ParserAdapter.getContentHandler">
                     * Return the current content handler.
                     *
                     * @return The current content handler, or null if none was supplied.
                     * @see org.xml.sax.XMLReader#getEntityResolver</member>
        <member name="M:org.xml.sax.helpers.ParserAdapter.setErrorHandler(org.xml.sax.ErrorHandler)">
                     * Set the error handler.
                     *
                     * @param handler The new error handler.
                     * @see org.xml.sax.XMLReader#setEntityResolver</member>
        <member name="M:org.xml.sax.helpers.ParserAdapter.getErrorHandler">
                     * Return the current error handler.
                     *
                     * @return The current error handler, or null if none was supplied.
                     * @see org.xml.sax.XMLReader#getEntityResolver</member>
        <member name="M:org.xml.sax.helpers.ParserAdapter.parse(System.String)">
                     * Parse an XML document.
                     *
                     * @param systemId The absolute URL of the document.
                     * @exception java.io.IOException If there is a problem reading
                     *            the raw content of the document.
                     * @exception SAXException If there is a problem
                     *            processing the document.
                     * @see #parse(org.xml.sax.InputSource)
                     * @see org.xml.sax.Parser#parse(java.lang.String)</member>
        <member name="M:org.xml.sax.helpers.ParserAdapter.parse(org.xml.sax.InputSource)">
                     * Parse an XML document.
                     *
                     * @param input An input source for the document.
                     * @exception java.io.IOException If there is a problem reading
                     *            the raw content of the document.
                     * @exception SAXException If there is a problem
                     *            processing the document.
                     * @see #parse(java.lang.String)
                     * @see org.xml.sax.Parser#parse(org.xml.sax.InputSource)</member>
        <member name="M:org.xml.sax.helpers.ParserAdapter.setDocumentLocator(org.xml.sax.Locator)">
                     * Adapter implementation method; do not call.
                     * Adapt a SAX1 document locator event.
                     *
                     * @param locator A document locator.
                     * @see org.xml.sax.ContentHandler#setDocumentLocator</member>
        <member name="M:org.xml.sax.helpers.ParserAdapter.startDocument">
                     * Adapter implementation method; do not call.
                     * Adapt a SAX1 start document event.
                     *
                     * @exception SAXException The client may raise a
                     *            processing exception.
                     * @see org.xml.sax.DocumentHandler#startDocument</member>
        <member name="M:org.xml.sax.helpers.ParserAdapter.endDocument">
                     * Adapter implementation method; do not call.
                     * Adapt a SAX1 end document event.
                     *
                     * @exception SAXException The client may raise a
                     *            processing exception.
                     * @see org.xml.sax.DocumentHandler#endDocument</member>
        <member name="M:org.xml.sax.helpers.ParserAdapter.startElement(System.String,org.xml.sax.AttributeList)">
                     * Adapter implementation method; do not call.
                     * Adapt a SAX1 startElement event.
                     *
                     * <p>If necessary, perform Namespace processing.</p>
                     *
                     * @param qName The qualified (prefixed) name.
                     * @param qAtts The XML attribute list (with qnames).
                     * @exception SAXException The client may raise a
                     *            processing exception.</member>
        <member name="M:org.xml.sax.helpers.ParserAdapter.endElement(System.String)">
                     * Adapter implementation method; do not call.
                     * Adapt a SAX1 end element event.
                     *
                     * @param qName The qualified (prefixed) name.
                     * @exception SAXException The client may raise a
                     *            processing exception.
                     * @see org.xml.sax.DocumentHandler#endElement</member>
        <member name="M:org.xml.sax.helpers.ParserAdapter.characters(System.Char[],System.Int32,System.Int32)">
                     * Adapter implementation method; do not call.
                     * Adapt a SAX1 characters event.
                     *
                     * @param ch An array of characters.
                     * @param start The starting position in the array.
                     * @param length The number of characters to use.
                     * @exception SAXException The client may raise a
                     *            processing exception.
                     * @see org.xml.sax.DocumentHandler#characters</member>
        <member name="M:org.xml.sax.helpers.ParserAdapter.ignorableWhitespace(System.Char[],System.Int32,System.Int32)">
                     * Adapter implementation method; do not call.
                     * Adapt a SAX1 ignorable whitespace event.
                     *
                     * @param ch An array of characters.
                     * @param start The starting position in the array.
                     * @param length The number of characters to use.
                     * @exception SAXException The client may raise a
                     *            processing exception.
                     * @see org.xml.sax.DocumentHandler#ignorableWhitespace</member>
        <member name="M:org.xml.sax.helpers.ParserAdapter.processingInstruction(System.String,System.String)">
                     * Adapter implementation method; do not call.
                     * Adapt a SAX1 processing instruction event.
                     *
                     * @param target The processing instruction target.
                     * @param data The remainder of the processing instruction
                     * @exception SAXException The client may raise a
                     *            processing exception.
                     * @see org.xml.sax.DocumentHandler#processingInstruction</member>
        <member name="M:org.xml.sax.helpers.ParserAdapter.setupParser">
                     * Initialize the parser before each run.</member>
        <member name="M:org.xml.sax.helpers.ParserAdapter.processName(System.String,System.Boolean,System.Boolean)">
                     * Process a qualified (prefixed) name.
                     *
                     * <p>If the name has an undeclared prefix, use only the qname
                     * and make an ErrorHandler.error callback in case the app is
                     * interested.</p>
                     *
                     * @param qName The qualified (prefixed) name.
                     * @param isAttribute true if this is an attribute name.
                     * @return The name split into three parts.
                     * @exception SAXException The client may throw
                     *            an exception if there is an error callback.</member>
        <member name="M:org.xml.sax.helpers.ParserAdapter.reportError(System.String)">
                     * Report a non-fatal error.
                     *
                     * @param message The error message.
                     * @exception SAXException The client may throw
                     *            an exception.</member>
        <member name="M:org.xml.sax.helpers.ParserAdapter.makeException(System.String)">
                     * Construct an exception for the current context.
                     *
                     * @param message The error message.</member>
        <member name="M:org.xml.sax.helpers.ParserAdapter.checkNotParsing(System.String,System.String)">
                     * Throw an exception if we are parsing.
                     *
                     * <p>Use this method to detect illegal feature or
                     * property changes.</p>
                     *
                     * @param type The type of thing (feature or property).
                     * @param name The feature or property name.
                     * @exception SAXNotSupportedException If a
                     *            document is currently being parsed.</member>
        <member name="T:org.xml.sax.helpers.ParserAdapter.AttributeListAdapter">
                     * Adapt a SAX1 AttributeList as a SAX2 Attributes object.
                     *
                     * <p>This class is in the Public Domain, and comes with NO
                     * WARRANTY of any kind.</p>
                     *
                     * <p>This wrapper class is used only when Namespace support
                     * is disabled -- it provides pretty much a direct mapping
                     * from SAX1 to SAX2, except that names and types are
                     * interned whenever requested.</p></member>
        <member name="M:org.xml.sax.helpers.ParserAdapter.AttributeListAdapter.#ctor(org.xml.sax.helpers.ParserAdapter)">
                         * Construct a new adapter.</member>
        <member name="M:org.xml.sax.helpers.ParserAdapter.AttributeListAdapter.setAttributeList(org.xml.sax.AttributeList)">
                         * Set the embedded AttributeList.
                         *
                         * <p>This method must be invoked before any of the others
                         * can be used.</p>
                         *
                         * @param The SAX1 attribute list (with qnames).</member>
        <member name="M:org.xml.sax.helpers.ParserAdapter.AttributeListAdapter.getLength">
                         * Return the length of the attribute list.
                         *
                         * @return The number of attributes in the list.
                         * @see org.xml.sax.Attributes#getLength</member>
        <member name="M:org.xml.sax.helpers.ParserAdapter.AttributeListAdapter.getURI(System.Int32)">
                         * Return the Namespace URI of the specified attribute.
                         *
                         * @param The attribute's index.
                         * @return Always the empty string.
                         * @see org.xml.sax.Attributes#getURI</member>
        <member name="M:org.xml.sax.helpers.ParserAdapter.AttributeListAdapter.getLocalName(System.Int32)">
                         * Return the local name of the specified attribute.
                         *
                         * @param The attribute's index.
                         * @return Always the empty string.
                         * @see org.xml.sax.Attributes#getLocalName</member>
        <member name="M:org.xml.sax.helpers.ParserAdapter.AttributeListAdapter.getQName(System.Int32)">
                         * Return the qualified (prefixed) name of the specified attribute.
                         *
                         * @param The attribute's index.
                         * @return The attribute's qualified name, internalized.</member>
        <member name="M:org.xml.sax.helpers.ParserAdapter.AttributeListAdapter.getType(System.Int32)">
                         * Return the type of the specified attribute.
                         *
                         * @param The attribute's index.
                         * @return The attribute's type as an internalized string.</member>
        <member name="M:org.xml.sax.helpers.ParserAdapter.AttributeListAdapter.getValue(System.Int32)">
                         * Return the value of the specified attribute.
                         *
                         * @param The attribute's index.
                         * @return The attribute's value.</member>
        <member name="M:org.xml.sax.helpers.ParserAdapter.AttributeListAdapter.getIndex(System.String,System.String)">
                         * Look up an attribute index by Namespace name.
                         *
                         * @param uri The Namespace URI or the empty string.
                         * @param localName The local name.
                         * @return The attributes index, or -1 if none was found.
                         * @see org.xml.sax.Attributes#getIndex(java.lang.String,java.lang.String)</member>
        <member name="M:org.xml.sax.helpers.ParserAdapter.AttributeListAdapter.getIndex(System.String)">
                         * Look up an attribute index by qualified (prefixed) name.
                         *
                         * @param qName The qualified name.
                         * @return The attributes index, or -1 if none was found.
                         * @see org.xml.sax.Attributes#getIndex(java.lang.String)</member>
        <member name="M:org.xml.sax.helpers.ParserAdapter.AttributeListAdapter.getType(System.String,System.String)">
                         * Look up the type of an attribute by Namespace name.
                         *
                         * @param uri The Namespace URI
                         * @param localName The local name.
                         * @return The attribute's type as an internalized string.</member>
        <member name="M:org.xml.sax.helpers.ParserAdapter.AttributeListAdapter.getType(System.String)">
                         * Look up the type of an attribute by qualified (prefixed) name.
                         *
                         * @param qName The qualified name.
                         * @return The attribute's type as an internalized string.</member>
        <member name="M:org.xml.sax.helpers.ParserAdapter.AttributeListAdapter.getValue(System.String,System.String)">
                         * Look up the value of an attribute by Namespace name.
                         *
                         * @param uri The Namespace URI
                         * @param localName The local name.
                         * @return The attribute's value.</member>
        <member name="M:org.xml.sax.helpers.ParserAdapter.AttributeListAdapter.getValue(System.String)">
                         * Look up the value of an attribute by qualified (prefixed) name.
                         *
                         * @param qName The qualified name.
                         * @return The attribute's value.</member>
        <member name="T:org.xml.sax.helpers.ParserFactory">
                 * Java-specific class for dynamically loading SAX parsers.
                 *
                 * <blockquote>
                 * <em>This module, both source code and documentation, is in the
                 * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>
                 * See <a href="http://www.saxproject.org">http://www.saxproject.org</a>
                 * for further information.
                 * </blockquote>
                 *
                 * <p><strong>Note:</strong> This class is designed to work with the now-deprecated
                 * SAX1 {@link org.xml.sax.Parser Parser} class.  SAX2 applications should use
                 * {@link org.xml.sax.helpers.XMLReaderFactory XMLReaderFactory} instead.</p>
                 *
                 * <p>ParserFactory is not part of the platform-independent definition
                 * of SAX; it is an additional convenience class designed
                 * specifically for Java XML application writers.  SAX applications
                 * can use the static methods in this class to allocate a SAX parser
                 * dynamically at run-time based either on the value of the
                 * `org.xml.sax.parser' system property or on a string containing the class
                 * name.</p>
                 *
                 * <p>Note that the application still requires an XML parser that
                 * implements SAX1.</p>
                 *
                 * @deprecated This class works with the deprecated
                 *             {@link org.xml.sax.Parser Parser}
                 *             interface.
                 * @since SAX 1.0
                 * @author David Megginson
                 * @version 2.0.1 (sax2r2)</member>
        <member name="M:org.xml.sax.helpers.ParserFactory.#ctor">
                     * Private null constructor.</member>
        <member name="M:org.xml.sax.helpers.ParserFactory.makeParser">
                     * Create a new SAX parser using the `org.xml.sax.parser' system property.
                     *
                     * <p>The named class must exist and must implement the
                     * {@link org.xml.sax.Parser Parser} interface.</p>
                     *
                     * @exception java.lang.NullPointerException There is no value
                     *            for the `org.xml.sax.parser' system property.
                     * @exception java.lang.ClassNotFoundException The SAX parser
                     *            class was not found (check your CLASSPATH).
                     * @exception IllegalAccessException The SAX parser class was
                     *            found, but you do not have permission to load
                     *            it.
                     * @exception InstantiationException The SAX parser class was
                     *            found but could not be instantiated.
                     * @exception java.lang.ClassCastException The SAX parser class
                     *            was found and instantiated, but does not implement
                     *            org.xml.sax.Parser.
                     * @see #makeParser(java.lang.String)
                     * @see org.xml.sax.Parser</member>
        <member name="M:org.xml.sax.helpers.ParserFactory.makeParser(System.String)">
                     * Create a new SAX parser object using the class name provided.
                     *
                     * <p>The named class must exist and must implement the
                     * {@link org.xml.sax.Parser Parser} interface.</p>
                     *
                     * @param className A string containing the name of the
                     *                  SAX parser class.
                     * @exception java.lang.ClassNotFoundException The SAX parser
                     *            class was not found (check your CLASSPATH).
                     * @exception IllegalAccessException The SAX parser class was
                     *            found, but you do not have permission to load
                     *            it.
                     * @exception InstantiationException The SAX parser class was
                     *            found but could not be instantiated.
                     * @exception java.lang.ClassCastException The SAX parser class
                     *            was found and instantiated, but does not implement
                     *            org.xml.sax.Parser.
                     * @see #makeParser()
                     * @see org.xml.sax.Parser</member>
        <member name="T:org.xml.sax.helpers.XMLFilterImpl">
                 * Base class for deriving an XML filter.
                 *
                 * <blockquote>
                 * <em>This module, both source code and documentation, is in the
                 * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>
                 * See <a href="http://www.saxproject.org">http://www.saxproject.org</a>
                 * for further information.
                 * </blockquote>
                 *
                 * <p>This class is designed to sit between an {@link org.xml.sax.XMLReader
                 * XMLReader} and the client application's event handlers.  By default, it
                 * does nothing but pass requests up to the reader and events
                 * on to the handlers unmodified, but subclasses can override
                 * specific methods to modify the event stream or the configuration
                 * requests as they pass through.</p>
                 *
                 * @since SAX 2.0
                 * @author David Megginson
                 * @version 2.0.1 (sax2r2)
                 * @see org.xml.sax.XMLFilter
                 * @see org.xml.sax.XMLReader
                 * @see org.xml.sax.EntityResolver
                 * @see org.xml.sax.DTDHandler
                 * @see org.xml.sax.ContentHandler
                 * @see org.xml.sax.ErrorHandler</member>
        <member name="M:org.xml.sax.helpers.XMLFilterImpl.#ctor">
                     * Construct an empty XML filter, with no parent.
                     *
                     * <p>This filter will have no parent: you must assign a parent
                     * before you start a parse or do any configuration with
                     * setFeature or setProperty, unless you use this as a pure event
                     * consumer rather than as an {@link XMLReader}.</p>
                     *
                     * @see org.xml.sax.XMLReader#setFeature
                     * @see org.xml.sax.XMLReader#setProperty
                     * @see #setParent</member>
        <member name="M:org.xml.sax.helpers.XMLFilterImpl.#ctor(org.xml.sax.XMLReader)">
                     * Construct an XML filter with the specified parent.
                     *
                     * @see #setParent
                     * @see #getParent</member>
        <member name="M:org.xml.sax.helpers.XMLFilterImpl.setParent(org.xml.sax.XMLReader)">
                     * Set the parent reader.
                     *
                     * <p>This is the {@link org.xml.sax.XMLReader XMLReader} from which
                     * this filter will obtain its events and to which it will pass its
                     * configuration requests.  The parent may itself be another filter.</p>
                     *
                     * <p>If there is no parent reader set, any attempt to parse
                     * or to set or get a feature or property will fail.</p>
                     *
                     * @param parent The parent XML reader.
                     * @see #getParent</member>
        <member name="M:org.xml.sax.helpers.XMLFilterImpl.getParent">
                     * Get the parent reader.
                     *
                     * @return The parent XML reader, or null if none is set.
                     * @see #setParent</member>
        <member name="M:org.xml.sax.helpers.XMLFilterImpl.setFeature(System.String,System.Boolean)">
                     * Set the value of a feature.
                     *
                     * <p>This will always fail if the parent is null.</p>
                     *
                     * @param name The feature name.
                     * @param value The requested feature value.
                     * @exception org.xml.sax.SAXNotRecognizedException If the feature
                     *            value can't be assigned or retrieved from the parent.
                     * @exception org.xml.sax.SAXNotSupportedException When the
                     *            parent recognizes the feature name but
                     *            cannot set the requested value.</member>
        <member name="M:org.xml.sax.helpers.XMLFilterImpl.getFeature(System.String)">
                     * Look up the value of a feature.
                     *
                     * <p>This will always fail if the parent is null.</p>
                     *
                     * @param name The feature name.
                     * @return The current value of the feature.
                     * @exception org.xml.sax.SAXNotRecognizedException If the feature
                     *            value can't be assigned or retrieved from the parent.
                     * @exception org.xml.sax.SAXNotSupportedException When the
                     *            parent recognizes the feature name but
                     *            cannot determine its value at this time.</member>
        <member name="M:org.xml.sax.helpers.XMLFilterImpl.setProperty(System.String,System.Object)">
                     * Set the value of a property.
                     *
                     * <p>This will always fail if the parent is null.</p>
                     *
                     * @param name The property name.
                     * @param value The requested property value.
                     * @exception org.xml.sax.SAXNotRecognizedException If the property
                     *            value can't be assigned or retrieved from the parent.
                     * @exception org.xml.sax.SAXNotSupportedException When the
                     *            parent recognizes the property name but
                     *            cannot set the requested value.</member>
        <member name="M:org.xml.sax.helpers.XMLFilterImpl.getProperty(System.String)">
                     * Look up the value of a property.
                     *
                     * @param name The property name.
                     * @return The current value of the property.
                     * @exception org.xml.sax.SAXNotRecognizedException If the property
                     *            value can't be assigned or retrieved from the parent.
                     * @exception org.xml.sax.SAXNotSupportedException When the
                     *            parent recognizes the property name but
                     *            cannot determine its value at this time.</member>
        <member name="M:org.xml.sax.helpers.XMLFilterImpl.setEntityResolver(org.xml.sax.EntityResolver)">
                     * Set the entity resolver.
                     *
                     * @param resolver The new entity resolver.</member>
        <member name="M:org.xml.sax.helpers.XMLFilterImpl.getEntityResolver">
                     * Get the current entity resolver.
                     *
                     * @return The current entity resolver, or null if none was set.</member>
        <member name="M:org.xml.sax.helpers.XMLFilterImpl.setDTDHandler(org.xml.sax.DTDHandler)">
                     * Set the DTD event handler.
                     *
                     * @param handler the new DTD handler</member>
        <member name="M:org.xml.sax.helpers.XMLFilterImpl.getDTDHandler">
                     * Get the current DTD event handler.
                     *
                     * @return The current DTD handler, or null if none was set.</member>
        <member name="M:org.xml.sax.helpers.XMLFilterImpl.setContentHandler(org.xml.sax.ContentHandler)">
                     * Set the content event handler.
                     *
                     * @param handler the new content handler</member>
        <member name="M:org.xml.sax.helpers.XMLFilterImpl.getContentHandler">
                     * Get the content event handler.
                     *
                     * @return The current content handler, or null if none was set.</member>
        <member name="M:org.xml.sax.helpers.XMLFilterImpl.setErrorHandler(org.xml.sax.ErrorHandler)">
                     * Set the error event handler.
                     *
                     * @param handler the new error handler</member>
        <member name="M:org.xml.sax.helpers.XMLFilterImpl.getErrorHandler">
                     * Get the current error event handler.
                     *
                     * @return The current error handler, or null if none was set.</member>
        <member name="M:org.xml.sax.helpers.XMLFilterImpl.parse(org.xml.sax.InputSource)">
                     * Parse a document.
                     *
                     * @param input The input source for the document entity.
                     * @exception org.xml.sax.SAXException Any SAX exception, possibly
                     *            wrapping another exception.
                     * @exception java.io.IOException An IO exception from the parser,
                     *            possibly from a byte stream or character stream
                     *            supplied by the application.</member>
        <member name="M:org.xml.sax.helpers.XMLFilterImpl.parse(System.String)">
                     * Parse a document.
                     *
                     * @param systemId The system identifier as a fully-qualified URI.
                     * @exception org.xml.sax.SAXException Any SAX exception, possibly
                     *            wrapping another exception.
                     * @exception java.io.IOException An IO exception from the parser,
                     *            possibly from a byte stream or character stream
                     *            supplied by the application.</member>
        <member name="M:org.xml.sax.helpers.XMLFilterImpl.resolveEntity(System.String,System.String)">
                     * Filter an external entity resolution.
                     *
                     * @param publicId The entity's public identifier, or null.
                     * @param systemId The entity's system identifier.
                     * @return A new InputSource or null for the default.
                     * @exception org.xml.sax.SAXException The client may throw
                     *            an exception during processing.
                     * @exception java.io.IOException The client may throw an
                     *            I/O-related exception while obtaining the
                     *            new InputSource.</member>
        <member name="M:org.xml.sax.helpers.XMLFilterImpl.notationDecl(System.String,System.String,System.String)">
                     * Filter a notation declaration event.
                     *
                     * @param name The notation name.
                     * @param publicId The notation's public identifier, or null.
                     * @param systemId The notation's system identifier, or null.
                     * @exception org.xml.sax.SAXException The client may throw
                     *            an exception during processing.</member>
        <member name="M:org.xml.sax.helpers.XMLFilterImpl.unparsedEntityDecl(System.String,System.String,System.String,System.String)">
                     * Filter an unparsed entity declaration event.
                     *
                     * @param name The entity name.
                     * @param publicId The entity's public identifier, or null.
                     * @param systemId The entity's system identifier, or null.
                     * @param notationName The name of the associated notation.
                     * @exception org.xml.sax.SAXException The client may throw
                     *            an exception during processing.</member>
        <member name="M:org.xml.sax.helpers.XMLFilterImpl.setDocumentLocator(org.xml.sax.Locator)">
                     * Filter a new document locator event.
                     *
                     * @param locator The document locator.</member>
        <member name="M:org.xml.sax.helpers.XMLFilterImpl.startDocument">
                     * Filter a start document event.
                     *
                     * @exception org.xml.sax.SAXException The client may throw
                     *            an exception during processing.</member>
        <member name="M:org.xml.sax.helpers.XMLFilterImpl.endDocument">
                     * Filter an end document event.
                     *
                     * @exception org.xml.sax.SAXException The client may throw
                     *            an exception during processing.</member>
        <member name="M:org.xml.sax.helpers.XMLFilterImpl.startPrefixMapping(System.String,System.String)">
                     * Filter a start Namespace prefix mapping event.
                     *
                     * @param prefix The Namespace prefix.
                     * @param uri The Namespace URI.
                     * @exception org.xml.sax.SAXException The client may throw
                     *            an exception during processing.</member>
        <member name="M:org.xml.sax.helpers.XMLFilterImpl.endPrefixMapping(System.String)">
                     * Filter an end Namespace prefix mapping event.
                     *
                     * @param prefix The Namespace prefix.
                     * @exception org.xml.sax.SAXException The client may throw
                     *            an exception during processing.</member>
        <member name="M:org.xml.sax.helpers.XMLFilterImpl.startElement(System.String,System.String,System.String,org.xml.sax.Attributes)">
                     * Filter a start element event.
                     *
                     * @param uri The element's Namespace URI, or the empty string.
                     * @param localName The element's local name, or the empty string.
                     * @param qName The element's qualified (prefixed) name, or the empty
                     *        string.
                     * @param atts The element's attributes.
                     * @exception org.xml.sax.SAXException The client may throw
                     *            an exception during processing.</member>
        <member name="M:org.xml.sax.helpers.XMLFilterImpl.endElement(System.String,System.String,System.String)">
                     * Filter an end element event.
                     *
                     * @param uri The element's Namespace URI, or the empty string.
                     * @param localName The element's local name, or the empty string.
                     * @param qName The element's qualified (prefixed) name, or the empty
                     *        string.
                     * @exception org.xml.sax.SAXException The client may throw
                     *            an exception during processing.</member>
        <member name="M:org.xml.sax.helpers.XMLFilterImpl.characters(System.Char[],System.Int32,System.Int32)">
                     * Filter a character data event.
                     *
                     * @param ch An array of characters.
                     * @param start The starting position in the array.
                     * @param length The number of characters to use from the array.
                     * @exception org.xml.sax.SAXException The client may throw
                     *            an exception during processing.</member>
        <member name="M:org.xml.sax.helpers.XMLFilterImpl.ignorableWhitespace(System.Char[],System.Int32,System.Int32)">
                     * Filter an ignorable whitespace event.
                     *
                     * @param ch An array of characters.
                     * @param start The starting position in the array.
                     * @param length The number of characters to use from the array.
                     * @exception org.xml.sax.SAXException The client may throw
                     *            an exception during processing.</member>
        <member name="M:org.xml.sax.helpers.XMLFilterImpl.processingInstruction(System.String,System.String)">
                     * Filter a processing instruction event.
                     *
                     * @param target The processing instruction target.
                     * @param data The text following the target.
                     * @exception org.xml.sax.SAXException The client may throw
                     *            an exception during processing.</member>
        <member name="M:org.xml.sax.helpers.XMLFilterImpl.skippedEntity(System.String)">
                     * Filter a skipped entity event.
                     *
                     * @param name The name of the skipped entity.
                     * @exception org.xml.sax.SAXException The client may throw
                     *            an exception during processing.</member>
        <member name="M:org.xml.sax.helpers.XMLFilterImpl.warning(org.xml.sax.SAXParseException)">
                     * Filter a warning event.
                     *
                     * @param e The warning as an exception.
                     * @exception org.xml.sax.SAXException The client may throw
                     *            an exception during processing.</member>
        <member name="M:org.xml.sax.helpers.XMLFilterImpl.error(org.xml.sax.SAXParseException)">
                     * Filter an error event.
                     *
                     * @param e The error as an exception.
                     * @exception org.xml.sax.SAXException The client may throw
                     *            an exception during processing.</member>
        <member name="M:org.xml.sax.helpers.XMLFilterImpl.fatalError(org.xml.sax.SAXParseException)">
                     * Filter a fatal error event.
                     *
                     * @param e The error as an exception.
                     * @exception org.xml.sax.SAXException The client may throw
                     *            an exception during processing.</member>
        <member name="M:org.xml.sax.helpers.XMLFilterImpl.setupParse">
                     * Set up before a parse.
                     *
                     * <p>Before every parse, check whether the parent is
                     * non-null, and re-register the filter for all of the
                     * events.</p></member>
        <member name="T:org.xml.sax.helpers.XMLReaderFactory">
             * Factory for creating an XML reader.
             *
             * <blockquote>
             * <em>This module, both source code and documentation, is in the
             * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>
             * See <a href="http://www.saxproject.org">http://www.saxproject.org</a>
             * for further information.
             * </blockquote>
             *
             * <p>This class contains static methods for creating an XML reader
             * from an explicit class name, or based on runtime defaults:</p>
             *
             * <pre>
             * try {
             *   XMLReader myReader = XMLReaderFactory.createXMLReader();
             * } catch (SAXException e) {
             *   System.err.println(e.getMessage());
             * }
             * </pre>
             *
             * <p><strong>Note to Distributions bundled with parsers:</strong>
             * You should modify the implementation of the no-arguments
             * <em>createXMLReader</em> to handle cases where the external
             * configuration mechanisms aren't set up.  That method should do its
             * best to return a parser when one is in the class path, even when
             * nothing bound its class name to <code>org.xml.sax.driver</code> so
             * those configuration mechanisms would see it.</p>
             *
             * @since SAX 2.0
             * @author David Megginson, David Brownell
             * @version 2.0.1 (sax2r2)</member>
        <member name="M:org.xml.sax.helpers.XMLReaderFactory.#ctor">
                 * Private constructor.
                 *
                 * <p>This constructor prevents the class from being instantiated.</p></member>
        <member name="M:org.xml.sax.helpers.XMLReaderFactory.createXMLReader">
                 * Attempt to create an XMLReader from system defaults.
                 * In environments which can support it, the name of the XMLReader
                 * class is determined by trying each these options in order, and
                 * using the first one which succeeds:<p /><ul>
                 *
                 * <li>If the system property <code>org.xml.sax.driver</code>
                 * has a value, that is used as an XMLReader class name. </li>
                 *
                 * <li>The JAR "Services API" is used to look for a class name
                 * in the <em>META-INF/services/org.xml.sax.driver</em> file in
                 * jarfiles available to the runtime.</li>
                 *
                 * <li> SAX parser distributions are strongly encouraged to provide
                 * a default XMLReader class name that will take effect only when
                 * previous options (on this list) are not successful.</li>
                 *
                 * <li>Finally, if {@link ParserFactory#makeParser()} can
                 * return a system default SAX1 parser, that parser is wrapped in
                 * a {@link ParserAdapter}.  (This is a migration aid for SAX1
                 * environments, where the <code>org.xml.sax.parser</code> system
                 * property will often be usable.) </li>
                 *
                 * </ul>
                 *
                 * <p> In environments such as small embedded systems, which can not
                 * support that flexibility, other mechanisms to determine the default
                 * may be used. </p>
                 *
                 * <p>Note that many Java environments allow system properties to be
                 * initialized on a command line.  This means that <em>in most cases</em>
                 * setting a good value for that property ensures that calls to this
                 * method will succeed, except when security policies intervene.
                 * This will also maximize application portability to older SAX
                 * environments, with less robust implementations of this method.
                 * </p>
                 *
                 * @return A new XMLReader.
                 * @exception org.xml.sax.SAXException If no default XMLReader class
                 *            can be identified and instantiated.
                 * @see #createXMLReader(java.lang.String)</member>
        <member name="M:org.xml.sax.helpers.XMLReaderFactory.createXMLReader(System.String)">
                 * Attempt to create an XML reader from a class name.
                 *
                 * <p>Given a class name, this method attempts to load
                 * and instantiate the class as an XML reader.</p>
                 *
                 * <p>Note that this method will not be usable in environments where
                 * the caller (perhaps an applet) is not permitted to load classes
                 * dynamically.</p>
                 *
                 * @return A new XML reader.
                 * @exception org.xml.sax.SAXException If the class cannot be
                 *            loaded, instantiated, and cast to XMLReader.
                 * @see #createXMLReader()</member>
        <member name="T:org.xml.sax.helpers.AttributesImpl">
                 * Default implementation of the Attributes interface.
                 *
                 * <blockquote>
                 * <em>This module, both source code and documentation, is in the
                 * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>
                 * See <a href="http://www.saxproject.org">http://www.saxproject.org</a>
                 * for further information.
                 * </blockquote>
                 *
                 * <p>This class provides a default implementation of the SAX2
                 * {@link org.xml.sax.Attributes Attributes} interface, with the
                 * addition of manipulators so that the list can be modified or
                 * reused.</p>
                 *
                 * <p>There are two typical uses of this class:</p>
                 *
                 * <ol>
                 * <li>to take a persistent snapshot of an Attributes object
                 *  in a {@link org.xml.sax.ContentHandler#startElement startElement} event; or</li>
                 * <li>to construct or modify an Attributes object in a SAX2 driver or filter.</li>
                 * </ol>
                 *
                 * <p>This class replaces the now-deprecated SAX1 {@link
                 * org.xml.sax.helpers.AttributeListImpl AttributeListImpl}
                 * class; in addition to supporting the updated Attributes
                 * interface rather than the deprecated {@link org.xml.sax.AttributeList
                 * AttributeList} interface, it also includes a much more efficient
                 * implementation using a single array rather than a set of Vectors.</p>
                 *
                 * @since SAX 2.0
                 * @author David Megginson
                 * @version 2.0.1 (sax2r2)</member>
        <member name="M:org.xml.sax.helpers.AttributesImpl.#ctor">
                     * Construct a new, empty AttributesImpl object.</member>
        <member name="M:org.xml.sax.helpers.AttributesImpl.#ctor(org.xml.sax.Attributes)">
                     * Copy an existing Attributes object.
                     *
                     * <p>This constructor is especially useful inside a
                     * {@link org.xml.sax.ContentHandler#startElement startElement} event.</p>
                     *
                     * @param atts The existing Attributes object.</member>
        <member name="M:org.xml.sax.helpers.AttributesImpl.getLength">
                     * Return the number of attributes in the list.
                     *
                     * @return The number of attributes in the list.
                     * @see org.xml.sax.Attributes#getLength</member>
        <member name="M:org.xml.sax.helpers.AttributesImpl.getURI(System.Int32)">
                     * Return an attribute's Namespace URI.
                     *
                     * @param index The attribute's index (zero-based).
                     * @return The Namespace URI, the empty string if none is
                     *         available, or null if the index is out of range.
                     * @see org.xml.sax.Attributes#getURI</member>
        <member name="M:org.xml.sax.helpers.AttributesImpl.getLocalName(System.Int32)">
                     * Return an attribute's local name.
                     *
                     * @param index The attribute's index (zero-based).
                     * @return The attribute's local name, the empty string if
                     *         none is available, or null if the index if out of range.
                     * @see org.xml.sax.Attributes#getLocalName</member>
        <member name="M:org.xml.sax.helpers.AttributesImpl.getQName(System.Int32)">
                     * Return an attribute's qualified (prefixed) name.
                     *
                     * @param index The attribute's index (zero-based).
                     * @return The attribute's qualified name, the empty string if
                     *         none is available, or null if the index is out of bounds.
                     * @see org.xml.sax.Attributes#getQName</member>
        <member name="M:org.xml.sax.helpers.AttributesImpl.getType(System.Int32)">
                     * Return an attribute's type by index.
                     *
                     * @param index The attribute's index (zero-based).
                     * @return The attribute's type, "CDATA" if the type is unknown, or null
                     *         if the index is out of bounds.
                     * @see org.xml.sax.Attributes#getType(int)</member>
        <member name="M:org.xml.sax.helpers.AttributesImpl.getValue(System.Int32)">
                     * Return an attribute's value by index.
                     *
                     * @param index The attribute's index (zero-based).
                     * @return The attribute's value or null if the index is out of bounds.
                     * @see org.xml.sax.Attributes#getValue(int)</member>
        <member name="M:org.xml.sax.helpers.AttributesImpl.getIndex(System.String,System.String)">
                     * Look up an attribute's index by Namespace name.
                     *
                     * <p>In many cases, it will be more efficient to look up the name once and
                     * use the index query methods rather than using the name query methods
                     * repeatedly.</p>
                     *
                     * @param uri The attribute's Namespace URI, or the empty
                     *        string if none is available.
                     * @param localName The attribute's local name.
                     * @return The attribute's index, or -1 if none matches.
                     * @see org.xml.sax.Attributes#getIndex(java.lang.String,java.lang.String)</member>
        <member name="M:org.xml.sax.helpers.AttributesImpl.getIndex(System.String)">
                     * Look up an attribute's index by qualified (prefixed) name.
                     *
                     * @param qName The qualified name.
                     * @return The attribute's index, or -1 if none matches.
                     * @see org.xml.sax.Attributes#getIndex(java.lang.String)</member>
        <member name="M:org.xml.sax.helpers.AttributesImpl.getType(System.String,System.String)">
                     * Look up an attribute's type by Namespace-qualified name.
                     *
                     * @param uri The Namespace URI, or the empty string for a name
                     *        with no explicit Namespace URI.
                     * @param localName The local name.
                     * @return The attribute's type, or null if there is no
                     *         matching attribute.
                     * @see org.xml.sax.Attributes#getType(java.lang.String,java.lang.String)</member>
        <member name="M:org.xml.sax.helpers.AttributesImpl.getType(System.String)">
                     * Look up an attribute's type by qualified (prefixed) name.
                     *
                     * @param qName The qualified name.
                     * @return The attribute's type, or null if there is no
                     *         matching attribute.
                     * @see org.xml.sax.Attributes#getType(java.lang.String)</member>
        <member name="M:org.xml.sax.helpers.AttributesImpl.getValue(System.String,System.String)">
                     * Look up an attribute's value by Namespace-qualified name.
                     *
                     * @param uri The Namespace URI, or the empty string for a name
                     *        with no explicit Namespace URI.
                     * @param localName The local name.
                     * @return The attribute's value, or null if there is no
                     *         matching attribute.
                     * @see org.xml.sax.Attributes#getValue(java.lang.String,java.lang.String)</member>
        <member name="M:org.xml.sax.helpers.AttributesImpl.getValue(System.String)">
                     * Look up an attribute's value by qualified (prefixed) name.
                     *
                     * @param qName The qualified name.
                     * @return The attribute's value, or null if there is no
                     *         matching attribute.
                     * @see org.xml.sax.Attributes#getValue(java.lang.String)</member>
        <member name="M:org.xml.sax.helpers.AttributesImpl.clear">
                     * Clear the attribute list for reuse.
                     *
                     * <p>Note that little memory is freed by this call:
                     * the current array is kept so it can be
                     * reused.</p></member>
        <member name="M:org.xml.sax.helpers.AttributesImpl.setAttributes(org.xml.sax.Attributes)">
                     * Copy an entire Attributes object.
                     *
                     * <p>It may be more efficient to reuse an existing object
                     * rather than constantly allocating new ones.</p>
                     *
                     * @param atts The attributes to copy.</member>
        <member name="M:org.xml.sax.helpers.AttributesImpl.addAttribute(System.String,System.String,System.String,System.String,System.String)">
                     * Add an attribute to the end of the list.
                     *
                     * <p>For the sake of speed, this method does no checking
                     * to see if the attribute is already in the list: that is
                     * the responsibility of the application.</p>
                     *
                     * @param uri The Namespace URI, or the empty string if
                     *        none is available or Namespace processing is not
                     *        being performed.
                     * @param localName The local name, or the empty string if
                     *        Namespace processing is not being performed.
                     * @param qName The qualified (prefixed) name, or the empty string
                     *        if qualified names are not available.
                     * @param type The attribute type as a string.
                     * @param value The attribute value.</member>
        <member name="M:org.xml.sax.helpers.AttributesImpl.setAttribute(System.Int32,System.String,System.String,System.String,System.String,System.String)">
                     * Set an attribute in the list.
                     *
                     * <p>For the sake of speed, this method does no checking
                     * for name conflicts or well-formedness: such checks are the
                     * responsibility of the application.</p>
                     *
                     * @param index The index of the attribute (zero-based).
                     * @param uri The Namespace URI, or the empty string if
                     *        none is available or Namespace processing is not
                     *        being performed.
                     * @param localName The local name, or the empty string if
                     *        Namespace processing is not being performed.
                     * @param qName The qualified name, or the empty string
                     *        if qualified names are not available.
                     * @param type The attribute type as a string.
                     * @param value The attribute value.
                     * @exception java.lang.ArrayIndexOutOfBoundsException When the
                     *            supplied index does not point to an attribute
                     *            in the list.</member>
        <member name="M:org.xml.sax.helpers.AttributesImpl.removeAttribute(System.Int32)">
                     * Remove an attribute from the list.
                     *
                     * @param index The index of the attribute (zero-based).
                     * @exception java.lang.ArrayIndexOutOfBoundsException When the
                     *            supplied index does not point to an attribute
                     *            in the list.</member>
        <member name="M:org.xml.sax.helpers.AttributesImpl.setURI(System.Int32,System.String)">
                     * Set the Namespace URI of a specific attribute.
                     *
                     * @param index The index of the attribute (zero-based).
                     * @param uri The attribute's Namespace URI, or the empty
                     *        string for none.
                     * @exception java.lang.ArrayIndexOutOfBoundsException When the
                     *            supplied index does not point to an attribute
                     *            in the list.</member>
        <member name="M:org.xml.sax.helpers.AttributesImpl.setLocalName(System.Int32,System.String)">
                     * Set the local name of a specific attribute.
                     *
                     * @param index The index of the attribute (zero-based).
                     * @param localName The attribute's local name, or the empty
                     *        string for none.
                     * @exception java.lang.ArrayIndexOutOfBoundsException When the
                     *            supplied index does not point to an attribute
                     *            in the list.</member>
        <member name="M:org.xml.sax.helpers.AttributesImpl.setQName(System.Int32,System.String)">
                     * Set the qualified name of a specific attribute.
                     *
                     * @param index The index of the attribute (zero-based).
                     * @param qName The attribute's qualified name, or the empty
                     *        string for none.
                     * @exception java.lang.ArrayIndexOutOfBoundsException When the
                     *            supplied index does not point to an attribute
                     *            in the list.</member>
        <member name="M:org.xml.sax.helpers.AttributesImpl.setType(System.Int32,System.String)">
                     * Set the type of a specific attribute.
                     *
                     * @param index The index of the attribute (zero-based).
                     * @param type The attribute's type.
                     * @exception java.lang.ArrayIndexOutOfBoundsException When the
                     *            supplied index does not point to an attribute
                     *            in the list.</member>
        <member name="M:org.xml.sax.helpers.AttributesImpl.setValue(System.Int32,System.String)">
                     * Set the value of a specific attribute.
                     *
                     * @param index The index of the attribute (zero-based).
                     * @param value The attribute's value.
                     * @exception java.lang.ArrayIndexOutOfBoundsException When the
                     *            supplied index does not point to an attribute
                     *            in the list.</member>
        <member name="M:org.xml.sax.helpers.AttributesImpl.ensureCapacity(System.Int32)">
                     * Ensure the internal array's capacity.
                     *
                     * @param n The minimum number of attributes that the array must
                     *        be able to hold.</member>
        <member name="M:org.xml.sax.helpers.AttributesImpl.badIndex(System.Int32)">
                     * Report a bad array index in a manipulator.
                     *
                     * @param index The index to report.
                     * @exception java.lang.ArrayIndexOutOfBoundsException Always.</member>
        <!--FIXME: Invalid documentation markup was found for member T:biz.ritter.javapix.xml.crypto.KeySelectorException-->
        <member name="F:biz.ritter.javapix.xml.crypto.KeySelectorException.cause">
                 * The throwable that caused this exception to get thrown, or
                 * <code>null</code> if this exception was not caused by another throwable
                 * or if the causative throwable is unknown.
                 *
                 * @serial</member>
        <member name="M:biz.ritter.javapix.xml.crypto.KeySelectorException.#ctor">
                 * Constructs a new <code>KeySelectorException</code> with
                 * <code>null</code> as its detail message.</member>
        <member name="M:biz.ritter.javapix.xml.crypto.KeySelectorException.#ctor(System.String)">
                 * Constructs a new <code>KeySelectorException</code> with the specified
                 * detail message.
                 *
                 * @param message the detail message</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapix.xml.crypto.KeySelectorException.#ctor(System.String,biz.ritter.javapi.lang.Throwable)-->
        <member name="M:biz.ritter.javapix.xml.crypto.KeySelectorException.#ctor(biz.ritter.javapi.lang.Throwable)">
                 * Constructs a new <code>KeySelectorException</code> with the specified
                 * cause and a detail message of
                 * <code>(cause==null ? null : cause.toString())</code>
                 * (which typically contains the class and detail message of
                 * <code>cause</code>).
                 *
                 * @param cause the cause (A <tt>null</tt> value is permitted, and
                 *        indicates that the cause is nonexistent or unknown.)</member>
        <member name="M:biz.ritter.javapix.xml.crypto.KeySelectorException.getCause">
                 * Returns the cause of this <code>KeySelectorException</code> or
                 * <code>null</code> if the cause is nonexistent or unknown.  (The
                 * cause is the throwable that caused this
                 * <code>KeySelectorException</code> to get thrown.)
                 *
                 * @return the cause of this <code>KeySelectorException</code> or
                 *         <code>null</code> if the cause is nonexistent or unknown.</member>
        <member name="M:biz.ritter.javapix.xml.crypto.KeySelectorException.printStackTrace">
                 * Prints this <code>KeySelectorException</code>, its backtrace and
                 * the cause's backtrace to the standard error stream.</member>
        <member name="M:biz.ritter.javapix.xml.crypto.KeySelectorException.printStackTrace(biz.ritter.javapi.io.PrintStream)">
                 * Prints this <code>KeySelectorException</code>, its backtrace and
                 * the cause's backtrace to the specified print stream.
                 *
                 * @param s <code>PrintStream</code> to use for output</member>
        <member name="M:biz.ritter.javapix.xml.crypto.KeySelectorException.printStackTrace(biz.ritter.javapi.io.PrintWriter)">
                 * Prints this <code>KeySelectorException</code>, its backtrace and
                 * the cause's backtrace to the specified print writer.
                 *
                 * @param s <code>PrintWriter</code> to use for output</member>
        <member name="T:biz.ritter.javapix.xml.crypto.Data">
            	 * An abstract representation of the result of dereferencing a
            	 * {@link URIReference} or the input/output of subsequent {@link Transform}s.
            	 * The primary purpose of this interface is to group and provide type safety
            	 * for all <code>Data</code> subtypes.
            	 *
            	 * @author Sean Mullan
            	 * @author JSR 105 Expert Group</member>
        <member name="T:biz.ritter.javapi.security.spec.AlgorithmParameterSpec">
            	 * The marker interface for algorithm parameter specifications. The purpose is
            	 * to group parameter specifications for algorithms.</member>
        <member name="T:biz.ritter.javapix.xml.crypto.AlgorithmMethod">
             * An abstract representation of an algorithm defined in the XML Security
             * specifications. Subclasses represent specific types of XML security
             * algorithms, such as a {@link javax.xml.crypto.dsig.Transform}.
             *
             * @author Sean Mullan
             * @author JSR 105 Expert Group</member>
        <member name="M:biz.ritter.javapix.xml.crypto.AlgorithmMethod.getAlgorithm">
                 * Returns the algorithm URI of this <code>AlgorithmMethod</code>.
                 *
                 * @return the algorithm URI of this <code>AlgorithmMethod</code></member>
        <member name="M:biz.ritter.javapix.xml.crypto.AlgorithmMethod.getParameterSpec">
                 * Returns the algorithm parameters of this <code>AlgorithmMethod</code>.
                 *
                 * @return the algorithm parameters of this <code>AlgorithmMethod</code>.
                 *    Returns <code>null</code> if this <code>AlgorithmMethod</code> does
                 *    not require parameters and they are not specified.</member>
        <member name="T:biz.ritter.javapix.xml.crypto.NodeSetData">
             * An abstract representation of a <code>Data</code> type containing a
             * node-set. The type (class) and ordering of the nodes contained in the set
             * are not defined by this class; instead that behavior should be
             * defined by <code>NodeSetData</code> subclasses.
             *
             * @author Sean Mullan
             * @author JSR 105 Expert Group</member>
        <member name="M:biz.ritter.javapix.xml.crypto.NodeSetData.iterator">
                 * Returns a read-only iterator over the nodes contained in this
                 * <code>NodeSetData</code> in
                 * <a href="http://www.w3.org/TR/1999/REC-xpath-19991116#dt-document-order">
                 * document order</a>. Attempts to modify the returned iterator
                 * via the <code>remove</code> method throw
                 * <code>UnsupportedOperationException</code>.
                 *
                 * @return an <code>Iterator</code> over the nodes in this
                 *    <code>NodeSetData</code> in document order</member>
        <member name="T:biz.ritter.javapix.xml.crypto.OctetStreamData">
             * A representation of a <code>Data</code> type containing an octet stream.</member>
        <member name="M:biz.ritter.javapix.xml.crypto.OctetStreamData.#ctor(biz.ritter.javapi.io.InputStream)">
                 * Creates a new <code>OctetStreamData</code>.
                 *
                 * @param octetStream the input stream containing the octets
                 * @throws NullPointerException if <code>octetStream</code> is
                 *    <code>null</code></member>
        <member name="M:biz.ritter.javapix.xml.crypto.OctetStreamData.#ctor(biz.ritter.javapi.io.InputStream,System.String,System.String)">
                 * Creates a new <code>OctetStreamData</code>.
                 *
                 * @param octetStream the input stream containing the octets
                 * @param uri the URI String identifying the data object (may be
                 *    <code>null</code>)
                 * @param mimeType the MIME type associated with the data object (may be
                 *    <code>null</code>)
                 * @throws NullPointerException if <code>octetStream</code> is
                 *    <code>null</code></member>
        <member name="M:biz.ritter.javapix.xml.crypto.OctetStreamData.getOctetStream">
                 * Returns the input stream of this <code>OctetStreamData</code>.
                 *
                 * @return the input stream of this <code>OctetStreamData</code>.</member>
        <member name="M:biz.ritter.javapix.xml.crypto.OctetStreamData.getURI">
                 * Returns the URI String identifying the data object represented by this
                 * <code>OctetStreamData</code>.
                 *
                 * @return the URI String or <code>null</code> if not applicable</member>
        <member name="M:biz.ritter.javapix.xml.crypto.OctetStreamData.getMimeType">
                 * Returns the MIME type associated with the data object represented by this
                 * <code>OctetStreamData</code>.
                 *
                 * @return the MIME type or <code>null</code> if not applicable</member>
        <!--FIXME: Invalid documentation markup was found for member T:biz.ritter.javapix.xml.crypto.URIReference-->
        <member name="M:biz.ritter.javapix.xml.crypto.URIReference.getURI">
                 * Returns the URI of the referenced data object.
                 *
                 * @return the URI of the data object in RFC 2396 format (may be
                 *    <code>null</code> if not specified)</member>
        <member name="M:biz.ritter.javapix.xml.crypto.URIReference.getType">
                 * Returns the type of data referenced by this URI.
                 *
                 * @return the type (a URI) of the data object (may be <code>null</code>
                 *    if not specified)</member>
        <!--FIXME: Invalid documentation markup was found for member T:biz.ritter.javapix.xml.crypto.URIDereferencer-->
        <member name="M:biz.ritter.javapix.xml.crypto.URIDereferencer.dereference(biz.ritter.javapix.xml.crypto.URIReference,biz.ritter.javapix.xml.crypto.XMLCryptoContext)">
                 * Dereferences the specified <code>URIReference</code> and returns the
                 * dereferenced data.
                 *
                 * @param uriReference the <code>URIReference</code>
                 * @param context an <code>XMLCryptoContext</code> that may
                 *    contain additional useful information for dereferencing the URI. This
                 *    implementation should dereference the specified
                 *    <code>URIReference</code> against the context's <code>baseURI</code>
                 *    parameter, if specified.
                 * @return the dereferenced data
                 * @throws NullPointerException if <code>uriReference</code> or
                 *    <code>context</code> are <code>null</code>
                 * @throws URIReferenceException if an exception occurs while
                 *    dereferencing the specified <code>uriReference</code></member>
        <!--FIXME: Invalid documentation markup was found for member T:biz.ritter.javapix.xml.crypto.XMLCryptoContext-->
        <member name="M:biz.ritter.javapix.xml.crypto.XMLCryptoContext.getBaseURI">
                 * Returns the base URI.
                 *
                 * @return the base URI, or <code>null</code> if not specified
                 * @see #setBaseURI(String)</member>
        <member name="M:biz.ritter.javapix.xml.crypto.XMLCryptoContext.setBaseURI(System.String)">
                 * Sets the base URI.
                 *
                 * @param baseURI the base URI, or <code>null</code> to remove current
                 *    value
                 * @throws IllegalArgumentException if <code>baseURI</code> is not RFC
                 *    2396 compliant
                 * @see #getBaseURI</member>
        <member name="M:biz.ritter.javapix.xml.crypto.XMLCryptoContext.getKeySelector">
                 * Returns the key selector for finding a key.
                 *
                 * @return the key selector, or <code>null</code> if not specified
                 * @see #setKeySelector(KeySelector)</member>
        <member name="M:biz.ritter.javapix.xml.crypto.XMLCryptoContext.setKeySelector(biz.ritter.javapix.xml.crypto.KeySelector)">
                 * Sets the key selector for finding a key.
                 *
                 * @param ks the key selector, or <code>null</code> to remove the current
                 *    setting
                 * @see #getKeySelector</member>
        <member name="M:biz.ritter.javapix.xml.crypto.XMLCryptoContext.getURIDereferencer">
                 * Returns a <code>URIDereferencer</code> that is used to dereference
                 * {@link URIReference}s.
                 *
                 * @return the <code>URIDereferencer</code>, or <code>null</code> if not
                 *    specified
                 * @see #setURIDereferencer(URIDereferencer)</member>
        <member name="M:biz.ritter.javapix.xml.crypto.XMLCryptoContext.setURIDereferencer(biz.ritter.javapix.xml.crypto.URIDereferencer)">
                 * Sets a <code>URIDereferencer</code> that is used to dereference
                 * {@link URIReference}s. The specified <code>URIDereferencer</code>
                 * is used in place of an implementation's default
                 * <code>URIDereferencer</code>.
                 *
                 * @param dereferencer the <code>URIDereferencer</code>, or
                 *    <code>null</code> to remove any current setting
                 * @see #getURIDereferencer</member>
        <member name="M:biz.ritter.javapix.xml.crypto.XMLCryptoContext.getNamespacePrefix(System.String,System.String)">
                 * Returns the namespace prefix that the specified namespace URI is
                 * associated with. Returns the specified default prefix if the specified
                 * namespace URI has not been bound to a prefix. To bind a namespace URI
                 * to a prefix, call the {@link #putNamespacePrefix putNamespacePrefix}
                 * method.
                 *
                 * @param namespaceURI a namespace URI
                 * @param defaultPrefix the prefix to be returned in the event that the
                 *    the specified namespace URI has not been bound to a prefix.
                 * @return the prefix that is associated with the specified namespace URI,
                 *    or <code>defaultPrefix</code> if the URI is not registered. If
                 *    the namespace URI is registered but has no prefix, an empty string
                 *    (<code>""</code>) is returned.
                 * @throws NullPointerException if <code>namespaceURI</code> is
                 *    <code>null</code>
                 * @see #putNamespacePrefix(String, String)</member>
        <member name="M:biz.ritter.javapix.xml.crypto.XMLCryptoContext.putNamespacePrefix(System.String,System.String)">
                 * Maps the specified namespace URI to the specified prefix. If there is
                 * already a prefix associated with the specified namespace URI, the old
                 * prefix is replaced by the specified prefix.
                 *
                 * @param namespaceURI a namespace URI
                 * @param prefix a namespace prefix (or <code>null</code> to remove any
                 *    existing mapping). Specifying the empty string (<code>""</code>)
                 *    binds no prefix to the namespace URI.
                 * @return the previous prefix associated with the specified namespace
                 *    URI, or <code>null</code> if there was none
                 * @throws NullPointerException if <code>namespaceURI</code> is
                 *    <code>null</code>
                 * @see #getNamespacePrefix(String, String)</member>
        <member name="M:biz.ritter.javapix.xml.crypto.XMLCryptoContext.getDefaultNamespacePrefix">
                 * Returns the default namespace prefix. The default namespace prefix
                 * is the prefix for all namespace URIs not explicitly set by the
                 * {@link #putNamespacePrefix putNamespacePrefix} method.
                 *
                 * @return the default namespace prefix, or <code>null</code> if none has
                 *    been set.
                 * @see #setDefaultNamespacePrefix(String)</member>
        <member name="M:biz.ritter.javapix.xml.crypto.XMLCryptoContext.setDefaultNamespacePrefix(System.String)">
                 * Sets the default namespace prefix. This sets the namespace prefix for
                 * all namespace URIs not explicitly set by the {@link #putNamespacePrefix
                 * putNamespacePrefix} method.
                 *
                 * @param defaultPrefix the default namespace prefix, or <code>null</code>
                 *    to remove the current setting. Specify the empty string
                 *    (<code>""</code>) to bind no prefix.
                 * @see #getDefaultNamespacePrefix</member>
        <member name="M:biz.ritter.javapix.xml.crypto.XMLCryptoContext.setProperty(System.String,System.Object)">
                 * Sets the specified property.
                 *
                 * @param name the name of the property
                 * @param value the value of the property to be set
                 * @return the previous value of the specified property, or
                 *    <code>null</code> if it did not have a value
                 * @throws NullPointerException if <code>name</code> is <code>null</code>
                 * @see #getProperty(String)</member>
        <member name="M:biz.ritter.javapix.xml.crypto.XMLCryptoContext.getProperty(System.String)">
                 * Returns the value of the specified property.
                 *
                 * @param name the name of the property
                 * @return the current value of the specified property, or
                 *    <code>null</code> if it does not have a value
                 * @throws NullPointerException if <code>name</code> is <code>null</code>
                 * @see #setProperty(String, Object)</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapix.xml.crypto.XMLCryptoContext.get(System.Object)-->
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapix.xml.crypto.XMLCryptoContext.put(System.Object,System.Object)-->
        <!--FIXME: Invalid documentation markup was found for member T:biz.ritter.javapix.xml.crypto.KeySelector-->
        <member name="T:biz.ritter.javapix.xml.crypto.KeySelector.Purpose">
                 * The purpose of the key that is to be selected.</member>
        <member name="M:biz.ritter.javapix.xml.crypto.KeySelector.Purpose.toString">
                     * Returns a string representation of this purpose ("sign",
                     * "verify", "encrypt", or "decrypt").
                     *
                     * @return a string representation of this purpose</member>
        <member name="F:biz.ritter.javapix.xml.crypto.KeySelector.Purpose.SIGN">
                     * A key for signing.</member>
        <member name="F:biz.ritter.javapix.xml.crypto.KeySelector.Purpose.VERIFY">
                     * A key for verifying.</member>
        <member name="F:biz.ritter.javapix.xml.crypto.KeySelector.Purpose.ENCRYPT">
                     * A key for encrypting.</member>
        <member name="F:biz.ritter.javapix.xml.crypto.KeySelector.Purpose.DECRYPT">
                     * A key for decrypting.</member>
        <member name="M:biz.ritter.javapix.xml.crypto.KeySelector.#ctor">
                 * Default no-args constructor; intended for invocation by subclasses only.</member>
        <member name="M:biz.ritter.javapix.xml.crypto.KeySelector.select(biz.ritter.javapix.xml.crypto.dsig.keyinfo.KeyInfo,biz.ritter.javapix.xml.crypto.KeySelector.Purpose,biz.ritter.javapix.xml.crypto.AlgorithmMethod,biz.ritter.javapix.xml.crypto.XMLCryptoContext)">
                 * Attempts to find a key that satisfies the specified constraints.
                 *
                 * @param keyInfo a <code>KeyInfo</code> (may be <code>null</code>)
                 * @param purpose the key's purpose ({@link Purpose#SIGN},
                 *    {@link Purpose#VERIFY}, {@link Purpose#ENCRYPT}, or
                 *    {@link Purpose#DECRYPT})
                 * @param method the algorithm method that this key is to be used for.
                 *    Only keys that are compatible with the algorithm and meet the
                 *    constraints of the specified algorithm should be returned.
                 * @param context an <code>XMLCryptoContext</code> that may contain
                 *    useful information for finding an appropriate key. If this key
                 *    selector supports resolving {@link RetrievalMethod} types, the
                 *    context's <code>baseURI</code> and <code>dereferencer</code>
                 *    parameters (if specified) should be used by the selector to
                 *    resolve and dereference the URI.
                 * @return the result of the key selector
                 * @throws KeySelectorException if an exceptional condition occurs while
                 *    attempting to find a key. Note that an inability to find a key is not
                 *    considered an exception (<code>null</code> should be
                 *    returned in that case). However, an error condition (ex: network
                 *    communications failure) that prevented the <code>KeySelector</code>
                 *    from finding a potential key should be considered an exception.
                 * @throws ClassCastException if the data type of <code>method</code>
                 *    is not supported by this key selector</member>
        <member name="M:biz.ritter.javapix.xml.crypto.KeySelector.singletonKeySelector(biz.ritter.javapi.security.Key)">
                 * Returns a <code>KeySelector</code> that always selects the specified
                 * key, regardless of the <code>KeyInfo</code> passed to it.
                 *
                 * @param key the sole key to be stored in the key selector
                 * @return a key selector that always selects the specified key
                 * @throws NullPointerException if <code>key</code> is <code>null</code></member>
        <!--FIXME: Invalid documentation markup was found for member T:biz.ritter.javapix.xml.crypto.KeySelectorResult-->
        <member name="M:biz.ritter.javapix.xml.crypto.KeySelectorResult.getKey">
                 * Returns the selected key.
                 *
                 * @return the selected key, or <code>null</code> if none can be found</member>
        <!--FIXME: Invalid documentation markup was found for member T:biz.ritter.javapix.xml.crypto.dsig.keyinfo.KeyInfo-->
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapix.xml.crypto.dsig.keyinfo.KeyInfo.getContent-->
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.keyinfo.KeyInfo.getId">
                 * Return the optional Id attribute of this <code>KeyInfo</code>, which
                 * may be useful for referencing this <code>KeyInfo</code> from other
                 * XML structures.
                 *
                 * @return the Id attribute of this <code>KeyInfo</code> (may be
                 *    <code>null</code> if not specified)</member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.keyinfo.KeyInfo.marshal(biz.ritter.javapix.xml.crypto.XMLStructure,biz.ritter.javapix.xml.crypto.XMLCryptoContext)">
                 * Marshals the key info to XML.
                 *
                 * @param parent a mechanism-specific structure containing the parent node
                 *    that the marshalled key info will be appended to
                 * @param context the <code>XMLCryptoContext</code> containing additional
                 *    context (may be null if not applicable)
                 * @throws ClassCastException if the type of <code>parent</code> or
                 *    <code>context</code> is not compatible with this key info
                 * @throws MarshalException if the key info cannot be marshalled
                 * @throws NullPointerException if <code>parent</code> is <code>null</code></member>
        <member name="T:biz.ritter.javapix.xml.crypto.XMLStructure">
             * A representation of an XML structure from any namespace. The purpose of
             * this interface is to group (and provide type safety for) all
             * representations of XML structures.
             *
             * @author Sean Mullan
             * @author JSR 105 Expert Group</member>
        <member name="M:biz.ritter.javapix.xml.crypto.XMLStructure.isFeatureSupported(System.String)">
                 * Indicates whether a specified feature is supported.
                 *
                 * @param feature the feature name (as an absolute URI)
                 * @return <code>true</code> if the specified feature is supported,
                 *    <code>false</code> otherwise
                 * @throws NullPointerException if <code>feature</code> is <code>null</code></member>
        <!--FIXME: Invalid documentation markup was found for member T:biz.ritter.javapix.xml.crypto.TransformException-->
        <member name="F:biz.ritter.javapix.xml.crypto.TransformException.cause">
                 * The throwable that caused this exception to get thrown, or null if this
                 * exception was not caused by another throwable or if the causative
                 * throwable is unknown.
                 *
                 * @serial</member>
        <member name="M:biz.ritter.javapix.xml.crypto.TransformException.#ctor">
                 * Constructs a new <code>TransformException</code> with
                 * <code>null</code> as its detail message.</member>
        <member name="M:biz.ritter.javapix.xml.crypto.TransformException.#ctor(System.String)">
                 * Constructs a new <code>TransformException</code> with the specified
                 * detail message.
                 *
                 * @param message the detail message</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapix.xml.crypto.TransformException.#ctor(System.String,biz.ritter.javapi.lang.Throwable)-->
        <member name="M:biz.ritter.javapix.xml.crypto.TransformException.#ctor(biz.ritter.javapi.lang.Throwable)">
                 * Constructs a new <code>TransformException</code> with the specified
                 * cause and a detail message of
                 * <code>(cause==null ? null : cause.toString())</code>
                 * (which typically contains the class and detail message of
                 * <code>cause</code>).
                 *
                 * @param cause the cause (A <tt>null</tt> value is permitted, and
                 *        indicates that the cause is nonexistent or unknown.)</member>
        <member name="M:biz.ritter.javapix.xml.crypto.TransformException.getCause">
                 * Returns the cause of this <code>TransformException</code> or
                 * <code>null</code> if the cause is nonexistent or unknown.  (The
                 * cause is the throwable that caused this
                 * <code>TransformException</code> to get thrown.)
                 *
                 * @return the cause of this <code>TransformException</code> or
                 *         <code>null</code> if the cause is nonexistent or unknown.</member>
        <member name="M:biz.ritter.javapix.xml.crypto.TransformException.printStackTrace">
                 * Prints this <code>TransformException</code>, its backtrace and
                 * the cause's backtrace to the standard error stream.</member>
        <member name="M:biz.ritter.javapix.xml.crypto.TransformException.printStackTrace(biz.ritter.javapi.io.PrintStream)">
                 * Prints this <code>TransformException</code>, its backtrace and
                 * the cause's backtrace to the specified print stream.
                 *
                 * @param s <code>PrintStream</code> to use for output</member>
        <member name="M:biz.ritter.javapix.xml.crypto.TransformException.printStackTrace(biz.ritter.javapi.io.PrintWriter)">
                 * Prints this <code>TransformException</code>, its backtrace and
                 * the cause's backtrace to the specified print writer.
                 *
                 * @param s <code>PrintWriter</code> to use for output</member>
        <member name="T:biz.ritter.javapix.xml.crypto.TransformParameterSpec">
             * A specification of algorithm parameters for a {@link Transform}
             * algorithm. The purpose of this interface is to group (and provide type
             * safety for) all transform parameter specifications. All transform parameter
             * specifications must implement this interface.
             *
             * @author Sean Mullan
             * @author JSR 105 Expert Group
             * @see Transform</member>
        <member name="T:biz.ritter.javapix.xml.crypto.dsig.Transform">
             * A representation of the XML <code>Transform</code> element as
             * defined in the <a href="http://www.w3.org/TR/xmldsig-core/">
             * W3C Recommendation for XML-Signature Syntax and Processing</a>.
             * The XML Schema Definition is defined as:
             *
             * <pre>
             * &lt;element name="Transform" type="ds:TransformType"/&gt;
             *   &lt;complexType name="TransformType" mixed="true"&gt;
             *     &lt;choice minOccurs="0" maxOccurs="unbounded"&gt;
             *       &lt;any namespace="##other" processContents="lax"/&gt;
             *       &lt;!-- (1,1) elements from (0,unbounded) namespaces --&gt;
             *       &lt;element name="XPath" type="string"/&gt;
             *     &lt;/choice&gt;
             *     &lt;attribute name="Algorithm" type="anyURI" use="required"/&gt;
             *   &lt;/complexType&gt;
             * </pre>
             *
             * A <code>Transform</code> instance may be created by invoking the
             * {@link XMLSignatureFactory#newTransform newTransform} method
             * of the {@link XMLSignatureFactory} class.
             *
             * @author Sean Mullan
             * @author JSR 105 Expert Group
             * @see XMLSignatureFactory#newTransform(String, TransformParameterSpec)</member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.Transform.transform(biz.ritter.javapix.xml.crypto.Data,biz.ritter.javapix.xml.crypto.XMLCryptoContext)">
                 * Transforms the specified data using the underlying transform algorithm.
                 *
                 * @param data the data to be transformed
                 * @param context the <code>XMLCryptoContext</code> containing
                 *    additional context (may be <code>null</code> if not applicable)
                 * @return the transformed data
                 * @throws NullPointerException if <code>data</code> is <code>null</code>
                 * @throws TransformException if an error occurs while executing the
                 *    transform</member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.Transform.transform(biz.ritter.javapix.xml.crypto.Data,biz.ritter.javapix.xml.crypto.XMLCryptoContext,biz.ritter.javapi.io.OutputStream)">
                 * Transforms the specified data using the underlying transform algorithm.
                 * If the output of this transform is an <code>OctetStreamData</code>, then
                 * this method returns <code>null</code> and the bytes are written to the
                 * specified <code>OutputStream</code>. Otherwise, the
                 * <code>OutputStream</code> is ignored and the method behaves as if
                 * {@link #transform(Data, XMLCryptoContext)} were invoked.
                 *
                 * @param data the data to be transformed
                 * @param context the <code>XMLCryptoContext</code> containing
                 *    additional context (may be <code>null</code> if not applicable)
                 * @param os the <code>OutputStream</code> that should be used to write
                 *    the transformed data to
                 * @return the transformed data (or <code>null</code> if the data was
                 *    written to the <code>OutputStream</code> parameter)
                 * @throws NullPointerException if <code>data</code> or <code>os</code>
                 *    is <code>null</code>
                 * @throws TransformException if an error occurs while executing the
                 *    transform</member>
        <member name="F:biz.ritter.javapix.xml.crypto.dsig.TransformConstants.BASE64">
            <summary>
            The <a href="http://www.w3.org/2000/09/xmldsig#base64">Base64</a> transform algorithm URI.
            </summary>
        </member>
        <member name="F:biz.ritter.javapix.xml.crypto.dsig.TransformConstants.ENVELOPED">
            <summary>
            The <a href="http://www.w3.org/2000/09/xmldsig#enveloped-signature">
            Enveloped Signature</a> transform algorithm URI.
            </summary>
        </member>
        <member name="F:biz.ritter.javapix.xml.crypto.dsig.TransformConstants.XPATH">
            <summary>
            The <a href="http://www.w3.org/TR/1999/REC-xpath-19991116">XPath</a>
            transform algorithm URI.
            </summary>
        </member>
        <member name="F:biz.ritter.javapix.xml.crypto.dsig.TransformConstants.XPATH2">
            <summary>
            The <a href="http://www.w3.org/2002/06/xmldsig-filter2">
            XPath Filter 2</a> transform algorithm URI.
            </summary>
        </member>
        <member name="F:biz.ritter.javapix.xml.crypto.dsig.TransformConstants.XSLT">
            <summary>
            The <a href="http://www.w3.org/TR/1999/REC-xslt-19991116">XSLT</a>
            transform algorithm URI.
            </summary>
        </member>
        <member name="T:biz.ritter.javapix.xml.crypto.dsig.keyinfo.RetrievalMethod">
             * A representation of the XML <code>RetrievalMethod</code> element as
             * defined in the <a href="http://www.w3.org/TR/xmldsig-core/">
             * W3C Recommendation for XML-Signature Syntax and Processing</a>.
             * A <code>RetrievalMethod</code> object is used to convey a reference to
             * <code>KeyInfo</code> information that is stored at another location.
             * The XML schema definition is defined as:
             *
             * <pre>
             *   &lt;element name="RetrievalMethod" type="ds:RetrievalMethodType"/&gt;
             *   &lt;complexType name="RetrievalMethodType"&gt;
             *     &lt;sequence&gt;
             *       &lt;element name="Transforms" type="ds:TransformsType" minOccurs="0"/&gt;
             *     &lt;/sequence&gt;
             *     &lt;attribute name="URI" type="anyURI"/&gt;
             *     &lt;attribute name="Type" type="anyURI" use="optional"/&gt;
             *   &lt;/complexType&gt;
             * </pre>
             *
             * A <code>RetrievalMethod</code> instance may be created by invoking one of the
             * {@link KeyInfoFactory#newRetrievalMethod newRetrievalMethod} methods
             * of the {@link KeyInfoFactory} class, and passing it the URI
             * identifying the location of the KeyInfo, an optional type URI identifying
             * the type of KeyInfo, and an optional list of {@link Transform}s; for example:
             * <pre>
             *   KeyInfoFactory factory = KeyInfoFactory.getInstance("DOM");
             *   RetrievalMethod rm = factory.newRetrievalMethod
             *      ("#KeyValue-1", KeyValue.DSA_TYPE, Collections.singletonList(Transform.BASE64));
             * </pre>
             *
             * @author Sean Mullan
             * @author JSR 105 Expert Group
             * @see KeyInfoFactory#newRetrievalMethod(String)
             * @see KeyInfoFactory#newRetrievalMethod(String, String, List)</member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.keyinfo.RetrievalMethod.getTransforms">
                 * Returns an {@link java.util.Collections#unmodifiableList unmodifiable
                 * list} of {@link Transform}s of this <code>RetrievalMethod</code>.
                 *
                 * @return an unmodifiable list of <code>Transform</code> objects (may be
                 *    empty but never <code>null</code>).</member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.keyinfo.RetrievalMethod.dereference(biz.ritter.javapix.xml.crypto.XMLCryptoContext)">
                * Dereferences the <code>KeyInfo</code> information referenced by this
                * <code>RetrievalMethod</code> and applies the specified
                * <code>Transform</code>s.
                *
                * @param context an <code>XMLCryptoContext</code> that may contain
                *    additional useful information for dereferencing the URI. The
                *    context's <code>baseURI</code> and <code>dereferencer</code>
                *    parameters (if specified) are used to resolve and dereference this
                *    <code>RetrievalMethod</code>
                * @return a <code>Data</code> object representing the raw contents of the
                *    <code>KeyInfo</code> information referenced by this
                *    <code>RetrievalMethod</code>. It is the caller's responsibility to
                *    convert the returned data to an appropriate
                *    <code>KeyInfo</code> object.
                * @throws NullPointerException if <code>context</code> is <code>null</code>
                * @throws URIReferenceException if there is an error while dereferencing</member>
        <!--FIXME: Invalid documentation markup was found for member T:biz.ritter.javapix.xml.crypto.URIReferenceException-->
        <member name="F:biz.ritter.javapix.xml.crypto.URIReferenceException.cause">
                 * The throwable that caused this exception to get thrown, or null if this
                 * exception was not caused by another throwable or if the causative
                 * throwable is unknown.
                 *
                 * @serial</member>
        <member name="M:biz.ritter.javapix.xml.crypto.URIReferenceException.#ctor">
                 * Constructs a new <code>URIReferenceException</code> with
                 * <code>null</code> as its detail message.</member>
        <member name="M:biz.ritter.javapix.xml.crypto.URIReferenceException.#ctor(System.String)">
                 * Constructs a new <code>URIReferenceException</code> with the specified
                 * detail message.
                 *
                 * @param message the detail message</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapix.xml.crypto.URIReferenceException.#ctor(System.String,biz.ritter.javapi.lang.Throwable)-->
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapix.xml.crypto.URIReferenceException.#ctor(System.String,biz.ritter.javapi.lang.Throwable,biz.ritter.javapix.xml.crypto.URIReference)-->
        <member name="M:biz.ritter.javapix.xml.crypto.URIReferenceException.#ctor(biz.ritter.javapi.lang.Throwable)">
                 * Constructs a new <code>URIReferenceException</code> with the specified
                 * cause and a detail message of <code>(cause==null ? null :
                 * cause.toString())</code> (which typically contains the class and detail
                 * message of <code>cause</code>).
                 *
                 * @param cause the cause (A <tt>null</tt> value is permitted, and
                 *        indicates that the cause is nonexistent or unknown.)</member>
        <member name="M:biz.ritter.javapix.xml.crypto.URIReferenceException.getURIReference">
                 * Returns the <code>URIReference</code> that was being dereferenced
                 * when the exception was thrown.
                 *
                 * @return the <code>URIReference</code> that was being dereferenced
                 * when the exception was thrown, or <code>null</code> if not specified</member>
        <member name="M:biz.ritter.javapix.xml.crypto.URIReferenceException.getCause">
                 * Returns the cause of this <code>URIReferenceException</code> or
                 * <code>null</code> if the cause is nonexistent or unknown.  (The
                 * cause is the throwable that caused this
                 * <code>URIReferenceException</code> to get thrown.)
                 *
                 * @return the cause of this <code>URIReferenceException</code> or
                 *    <code>null</code> if the cause is nonexistent or unknown.</member>
        <member name="M:biz.ritter.javapix.xml.crypto.URIReferenceException.printStackTrace">
                 * Prints this <code>URIReferenceException</code>, its backtrace and
                 * the cause's backtrace to the standard error stream.</member>
        <member name="M:biz.ritter.javapix.xml.crypto.URIReferenceException.printStackTrace(biz.ritter.javapi.io.PrintStream)">
                 * Prints this <code>URIReferenceException</code>, its backtrace and
                 * the cause's backtrace to the specified print stream.
                 *
                 * @param s <code>PrintStream</code> to use for output</member>
        <member name="M:biz.ritter.javapix.xml.crypto.URIReferenceException.printStackTrace(biz.ritter.javapi.io.PrintWriter)">
                 * Prints this <code>URIReferenceException</code>, its backtrace and
                 * the cause's backtrace to the specified print writer.
                 *
                 * @param s <code>PrintWriter</code> to use for output</member>
        <!--FIXME: Invalid documentation markup was found for member T:biz.ritter.javapix.xml.crypto.dsig.XMLSignatureException-->
        <member name="F:biz.ritter.javapix.xml.crypto.dsig.XMLSignatureException.cause">
                 * The throwable that caused this exception to get thrown, or null if this
                 * exception was not caused by another throwable or if the causative
                 * throwable is unknown.
                 *
                 * @serial</member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.XMLSignatureException.#ctor">
                 * Constructs a new <code>XMLSignatureException</code> with
                 * <code>null</code> as its detail message.</member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.XMLSignatureException.#ctor(System.String)">
                 * Constructs a new <code>XMLSignatureException</code> with the specified
                 * detail message.
                 *
                 * @param message the detail message</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapix.xml.crypto.dsig.XMLSignatureException.#ctor(System.String,biz.ritter.javapi.lang.Throwable)-->
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.XMLSignatureException.#ctor(biz.ritter.javapi.lang.Throwable)">
                 * Constructs a new <code>XMLSignatureException</code> with the specified
                 * cause and a detail message of
                 * <code>(cause==null ? null : cause.toString())</code>
                 * (which typically contains the class and detail message of
                 * <code>cause</code>).
                 *
                 * @param cause the cause (A <tt>null</tt> value is permitted, and
                 *        indicates that the cause is nonexistent or unknown.)</member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.XMLSignatureException.getCause">
                 * Returns the cause of this <code>XMLSignatureException</code> or
                 * <code>null</code> if the cause is nonexistent or unknown.  (The
                 * cause is the throwable that caused this
                 * <code>XMLSignatureException</code> to get thrown.)
                 *
                 * @return the cause of this <code>XMLSignatureException</code> or
                 *         <code>null</code> if the cause is nonexistent or unknown.</member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.XMLSignatureException.printStackTrace">
                 * Prints this <code>XMLSignatureException</code>, its backtrace and
                 * the cause's backtrace to the standard error stream.</member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.XMLSignatureException.printStackTrace(biz.ritter.javapi.io.PrintStream)">
                 * Prints this <code>XMLSignatureException</code>, its backtrace and
                 * the cause's backtrace to the specified print stream.
                 *
                 * @param s <code>PrintStream</code> to use for output</member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.XMLSignatureException.printStackTrace(biz.ritter.javapi.io.PrintWriter)">
                 * Prints this <code>XMLSignatureException</code>, its backtrace and
                 * the cause's backtrace to the specified print writer.
                 *
                 * @param s <code>PrintWriter</code> to use for output</member>
        <!--FIXME: Invalid documentation markup was found for member T:biz.ritter.javapix.xml.crypto.dsig.XMLSignature-->
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapix.xml.crypto.dsig.XMLSignature.validate(biz.ritter.javapix.xml.crypto.dsig.XMLValidateContext)-->
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.XMLSignature.getKeyInfo">
                 * Returns the key info of this <code>XMLSignature</code>.
                 *
                 * @return the key info (may be <code>null</code> if not specified)</member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.XMLSignature.getSignedInfo">
                 * Returns the signed info of this <code>XMLSignature</code>.
                 *
                 * @return the signed info (never <code>null</code>)</member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.XMLSignature.getObjects">
                 * Returns an {@link java.util.Collections#unmodifiableList unmodifiable
                 * list} of {@link XMLObject}s contained in this <code>XMLSignature</code>.
                 *
                 * @return an unmodifiable list of <code>XMLObject</code>s (may be empty
                 *    but never <code>null</code>)</member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.XMLSignature.getId">
                 * Returns the optional Id of this <code>XMLSignature</code>.
                 *
                 * @return the Id (may be <code>null</code> if not specified)</member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.XMLSignature.getSignatureValue">
                 * Returns the signature value of this <code>XMLSignature</code>.
                 *
                 * @return the signature value</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapix.xml.crypto.dsig.XMLSignature.sign(biz.ritter.javapix.xml.crypto.dsig.XMLSignContext)-->
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.XMLSignature.getKeySelectorResult">
                 * Returns the result of the {@link KeySelector}, if specified, after
                 * this <code>XMLSignature</code> has been signed or validated.
                 *
                 * @return the key selector result, or <code>null</code> if a key
                 *	  selector has not been specified or this <code>XMLSignature</code>
                 *	  has not been signed or validated</member>
        <!--FIXME: Invalid documentation markup was found for member T:biz.ritter.javapix.xml.crypto.dsig.XMLSignatureNS.SignatureValue-->
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.XMLSignatureNS.SignatureValue.getId">
                     * Returns the optional <code>Id</code> attribute of this
                     * <code>SignatureValue</code>, which permits this element to be
                     * referenced from elsewhere.
                     *
                     * @return the <code>Id</code> attribute (may be <code>null</code> if
                     *    not specified)</member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.XMLSignatureNS.SignatureValue.getValue">
                     * Returns the signature value of this <code>SignatureValue</code>.
                     *
                     * @return the signature value (may be <code>null</code> if the
                     *    <code>XMLSignature</code> has not been signed yet). Each
                     *    invocation of this method returns a new clone of the array to
                     *    prevent subsequent modification.</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapix.xml.crypto.dsig.XMLSignatureNS.SignatureValue.validate(biz.ritter.javapix.xml.crypto.dsig.XMLValidateContext)-->
        <member name="F:biz.ritter.javapix.xml.crypto.dsig.XMLSignatureConstants.XMLNS">
            <summary>
            The XML Namespace URI of the W3C Recommendation for XML-Signature Syntax and Processing.
            </summary>
        </member>
        <!--FIXME: Invalid documentation markup was found for member T:biz.ritter.javapix.xml.crypto.dsig.XMLValidateContext-->
        <member name="T:biz.ritter.javapix.xml.crypto.dsig.SignedInfo">
             * An representation of the XML <code>SignedInfo</code> element as
             * defined in the <a href="http://www.w3.org/TR/xmldsig-core/">
             * W3C Recommendation for XML-Signature Syntax and Processing</a>.
             * The XML Schema Definition is defined as:
             * <pre><code>
             * &lt;element name="SignedInfo" type="ds:SignedInfoType"/&gt;
             * &lt;complexType name="SignedInfoType"&gt;
             *   &lt;sequence&gt;
             *     &lt;element ref="ds:CanonicalizationMethod"/&gt;
             *     &lt;element ref="ds:SignatureMethod"/&gt;
             *     &lt;element ref="ds:Reference" maxOccurs="unbounded"/&gt;
             *   &lt;/sequence&gt;
             *   &lt;attribute name="Id" type="ID" use="optional"/&gt;
             * &lt;/complexType&gt;
             * </code></pre>
             *
             * A <code>SignedInfo</code> instance may be created by invoking one of the
             * {@link XMLSignatureFactory#newSignedInfo newSignedInfo} methods of the
             * {@link XMLSignatureFactory} class.
             *
             * @author Sean Mullan
             * @author JSR 105 Expert Group
             * @see XMLSignatureFactory#newSignedInfo(CanonicalizationMethod, SignatureMethod, List)
             * @see XMLSignatureFactory#newSignedInfo(CanonicalizationMethod, SignatureMethod, List, String)</member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.SignedInfo.getCanonicalizationMethod">
                 * Returns the canonicalization method of this <code>SignedInfo</code>.
                 *
                 * @return the canonicalization method</member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.SignedInfo.getSignatureMethod">
                 * Returns the signature method of this <code>SignedInfo</code>.
                 *
                 * @return the signature method</member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.SignedInfo.getReferences">
                 * Returns an {@link java.util.Collections#unmodifiableList
                 * unmodifiable list} of one or more {@link Reference}s.
                 *
                 * @return an unmodifiable list of one or more {@link Reference}s</member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.SignedInfo.getId">
                 * Returns the optional <code>Id</code> attribute of this
                 * <code>SignedInfo</code>.
                 *
                 * @return the id (may be <code>null</code> if not specified)</member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.SignedInfo.getCanonicalizedData">
                 * Returns the canonicalized signed info bytes after a signing or
                 * validation operation. This method is useful for debugging.
                 *
                 * @return an <code>InputStream</code> containing the canonicalized bytes,
                 *    or <code>null</code> if this <code>SignedInfo</code> has not been
                 *    signed or validated yet</member>
        <!--FIXME: Invalid documentation markup was found for member T:biz.ritter.javapix.xml.crypto.dsig.XMLSignContext-->
        <!--FIXME: Invalid documentation markup was found for member T:biz.ritter.javapix.xml.crypto.dsig.SignatureMethod-->
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapix.xml.crypto.dsig.SignatureMethod.getParameterSpec-->
        <member name="F:biz.ritter.javapix.xml.crypto.dsig.SignatureMethodConstants.DSA_SHA1">
            <summary>
            The <a href="http://www.w3.org/2000/09/xmldsig#dsa-sha1">DSAwithSHA1</a>
            (DSS) signature method algorithm URI.
            </summary>
        </member>
        <member name="F:biz.ritter.javapix.xml.crypto.dsig.SignatureMethodConstants.RSA_SHA1">
            <summary>
            The <a href="http://www.w3.org/2000/09/xmldsig#rsa-sha1">RSAwithSHA1</a>
            (PKCS #1) signature method algorithm URI.
            </summary>
        </member>
        <member name="F:biz.ritter.javapix.xml.crypto.dsig.SignatureMethodConstants.HMAC_SHA1">
            <summary>
            The <a href="http://www.w3.org/2000/09/xmldsig#hmac-sha1">HMAC-SHA1</a>
            MAC signature method algorithm URI
            </summary>
        </member>
        <!--FIXME: Invalid documentation markup was found for member T:biz.ritter.javapix.xml.crypto.dsig.CanonicalizationMethod-->
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapix.xml.crypto.dsig.CanonicalizationMethod.getParameterSpec-->
        <member name="F:biz.ritter.javapix.xml.crypto.dsig.CanonicalizationMethodeConstants.INCLUSIVE">
            <summary>
            The <a href="http://www.w3.org/TR/2001/REC-xml-c14n-20010315">Canonical
            XML (without comments)</a> canonicalization method algorithm URI.
            </summary>
        </member>
        <member name="F:biz.ritter.javapix.xml.crypto.dsig.CanonicalizationMethodeConstants.INCLUSIVE_WITH_COMMENTS">
            <summary>
            The
            <a href="http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments">
            Canonical XML with comments</a> canonicalization method algorithm URI.
            </summary>
        </member>
        <member name="F:biz.ritter.javapix.xml.crypto.dsig.CanonicalizationMethodeConstants.EXCLUSIVE">
            <summary>
            The <a href="http://www.w3.org/2001/10/xml-exc-c14n#">Exclusive
            Canonical XML (without comments)</a> canonicalization method algorithm
            URI.
            </summary>
        </member>
        <member name="F:biz.ritter.javapix.xml.crypto.dsig.CanonicalizationMethodeConstants.EXCLUSIVE_WITH_COMMENTS">
            <summary>
            The <a href="http://www.w3.org/2001/10/xml-exc-c14n#WithComments">
            Exclusive Canonical XML with comments</a> canonicalization method
            algorithm URI.
            </summary>
        </member>
        <!--FIXME: Invalid documentation markup was found for member T:biz.ritter.javapix.xml.crypto.dsig.XMLSignatureFactory-->
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.XMLSignatureFactory.#ctor">
                 * Default constructor, for invocation by subclasses.</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapix.xml.crypto.dsig.XMLSignatureFactory.getInstance(System.String)-->
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapix.xml.crypto.dsig.XMLSignatureFactory.getInstance(System.String,biz.ritter.javapi.security.Provider)-->
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapix.xml.crypto.dsig.XMLSignatureFactory.getInstance(System.String,System.String)-->
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapix.xml.crypto.dsig.XMLSignatureFactory.getInstance-->
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.XMLSignatureFactory.getMechanismType">
                 * Returns the type of the XML processing mechanism and representation
                 * supported by this <code>XMLSignatureFactory</code> (ex: "DOM").
                 *
                 * @return the XML processing mechanism type supported by this
                 *    <code>XMLSignatureFactory</code></member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.XMLSignatureFactory.getProvider">
                 * Returns the provider of this <code>XMLSignatureFactory</code>.
                 *
                 * @return the provider of this <code>XMLSignatureFactory</code></member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.XMLSignatureFactory.newXMLSignature(biz.ritter.javapix.xml.crypto.dsig.SignedInfo,biz.ritter.javapix.xml.crypto.dsig.keyinfo.KeyInfo)">
                 * Creates an <code>XMLSignature</code> and initializes it with the contents
                 * of the specified <code>SignedInfo</code> and <code>KeyInfo</code>
                 * objects.
                 *
                 * @param si the signed info
                 * @param ki the key info (may be <code>null</code>)
                 * @return an <code>XMLSignature</code>
                 * @throws NullPointerException if <code>si</code> is <code>null</code></member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.XMLSignatureFactory.newXMLSignature(biz.ritter.javapix.xml.crypto.dsig.SignedInfo,biz.ritter.javapix.xml.crypto.dsig.keyinfo.KeyInfo,biz.ritter.javapi.util.List{System.Object},System.String,System.String)">
                 * Creates an <code>XMLSignature</code> and initializes it with the
                 * specified parameters.
                 *
                 * @param si the signed info
                 * @param ki the key info (may be <code>null</code>)
                 * @param objects a list of {@link XMLObject}s (may be empty or
                 *    <code>null</code>)
                 * @param id the Id (may be <code>null</code>)
                 * @param signatureValueId the SignatureValue Id (may be <code>null</code>)
                 * @return an <code>XMLSignature</code>
                 * @throws NullPointerException if <code>si</code> is <code>null</code>
                 * @throws ClassCastException if any of the <code>objects</code> are not of
                 *    type <code>XMLObject</code></member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.XMLSignatureFactory.newReference(System.String,biz.ritter.javapix.xml.crypto.dsig.DigestMethod)">
                 * Creates a <code>Reference</code> with the specified URI and digest
                 * method.
                 *
                 * @param uri the reference URI (may be <code>null</code>)
                 * @param dm the digest method
                 * @return a <code>Reference</code>
                 * @throws IllegalArgumentException if <code>uri</code> is not RFC 2396
                 *    compliant
                 * @throws NullPointerException if <code>dm</code> is <code>null</code></member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.XMLSignatureFactory.newReference(System.String,biz.ritter.javapix.xml.crypto.dsig.DigestMethod,biz.ritter.javapi.util.List{System.Object},System.String,System.String)">
                 * Creates a <code>Reference</code> with the specified parameters.
                 *
                 * @param uri the reference URI (may be <code>null</code>)
                 * @param dm the digest method
                 * @param transforms a list of {@link Transform}s. The list is defensively
                 *    copied to protect against subsequent modification. May be
                 *    <code>null</code> or empty.
                 * @param type the reference type, as a URI (may be <code>null</code>)
                 * @param id the reference ID (may be <code>null</code>)
                 * @return a <code>Reference</code>
                 * @throws ClassCastException if any of the <code>transforms</code> are
                 *    not of type <code>Transform</code>
                 * @throws IllegalArgumentException if <code>uri</code> is not RFC 2396
                 *    compliant
                 * @throws NullPointerException if <code>dm</code> is <code>null</code></member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapix.xml.crypto.dsig.XMLSignatureFactory.newReference(System.String,biz.ritter.javapix.xml.crypto.dsig.DigestMethod,biz.ritter.javapi.util.List{System.Object},System.String,System.String,System.Byte[])-->
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapix.xml.crypto.dsig.XMLSignatureFactory.newReference(System.String,biz.ritter.javapix.xml.crypto.dsig.DigestMethod,biz.ritter.javapi.util.List{System.Object},biz.ritter.javapix.xml.crypto.Data,biz.ritter.javapi.util.List{System.Object},System.String,System.String)-->
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.XMLSignatureFactory.newSignedInfo(biz.ritter.javapix.xml.crypto.dsig.CanonicalizationMethod,biz.ritter.javapix.xml.crypto.dsig.SignatureMethod,biz.ritter.javapi.util.List{System.Object})">
                 * Creates a <code>SignedInfo</code> with the specified canonicalization
                 * and signature methods, and list of one or more references.
                 *
                 * @param cm the canonicalization method
                 * @param sm the signature method
                 * @param references a list of one or more {@link Reference}s. The list is
                 *    defensively copied to protect against subsequent modification.
                 * @return a <code>SignedInfo</code>
                 * @throws ClassCastException if any of the references are not of
                 *    type <code>Reference</code>
                 * @throws IllegalArgumentException if <code>references</code> is empty
                 * @throws NullPointerException if any of the parameters
                 *    are <code>null</code></member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.XMLSignatureFactory.newSignedInfo(biz.ritter.javapix.xml.crypto.dsig.CanonicalizationMethod,biz.ritter.javapix.xml.crypto.dsig.SignatureMethod,biz.ritter.javapi.util.List{System.Object},System.String)">
                 * Creates a <code>SignedInfo</code> with the specified parameters.
                 *
                 * @param cm the canonicalization method
                 * @param sm the signature method
                 * @param references a list of one or more {@link Reference}s. The list is
                 *    defensively copied to protect against subsequent modification.
                 * @param id the id (may be <code>null</code>)
                 * @return a <code>SignedInfo</code>
                 * @throws ClassCastException if any of the references are not of
                 *    type <code>Reference</code>
                 * @throws IllegalArgumentException if <code>references</code> is empty
                 * @throws NullPointerException if <code>cm</code>, <code>sm</code>, or
                 *    <code>references</code> are <code>null</code></member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.XMLSignatureFactory.newXMLObject(biz.ritter.javapi.util.List{System.Object},System.String,System.String,System.String)">
                 * Creates an <code>XMLObject</code> from the specified parameters.
                 *
                 * @param content a list of {@link XMLStructure}s. The list
                 *    is defensively copied to protect against subsequent modification.
                 *    May be <code>null</code> or empty.
                 * @param id the Id (may be <code>null</code>)
                 * @param mimeType the mime type (may be <code>null</code>)
                 * @param encoding the encoding (may be <code>null</code>)
                 * @return an <code>XMLObject</code>
                 * @throws ClassCastException if <code>content</code> contains any
                 *    entries that are not of type {@link XMLStructure}</member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.XMLSignatureFactory.newManifest(biz.ritter.javapi.util.List{System.Object})">
                 * Creates a <code>Manifest</code> containing the specified
                 * list of {@link Reference}s.
                 *
                 * @param references a list of one or more <code>Reference</code>s. The list
                 *    is defensively copied to protect against subsequent modification.
                 * @return a <code>Manifest</code>
                 * @throws NullPointerException if <code>references</code> is
                 *    <code>null</code>
                 * @throws IllegalArgumentException if <code>references</code> is empty
                 * @throws ClassCastException if <code>references</code> contains any
                 *    entries that are not of type {@link Reference}</member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.XMLSignatureFactory.newManifest(biz.ritter.javapi.util.List{System.Object},System.String)">
                 * Creates a <code>Manifest</code> containing the specified
                 * list of {@link Reference}s and optional id.
                 *
                 * @param references a list of one or more <code>Reference</code>s. The list
                 *    is defensively copied to protect against subsequent modification.
                 * @param id the id (may be <code>null</code>)
                 * @return a <code>Manifest</code>
                 * @throws NullPointerException if <code>references</code> is
                 *    <code>null</code>
                 * @throws IllegalArgumentException if <code>references</code> is empty
                 * @throws ClassCastException if <code>references</code> contains any
                 *    entries that are not of type {@link Reference}</member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.XMLSignatureFactory.newSignatureProperty(biz.ritter.javapi.util.List{System.Object},System.String,System.String)">
                 * Creates a <code>SignatureProperty</code> containing the specified
                 * list of {@link XMLStructure}s, target URI and optional id.
                 *
                 * @param content a list of one or more <code>XMLStructure</code>s. The list
                 *    is defensively copied to protect against subsequent modification.
                 * @param target the target URI of the Signature that this property applies
                 *    to
                 * @param id the id (may be <code>null</code>)
                 * @return a <code>SignatureProperty</code>
                 * @throws NullPointerException if <code>content</code> or
                 *    <code>target</code> is <code>null</code>
                 * @throws IllegalArgumentException if <code>content</code> is empty
                 * @throws ClassCastException if <code>content</code> contains any
                 *    entries that are not of type {@link XMLStructure}</member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.XMLSignatureFactory.newSignatureProperties(biz.ritter.javapi.util.List{System.Object},System.String)">
                 * Creates a <code>SignatureProperties</code> containing the specified
                 * list of {@link SignatureProperty}s and optional id.
                 *
                 * @param properties a list of one or more <code>SignatureProperty</code>s.
                 *    The list is defensively copied to protect against subsequent
                 *    modification.
                 * @param id the id (may be <code>null</code>)
                 * @return a <code>SignatureProperties</code>
                 * @throws NullPointerException if <code>properties</code>
                 *    is <code>null</code>
                 * @throws IllegalArgumentException if <code>properties</code> is empty
                 * @throws ClassCastException if <code>properties</code> contains any
                 *    entries that are not of type {@link SignatureProperty}</member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.XMLSignatureFactory.newDigestMethod(System.String,biz.ritter.javapix.xml.crypto.dsig.spec.DigestMethodParameterSpec)">
                 * Creates a <code>DigestMethod</code> for the specified algorithm URI
                 * and parameters.
                 *
                 * @param algorithm the URI identifying the digest algorithm
                 * @param params algorithm-specific digest parameters (may be
                 *    <code>null</code>)
                 * @return the <code>DigestMethod</code>
                 * @throws InvalidAlgorithmParameterException if the specified parameters
                 *    are inappropriate for the requested algorithm
                 * @throws NoSuchAlgorithmException if an implementation of the
                 *    specified algorithm cannot be found
                 * @throws NullPointerException if <code>algorithm</code> is
                 *    <code>null</code></member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.XMLSignatureFactory.newSignatureMethod(System.String,biz.ritter.javapix.xml.crypto.dsig.spec.SignatureMethodParameterSpec)">
                 * Creates a <code>SignatureMethod</code> for the specified algorithm URI
                 * and parameters.
                 *
                 * @param algorithm the URI identifying the signature algorithm
                 * @param params algorithm-specific signature parameters (may be
                 *    <code>null</code>)
                 * @return the <code>SignatureMethod</code>
                 * @throws InvalidAlgorithmParameterException if the specified parameters
                 *    are inappropriate for the requested algorithm
                 * @throws NoSuchAlgorithmException if an implementation of the
                 *    specified algorithm cannot be found
                 * @throws NullPointerException if <code>algorithm</code> is
                 *    <code>null</code></member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.XMLSignatureFactory.newTransform(System.String,biz.ritter.javapix.xml.crypto.TransformParameterSpec)">
                 * Creates a <code>Transform</code> for the specified algorithm URI
                 * and parameters.
                 *
                 * @param algorithm the URI identifying the transform algorithm
                 * @param params algorithm-specific transform parameters (may be
                 *    <code>null</code>)
                 * @return the <code>Transform</code>
                 * @throws InvalidAlgorithmParameterException if the specified parameters
                 *    are inappropriate for the requested algorithm
                 * @throws NoSuchAlgorithmException if an implementation of the
                 *    specified algorithm cannot be found
                 * @throws NullPointerException if <code>algorithm</code> is
                 *    <code>null</code></member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.XMLSignatureFactory.newTransform(System.String,biz.ritter.javapix.xml.crypto.XMLStructure)">
                 * Creates a <code>Transform</code> for the specified algorithm URI
                 * and parameters. The parameters are specified as a mechanism-specific
                 * <code>XMLStructure</code> (ex: {@link DOMStructure}). This method is
                 * useful when the parameters are in XML form or there is no standard
                 * class for specifying the parameters.
                 *
                 * @param algorithm the URI identifying the transform algorithm
                 * @param params a mechanism-specific XML structure from which to
                 *   unmarshal the parameters from (may be <code>null</code> if
                 *   not required or optional)
                 * @return the <code>Transform</code>
                 * @throws ClassCastException if the type of <code>params</code> is
                 *   inappropriate for this <code>XMLSignatureFactory</code>
                 * @throws InvalidAlgorithmParameterException if the specified parameters
                 *    are inappropriate for the requested algorithm
                 * @throws NoSuchAlgorithmException if an implementation of the
                 *    specified algorithm cannot be found
                 * @throws NullPointerException if <code>algorithm</code> is
                 *    <code>null</code></member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.XMLSignatureFactory.newCanonicalizationMethod(System.String,biz.ritter.javapix.xml.crypto.dsig.C14NMethodParameterSpec)">
                 * Creates a <code>CanonicalizationMethod</code> for the specified
                 * algorithm URI and parameters.
                 *
                 * @param algorithm the URI identifying the canonicalization algorithm
                 * @param params algorithm-specific canonicalization parameters (may be
                 *    <code>null</code>)
                 * @return the <code>CanonicalizationMethod</code>
                 * @throws InvalidAlgorithmParameterException if the specified parameters
                 *    are inappropriate for the requested algorithm
                 * @throws NoSuchAlgorithmException if an implementation of the
                 *    specified algorithm cannot be found
                 * @throws NullPointerException if <code>algorithm</code> is
                 *    <code>null</code></member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.XMLSignatureFactory.newCanonicalizationMethod(System.String,biz.ritter.javapix.xml.crypto.XMLStructure)">
                 * Creates a <code>CanonicalizationMethod</code> for the specified
                 * algorithm URI and parameters. The parameters are specified as a
                 * mechanism-specific <code>XMLStructure</code> (ex: {@link DOMStructure}).
                 * This method is useful when the parameters are in XML form or there is
                 * no standard class for specifying the parameters.
                 *
                 * @param algorithm the URI identifying the canonicalization algorithm
                 * @param params a mechanism-specific XML structure from which to
                 *   unmarshal the parameters from (may be <code>null</code> if
                 *   not required or optional)
                 * @return the <code>CanonicalizationMethod</code>
                 * @throws ClassCastException if the type of <code>params</code> is
                 *   inappropriate for this <code>XMLSignatureFactory</code>
                 * @throws InvalidAlgorithmParameterException if the specified parameters
                 *    are inappropriate for the requested algorithm
                 * @throws NoSuchAlgorithmException if an implementation of the
                 *    specified algorithm cannot be found
                 * @throws NullPointerException if <code>algorithm</code> is
                 *    <code>null</code></member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.XMLSignatureFactory.getKeyInfoFactory">
                 * Returns a <code>KeyInfoFactory</code> that creates <code>KeyInfo</code>
                 * objects. The returned <code>KeyInfoFactory</code> has the same
                 * mechanism type and provider as this <code>XMLSignatureFactory</code>.
                 *
                 * @return a <code>KeyInfoFactory</code>
                 * @throws NoSuchMechanismException if a <code>KeyFactory</code>
                 *    implementation with the same mechanism type and provider
                 *    is not available</member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.XMLSignatureFactory.unmarshalXMLSignature(biz.ritter.javapix.xml.crypto.dsig.XMLValidateContext)">
                 * Unmarshals a new <code>XMLSignature</code> instance from a
                 * mechanism-specific <code>XMLValidateContext</code> instance.
                 *
                 * @param context a mechanism-specific context from which to unmarshal the
                 *    signature from
                 * @return the <code>XMLSignature</code>
                 * @throws NullPointerException if <code>context</code> is
                 *    <code>null</code>
                 * @throws ClassCastException if the type of <code>context</code> is
                 *    inappropriate for this factory
                 * @throws MarshalException if an unrecoverable exception occurs
                 *    during unmarshalling</member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.XMLSignatureFactory.unmarshalXMLSignature(biz.ritter.javapix.xml.crypto.XMLStructure)">
                 * Unmarshals a new <code>XMLSignature</code> instance from a
                 * mechanism-specific <code>XMLStructure</code> instance.
                 * This method is useful if you only want to unmarshal (and not
                 * validate) an <code>XMLSignature</code>.
                 *
                 * @param xmlStructure a mechanism-specific XML structure from which to
                 *    unmarshal the signature from
                 * @return the <code>XMLSignature</code>
                 * @throws NullPointerException if <code>xmlStructure</code> is
                 *    <code>null</code>
                 * @throws ClassCastException if the type of <code>xmlStructure</code> is
                 *    inappropriate for this factory
                 * @throws MarshalException if an unrecoverable exception occurs
                 *    during unmarshalling</member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.XMLSignatureFactory.isFeatureSupported(System.String)">
                 * Indicates whether a specified feature is supported.
                 *
                 * @param feature the feature name (as an absolute URI)
                 * @return <code>true</code> if the specified feature is supported,
                 *    <code>false</code> otherwise
                 * @throws NullPointerException if <code>feature</code> is <code>null</code></member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.XMLSignatureFactory.getURIDereferencer">
                 * Returns a reference to the <code>URIDereferencer</code> that is used by
                 * default to dereference URIs in {@link Reference} objects.
                 *
                 * @return a reference to the default <code>URIDereferencer</code> (never
                 *    <code>null</code>)</member>
        <!--FIXME: Invalid documentation markup was found for member T:biz.ritter.javapix.xml.crypto.dsig.Reference-->
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.Reference.getTransforms">
                 * Returns an {@link java.util.Collections#unmodifiableList unmodifiable
                 * list} of {@link Transform}s that are contained in this
                 * <code>Reference</code>.
                 *
                 * @return an unmodifiable list of <code>Transform</code>s
                 *    (may be empty but never <code>null</code>)</member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.Reference.getDigestMethod">
                 * Returns the digest method of this <code>Reference</code>.
                 *
                 * @return the digest method</member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.Reference.getId">
                 * Returns the optional <code>Id</code> attribute of this
                 * <code>Reference</code>, which permits this reference to be
                 * referenced from elsewhere.
                 *
                 * @return the <code>Id</code> attribute (may be <code>null</code> if not
                 *    specified)</member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.Reference.getDigestValue">
                 * Returns the digest value of this <code>Reference</code>.
                 *
                 * @return the raw digest value, or <code>null</code> if this reference has
                 *    not been digested yet. Each invocation of this method returns a new
                 *    clone to protect against subsequent modification.</member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.Reference.getCalculatedDigestValue">
                 * Returns the calculated digest value of this <code>Reference</code>
                 * after a validation operation. This method is useful for debugging if
                 * the reference fails to validate.
                 *
                 * @return the calculated digest value, or <code>null</code> if this
                 *    reference has not been validated yet. Each invocation of this method
                 *    returns a new clone to protect against subsequent modification.</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapix.xml.crypto.dsig.Reference.validate(biz.ritter.javapix.xml.crypto.dsig.XMLValidateContext)-->
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.Reference.getDereferencedData">
                 * Returns the dereferenced data, if
                 * <a href="XMLSignContext.html#Supported Properties">reference caching</a>
                 * is enabled. This is the result of dereferencing the URI of this
                 * reference during a validation or generation operation.
                 *
                 * @return the dereferenced data, or <code>null</code> if reference
                 *    caching is not enabled or this reference has not been generated or
                 *    validated</member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.Reference.getDigestInputStream">
                 * Returns the pre-digested input stream, if
                 * <a href="XMLSignContext.html#Supported Properties">reference caching</a>
                 * is enabled. This is the input to the digest operation during a
                 * validation or signing operation.
                 *
                 * @return an input stream containing the pre-digested input, or
                 *    <code>null</code> if reference caching is not enabled or this
                 *    reference has not been generated or validated</member>
        <!--FIXME: Invalid documentation markup was found for member T:biz.ritter.javapix.xml.crypto.dsig.DigestMethod-->
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapix.xml.crypto.dsig.DigestMethod.getParameterSpec-->
        <member name="F:biz.ritter.javapix.xml.crypto.dsig.XMLObjectConstants.TYPE">
                 * URI that identifies the <code>Object</code> element (this can be
                 * specified as the value of the <code>type</code> parameter of the
                 * {@link Reference} class to identify the referent's type).</member>
        <!--FIXME: Invalid documentation markup was found for member T:biz.ritter.javapix.xml.crypto.dsig.XMLObject-->
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapix.xml.crypto.dsig.XMLObject.getContent-->
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.XMLObject.getId">
                 * Returns the Id of this <code>XMLObject</code>.
                 *
                 * @return the Id (or <code>null</code> if not specified)</member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.XMLObject.getMimeType">
                 * Returns the mime type of this <code>XMLObject</code>. The
                 * mime type is an optional attribute which describes the data within this
                 * <code>XMLObject</code> (independent of its encoding).
                 *
                 * @return the mime type (or <code>null</code> if not specified)</member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.XMLObject.getEncoding">
                 * Returns the encoding URI of this <code>XMLObject</code>. The encoding
                 * URI identifies the method by which the object is encoded.
                 *
                 * @return the encoding URI (or <code>null</code> if not specified)</member>
        <member name="T:biz.ritter.javapix.xml.crypto.dsig.Manifest">
             * A representation of the XML <code>Manifest</code> element as defined in
             * the <a href="http://www.w3.org/TR/xmldsig-core/">
             * W3C Recommendation for XML-Signature Syntax and Processing</a>.
             * The XML Schema Definition is defined as:
             * <pre><code>
             * &lt;element name="Manifest" type="ds:ManifestType"/&gt;
             *   &lt;complexType name="ManifestType"&gt;
             *     &lt;sequence&gt;
             *       &lt;element ref="ds:Reference" maxOccurs="unbounded"/&gt;
             *     &lt;/sequence&gt;
             *     &lt;attribute name="Id" type="ID" use="optional"/&gt;
             *   &lt;/complexType&gt;
             * </code></pre>
             *
             * A <code>Manifest</code> instance may be created by invoking
             * one of the {@link XMLSignatureFactory#newManifest newManifest}
             * methods of the {@link XMLSignatureFactory} class; for example:
             *
             * <pre>
             *   XMLSignatureFactory factory = XMLSignatureFactory.getInstance("DOM");
             *   List references = Collections.singletonList(factory.newReference
             *       ("#reference-1", DigestMethod.SHA1));
             *   Manifest manifest = factory.newManifest(references, "manifest-1");
             * </pre>
             *
             * @author Sean Mullan
             * @author JSR 105 Expert Group
             * @see XMLSignatureFactory#newManifest(List)
             * @see XMLSignatureFactory#newManifest(List, String)</member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.Manifest.getId">
                 * Returns the Id of this <code>Manifest</code>.
                 *
                 * @return the Id  of this <code>Manifest</code> (or <code>null</code>
                 *    if not specified)</member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.Manifest.getReferences">
                 * Returns an {@link java.util.Collections#unmodifiableList unmodifiable
                 * list} of one or more {@link Reference}s that are contained in this
                 * <code>Manifest</code>.
                 *
                 * @return an unmodifiable list of one or more <code>Reference</code>s</member>
        <member name="F:biz.ritter.javapi.ManifestConstants.TYPE">
                 * URI that identifies the <code>Manifest</code> element (this can be
                 * specified as the value of the <code>type</code> parameter of the
                 * {@link Reference} class to identify the referent's type).</member>
        <member name="T:biz.ritter.javapix.xml.crypto.dsig.SignatureProperty">
             * A representation of the XML <code>SignatureProperty</code> element as
             * defined in the <a href="http://www.w3.org/TR/xmldsig-core/">
             * W3C Recommendation for XML-Signature Syntax and Processing</a>.
             * The XML Schema Definition is defined as:
             * <pre><code>
             *&lt;element name="SignatureProperty" type="ds:SignaturePropertyType"/&gt;
             *   &lt;complexType name="SignaturePropertyType" mixed="true"&gt;
             *     &lt;choice maxOccurs="unbounded"&gt;
             *       &lt;any namespace="##other" processContents="lax"/&gt;
             *       &lt;!-- (1,1) elements from (1, unbounded) namespaces --&gt;
             *     &lt;/choice&gt;
             *     &lt;attribute name="Target" type="anyURI" use="required"/&gt;
             *     &lt;attribute name="Id" type="ID" use="optional"/&gt;
             *   &lt;/complexType&gt;
             * </code></pre>
             *
             * A <code>SignatureProperty</code> instance may be created by invoking the
             * {@link XMLSignatureFactory#newSignatureProperty newSignatureProperty}
             * method of the {@link XMLSignatureFactory} class; for example:
             *
             * <pre>
             *   XMLSignatureFactory factory = XMLSignatureFactory.getInstance("DOM");
             *   SignatureProperty property = factory.newSignatureProperty
             *	(Collections.singletonList(content), "#Signature-1", "TimeStamp");
             * </pre>
             *
             * @author Sean Mullan
             * @author JSR 105 Expert Group
             * @see XMLSignatureFactory#newSignatureProperty(List, String, String)
             * @see SignatureProperties</member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.SignatureProperty.getTarget">
                 * Returns the target URI of this <code>SignatureProperty</code>.
                 *
                 * @return the target URI of this <code>SignatureProperty</code> (never
                 *    <code>null</code>)</member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.SignatureProperty.getId">
                 * Returns the Id of this <code>SignatureProperty</code>.
                 *
                 * @return the Id of this <code>SignatureProperty</code> (or
                 *    <code>null</code> if not specified)</member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.SignatureProperty.getContent">
                 * Returns an {@link java.util.Collections#unmodifiableList unmodifiable
                 * list} of one or more {@link XMLStructure}s that are contained in
                 * this <code>SignatureProperty</code>. These represent additional
                 * information items concerning the generation of the {@link XMLSignature}
                 * (i.e. date/time stamp or serial numbers of cryptographic hardware used
                 * in signature generation).
                 *
                 * @return an unmodifiable list of one or more <code>XMLStructure</code>s</member>
        <member name="T:biz.ritter.javapix.xml.crypto.dsig.SignatureProperties">
             * A representation of the XML <code>SignatureProperties</code> element as
             * defined in the <a href="http://www.w3.org/TR/xmldsig-core/">
             * W3C Recommendation for XML-Signature Syntax and Processing</a>.
             * The XML Schema Definition is defined as:
             * <pre><code>
             *&lt;element name="SignatureProperties" type="ds:SignaturePropertiesType"/&gt;
             *   &lt;complexType name="SignaturePropertiesType"&gt;
             *     &lt;sequence&gt;
             *       &lt;element ref="ds:SignatureProperty" maxOccurs="unbounded"/&gt;
             *     &lt;/sequence&gt;
             *     &lt;attribute name="Id" type="ID" use="optional"/&gt;
             *   &lt;/complexType&gt;
             * </code></pre>
             *
             * A <code>SignatureProperties</code> instance may be created by invoking the
             * {@link XMLSignatureFactory#newSignatureProperties newSignatureProperties}
             * method of the {@link XMLSignatureFactory} class; for example:
             *
             * <pre>
             *   XMLSignatureFactory factory = XMLSignatureFactory.getInstance("DOM");
             *   SignatureProperties properties =
             *	factory.newSignatureProperties(props, "signature-properties-1");
             * </pre>
             *
             * @author Sean Mullan
             * @author JSR 105 Expert Group
             * @see XMLSignatureFactory#newSignatureProperties(List, String)
             * @see SignatureProperty</member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.SignatureProperties.getId">
                 * Returns the Id of this <code>SignatureProperties</code>.
                 *
                 * @return the Id of this <code>SignatureProperties</code> (or
                 *    <code>null</code> if not specified)</member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.SignatureProperties.getProperties">
                 * Returns an {@link java.util.Collections#unmodifiableList unmodifiable
                 * list} of one or more {@link SignatureProperty}s that are contained in
                 * this <code>SignatureProperties</code>.
                 *
                 * @return an unmodifiable list of one or more
                 *    <code>SignatureProperty</code>s</member>
        <member name="F:biz.ritter.javapix.xml.crypto.dsig.SignaturePropertiesConstants.TYPE">
                 * URI that identifies the <code>SignatureProperties</code> element (this
                 * can be specified as the value of the <code>type</code> parameter of the
                 * {@link Reference} class to identify the referent's type).</member>
        <member name="F:biz.ritter.javapix.xml.crypto.dsig.DigestMethodConstants.SHA1">
                 * The <a href="http://www.w3.org/2000/09/xmldsig#sha1">
                 * SHA1</a> digest method algorithm URI.</member>
        <member name="F:biz.ritter.javapix.xml.crypto.dsig.DigestMethodConstants.SHA256">
                 * The <a href="http://www.w3.org/2001/04/xmlenc#sha256">
                 * SHA256</a> digest method algorithm URI.</member>
        <member name="F:biz.ritter.javapix.xml.crypto.dsig.DigestMethodConstants.SHA512">
                 * The <a href="http://www.w3.org/2001/04/xmlenc#sha512">
                 * SHA512</a> digest method algorithm URI.</member>
        <member name="F:biz.ritter.javapix.xml.crypto.dsig.DigestMethodConstants.RIPEMD160">
                 * The <a href="http://www.w3.org/2001/04/xmlenc#ripemd160">
                 * RIPEMD-160</a> digest method algorithm URI.</member>
        <member name="T:biz.ritter.javapix.xml.crypto.dsig.spec.DigestMethodParameterSpec">
             * A specification of algorithm parameters for a {@link DigestMethod}
             * algorithm. The purpose of this interface is to group (and provide type
             * safety for) all digest method parameter specifications. All digest method
             * parameter specifications must implement this interface.
             *
             * @author Sean Mullan
             * @author JSR 105 Expert Group
             * @see DigestMethod</member>
        <member name="T:biz.ritter.javapix.xml.crypto.dsig.spec.SignatureMethodParameterSpec">
             * A specification of algorithm parameters for an XML {@link SignatureMethod}
             * algorithm. The purpose of this interface is to group (and provide type
             * safety for) all signature method parameter specifications. All signature
             * method parameter specifications must implement this interface.
             *
             * @author Sean Mullan
             * @author JSR 105 Expert Group
             * @see SignatureMethod</member>
        <member name="T:biz.ritter.javapix.xml.crypto.dsig.C14NMethodParameterSpec">
             * A specification of algorithm parameters for a {@link CanonicalizationMethod}
             * Algorithm. The purpose of this interface is to group (and provide type
             * safety for) all canonicalization (C14N) parameter specifications. All
             * canonicalization parameter specifications must implement this interface.
             *
             * @author Sean Mullan
             * @author JSR 105 Expert Group
             * @see CanonicalizationMethod</member>
        <!--FIXME: Invalid documentation markup was found for member T:biz.ritter.javapix.xml.crypto.dsig.keyinfo.KeyInfoFactory-->
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.keyinfo.KeyInfoFactory.#ctor">
                 * Default constructor, for invocation by subclasses.</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapix.xml.crypto.dsig.keyinfo.KeyInfoFactory.getInstance(System.String)-->
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapix.xml.crypto.dsig.keyinfo.KeyInfoFactory.getInstance(System.String,biz.ritter.javapi.security.Provider)-->
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapix.xml.crypto.dsig.keyinfo.KeyInfoFactory.getInstance(System.String,System.String)-->
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapix.xml.crypto.dsig.keyinfo.KeyInfoFactory.getInstance-->
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.keyinfo.KeyInfoFactory.getMechanismType">
                 * Returns the type of the XML processing mechanism and representation
                 * supported by this <code>KeyInfoFactory</code> (ex: "DOM")
                 *
                 * @return the XML processing mechanism type supported by this
                 *    <code>KeyInfoFactory</code></member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.keyinfo.KeyInfoFactory.getProvider">
                 * Returns the provider of this <code>KeyInfoFactory</code>.
                 *
                 * @return the provider of this <code>KeyInfoFactory</code></member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.keyinfo.KeyInfoFactory.newKeyInfo(biz.ritter.javapi.util.List{System.Object})">
                 * Creates a <code>KeyInfo</code> containing the specified list of
                 * key information types.
                 *
                 * @param content a list of one or more {@link XMLStructure}s representing
                 *    key information types. The list is defensively copied to protect
                 *    against subsequent modification.
                 * @return a <code>KeyInfo</code>
                 * @throws NullPointerException if <code>content</code> is <code>null</code>
                 * @throws IllegalArgumentException if <code>content</code> is empty
                 * @throws ClassCastException if <code>content</code> contains any entries
                 *    that are not of type {@link XMLStructure}</member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.keyinfo.KeyInfoFactory.newKeyInfo(biz.ritter.javapi.util.List{System.Object},System.String)">
                 * Creates a <code>KeyInfo</code> containing the specified list of key
                 * information types and optional id. The
                 * <code>id</code> parameter represents the value of an XML
                 * <code>ID</code> attribute and is useful for referencing
                 * the <code>KeyInfo</code> from other XML structures.
                 *
                 * @param content a list of one or more {@link XMLStructure}s representing
                 *    key information types. The list is defensively copied to protect
                 *    against subsequent modification.
                 * @param id the value of an XML <code>ID</code> (may be <code>null</code>)
                 * @return a <code>KeyInfo</code>
                 * @throws NullPointerException if <code>content</code> is <code>null</code>
                 * @throws IllegalArgumentException if <code>content</code> is empty
                 * @throws ClassCastException if <code>content</code> contains any entries
                 *    that are not of type {@link XMLStructure}</member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.keyinfo.KeyInfoFactory.newKeyName(System.String)">
                 * Creates a <code>KeyName</code> from the specified name.
                 *
                 * @param name the name that identifies the key
                 * @return a <code>KeyName</code>
                 * @throws NullPointerException if <code>name</code> is <code>null</code></member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.keyinfo.KeyInfoFactory.newKeyValue(biz.ritter.javapi.security.PublicKey)">
                 * Creates a <code>KeyValue</code> from the specified public key.
                 *
                 * @param key the public key
                 * @return a <code>KeyValue</code>
                 * @throws KeyException if the <code>key</code>'s algorithm is not
                 *    recognized or supported by this <code>KeyInfoFactory</code>
                 * @throws NullPointerException if <code>key</code> is <code>null</code></member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapix.xml.crypto.dsig.keyinfo.KeyInfoFactory.newPGPData(System.Byte[])-->
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapix.xml.crypto.dsig.keyinfo.KeyInfoFactory.newPGPData(System.Byte[],System.Byte[],biz.ritter.javapi.util.List{System.Object})-->
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapix.xml.crypto.dsig.keyinfo.KeyInfoFactory.newPGPData(System.Byte[],biz.ritter.javapi.util.List{System.Object})-->
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.keyinfo.KeyInfoFactory.newRetrievalMethod(System.String)">
                 * Creates a <code>RetrievalMethod</code> from the specified URI.
                 *
                 * @param uri the URI that identifies the <code>KeyInfo</code> information
                 *    to be retrieved
                 * @return a <code>RetrievalMethod</code>
                 * @throws NullPointerException if <code>uri</code> is <code>null</code>
                 * @throws IllegalArgumentException if <code>uri</code> is not RFC 2396
                 *    compliant</member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.keyinfo.KeyInfoFactory.newRetrievalMethod(System.String,System.String,biz.ritter.javapi.util.List{System.Object})">
                 * Creates a <code>RetrievalMethod</code> from the specified parameters.
                 *
                 * @param uri the URI that identifies the <code>KeyInfo</code> information
                 *    to be retrieved
                 * @param type a URI that identifies the type of <code>KeyInfo</code>
                 *    information to be retrieved (may be <code>null</code>)
                 * @param transforms a list of {@link Transform}s. The list is defensively
                 *    copied to protect against subsequent modification. May be
                 *    <code>null</code> or empty.
                 * @return a <code>RetrievalMethod</code>
                 * @throws NullPointerException if <code>uri</code> is <code>null</code>
                 * @throws IllegalArgumentException if <code>uri</code> is not RFC 2396
                 *    compliant
                 * @throws ClassCastException if <code>transforms</code> contains any
                 *    entries that are not of type {@link Transform}</member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.keyinfo.KeyInfoFactory.newX509Data(biz.ritter.javapi.util.List{System.Object})">
                 * Creates a <code>X509Data</code> containing the specified list of
                 * X.509 content.
                 *
                 * @param content a list of one or more X.509 content types. Valid types are
                 *    {@link String} (subject names), <code>byte[]</code> (subject key ids),
                 *    {@link java.security.cert.X509Certificate}, {@link X509CRL},
                 *    or {@link XMLStructure} ({@link X509IssuerSerial}
                 *    objects or elements from an external namespace). Subject names are
                 *    distinguished names in RFC 2253 String format. Implementations MUST
                 *    support the attribute type keywords defined in RFC 2253 (CN, L, ST,
                 *    O, OU, C, STREET, DC and UID). Implementations MAY support additional
                 *    keywords. The list is defensively copied to protect against
                 *    subsequent modification.
                 * @return a <code>X509Data</code>
                 * @throws NullPointerException if <code>content</code> is <code>null</code>
                 * @throws IllegalArgumentException if <code>content</code> is empty, or
                 *    if a subject name is not RFC 2253 compliant or one of the attribute
                 *    type keywords is not recognized.
                 * @throws ClassCastException if <code>content</code> contains any entries
                 *    that are not of one of the valid types mentioned above</member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.keyinfo.KeyInfoFactory.newX509IssuerSerial(System.String,biz.ritter.javapi.math.BigInteger)">
                 * Creates an <code>X509IssuerSerial</code> from the specified X.500 issuer
                 * distinguished name and serial number.
                 *
                 * @param issuerName the issuer's distinguished name in RFC 2253 String
                 *    format. Implementations MUST support the attribute type keywords
                 *    defined in RFC 2253 (CN, L, ST, O, OU, C, STREET, DC and UID).
                 *    Implementations MAY support additional keywords.
                 * @param serialNumber the serial number
                 * @return an <code>X509IssuerSerial</code>
                 * @throws NullPointerException if <code>issuerName</code> or
                 *    <code>serialNumber</code> are <code>null</code>
                 * @throws IllegalArgumentException if the issuer name is not RFC 2253
                 *    compliant or one of the attribute type keywords is not recognized.</member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.keyinfo.KeyInfoFactory.isFeatureSupported(System.String)">
                 * Indicates whether a specified feature is supported.
                 *
                 * @param feature the feature name (as an absolute URI)
                 * @return <code>true</code> if the specified feature is supported,
                 *    <code>false</code> otherwise
                 * @throws NullPointerException if <code>feature</code> is <code>null</code></member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.keyinfo.KeyInfoFactory.getURIDereferencer">
                 * Returns a reference to the <code>URIDereferencer</code> that is used by
                 * default to dereference URIs in {@link RetrievalMethod} objects.
                 *
                 * @return a reference to the default <code>URIDereferencer</code></member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.keyinfo.KeyInfoFactory.unmarshalKeyInfo(biz.ritter.javapix.xml.crypto.XMLStructure)">
                 * Unmarshals a new <code>KeyInfo</code> instance from a
                 * mechanism-specific <code>XMLStructure</code> (ex: {@link DOMStructure})
                 * instance.
                 *
                 * @param xmlStructure a mechanism-specific XML structure from which to
                 *   unmarshal the keyinfo from
                 * @return the <code>KeyInfo</code>
                 * @throws NullPointerException if <code>xmlStructure</code> is
                 *   <code>null</code>
                 * @throws ClassCastException if the type of <code>xmlStructure</code> is
                 *   inappropriate for this factory
                 * @throws MarshalException if an unrecoverable exception occurs during
                 *   unmarshalling</member>
        <member name="T:biz.ritter.javapix.xml.crypto.dsig.keyinfo.KeyName">
             * A representation of the XML <code>KeyName</code> element as
             * defined in the <a href="http://www.w3.org/TR/xmldsig-core/">
             * W3C Recommendation for XML-Signature Syntax and Processing</a>.
             * A <code>KeyName</code> object contains a string value which may be used
             * by the signer to communicate a key identifier to the recipient. The
             * XML Schema Definition is defined as:
             *
             * <pre>
             * &lt;element name="KeyName" type="string"/&gt;
             * </pre>
             *
             * A <code>KeyName</code> instance may be created by invoking the
             * {@link KeyInfoFactory#newKeyName newKeyName} method of the
             * {@link KeyInfoFactory} class, and passing it a <code>String</code>
             * representing the name of the key; for example:
             * <pre>
             * KeyInfoFactory factory = KeyInfoFactory.getInstance("DOM");
             * KeyName keyName = factory.newKeyName("Alice");
             * </pre>
             *
             * @author Sean Mullan
             * @author JSR 105 Expert Group
             * @see KeyInfoFactory#newKeyName(String)</member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.keyinfo.KeyName.getName">
                 * Returns the name of this <code>KeyName</code>.
                 *
                 * @return the name of this <code>KeyName</code> (never
                 *    <code>null</code>)</member>
        <member name="T:biz.ritter.javapix.xml.crypto.dsig.keyinfo.KeyValue">
             * A representation of the XML <code>KeyValue</code> element as defined
             * in the <a href="http://www.w3.org/TR/xmldsig-core/">
             * W3C Recommendation for XML-Signature Syntax and Processing</a>. A
             * <code>KeyValue</code> object contains a single public key that may be
             * useful in validating the signature. The XML schema definition is defined as:
             *
             * <pre>
             *    &lt;element name="KeyValue" type="ds:KeyValueType"/&gt;
             *    &lt;complexType name="KeyValueType" mixed="true"&gt;
             *      &lt;choice&gt;
             *        &lt;element ref="ds:DSAKeyValue"/&gt;
             *        &lt;element ref="ds:RSAKeyValue"/&gt;
             *        &lt;any namespace="##other" processContents="lax"/&gt;
             *      &lt;/choice&gt;
             *    &lt;/complexType&gt;
             *
             *    &lt;element name="DSAKeyValue" type="ds:DSAKeyValueType"/&gt;
             *    &lt;complexType name="DSAKeyValueType"&gt;
             *      &lt;sequence&gt;
             *        &lt;sequence minOccurs="0"&gt;
             *          &lt;element name="P" type="ds:CryptoBinary"/&gt;
             *          &lt;element name="Q" type="ds:CryptoBinary"/&gt;
             *        &lt;/sequence&gt;
             *        &lt;element name="G" type="ds:CryptoBinary" minOccurs="0"/&gt;
             *        &lt;element name="Y" type="ds:CryptoBinary"/&gt;
             *        &lt;element name="J" type="ds:CryptoBinary" minOccurs="0"/&gt;
             *        &lt;sequence minOccurs="0"&gt;
             *          &lt;element name="Seed" type="ds:CryptoBinary"/&gt;
             *          &lt;element name="PgenCounter" type="ds:CryptoBinary"/&gt;
             *        &lt;/sequence&gt;
             *      &lt;/sequence&gt;
             *    &lt;/complexType&gt;
             *
             *    &lt;element name="RSAKeyValue" type="ds:RSAKeyValueType"/&gt;
             *    &lt;complexType name="RSAKeyValueType"&gt;
             *      &lt;sequence&gt;
             *        &lt;element name="Modulus" type="ds:CryptoBinary"/&gt;
             *        &lt;element name="Exponent" type="ds:CryptoBinary"/&gt;
             *      &lt;/sequence&gt;
             *    &lt;/complexType&gt;
             * </pre>
             * A <code>KeyValue</code> instance may be created by invoking the
             * {@link KeyInfoFactory#newKeyValue newKeyValue} method of the
             * {@link KeyInfoFactory} class, and passing it a {@link
             * java.security.PublicKey} representing the value of the public key. Here is
             * an example of creating a <code>KeyValue</code> from a {@link DSAPublicKey}
             * of a {@link java.security.cert.Certificate} stored in a
             * {@link java.security.KeyStore}:
             * <pre>
             * KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());
             * PublicKey dsaPublicKey = keyStore.getCertificate("myDSASigningCert").getPublicKey();
             * KeyInfoFactory factory = KeyInfoFactory.getInstance("DOM");
             * KeyValue keyValue = factory.newKeyValue(dsaPublicKey);
             * </pre>
             *
             * This class returns the <code>DSAKeyValue</code> and
             * <code>RSAKeyValue</code> elements as objects of type
             * {@link DSAPublicKey} and {@link RSAPublicKey}, respectively. Note that not
             * all of the fields in the schema are accessible as parameters of these
             * types.
             *
             * @author Sean Mullan
             * @author JSR 105 Expert Group
             * @see KeyInfoFactory#newKeyValue(PublicKey)</member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.keyinfo.KeyValue.getPublicKey">
                 * Returns the public key of this <code>KeyValue</code>.
                 *
                 * @return the public key of this <code>KeyValue</code>
                 * @throws KeyException if this <code>KeyValue</code> cannot be converted
                 *    to a <code>PublicKey</code></member>
        <member name="F:biz.ritter.javapix.xml.crypto.dsig.keyinfo.KeyValueConstants.DSA_TYPE">
                 * URI identifying the DSA KeyValue KeyInfo type:
                 * http://www.w3.org/2000/09/xmldsig#DSAKeyValue. This can be specified as
                 * the value of the <code>type</code> parameter of the
                 * {@link RetrievalMethod} class to describe a remote
                 * <code>DSAKeyValue</code> structure.</member>
        <member name="F:biz.ritter.javapix.xml.crypto.dsig.keyinfo.KeyValueConstants.RSA_TYPE">
                 * URI identifying the RSA KeyValue KeyInfo type:
                 * http://www.w3.org/2000/09/xmldsig#RSAKeyValue. This can be specified as
                 * the value of the <code>type</code> parameter of the
                 * {@link RetrievalMethod} class to describe a remote
                 * <code>RSAKeyValue</code> structure.</member>
        <member name="T:biz.ritter.javapix.xml.crypto.dsig.PGPData">
             * A representation of the XML <code>PGPData</code> element as defined in
             * the <a href="http://www.w3.org/TR/xmldsig-core/">
             * W3C Recommendation for XML-Signature Syntax and Processing</a>. A
             * <code>PGPData</code> object is used to convey information related to
             * PGP public key pairs and signatures on such keys. The XML Schema Definition
             * is defined as:
             *
             * <pre>
             *    &lt;element name="PGPData" type="ds:PGPDataType"/&gt;
             *    &lt;complexType name="PGPDataType"&gt;
             *      &lt;choice&gt;
             *        &lt;sequence&gt;
             *          &lt;element name="PGPKeyID" type="base64Binary"/&gt;
             *          &lt;element name="PGPKeyPacket" type="base64Binary" minOccurs="0"/&gt;
             *          &lt;any namespace="##other" processContents="lax" minOccurs="0"
             *           maxOccurs="unbounded"/&gt;
             *        &lt;/sequence&gt;
             *        &lt;sequence&gt;
             *          &lt;element name="PGPKeyPacket" type="base64Binary"/&gt;
             *          &lt;any namespace="##other" processContents="lax" minOccurs="0"
             *           maxOccurs="unbounded"/&gt;
             *        &lt;/sequence&gt;
             *      &lt;/choice&gt;
             *    &lt;/complexType&gt;
             * </pre>
             *
             * A <code>PGPData</code> instance may be created by invoking one of the
             * {@link KeyInfoFactory#newPGPData newPGPData} methods of the {@link
             * KeyInfoFactory} class, and passing it
             * <code>byte</code> arrays representing the contents of the PGP public key
             * identifier and/or PGP key material packet, and an optional list of
             * elements from an external namespace.
             *
             * @author Sean Mullan
             * @author JSR 105 Expert Group
             * @see KeyInfoFactory#newPGPData(byte[])
             * @see KeyInfoFactory#newPGPData(byte[], byte[], List)
             * @see KeyInfoFactory#newPGPData(byte[], List)</member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.PGPData.getKeyId">
                 * Returns the PGP public key identifier of this <code>PGPData</code> as
                 * defined in <a href="http://www.ietf.org/rfc/rfc2440.txt">RFC 2440</a>,
                 * section 11.2.
                 *
                 * @return the PGP public key identifier (may be <code>null</code> if
                 *    not specified). Each invocation of this method returns a new clone
                 *    to protect against subsequent modification.</member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.PGPData.getKeyPacket">
                 * Returns the PGP key material packet of this <code>PGPData</code> as
                 * defined in <a href="http://www.ietf.org/rfc/rfc2440.txt">RFC 2440</a>,
                 * section 5.5.
                 *
                 * @return the PGP key material packet (may be <code>null</code> if not
                 *    specified). Each invocation of this method returns a new clone to
                 *    protect against subsequent modification.</member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.PGPData.getExternalElements">
                 * Returns an {@link Collections#unmodifiableList unmodifiable list}
                 * of {@link XMLStructure}s representing elements from an external
                 * namespace.
                 *
                 * @return an unmodifiable list of <code>XMLStructure</code>s (may be
                 *    empty, but never <code>null</code>)</member>
        <member name="F:biz.ritter.javapix.xml.crypto.dsig.keyinfo.PGPDataConstants.TYPE">
                 * URI identifying the PGPData KeyInfo type:
                 * http://www.w3.org/2000/09/xmldsig#PGPData. This can be specified as the
                 * value of the <code>type</code> parameter of the {@link RetrievalMethod}
                 * class to describe a remote <code>PGPData</code> structure.</member>
        <member name="T:biz.ritter.javapix.xml.crypto.dsig.keyinfo.X509Data">
             * A representation of the XML <code>X509Data</code> element as defined in
             * the <a href="http://www.w3.org/TR/xmldsig-core/">
             * W3C Recommendation for XML-Signature Syntax and Processing</a>. An
             * <code>X509Data</code> object contains one or more identifers of keys
             * or X.509 certificates (or certificates' identifiers or a revocation list).
             * The XML Schema Definition is defined as:
             *
             * <pre>
             *    &lt;element name="X509Data" type="ds:X509DataType"/&gt;
             *    &lt;complexType name="X509DataType"&gt;
             *        &lt;sequence maxOccurs="unbounded"&gt;
             *          &lt;choice&gt;
             *            &lt;element name="X509IssuerSerial" type="ds:X509IssuerSerialType"/&gt;
             *            &lt;element name="X509SKI" type="base64Binary"/&gt;
             *            &lt;element name="X509SubjectName" type="string"/&gt;
             *            &lt;element name="X509Certificate" type="base64Binary"/&gt;
             *            &lt;element name="X509CRL" type="base64Binary"/&gt;
             *            &lt;any namespace="##other" processContents="lax"/&gt;
             *          &lt;/choice&gt;
             *        &lt;/sequence&gt;
             *    &lt;/complexType&gt;
             *
             *    &lt;complexType name="X509IssuerSerialType"&gt;
             *      &lt;sequence&gt;
             *        &lt;element name="X509IssuerName" type="string"/&gt;
             *        &lt;element name="X509SerialNumber" type="integer"/&gt;
             *      &lt;/sequence&gt;
             *    &lt;/complexType&gt;
             * </pre>
             *
             * An <code>X509Data</code> instance may be created by invoking the
             * {@link KeyInfoFactory#newX509Data newX509Data} methods of the
             * {@link KeyInfoFactory} class and passing it a list of one or more
             * {@link XMLStructure}s representing X.509 content; for example:
             * <pre>
             *   KeyInfoFactory factory = KeyInfoFactory.getInstance("DOM");
             *   X509Data x509Data = factory.newX509Data
             *       (Collections.singletonList("cn=Alice"));
             * </pre>
             *
             * @author Sean Mullan
             * @author JSR 105 Expert Group
             * @see KeyInfoFactory#newX509Data(List)</member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.keyinfo.X509Data.getContent">
                 * Returns an {@link java.util.Collections#unmodifiableList unmodifiable
                 * list} of the content in this <code>X509Data</code>. Valid types are
                 * {@link String} (subject names), <code>byte[]</code> (subject key ids),
                 * {@link java.security.cert.X509Certificate}, {@link X509CRL},
                 * or {@link XMLStructure} ({@link X509IssuerSerial}
                 * objects or elements from an external namespace).
                 *
                 * @return an unmodifiable list of the content in this <code>X509Data</code>
                 *    (never <code>null</code> or empty)</member>
        <member name="F:biz.ritter.javapix.xml.crypto.dsig.keyinfo.X509DataConstants.TYPE">
                 * URI identifying the X509Data KeyInfo type:
                 * http://www.w3.org/2000/09/xmldsig#X509Data. This can be specified as
                 * the value of the <code>type</code> parameter of the
                 * {@link RetrievalMethod} class to describe a remote
                 * <code>X509Data</code> structure.</member>
        <member name="F:biz.ritter.javapix.xml.crypto.dsig.keyinfo.X509DataConstants.RAW_X509_CERTIFICATE_TYPE">
                 * URI identifying the binary (ASN.1 DER) X.509 Certificate KeyInfo type:
                 * http://www.w3.org/2000/09/xmldsig#rawX509Certificate. This can be
                 * specified as the value of the <code>type</code> parameter of the
                 * {@link RetrievalMethod} class to describe a remote X509 Certificate.</member>
        <member name="T:biz.ritter.javapix.xml.crypto.dsig.X509IssuerSerial">
             * A representation of the XML <code>X509IssuerSerial</code> element as
             * defined in the <a href="http://www.w3.org/TR/xmldsig-core/">
             * W3C Recommendation for XML-Signature Syntax and Processing</a>.
             * An <code>X509IssuerSerial</code> object contains an X.509 issuer
             * distinguished name (DN) and serial number pair. The XML schema definition is
             * defined as:
             *
             * <pre>
             *   &lt;element name="X509IssuerSerial" type="ds:X509IssuerSerialType"/&gt;
             *   &lt;complexType name="X509IssuerSerialType"&gt;
             *     &lt;sequence&gt;
             *       &lt;element name="X509IssuerName" type="string"/&gt;
             *       &lt;element name="X509SerialNumber" type="integer"/&gt;
             *     &lt;/sequence&gt;
             *   &lt;/complexType&gt;
             * </pre>
             *
             * An <code>X509IssuerSerial</code> instance may be created by invoking the
             * {@link KeyInfoFactory#newX509IssuerSerial newX509IssuerSerial} method
             * of the {@link KeyInfoFactory} class, and passing it a
             * <code>String</code> and <code>BigInteger</code> representing the X.500
             * DN and serial number. Here is an example of creating an
             * <code>X509IssuerSerial</code> from the issuer DN and serial number of an
             * existing {@link X509Certificate}:
             * <pre>
             * KeyInfoFactory factory = KeyInfoFactory.getInstance("DOM");
             * X509IssuerSerial issuer = factory.newX509IssuerSerial
             *     (cert.getIssuerX500Principal().getName(), cert.getSerialNumber());
             * </pre>
             *
             * @author Sean Mullan
             * @author JSR 105 Expert Group
             * @see X509Data#getContent
             * @see KeyInfoFactory#newX509IssuerSerial(String, BigInteger)</member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.X509IssuerSerial.getIssuerName">
                 * Returns the X.500 distinguished name of this
                 * <code>X509IssuerSerial</code> in
                 * <a href="http://www.ietf.org/rfc/rfc2253.txt">RFC 2253</a> String format.
                 *
                 * @return the X.500 distinguished name in RFC 2253 String format (never
                 *    <code>null</code>)</member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.X509IssuerSerial.getSerialNumber">
                 * Returns the serial number of this <code>X509IssuerSerial</code>.
                 *
                 * @return the serial number (never <code>null</code>)</member>
        <!--FIXME: Invalid documentation markup was found for member T:biz.ritter.javapix.xml.crypto.NoSuchMechanismException-->
        <member name="F:biz.ritter.javapix.xml.crypto.NoSuchMechanismException.cause">
                 * The throwable that caused this exception to get thrown, or null if this
                 * exception was not caused by another throwable or if the causative
                 * throwable is unknown.
                 *
                 * @serial</member>
        <member name="M:biz.ritter.javapix.xml.crypto.NoSuchMechanismException.#ctor">
                 * Constructs a new <code>NoSuchMechanismException</code> with
                 * <code>null</code> as its detail message.</member>
        <member name="M:biz.ritter.javapix.xml.crypto.NoSuchMechanismException.#ctor(System.String)">
                 * Constructs a new <code>NoSuchMechanismException</code> with the
                 * specified detail message.
                 *
                 * @param message the detail message</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapix.xml.crypto.NoSuchMechanismException.#ctor(System.String,biz.ritter.javapi.lang.Throwable)-->
        <member name="M:biz.ritter.javapix.xml.crypto.NoSuchMechanismException.#ctor(biz.ritter.javapi.lang.Throwable)">
                 * Constructs a new <code>NoSuchMechanismException</code> with the
                 * specified cause and a detail message of
                 * <code>(cause==null ? null : cause.toString())</code> (which typically
                 * contains the class and detail message of <code>cause</code>).
                 *
                 * @param cause the cause (A <tt>null</tt> value is permitted, and
                 *        indicates that the cause is nonexistent or unknown.)</member>
        <member name="M:biz.ritter.javapix.xml.crypto.NoSuchMechanismException.getCause">
                 * Returns the cause of this <code>NoSuchMechanismException</code> or
                 * <code>null</code> if the cause is nonexistent or unknown.  (The
                 * cause is the throwable that caused this
                 * <code>NoSuchMechanismException</code> to get thrown.)
                 *
                 * @return the cause of this <code>NoSuchMechanismException</code> or
                 *         <code>null</code> if the cause is nonexistent or unknown.</member>
        <member name="M:biz.ritter.javapix.xml.crypto.NoSuchMechanismException.printStackTrace">
                 * Prints this <code>NoSuchMechanismException</code>, its backtrace and
                 * the cause's backtrace to the standard error stream.</member>
        <member name="M:biz.ritter.javapix.xml.crypto.NoSuchMechanismException.printStackTrace(biz.ritter.javapi.lang.PrintStream)">
                 * Prints this <code>NoSuchMechanismException</code>, its backtrace and
                 * the cause's backtrace to the specified print stream.
                 *
                 * @param s <code>PrintStream</code> to use for output</member>
        <member name="M:biz.ritter.javapix.xml.crypto.NoSuchMechanismException.printStackTrace(biz.ritter.javapi.io.PrintWriter)">
                 * Prints this <code>NoSuchMechanismException</code>, its backtrace and
                 * the cause's backtrace to the specified print writer.
                 *
                 * @param s <code>PrintWriter</code> to use for output</member>
        <!--FIXME: Invalid documentation markup was found for member T:biz.ritter.javapix.xml.crypto.MarshalException-->
        <member name="F:biz.ritter.javapix.xml.crypto.MarshalException.cause">
                 * The throwable that caused this exception to get thrown, or null if this
                 * exception was not caused by another throwable or if the causative
                 * throwable is unknown.
                 *
                 * @serial</member>
        <member name="M:biz.ritter.javapix.xml.crypto.MarshalException.#ctor">
                 * Constructs a new <code>MarshalException</code> with
                 * <code>null</code> as its detail message.</member>
        <member name="M:biz.ritter.javapix.xml.crypto.MarshalException.#ctor(System.String)">
                 * Constructs a new <code>MarshalException</code> with the specified
                 * detail message.
                 *
                 * @param message the detail message</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapix.xml.crypto.MarshalException.#ctor(System.String,biz.ritter.javapi.lang.Throwable)-->
        <member name="M:biz.ritter.javapix.xml.crypto.MarshalException.#ctor(biz.ritter.javapi.lang.Throwable)">
                 * Constructs a new <code>MarshalException</code> with the specified cause
                 * and a detail message of <code>(cause==null ? null : cause.toString())
                 * </code> (which typically contains the class and detail message of
                 * <code>cause</code>).
                 *
                 * @param cause the cause (A <tt>null</tt> value is permitted, and
                 *        indicates that the cause is nonexistent or unknown.)</member>
        <member name="M:biz.ritter.javapix.xml.crypto.MarshalException.getCause">
                 * Returns the cause of this <code>MarshalException</code> or
                 * <code>null</code> if the cause is nonexistent or unknown.  (The
                 * cause is the throwable that caused this
                 * <code>MarshalException</code> to get thrown.)
                 *
                 * @return the cause of this <code>MarshalException</code> or
                 *         <code>null</code> if the cause is nonexistent or unknown.</member>
        <member name="M:biz.ritter.javapix.xml.crypto.MarshalException.printStackTrace">
                 * Prints this <code>MarshalException</code>, its backtrace and
                 * the cause's backtrace to the standard error stream.</member>
        <member name="M:biz.ritter.javapix.xml.crypto.MarshalException.printStackTrace(biz.ritter.javapi.lang.PrintStream)">
                 * Prints this <code>MarshalException</code>, its backtrace and
                 * the cause's backtrace to the specified print stream.
                 *
                 * @param s <code>PrintStream</code> to use for output</member>
        <member name="M:biz.ritter.javapix.xml.crypto.MarshalException.printStackTrace(biz.ritter.javapi.io.PrintWriter)">
                 * Prints this <code>MarshalException</code>, its backtrace and
                 * the cause's backtrace to the specified print writer.
                 *
                 * @param s <code>PrintWriter</code> to use for output</member>
        <member name="T:biz.ritter.javapix.xml.crypto.dsig.spec.ExcC14NParameterSpec">
             * Parameters for the W3C Recommendation:
             * <a href="http://www.w3.org/TR/xml-exc-c14n/">
             * Exclusive XML Canonicalization (C14N) algorithm</a>. The
             * parameters include an optional inclusive namespace prefix list. The XML
             * Schema Definition of the Exclusive XML Canonicalization parameters is
             * defined as:
             * <pre><code>
             * &lt;schema xmlns="http://www.w3.org/2001/XMLSchema"
             *         xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#"
             *         targetNamespace="http://www.w3.org/2001/10/xml-exc-c14n#"
             *         version="0.1" elementFormDefault="qualified"&gt;
             *
             * &lt;element name="InclusiveNamespaces" type="ec:InclusiveNamespaces"/&gt;
             * &lt;complexType name="InclusiveNamespaces"&gt;
             *   &lt;attribute name="PrefixList" type="xsd:string"/&gt;
             * &lt;/complexType&gt;
             * &lt;/schema&gt;
             * </code></pre>
             *
             * @author Sean Mullan
             * @author JSR 105 Expert Group
             * @see CanonicalizationMethod</member>
        <member name="F:biz.ritter.javapix.xml.crypto.dsig.spec.ExcC14NParameterSpec.DEFAULT">
                 * Indicates the default namespace ("#default").</member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.spec.ExcC14NParameterSpec.#ctor">
                 * Creates a <code>ExcC14NParameterSpec</code> with an empty prefix
                 * list.</member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.spec.ExcC14NParameterSpec.#ctor(biz.ritter.javapi.util.List{System.Object})">
                 * Creates a <code>ExcC14NParameterSpec</code> with the specified list
                 * of prefixes. The list is copied to protect against subsequent
                 * modification.
                 *
                 * @param prefixList the inclusive namespace prefix list. Each entry in
                 *    the list is a <code>String</code> that represents a namespace prefix.
                 * @throws NullPointerException if <code>prefixList</code> is
                 *    <code>null</code>
                 * @throws ClassCastException if any of the entries in the list are not
                 *    of type <code>String</code></member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapix.xml.crypto.dsig.spec.ExcC14NParameterSpec.getPrefixList-->
        <member name="T:biz.ritter.javapix.xml.crypto.dsig.spec.HMACParameterSpec">
             * Parameters for the <a href="http://www.w3.org/TR/xmldsig-core/#sec-MACs">
             * XML Signature HMAC Algorithm</a>. The parameters include an optional output
             * length which specifies the MAC truncation length in bits. The resulting
             * HMAC will be truncated to the specified number of bits. If the parameter is
             * not specified, then this implies that all the bits of the hash are to be
             * output. The XML Schema Definition of the <code>HMACOutputLength</code>
             * element is defined as:
             * <pre><code>
             * &lt;element name="HMACOutputLength" minOccurs="0" type="ds:HMACOutputLengthType"/&gt;
             * &lt;simpleType name="HMACOutputLengthType"&gt;
             *   &lt;restriction base="integer"/&gt;
             * &lt;/simpleType&gt;
             * </code></pre>
             *
             * @author Sean Mullan
             * @author JSR 105 Expert Group
             * @see SignatureMethod
             * @see <a href="http://www.ietf.org/rfc/rfc2104.txt">RFC 2104</a></member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.spec.HMACParameterSpec.#ctor(System.Int32)">
                 * Creates an <code>HMACParameterSpec</code> with the specified truncation
                 * length.
                 *
                 * @param outputLength the truncation length in number of bits</member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.spec.HMACParameterSpec.getOutputLength">
                 * Returns the truncation length.
                 *
                 * @return the truncation length in number of bits</member>
        <!--FIXME: Invalid documentation markup was found for member T:biz.ritter.javapix.xml.crypto.dsig.spec.XPathType-->
        <member name="T:biz.ritter.javapix.xml.crypto.dsig.spec.XPathType.Filter">
                 * Represents the filter set operation.</member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.spec.XPathType.Filter.toString">
                     * Returns the string form of the operation.
                     *
                     * @return the string form of the operation</member>
        <member name="F:biz.ritter.javapix.xml.crypto.dsig.spec.XPathType.Filter.INTERSECT">
                     * The intersect filter operation.</member>
        <member name="F:biz.ritter.javapix.xml.crypto.dsig.spec.XPathType.Filter.SUBTRACT">
                     * The subtract filter operation.</member>
        <member name="F:biz.ritter.javapix.xml.crypto.dsig.spec.XPathType.Filter.UNION">
                     * The union filter operation.</member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.spec.XPathType.#ctor(System.String,biz.ritter.javapix.xml.crypto.dsig.spec.XPathType.Filter)">
                 * Creates an <code>XPathType</code> instance with the specified XPath
                 * expression and filter.
                 *
                 * @param expression the XPath expression to be evaluated
                 * @param filter the filter operation ({@link Filter#INTERSECT},
                 *    {@link Filter#SUBTRACT}, or {@link Filter#UNION})
                 * @throws NullPointerException if <code>expression</code> or
                 *    <code>filter</code> is <code>null</code></member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.spec.XPathType.#ctor(System.String,biz.ritter.javapix.xml.crypto.dsig.spec.XPathType.Filter,biz.ritter.javapi.util.Map{System.String,System.String})">
                 * Creates an <code>XPathType</code> instance with the specified XPath
                 * expression, filter, and namespace map. The map is copied to protect
                 * against subsequent modification.
                 *
                 * @param expression the XPath expression to be evaluated
                 * @param filter the filter operation ({@link Filter#INTERSECT},
                 *    {@link Filter#SUBTRACT}, or {@link Filter#UNION})
                 * @param namespaceMap the map of namespace prefixes. Each key is a
                 *    namespace prefix <code>String</code> that maps to a corresponding
                 *    namespace URI <code>String</code>.
                 * @throws NullPointerException if <code>expression</code>,
                 *    <code>filter</code> or <code>namespaceMap</code> are
                 *    <code>null</code>
                 * @throws ClassCastException if any of the map's keys or entries are
                 *    not of type <code>String</code></member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.spec.XPathType.getExpression">
                 * Returns the XPath expression to be evaluated.
                 *
                 * @return the XPath expression to be evaluated</member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.spec.XPathType.getFilter">
                 * Returns the filter operation.
                 *
                 * @return the filter operation</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapix.xml.crypto.dsig.spec.XPathType.getNamespaceMap-->
        <!--FIXME: Invalid documentation markup was found for member T:biz.ritter.javapix.xml.crypto.dsig.spec.XPathFilterParameterSpec-->
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.spec.XPathFilterParameterSpec.#ctor(System.String)">
                 * Creates an <code>XPathFilterParameterSpec</code> with the specified
                 * XPath expression.
                 *
                 * @param xPath the XPath expression to be evaluated
                 * @throws NullPointerException if <code>xPath</code> is <code>null</code></member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.spec.XPathFilterParameterSpec.#ctor(System.String,biz.ritter.javapi.util.Map{System.String,System.String})">
                 * Creates an <code>XPathFilterParameterSpec</code> with the specified
                 * XPath expression and namespace map. The map is copied to protect against
                 * subsequent modification.
                 *
                 * @param xPath the XPath expression to be evaluated
                 * @param namespaceMap the map of namespace prefixes. Each key is a
                 *    namespace prefix <code>String</code> that maps to a corresponding
                 *    namespace URI <code>String</code>.
                 * @throws NullPointerException if <code>xPath</code> or
                 *    <code>namespaceMap</code> are <code>null</code>
                 * @throws ClassCastException if any of the map's keys or entries are not
                 *    of type <code>String</code></member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.spec.XPathFilterParameterSpec.getXPath">
                 * Returns the XPath expression to be evaluated.
                 *
                 * @return the XPath expression to be evaluated</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapix.xml.crypto.dsig.spec.XPathFilterParameterSpec.getNamespaceMap-->
        <!--FIXME: Invalid documentation markup was found for member T:biz.ritter.javapix.xml.crypto.dsig.spec.XPathFilter2ParameterSpec-->
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.spec.XPathFilter2ParameterSpec.#ctor(biz.ritter.javapi.util.List{biz.ritter.javapix.xml.crypto.dsig.spec.XPathType})">
                 * Creates an <code>XPathFilter2ParameterSpec</code>.
                 *
                 * @param xPathList a list of one or more {@link XPathType} objects. The
                 *    list is defensively copied to protect against subsequent modification.
                 * @throws ClassCastException if <code>xPathList</code> contains any
                 *    entries that are not of type {@link XPathType}
                 * @throws IllegalArgumentException if <code>xPathList</code> is empty
                 * @throws NullPointerException if <code>xPathList</code> is
                 *    <code>null</code></member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapix.xml.crypto.dsig.spec.XPathFilter2ParameterSpec.getXPathList-->
        <!--FIXME: Invalid documentation markup was found for member T:biz.ritter.javapix.xml.crypto.dsig.spec.XSLTTransformParameterSpec-->
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.spec.XSLTTransformParameterSpec.#ctor(biz.ritter.javapix.xml.crypto.XMLStructure)">
                 * Creates an <code>XSLTTransformParameterSpec</code> with the specified
                 * stylesheet.
                 *
                 * @param stylesheet the XSLT stylesheet to be used
                 * @throws NullPointerException if <code>stylesheet</code> is
                 *    <code>null</code></member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.spec.XSLTTransformParameterSpec.getStylesheet">
                 * Returns the stylesheet.
                 *
                 * @return the stylesheet</member>
        <!--FIXME: Invalid documentation markup was found for member T:biz.ritter.javapix.xml.crypto.dsig.TransformService-->
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.TransformService.#ctor">
                 * Default constructor, for invocation by subclasses.</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapix.xml.crypto.dsig.TransformService.getInstance(System.String,System.String)-->
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.TransformService.getInstance(System.String,System.String,biz.ritter.javapi.security.Provider)">
                 * Returns a <code>TransformService</code> that supports the specified
                 * algorithm URI (ex: {@link Transform#XPATH2}) and mechanism type
                 * (ex: DOM) as supplied by the specified provider. Note that the specified
                 * <code>Provider</code> object does not have to be registered in the
                 * provider list.
                 *
                 * @param algorithm the URI of the algorithm
                 * @param mechanismType the type of the XML processing mechanism and
                 *   representation
                 * @param provider the <code>Provider</code> object
                 * @return a new <code>TransformService</code>
                 * @throws NullPointerException if <code>provider</code>,
                 *   <code>algorithm</code>, or <code>mechanismType</code> is
                 *   <code>null</code>
                 * @throws NoSuchAlgorithmException if a <code>TransformService</code>
                 *   implementation for the specified algorithm and mechanism type is not
                 *   available from the specified <code>Provider</code> object
                 * @see Provider</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapix.xml.crypto.dsig.TransformService.getInstance(System.String,System.String,System.String)-->
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.TransformService.getMechanismType">
                 * Returns the mechanism type supported by this <code>TransformService</code>.
                 *
                 * @return the mechanism type</member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.TransformService.getAlgorithm">
                 * Returns the URI of the algorithm supported by this
                 * <code>TransformService</code>.
                 *
                 * @return the algorithm URI</member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.TransformService.getProvider">
                 * Returns the provider of this <code>TransformService</code>.
                 *
                 * @return the provider</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapix.xml.crypto.dsig.TransformService.init(biz.ritter.javapix.xml.crypto.TransformParameterSpec)-->
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.TransformService.marshalParams(biz.ritter.javapix.xml.crypto.XMLStructure,biz.ritter.javapix.xml.crypto.XMLCryptoContext)">
                 * Marshals the algorithm-specific parameters. If there are no parameters
                 * to be marshalled, this method returns without throwing an exception.
                 *
                 * @param parent a mechanism-specific structure containing the parent
                 *    node that the marshalled parameters should be appended to
                 * @param context the <code>XMLCryptoContext</code> containing
                 *    additional context (may be <code>null</code> if not applicable)
                 * @throws ClassCastException if the type of <code>parent</code> or
                 *    <code>context</code> is not compatible with this
                 *    <code>TransformService</code>
                 * @throws NullPointerException if <code>parent</code> is <code>null</code>
                 * @throws MarshalException if the parameters cannot be marshalled</member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.TransformService.init(biz.ritter.javapix.xml.crypto.XMLStructure,biz.ritter.javapix.xml.crypto.XMLCryptoContext)">
                 * Initializes this <code>TransformService</code> with the specified
                 * parameters and document context.
                 *
                 * @param parent a mechanism-specific structure containing the parent
                 *    structure
                 * @param context the <code>XMLCryptoContext</code> containing
                 *    additional context (may be <code>null</code> if not applicable)
                 * @throws ClassCastException if the type of <code>parent</code> or
                 *    <code>context</code> is not compatible with this
                 *    <code>TransformService</code>
                 * @throws NullPointerException if <code>parent</code> is <code>null</code>
                 * @throws InvalidAlgorithmParameterException if the specified parameters
                 *   are invalid for this algorithm</member>
        <!--FIXME: Invalid documentation markup was found for member T:org.w3c.dom.Attr-->
        <member name="M:org.w3c.dom.Attr.getName">
                     * Returns the name of this attribute.</member>
        <!--FIXME: Invalid documentation markup was found for member M:org.w3c.dom.Attr.getSpecified-->
        <!--FIXME: Invalid documentation markup was found for member M:org.w3c.dom.Attr.getValue-->
        <member name="M:org.w3c.dom.Attr.getOwnerElement">
                     * The <code>Element</code> node this attribute is attached to or
                     * <code>null</code> if this attribute is not in use.
                     * @since DOM Level 2</member>
        <!--FIXME: Invalid documentation markup was found for member T:org.w3c.dom.CDATASection-->
        <!--FIXME: Invalid documentation markup was found for member T:org.w3c.dom.CharacterData-->
        <member name="M:org.w3c.dom.CharacterData.getData">
                     * The character data of the node that implements this interface. The DOM
                     * implementation may not put arbitrary limits on the amount of data
                     * that may be stored in a <code>CharacterData</code> node. However,
                     * implementation limits may mean that the entirety of a node's data may
                     * not fit into a single <code>DOMString</code>. In such cases, the user
                     * may call <code>substringData</code> to retrieve the data in
                     * appropriately sized pieces.
                     * @exception DOMException
                     *   NO_MODIFICATION_ALLOWED_ERR: Raised when the node is readonly.
                     * @exception DOMException
                     *   DOMSTRING_SIZE_ERR: Raised when it would return more characters than
                     *   fit in a <code>DOMString</code> variable on the implementation
                     *   platform.</member>
        <member name="M:org.w3c.dom.CharacterData.getLength">
                     * The number of 16-bit units that are available through <code>data</code>
                     * and the <code>substringData</code> method below. This may have the
                     * value zero, i.e., <code>CharacterData</code> nodes may be empty.</member>
        <!--FIXME: Invalid documentation markup was found for member M:org.w3c.dom.CharacterData.substringData(System.Int32,System.Int32)-->
        <member name="M:org.w3c.dom.CharacterData.appendData(System.String)">
                     * Append the string to the end of the character data of the node. Upon
                     * success, <code>data</code> provides access to the concatenation of
                     * <code>data</code> and the <code>DOMString</code> specified.
                     * @param argThe <code>DOMString</code> to append.
                     * @exception DOMException
                     *   NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.</member>
        <!--FIXME: Invalid documentation markup was found for member M:org.w3c.dom.CharacterData.insertData(System.Int32,System.String)-->
        <!--FIXME: Invalid documentation markup was found for member M:org.w3c.dom.CharacterData.deleteData(System.Int32,System.Int32)-->
        <!--FIXME: Invalid documentation markup was found for member M:org.w3c.dom.CharacterData.replaceData(System.Int32,System.Int32,System.String)-->
        <!--FIXME: Invalid documentation markup was found for member T:org.w3c.dom.Comment-->
        <!--FIXME: Invalid documentation markup was found for member T:org.w3c.dom.Document-->
        <member name="M:org.w3c.dom.Document.getDoctype">
                     * The Document Type Declaration (see <code>DocumentType</code>)
                     * associated with this document. For HTML documents as well as XML
                     * documents without a document type declaration this returns
                     * <code>null</code>. The DOM Level 2 does not support editing the
                     * Document Type Declaration. <code>docType</code> cannot be altered in
                     * any way, including through the use of methods inherited from the
                     * <code>Node</code> interface, such as <code>insertNode</code> or
                     * <code>removeNode</code>.</member>
        <member name="M:org.w3c.dom.Document.getImplementation">
                     * The <code>DOMImplementation</code> object that handles this document. A
                     * DOM application may use objects from multiple implementations.</member>
        <member name="M:org.w3c.dom.Document.getDocumentElement">
                     * This is a convenience attribute that allows direct access to the child
                     * node that is the root element of the document. For HTML documents,
                     * this is the element with the tagName "HTML".</member>
        <!--FIXME: Invalid documentation markup was found for member M:org.w3c.dom.Document.createElement(System.String)-->
        <member name="M:org.w3c.dom.Document.createDocumentFragment">
                     * Creates an empty <code>DocumentFragment</code> object.
                     * @return A new <code>DocumentFragment</code>.</member>
        <member name="M:org.w3c.dom.Document.createTextNode(System.String)">
                     * Creates a <code>Text</code> node given the specified string.
                     * @param dataThe data for the node.
                     * @return The new <code>Text</code> object.</member>
        <member name="M:org.w3c.dom.Document.createComment(System.String)">
                     * Creates a <code>Comment</code> node given the specified string.
                     * @param dataThe data for the node.
                     * @return The new <code>Comment</code> object.</member>
        <member name="M:org.w3c.dom.Document.createCDATASection(System.String)">
                     * Creates a <code>CDATASection</code> node whose value is the specified
                     * string.
                     * @param dataThe data for the <code>CDATASection</code> contents.
                     * @return The new <code>CDATASection</code> object.
                     * @exception DOMException
                     *   NOT_SUPPORTED_ERR: Raised if this document is an HTML document.</member>
        <!--FIXME: Invalid documentation markup was found for member M:org.w3c.dom.Document.createProcessingInstruction(System.String,System.String)-->
        <!--FIXME: Invalid documentation markup was found for member M:org.w3c.dom.Document.createAttribute(System.String)-->
        <!--FIXME: Invalid documentation markup was found for member M:org.w3c.dom.Document.createEntityReference(System.String)-->
        <member name="M:org.w3c.dom.Document.getElementsByTagName(System.String)">
                     * Returns a <code>NodeList</code> of all the <code>Elements</code> with a
                     * given tag name in the order in which they are encountered in a
                     * preorder traversal of the <code>Document</code> tree.
                     * @param tagnameThe name of the tag to match on. The special value "*"
                     *   matches all tags.
                     * @return A new <code>NodeList</code> object containing all the matched
                     *   <code>Elements</code>.</member>
        <!--FIXME: Invalid documentation markup was found for member M:org.w3c.dom.Document.importNode(org.w3c.dom.Node,System.Boolean)-->
        <!--FIXME: Invalid documentation markup was found for member M:org.w3c.dom.Document.createElementNS(System.String,System.String)-->
        <!--FIXME: Invalid documentation markup was found for member M:org.w3c.dom.Document.createAttributeNS(System.String,System.String)-->
        <member name="M:org.w3c.dom.Document.getElementsByTagNameNS(System.String,System.String)">
                     * Returns a <code>NodeList</code> of all the <code>Elements</code> with a
                     * given local name and namespace URI in the order in which they are
                     * encountered in a preorder traversal of the <code>Document</code> tree.
                     * @param namespaceURIThe namespace URI of the elements to match on. The
                     *   special value "*" matches all namespaces.
                     * @param localNameThe local name of the elements to match on. The
                     *   special value "*" matches all local names.
                     * @return A new <code>NodeList</code> object containing all the matched
                     *   <code>Elements</code>.
                     * @since DOM Level 2</member>
        <member name="M:org.w3c.dom.Document.getElementById(System.String)">
                     * Returns the <code>Element</code> whose <code>ID</code> is given by
                     * <code>elementId</code>. If no such element exists, returns
                     * <code>null</code>. Behavior is not defined if more than one element
                     * has this <code>ID</code>. The DOM implementation must have
                     * information that says which attributes are of type ID. Attributes
                     * with the name "ID" are not of type ID unless so defined.
                     * Implementations that do not know whether attributes are of type ID or
                     * not are expected to return <code>null</code>.
                     * @param elementIdThe unique <code>id</code> value for an element.
                     * @return The matching element.
                     * @since DOM Level 2</member>
        <!--FIXME: Invalid documentation markup was found for member T:org.w3c.dom.DocumentFragment-->
        <!--FIXME: Invalid documentation markup was found for member T:org.w3c.dom.DocumentType-->
        <member name="M:org.w3c.dom.DocumentType.getName">
                     * The name of DTD; i.e., the name immediately following the
                     * <code>DOCTYPE</code> keyword.</member>
        <!--FIXME: Invalid documentation markup was found for member M:org.w3c.dom.DocumentType.getEntities-->
        <!--FIXME: Invalid documentation markup was found for member M:org.w3c.dom.DocumentType.getNotations-->
        <member name="M:org.w3c.dom.DocumentType.getPublicId">
                     * The public identifier of the external subset.
                     * @since DOM Level 2</member>
        <member name="M:org.w3c.dom.DocumentType.getSystemId">
                     * The system identifier of the external subset.
                     * @since DOM Level 2</member>
        <member name="M:org.w3c.dom.DocumentType.getInternalSubset">
                     * The internal subset as a string.The actual content returned depends on
                     * how much information is available to the implementation. This may
                     * vary depending on various parameters, including the XML processor
                     * used to build the document.
                     * @since DOM Level 2</member>
        <!--FIXME: Invalid documentation markup was found for member T:org.w3c.dom.DOMConfiguration-->
        <!--FIXME: Invalid documentation markup was found for member M:org.w3c.dom.DOMConfiguration.setParameter(System.String,System.Object)-->
        <member name="M:org.w3c.dom.DOMConfiguration.getParameter(System.String)">
                     *  Return the value of a parameter if known.
                     * @param name  The name of the parameter.
                     * @return  The current object associated with the specified parameter or
                     *   <code>null</code> if no object has been associated or if the
                     *   parameter is not supported.
                     * @exception DOMException
                     *    NOT_FOUND_ERR: Raised when the parameter name is not recognized.</member>
        <member name="M:org.w3c.dom.DOMConfiguration.canSetParameter(System.String,System.Object)">
                     * Check if setting a parameter to a specific value is supported.
                     * @param name The name of the parameter to check.
                     * @param value  An object. if <code>null</code>, the returned value is
                     *   <code>true</code>.
                     * @return  <code>true</code> if the parameter could be successfully set
                     *   to the specified value, or <code>false</code> if the parameter is
                     *   not recognized or the requested value is not supported. This does
                     *   not change the current value of the parameter itself.</member>
        <member name="M:org.w3c.dom.DOMConfiguration.getParameterNames">
                     *  The list of the parameters supported by this
                     * <code>DOMConfiguration</code> object and for which at least one value
                     * can be set by the application. Note that this list can also contain
                     * parameter names defined outside this specification.</member>
        <!--FIXME: Invalid documentation markup was found for member T:org.w3c.dom.DOMError-->
        <member name="M:org.w3c.dom.DOMError.getSeverity">
                     * The severity of the error, either <code>SEVERITY_WARNING</code>,
                     * <code>SEVERITY_ERROR</code>, or <code>SEVERITY_FATAL_ERROR</code>.</member>
        <member name="M:org.w3c.dom.DOMError.getMessage">
                     * An implementation specific string describing the error that occurred.</member>
        <!--FIXME: Invalid documentation markup was found for member M:org.w3c.dom.DOMError.getType-->
        <member name="M:org.w3c.dom.DOMError.getRelatedException">
                     * The related platform dependent exception if any.</member>
        <member name="M:org.w3c.dom.DOMError.getRelatedData">
                     *  The related <code>DOMError.type</code> dependent data if any.</member>
        <member name="M:org.w3c.dom.DOMError.getLocation">
                     * The location of the error.</member>
        <member name="F:org.w3c.dom.DOMErrorConstants.SEVERITY_WARNING">
                     * The severity of the error described by the <code>DOMError</code> is
                     * warning. A <code>SEVERITY_WARNING</code> will not cause the
                     * processing to stop, unless <code>DOMErrorHandler.handleError()</code>
                     * returns <code>false</code>.</member>
        <member name="F:org.w3c.dom.DOMErrorConstants.SEVERITY_ERROR">
                     * The severity of the error described by the <code>DOMError</code> is
                     * error. A <code>SEVERITY_ERROR</code> may not cause the processing to
                     * stop if the error can be recovered, unless
                     * <code>DOMErrorHandler.handleError()</code> returns <code>false</code>.</member>
        <member name="F:org.w3c.dom.DOMErrorConstants.SEVERITY_FATAL_ERROR">
                     * The severity of the error described by the <code>DOMError</code> is
                     * fatal error. A <code>SEVERITY_FATAL_ERROR</code> will cause the
                     * normal processing to stop. The return value of
                     * <code>DOMErrorHandler.handleError()</code> is ignored unless the
                     * implementation chooses to continue, in which case the behavior
                     * becomes undefined.</member>
        <!--FIXME: Invalid documentation markup was found for member T:org.w3c.dom.DOMErrorHandler-->
        <!--FIXME: Invalid documentation markup was found for member M:org.w3c.dom.DOMErrorHandler.handleError(org.w3c.dom.DOMError)-->
        <!--FIXME: Invalid documentation markup was found for member T:org.w3c.dom.DOMException-->
        <member name="F:org.w3c.dom.DOMException.INDEX_SIZE_ERR">
                     * If index or size is negative, or greater than the allowed value</member>
        <member name="F:org.w3c.dom.DOMException.DOMSTRING_SIZE_ERR">
                     * If the specified range of text does not fit into a DOMString</member>
        <member name="F:org.w3c.dom.DOMException.HIERARCHY_REQUEST_ERR">
                     * If any node is inserted somewhere it doesn't belong</member>
        <member name="F:org.w3c.dom.DOMException.WRONG_DOCUMENT_ERR">
                     * If a node is used in a different document than the one that created it
                     * (that doesn't support it)</member>
        <member name="F:org.w3c.dom.DOMException.INVALID_CHARACTER_ERR">
                     * If an invalid or illegal character is specified, such as in a name. See
                     * production 2 in the XML specification for the definition of a legal
                     * character, and production 5 for the definition of a legal name
                     * character.</member>
        <member name="F:org.w3c.dom.DOMException.NO_DATA_ALLOWED_ERR">
                     * If data is specified for a node which does not support data</member>
        <member name="F:org.w3c.dom.DOMException.NO_MODIFICATION_ALLOWED_ERR">
                     * If an attempt is made to modify an object where modifications are not
                     * allowed</member>
        <member name="F:org.w3c.dom.DOMException.NOT_FOUND_ERR">
                     * If an attempt is made to reference a node in a context where it does
                     * not exist</member>
        <member name="F:org.w3c.dom.DOMException.NOT_SUPPORTED_ERR">
                     * If the implementation does not support the requested type of object or
                     * operation.</member>
        <member name="F:org.w3c.dom.DOMException.INUSE_ATTRIBUTE_ERR">
                     * If an attempt is made to add an attribute that is already in use
                     * elsewhere</member>
        <member name="F:org.w3c.dom.DOMException.INVALID_STATE_ERR">
                     * If an attempt is made to use an object that is not, or is no longer,
                     * usable.
                     * @since DOM Level 2</member>
        <member name="F:org.w3c.dom.DOMException.SYNTAX_ERR">
                     * If an invalid or illegal string is specified.
                     * @since DOM Level 2</member>
        <member name="F:org.w3c.dom.DOMException.INVALID_MODIFICATION_ERR">
                     * If an attempt is made to modify the type of the underlying object.
                     * @since DOM Level 2</member>
        <member name="F:org.w3c.dom.DOMException.NAMESPACE_ERR">
                     * If an attempt is made to create or change an object in a way which is
                     * incorrect with regard to namespaces.
                     * @since DOM Level 2</member>
        <member name="F:org.w3c.dom.DOMException.INVALID_ACCESS_ERR">
                     * If a parameter or an operation is not supported by the underlying
                     * object.
                     * @since DOM Level 2</member>
        <!--FIXME: Invalid documentation markup was found for member T:org.w3c.dom.DOMImplementation-->
        <member name="M:org.w3c.dom.DOMImplementation.hasFeature(System.String,System.String)">
                     * Test if the DOM implementation implements a specific feature.
                     * @param featureThe name of the feature to test (case-insensitive). The
                     *   values used by DOM features are defined throughout the DOM Level 2
                     *   specifications and listed in the  section. The name must be an XML
                     *   name. To avoid possible conflicts, as a convention, names referring
                     *   to features defined outside the DOM specification should be made
                     *   unique by reversing the name of the Internet domain name of the
                     *   person (or the organization that the person belongs to) who defines
                     *   the feature, component by component, and using this as a prefix.
                     *   For instance, the W3C SVG Working Group defines the feature
                     *   "org.w3c.dom.svg".
                     * @param versionThis is the version number of the feature to test. In
                     *   Level 2, the string can be either "2.0" or "1.0". If the version is
                     *   not specified, supporting any version of the feature causes the
                     *   method to return <code>true</code>.
                     * @return <code>true</code> if the feature is implemented in the
                     *   specified version, <code>false</code> otherwise.</member>
        <!--FIXME: Invalid documentation markup was found for member M:org.w3c.dom.DOMImplementation.createDocumentType(System.String,System.String,System.String)-->
        <!--FIXME: Invalid documentation markup was found for member M:org.w3c.dom.DOMImplementation.createDocument(System.String,System.String,org.w3c.dom.DocumentType)-->
        <!--FIXME: Invalid documentation markup was found for member T:org.w3c.dom.DOMImplementationList-->
        <member name="M:org.w3c.dom.DOMImplementationList.item(System.Int32)">
                     *  Returns the <code>index</code>th item in the collection. If
                     * <code>index</code> is greater than or equal to the number of
                     * <code>DOMImplementation</code>s in the list, this returns
                     * <code>null</code>.
                     * @param index Index into the collection.
                     * @return  The <code>DOMImplementation</code> at the <code>index</code>
                     *   th position in the <code>DOMImplementationList</code>, or
                     *   <code>null</code> if that is not a valid index.</member>
        <member name="M:org.w3c.dom.DOMImplementationList.getLength">
                     *  The number of <code>DOMImplementation</code>s in the list. The range
                     * of valid child node indices is 0 to <code>length-1</code> inclusive.</member>
        <!--FIXME: Invalid documentation markup was found for member T:org.w3c.dom.DOMImplementationSource-->
        <member name="M:org.w3c.dom.DOMImplementationSource.getDOMImplementation(System.String)">
                     *  A method to request the first DOM implementation that supports the
                     * specified features.
                     * @param features  A string that specifies which features and versions
                     *   are required. This is a space separated list in which each feature
                     *   is specified by its name optionally followed by a space and a
                     *   version number.  This method returns the first item of the list
                     *   returned by <code>getDOMImplementationList</code>.  As an example,
                     *   the string <code>"XML 3.0 Traversal +Events 2.0"</code> will
                     *   request a DOM implementation that supports the module "XML" for its
                     *   3.0 version, a module that support of the "Traversal" module for
                     *   any version, and the module "Events" for its 2.0 version. The
                     *   module "Events" must be accessible using the method
                     *   <code>Node.getFeature()</code> and
                     *   <code>DOMImplementation.getFeature()</code>.
                     * @return The first DOM implementation that support the desired
                     *   features, or <code>null</code> if this source has none.</member>
        <member name="M:org.w3c.dom.DOMImplementationSource.getDOMImplementationList(System.String)">
                     * A method to request a list of DOM implementations that support the
                     * specified features and versions, as specified in .
                     * @param features A string that specifies which features and versions
                     *   are required. This is a space separated list in which each feature
                     *   is specified by its name optionally followed by a space and a
                     *   version number. This is something like: "XML 3.0 Traversal +Events
                     *   2.0"
                     * @return A list of DOM implementations that support the desired
                     *   features.</member>
        <!--FIXME: Invalid documentation markup was found for member T:org.w3c.dom.DOMLocator-->
        <member name="M:org.w3c.dom.DOMLocator.getLineNumber">
                     * The line number this locator is pointing to, or <code>-1</code> if
                     * there is no column number available.</member>
        <member name="M:org.w3c.dom.DOMLocator.getColumnNumber">
                     * The column number this locator is pointing to, or <code>-1</code> if
                     * there is no column number available.</member>
        <member name="M:org.w3c.dom.DOMLocator.getByteOffset">
                     * The byte offset into the input source this locator is pointing to or
                     * <code>-1</code> if there is no byte offset available.</member>
        <member name="M:org.w3c.dom.DOMLocator.getUtf16Offset">
                     * The UTF-16, as defined in [Unicode] and Amendment 1 of [ISO/IEC 10646], offset into the input source this locator is pointing to or
                     * <code>-1</code> if there is no UTF-16 offset available.</member>
        <member name="M:org.w3c.dom.DOMLocator.getRelatedNode">
                     * The node this locator is pointing to, or <code>null</code> if no node
                     * is available.</member>
        <member name="M:org.w3c.dom.DOMLocator.getUri">
                     * The URI this locator is pointing to, or <code>null</code> if no URI is
                     * available.</member>
        <!--FIXME: Invalid documentation markup was found for member T:org.w3c.dom.DOMStringList-->
        <member name="M:org.w3c.dom.DOMStringList.item(System.Int32)">
                     *  Returns the <code>index</code>th item in the collection. If
                     * <code>index</code> is greater than or equal to the number of
                     * <code>DOMString</code>s in the list, this returns <code>null</code>.
                     * @param index Index into the collection.
                     * @return  The <code>DOMString</code> at the <code>index</code>th
                     *   position in the <code>DOMStringList</code>, or <code>null</code> if
                     *   that is not a valid index.</member>
        <member name="M:org.w3c.dom.DOMStringList.getLength">
                     * The number of <code>DOMString</code>s in the list. The range of valid
                     * child node indices is 0 to <code>length-1</code> inclusive.</member>
        <member name="M:org.w3c.dom.DOMStringList.contains(System.String)">
                     *  Test if a string is part of this <code>DOMStringList</code>.
                     * @param str  The string to look for.
                     * @return  <code>true</code> if the string has been found,
                     *   <code>false</code> otherwise.</member>
        <!--FIXME: Invalid documentation markup was found for member T:org.w3c.dom.Element-->
        <member name="M:org.w3c.dom.Element.getTagName">
                     * The name of the element. For example, in:
                     * <pre> &lt;elementExample
                     * id="demo"&gt; ... &lt;/elementExample&gt; , </pre>
                     *  <code>tagName</code> has
                     * the value <code>"elementExample"</code>. Note that this is
                     * case-preserving in XML, as are all of the operations of the DOM. The
                     * HTML DOM returns the <code>tagName</code> of an HTML element in the
                     * canonical uppercase form, regardless of the case in the source HTML
                     * document.</member>
        <member name="M:org.w3c.dom.Element.getAttribute(System.String)">
                     * Retrieves an attribute value by name.
                     * @param nameThe name of the attribute to retrieve.
                     * @return The <code>Attr</code> value as a string, or the empty string
                     *   if that attribute does not have a specified or default value.</member>
        <!--FIXME: Invalid documentation markup was found for member M:org.w3c.dom.Element.setAttribute(System.String,System.String)-->
        <!--FIXME: Invalid documentation markup was found for member M:org.w3c.dom.Element.removeAttribute(System.String)-->
        <!--FIXME: Invalid documentation markup was found for member M:org.w3c.dom.Element.getAttributeNode(System.String)-->
        <!--FIXME: Invalid documentation markup was found for member M:org.w3c.dom.Element.setAttributeNode(org.w3c.dom.Attr)-->
        <!--FIXME: Invalid documentation markup was found for member M:org.w3c.dom.Element.removeAttributeNode(org.w3c.dom.Attr)-->
        <member name="M:org.w3c.dom.Element.getElementsByTagName(System.String)">
                     * Returns a <code>NodeList</code> of all descendant <code>Elements</code>
                     * with a given tag name, in the order in which they are encountered in
                     * a preorder traversal of this <code>Element</code> tree.
                     * @param nameThe name of the tag to match on. The special value "*"
                     *   matches all tags.
                     * @return A list of matching <code>Element</code> nodes.</member>
        <member name="M:org.w3c.dom.Element.getAttributeNS(System.String,System.String)">
                     * Retrieves an attribute value by local name and namespace URI. HTML-only
                     * DOM implementations do not need to implement this method.
                     * @param namespaceURIThe namespace URI of the attribute to retrieve.
                     * @param localNameThe local name of the attribute to retrieve.
                     * @return The <code>Attr</code> value as a string, or the empty string
                     *   if that attribute does not have a specified or default value.
                     * @since DOM Level 2</member>
        <!--FIXME: Invalid documentation markup was found for member M:org.w3c.dom.Element.setAttributeNS(System.String,System.String,System.String)-->
        <!--FIXME: Invalid documentation markup was found for member M:org.w3c.dom.Element.removeAttributeNS(System.String,System.String)-->
        <member name="M:org.w3c.dom.Element.getAttributeNodeNS(System.String,System.String)">
                     * Retrieves an <code>Attr</code> node by local name and namespace URI.
                     * HTML-only DOM implementations do not need to implement this method.
                     * @param namespaceURIThe namespace URI of the attribute to retrieve.
                     * @param localNameThe local name of the attribute to retrieve.
                     * @return The <code>Attr</code> node with the specified attribute local
                     *   name and namespace URI or <code>null</code> if there is no such
                     *   attribute.
                     * @since DOM Level 2</member>
        <!--FIXME: Invalid documentation markup was found for member M:org.w3c.dom.Element.setAttributeNodeNS(org.w3c.dom.Attr)-->
        <!--FIXME: Invalid documentation markup was found for member M:org.w3c.dom.Element.getElementsByTagNameNS(System.String,System.String)-->
        <member name="M:org.w3c.dom.Element.hasAttribute(System.String)">
                     * Returns <code>true</code> when an attribute with a given name is
                     * specified on this element or has a default value, <code>false</code>
                     * otherwise.
                     * @param nameThe name of the attribute to look for.
                     * @return <code>true</code> if an attribute with the given name is
                     *   specified on this element or has a default value, <code>false</code>
                     *    otherwise.
                     * @since DOM Level 2</member>
        <member name="M:org.w3c.dom.Element.hasAttributeNS(System.String,System.String)">
                     * Returns <code>true</code> when an attribute with a given local name and
                     * namespace URI is specified on this element or has a default value,
                     * <code>false</code> otherwise. HTML-only DOM implementations do not
                     * need to implement this method.
                     * @param namespaceURIThe namespace URI of the attribute to look for.
                     * @param localNameThe local name of the attribute to look for.
                     * @return <code>true</code> if an attribute with the given local name
                     *   and namespace URI is specified or has a default value on this
                     *   element, <code>false</code> otherwise.
                     * @since DOM Level 2</member>
        <!--FIXME: Invalid documentation markup was found for member T:org.w3c.dom.Entity-->
        <member name="M:org.w3c.dom.Entity.getPublicId">
                     * The public identifier associated with the entity, if specified. If the
                     * public identifier was not specified, this is <code>null</code>.</member>
        <member name="M:org.w3c.dom.Entity.getSystemId">
                     * The system identifier associated with the entity, if specified. If the
                     * system identifier was not specified, this is <code>null</code>.</member>
        <member name="M:org.w3c.dom.Entity.getNotationName">
                     * For unparsed entities, the name of the notation for the entity. For
                     * parsed entities, this is <code>null</code>.</member>
        <!--FIXME: Invalid documentation markup was found for member T:org.w3c.dom.EntityReference-->
        <!--FIXME: Invalid documentation markup was found for member T:org.w3c.dom.NamedNodeMap-->
        <member name="M:org.w3c.dom.NamedNodeMap.getNamedItem(System.String)">
                     * Retrieves a node specified by name.
                     * @param nameThe <code>nodeName</code> of a node to retrieve.
                     * @return A <code>Node</code> (of any type) with the specified
                     *   <code>nodeName</code>, or <code>null</code> if it does not identify
                     *   any node in this map.</member>
        <!--FIXME: Invalid documentation markup was found for member M:org.w3c.dom.NamedNodeMap.setNamedItem(org.w3c.dom.Node)-->
        <!--FIXME: Invalid documentation markup was found for member M:org.w3c.dom.NamedNodeMap.removeNamedItem(System.String)-->
        <member name="M:org.w3c.dom.NamedNodeMap.item(System.Int32)">
                     * Returns the <code>index</code>th item in the map. If <code>index</code>
                     * is greater than or equal to the number of nodes in this map, this
                     * returns <code>null</code>.
                     * @param indexIndex into this map.
                     * @return The node at the <code>index</code>th position in the map, or
                     *   <code>null</code> if that is not a valid index.</member>
        <member name="M:org.w3c.dom.NamedNodeMap.getLength">
                     * The number of nodes in this map. The range of valid child node indices
                     * is <code>0</code> to <code>length-1</code> inclusive.</member>
        <member name="M:org.w3c.dom.NamedNodeMap.getNamedItemNS(System.String,System.String)">
                     * Retrieves a node specified by local name and namespace URI. HTML-only
                     * DOM implementations do not need to implement this method.
                     * @param namespaceURIThe namespace URI of the node to retrieve.
                     * @param localNameThe local name of the node to retrieve.
                     * @return A <code>Node</code> (of any type) with the specified local
                     *   name and namespace URI, or <code>null</code> if they do not
                     *   identify any node in this map.
                     * @since DOM Level 2</member>
        <!--FIXME: Invalid documentation markup was found for member M:org.w3c.dom.NamedNodeMap.setNamedItemNS(org.w3c.dom.Node)-->
        <!--FIXME: Invalid documentation markup was found for member M:org.w3c.dom.NamedNodeMap.removeNamedItemNS(System.String,System.String)-->
        <!--FIXME: Invalid documentation markup was found for member T:org.w3c.dom.NameList-->
        <member name="M:org.w3c.dom.NameList.getName(System.Int32)">
                     *  Returns the <code>index</code>th name item in the collection.
                     * @param index Index into the collection.
                     * @return  The name at the <code>index</code>th position in the
                     *   <code>NameList</code>, or <code>null</code> if there is no name for
                     *   the specified index or if the index is out of range.</member>
        <member name="M:org.w3c.dom.NameList.getNamespaceURI(System.Int32)">
                     *  Returns the <code>index</code>th namespaceURI item in the collection.
                     * @param index Index into the collection.
                     * @return  The namespace URI at the <code>index</code>th position in the
                     *   <code>NameList</code>, or <code>null</code> if there is no name for
                     *   the specified index or if the index is out of range.</member>
        <member name="M:org.w3c.dom.NameList.getLength">
                     *  The number of pairs (name and namespaceURI) in the list. The range of
                     * valid child node indices is 0 to <code>length-1</code> inclusive.</member>
        <member name="M:org.w3c.dom.NameList.contains(System.String)">
                     *  Test if a name is part of this <code>NameList</code>.
                     * @param str  The name to look for.
                     * @return  <code>true</code> if the name has been found,
                     *   <code>false</code> otherwise.</member>
        <member name="M:org.w3c.dom.NameList.containsNS(System.String,System.String)">
                     *  Test if the pair namespaceURI/name is part of this
                     * <code>NameList</code>.
                     * @param namespaceURI  The namespace URI to look for.
                     * @param name  The name to look for.
                     * @return  <code>true</code> if the pair namespaceURI/name has been
                     *   found, <code>false</code> otherwise.</member>
        <!--FIXME: Invalid documentation markup was found for member T:org.w3c.dom.Node-->
        <member name="M:org.w3c.dom.Node.getNodeName">
                     * The name of this node, depending on its type; see the table above.</member>
        <member name="M:org.w3c.dom.Node.getNodeValue">
                     * The value of this node, depending on its type; see the table above.
                     * When it is defined to be <code>null</code>, setting it has no effect.
                     * @exception DOMException
                     *   NO_MODIFICATION_ALLOWED_ERR: Raised when the node is readonly.
                     * @exception DOMException
                     *   DOMSTRING_SIZE_ERR: Raised when it would return more characters than
                     *   fit in a <code>DOMString</code> variable on the implementation
                     *   platform.</member>
        <member name="M:org.w3c.dom.Node.getNodeType">
                     * A code representing the type of the underlying object, as defined above.</member>
        <member name="M:org.w3c.dom.Node.getParentNode">
                     * The parent of this node. All nodes, except <code>Attr</code>,
                     * <code>Document</code>, <code>DocumentFragment</code>,
                     * <code>Entity</code>, and <code>Notation</code> may have a parent.
                     * However, if a node has just been created and not yet added to the
                     * tree, or if it has been removed from the tree, this is
                     * <code>null</code>.</member>
        <member name="M:org.w3c.dom.Node.getChildNodes">
                     * A <code>NodeList</code> that contains all children of this node. If
                     * there are no children, this is a <code>NodeList</code> containing no
                     * nodes.</member>
        <member name="M:org.w3c.dom.Node.getFirstChild">
                     * The first child of this node. If there is no such node, this returns
                     * <code>null</code>.</member>
        <member name="M:org.w3c.dom.Node.getLastChild">
                     * The last child of this node. If there is no such node, this returns
                     * <code>null</code>.</member>
        <member name="M:org.w3c.dom.Node.getPreviousSibling">
                     * The node immediately preceding this node. If there is no such node,
                     * this returns <code>null</code>.</member>
        <member name="M:org.w3c.dom.Node.getNextSibling">
                     * The node immediately following this node. If there is no such node,
                     * this returns <code>null</code>.</member>
        <member name="M:org.w3c.dom.Node.getAttributes">
                     * A <code>NamedNodeMap</code> containing the attributes of this node (if
                     * it is an <code>Element</code>) or <code>null</code> otherwise.</member>
        <member name="M:org.w3c.dom.Node.getOwnerDocument">
                     * The <code>Document</code> object associated with this node. This is
                     * also the <code>Document</code> object used to create new nodes. When
                     * this node is a <code>Document</code> or a <code>DocumentType</code>
                     * which is not used with any <code>Document</code> yet, this is
                     * <code>null</code>.
                     * @version DOM Level 2</member>
        <!--FIXME: Invalid documentation markup was found for member M:org.w3c.dom.Node.insertBefore(org.w3c.dom.Node,org.w3c.dom.Node)-->
        <!--FIXME: Invalid documentation markup was found for member M:org.w3c.dom.Node.replaceChild(org.w3c.dom.Node,org.w3c.dom.Node)-->
        <!--FIXME: Invalid documentation markup was found for member M:org.w3c.dom.Node.removeChild(org.w3c.dom.Node)-->
        <!--FIXME: Invalid documentation markup was found for member M:org.w3c.dom.Node.appendChild(org.w3c.dom.Node)-->
        <member name="M:org.w3c.dom.Node.hasChildNodes">
                     * Returns whether this node has any children.
                     * @return  <code>true</code> if this node has any children,
                     *   <code>false</code> otherwise.</member>
        <!--FIXME: Invalid documentation markup was found for member M:org.w3c.dom.Node.cloneNode(System.Boolean)-->
        <member name="M:org.w3c.dom.Node.normalize">
                     * Puts all <code>Text</code> nodes in the full depth of the sub-tree
                     * underneath this <code>Node</code>, including attribute nodes, into a
                     * "normal" form where only structure (e.g., elements, comments,
                     * processing instructions, CDATA sections, and entity references)
                     * separates <code>Text</code> nodes, i.e., there are neither adjacent
                     * <code>Text</code> nodes nor empty <code>Text</code> nodes. This can
                     * be used to ensure that the DOM view of a document is the same as if
                     * it were saved and re-loaded, and is useful when operations (such as
                     * XPointer  lookups) that depend on a particular document tree
                     * structure are to be used.In cases where the document contains
                     * <code>CDATASections</code>, the normalize operation alone may not be
                     * sufficient, since XPointers do not differentiate between
                     * <code>Text</code> nodes and <code>CDATASection</code> nodes.
                     * @version DOM Level 2</member>
        <member name="M:org.w3c.dom.Node.isSupported(System.String,System.String)">
                     * Tests whether the DOM implementation implements a specific feature and
                     * that feature is supported by this node.
                     * @param featureThe name of the feature to test. This is the same name
                     *   which can be passed to the method <code>hasFeature</code> on
                     *   <code>DOMImplementation</code>.
                     * @param versionThis is the version number of the feature to test. In
                     *   Level 2, version 1, this is the string "2.0". If the version is not
                     *   specified, supporting any version of the feature will cause the
                     *   method to return <code>true</code>.
                     * @return Returns <code>true</code> if the specified feature is
                     *   supported on this node, <code>false</code> otherwise.
                     * @since DOM Level 2</member>
        <!--FIXME: Invalid documentation markup was found for member M:org.w3c.dom.Node.getNamespaceURI-->
        <!--FIXME: Invalid documentation markup was found for member M:org.w3c.dom.Node.getPrefix-->
        <!--FIXME: Invalid documentation markup was found for member M:org.w3c.dom.Node.getLocalName-->
        <member name="M:org.w3c.dom.Node.hasAttributes">
                     * Returns whether this node (if it is an element) has any attributes.
                     * @return <code>true</code> if this node has any attributes,
                     *   <code>false</code> otherwise.
                     * @since DOM Level 2</member>
        <member name="T:org.w3c.dom.NodeConstants">
            <summary>
            Helper class include Constants for interface org.w3c.dom.Node
            </summary>
        </member>
        <member name="F:org.w3c.dom.NodeConstants.ELEMENT_NODE">
                     * The node is an <code>Element</code>.</member>
        <member name="F:org.w3c.dom.NodeConstants.ATTRIBUTE_NODE">
                     * The node is an <code>Attr</code>.</member>
        <member name="F:org.w3c.dom.NodeConstants.TEXT_NODE">
                     * The node is a <code>Text</code> node.</member>
        <member name="F:org.w3c.dom.NodeConstants.CDATA_SECTION_NODE">
                     * The node is a <code>CDATASection</code>.</member>
        <member name="F:org.w3c.dom.NodeConstants.ENTITY_REFERENCE_NODE">
                     * The node is an <code>EntityReference</code>.</member>
        <member name="F:org.w3c.dom.NodeConstants.ENTITY_NODE">
                     * The node is an <code>Entity</code>.</member>
        <member name="F:org.w3c.dom.NodeConstants.PROCESSING_INSTRUCTION_NODE">
                     * The node is a <code>ProcessingInstruction</code>.</member>
        <member name="F:org.w3c.dom.NodeConstants.COMMENT_NODE">
                     * The node is a <code>Comment</code>.</member>
        <member name="F:org.w3c.dom.NodeConstants.DOCUMENT_NODE">
                     * The node is a <code>Document</code>.</member>
        <member name="F:org.w3c.dom.NodeConstants.DOCUMENT_TYPE_NODE">
                     * The node is a <code>DocumentType</code>.</member>
        <member name="F:org.w3c.dom.NodeConstants.DOCUMENT_FRAGMENT_NODE">
                     * The node is a <code>DocumentFragment</code>.</member>
        <member name="F:org.w3c.dom.NodeConstants.NOTATION_NODE">
                     * The node is a <code>Notation</code>.</member>
        <!--FIXME: Invalid documentation markup was found for member T:org.w3c.dom.NodeList-->
        <member name="M:org.w3c.dom.NodeList.item(System.Int32)">
                     * Returns the <code>index</code>th item in the collection. If
                     * <code>index</code> is greater than or equal to the number of nodes in
                     * the list, this returns <code>null</code>.
                     * @param indexIndex into the collection.
                     * @return The node at the <code>index</code>th position in the
                     *   <code>NodeList</code>, or <code>null</code> if that is not a valid
                     *   index.</member>
        <member name="M:org.w3c.dom.NodeList.getLength">
                     * The number of nodes in the list. The range of valid child node indices
                     * is 0 to <code>length-1</code> inclusive.</member>
        <!--FIXME: Invalid documentation markup was found for member T:org.w3c.dom.Notation-->
        <member name="M:org.w3c.dom.Notation.getPublicId">
                     * The public identifier of this notation. If the public identifier was
                     * not specified, this is <code>null</code>.</member>
        <member name="M:org.w3c.dom.Notation.getSystemId">
                     * The system identifier of this notation. If the system identifier was
                     * not specified, this is <code>null</code>.</member>
        <!--FIXME: Invalid documentation markup was found for member T:org.w3c.dom.ProcessingInstruction-->
        <member name="M:org.w3c.dom.ProcessingInstruction.getTarget">
                     * The target of this processing instruction. XML defines this as being
                     * the first token following the markup that begins the processing
                     * instruction.</member>
        <member name="M:org.w3c.dom.ProcessingInstruction.getData">
                     * The content of this processing instruction. This is from the first non
                     * white space character after the target to the character immediately
                     * preceding the <code>?&gt;</code>.
                     * @exception DOMException
                     *   NO_MODIFICATION_ALLOWED_ERR: Raised when the node is readonly.</member>
        <!--FIXME: Invalid documentation markup was found for member T:org.w3c.dom.Text-->
        <!--FIXME: Invalid documentation markup was found for member M:org.w3c.dom.Text.splitText(System.Int32)-->
        <!--FIXME: Invalid documentation markup was found for member T:org.w3c.dom.TypeInfo-->
        <member name="M:org.w3c.dom.TypeInfo.getTypeName">
                     *  The name of a type declared for the associated element or attribute,
                     * or <code>null</code> if unknown.</member>
        <member name="M:org.w3c.dom.TypeInfo.getTypeNamespace">
                     *  The namespace of the type declared for the associated element or
                     * attribute or <code>null</code> if the element does not have
                     * declaration or if no namespace information is available.</member>
        <member name="M:org.w3c.dom.TypeInfo.isDerivedFrom(System.String,System.String,System.Int32)">
                     *  This method returns if there is a derivation between the reference
                     * type definition, i.e. the <code>TypeInfo</code> on which the method
                     * is being called, and the other type definition, i.e. the one passed
                     * as parameters.
                     * @param typeNamespaceArg  the namespace of the other type definition.
                     * @param typeNameArg  the name of the other type definition.
                     * @param derivationMethod  the type of derivation and conditions applied
                     *   between two types, as described in the list of constants provided
                     *   in this interface.
                     * @return  If the document's schema is a DTD or no schema is associated
                     *   with the document, this method will always return <code>false</code>
                     *   .  If the document's schema is an XML Schema, the method will
                     *   <code>true</code> if the reference type definition is derived from
                     *   the other type definition according to the derivation parameter. If
                     *   the value of the parameter is <code>0</code> (no bit is set to
                     *   <code>1</code> for the <code>derivationMethod</code> parameter),
                     *   the method will return <code>true</code> if the other type
                     *   definition can be reached by recursing any combination of {base
                     *   type definition}, {item type definition}, or {member type
                     *   definitions} from the reference type definition.</member>
        <!--FIXME: Invalid documentation markup was found for member F:org.w3c.dom.TypeInfoConstants.DERIVATION_RESTRICTION-->
        <!--FIXME: Invalid documentation markup was found for member F:org.w3c.dom.TypeInfoConstants.DERIVATION_EXTENSION-->
        <!--FIXME: Invalid documentation markup was found for member F:org.w3c.dom.TypeInfoConstants.DERIVATION_UNION-->
        <!--FIXME: Invalid documentation markup was found for member F:org.w3c.dom.TypeInfoConstants.DERIVATION_LIST-->
        <!--FIXME: Invalid documentation markup was found for member T:org.w3c.dom.UserDataHandler-->
        <member name="M:org.w3c.dom.UserDataHandler.handle(System.Int16,System.String,System.Object,org.w3c.dom.Node,org.w3c.dom.Node)">
                     * This method is called whenever the node for which this handler is
                     * registered is imported or cloned.
                     * @param operation Specifies the type of operation that is being
                     *   performed on the node.
                     * @param key Specifies the key for which this handler is being called.
                     * @param data Specifies the data for which this handler is being called.
                     * @param src Specifies the node being cloned, imported, or renamed. This
                     *   is <code>null</code> when the node is being deleted.
                     * @param dst Specifies the node newly created if any, or
                     *   <code>null</code>.</member>
        <member name="F:org.w3c.dom.UserDataHandlerConstants.NODE_CLONED">
                     * The node is cloned.</member>
        <member name="F:org.w3c.dom.UserDataHandlerConstants.NODE_IMPORTED">
                     * The node is imported.</member>
        <member name="F:org.w3c.dom.UserDataHandlerConstants.NODE_DELETED">
                     * The node is deleted.</member>
        <member name="F:org.w3c.dom.UserDataHandlerConstants.NODE_RENAMED">
                     * The node is renamed.</member>
        <!--FIXME: Invalid documentation markup was found for member T:biz.ritter.javapix.xml.crypto.dsig.dom.DOMSignContext-->
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.dom.DOMSignContext.#ctor(biz.ritter.javapi.security.Key,org.w3c.dom.Node)">
                 * Creates a <code>DOMSignContext</code> with the specified signing key
                 * and parent node. The signing key is stored in a
                 * {@link KeySelector#singletonKeySelector singleton KeySelector} that is
                 * returned by the {@link #getKeySelector getKeySelector} method.
                 * The marshalled <code>XMLSignature</code> will be added as the last
                 * child element of the specified parent node unless a next sibling node is
                 * specified by invoking the {@link #setNextSibling setNextSibling} method.
                 *
                 * @param signingKey the signing key
                 * @param parent the parent node
                 * @throws NullPointerException if <code>signingKey</code> or
                 *    <code>parent</code> is <code>null</code></member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.dom.DOMSignContext.#ctor(biz.ritter.javapi.security.Key,org.w3c.dom.Node,org.w3c.dom.Node)">
                 * Creates a <code>DOMSignContext</code> with the specified signing key,
                 * parent and next sibling nodes. The signing key is stored in a
                 * {@link KeySelector#singletonKeySelector singleton KeySelector} that is
                 * returned by the {@link #getKeySelector getKeySelector} method.
                 * The marshalled <code>XMLSignature</code> will be inserted as a child
                 * element of the specified parent node and immediately before the
                 * specified next sibling node.
                 *
                 * @param signingKey the signing key
                 * @param parent the parent node
                 * @param nextSibling the next sibling node
                 * @throws NullPointerException if <code>signingKey</code>,
                 *    <code>parent</code> or <code>nextSibling</code> is <code>null</code></member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.dom.DOMSignContext.#ctor(biz.ritter.javapix.xml.crypto.KeySelector,org.w3c.dom.Node)">
                 * Creates a <code>DOMSignContext</code> with the specified key selector
                 * and parent node. The marshalled <code>XMLSignature</code> will be added
                 * as the last child element of the specified parent node unless a next
                 * sibling node is specified by invoking the
                 * {@link #setNextSibling setNextSibling} method.
                 *
                 * @param ks the key selector
                 * @param parent the parent node
                 * @throws NullPointerException if <code>ks</code> or <code>parent</code>
                 *    is <code>null</code></member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.dom.DOMSignContext.#ctor(biz.ritter.javapix.xml.crypto.KeySelector,org.w3c.dom.Node,org.w3c.dom.Node)">
                 * Creates a <code>DOMSignContext</code> with the specified key selector,
                 * parent and next sibling nodes. The marshalled <code>XMLSignature</code>
                 * will be inserted as a child element of the specified parent node and
                 * immediately before the specified next sibling node.
                 *
                 * @param ks the key selector
                 * @param parent the parent node
                 * @param nextSibling the next sibling node
                 * @throws NullPointerException if <code>ks</code>, <code>parent</code> or
                 *    <code>nextSibling</code> is <code>null</code></member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.dom.DOMSignContext.setParent(org.w3c.dom.Node)">
                 * Sets the parent node.
                 *
                 * @param parent the parent node. The marshalled <code>XMLSignature</code>
                 *    will be added as a child element of this node.
                 * @throws NullPointerException if <code>parent</code> is <code>null</code>
                 * @see #getParent</member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.dom.DOMSignContext.setNextSibling(org.w3c.dom.Node)">
                 * Sets the next sibling node.
                 *
                 * @param nextSibling the next sibling node. The marshalled
                 *    <code>XMLSignature</code> will be inserted immediately before this
                 *    node. Specify <code>null</code> to remove the current setting.
                 * @see #getNextSibling</member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.dom.DOMSignContext.getParent">
                 * Returns the parent node.
                 *
                 * @return the parent node (never <code>null</code>)
                 * @see #setParent(Node)</member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.dom.DOMSignContext.getNextSibling">
                 * Returns the nextSibling node.
                 *
                 * @return the nextSibling node, or <code>null</code> if not specified.
                 * @see #setNextSibling(Node)</member>
        <!--FIXME: Invalid documentation markup was found for member T:biz.ritter.javapix.xml.crypto.dsig.dom.DOMValidateContext-->
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.dom.DOMValidateContext.#ctor(biz.ritter.javapix.xml.crypto.KeySelector,org.w3c.dom.Node)">
                 * Creates a <code>DOMValidateContext</code> containing the specified key
                 * selector and node.
                 *
                 * @param ks a key selector for finding a validation key
                 * @param node the node
                 * @throws NullPointerException if <code>ks</code> or <code>node</code> is
                 *    <code>null</code></member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.dom.DOMValidateContext.#ctor(biz.ritter.javapi.security.Key,org.w3c.dom.Node)">
                 * Creates a <code>DOMValidateContext</code> containing the specified key
                 * and node. The validating key will be stored in a
                 * {@link KeySelector#singletonKeySelector singleton KeySelector} that
                 * is returned when the {@link #getKeySelector getKeySelector}
                 * method is called.
                 *
                 * @param validatingKey the validating key
                 * @param node the node
                 * @throws NullPointerException if <code>validatingKey</code> or
                 *    <code>node</code> is <code>null</code></member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.dom.DOMValidateContext.setNode(org.w3c.dom.Node)">
                 * Sets the node.
                 *
                 * @param node the node
                 * @throws NullPointerException if <code>node</code> is <code>null</code>
                 * @see #getNode</member>
        <member name="M:biz.ritter.javapix.xml.crypto.dsig.dom.DOMValidateContext.getNode">
                 * Returns the node.
                 *
                 * @return the node (never <code>null</code>)
                 * @see #setNode(Node)</member>
        <member name="T:biz.ritter.javapix.xml.crypto.dom.DOMURIReference">
             * A DOM-specific {@link URIReference}. The purpose of this class is to
             * provide additional context necessary for resolving XPointer URIs or
             * same-document references.
             *
             * @author Sean Mullan
             * @author JSR 105 Expert Group</member>
        <member name="M:biz.ritter.javapix.xml.crypto.dom.DOMURIReference.getHere">
                 * Returns the here node.
                 *
                 * @return the attribute or processing instruction node or the
                 *    parent element of the text node that directly contains the URI</member>
        <!--FIXME: Invalid documentation markup was found for member T:biz.ritter.javapix.xml.crypto.dom.DOMStructure-->
        <member name="M:biz.ritter.javapix.xml.crypto.dom.DOMStructure.#ctor(org.w3c.dom.Node)">
                 * Creates a <code>DOMStructure</code> containing the specified node.
                 *
                 * @param node the node
                 * @throws NullPointerException if <code>node</code> is <code>null</code></member>
        <member name="M:biz.ritter.javapix.xml.crypto.dom.DOMStructure.getNode">
                 * Returns the node contained in this <code>DOMStructure</code>.
                 *
                 * @return the node</member>
        <member name="M:biz.ritter.javapix.xml.crypto.dom.DOMStructure.isFeatureSupported(System.String)">
                 * @throws NullPointerException {@inheritDoc}</member>
        <member name="T:biz.ritter.javapix.xml.crypto.dom.DOMCryptoContext">
             * This class provides a DOM-specific implementation of the
             * {@link XMLCryptoContext} interface. It also includes additional
             * methods that are specific to a DOM-based implementation for registering
             * and retrieving elements that contain attributes of type ID.
             *
             * @author Sean Mullan
             * @author JSR 105 Expert Group</member>
        <member name="M:biz.ritter.javapix.xml.crypto.dom.DOMCryptoContext.#ctor">
                 * Default constructor. (For invocation by subclass constructors).</member>
        <member name="M:biz.ritter.javapix.xml.crypto.dom.DOMCryptoContext.getNamespacePrefix(System.String,System.String)">
                 * This implementation uses an internal {@link HashMap} to get the prefix
                 * that the specified URI maps to. It returns the <code>defaultPrefix</code>
                 * if it maps to <code>null</code>.
                 *
                 * @throws NullPointerException {@inheritDoc}</member>
        <member name="M:biz.ritter.javapix.xml.crypto.dom.DOMCryptoContext.putNamespacePrefix(System.String,System.String)">
                 * This implementation uses an internal {@link HashMap} to map the URI
                 * to the specified prefix.
                 *
                 * @throws NullPointerException {@inheritDoc}</member>
        <member name="M:biz.ritter.javapix.xml.crypto.dom.DOMCryptoContext.setBaseURI(System.String)">
                 * @throws IllegalArgumentException {@inheritDoc}</member>
        <member name="M:biz.ritter.javapix.xml.crypto.dom.DOMCryptoContext.getProperty(System.String)">
                 * This implementation uses an internal {@link HashMap} to get the object
                 * that the specified name maps to.
                 *
                 * @throws NullPointerException {@inheritDoc}</member>
        <member name="M:biz.ritter.javapix.xml.crypto.dom.DOMCryptoContext.setProperty(System.String,System.Object)">
                 * This implementation uses an internal {@link HashMap} to map the name
                 * to the specified object.
                 *
                 * @throws NullPointerException {@inheritDoc}</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapix.xml.crypto.dom.DOMCryptoContext.getElementById(System.String)-->
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapix.xml.crypto.dom.DOMCryptoContext.setIdAttributeNS(org.w3c.dom.Element,System.String,System.String)-->
        <member name="M:biz.ritter.javapix.xml.crypto.dom.DOMCryptoContext.iterator">
                 * Returns a read-only iterator over the set of Id/Element mappings of
                 * this <code>DOMCryptoContext</code>. Attempts to modify the set via the
                 * {@link Iterator#remove} method throw an
                 * <code>UnsupportedOperationException</code>. The mappings are returned
                 * in no particular order. Each element in the iteration is represented as a
                 * {@link java.util.Map.Entry}. If the <code>DOMCryptoContext</code> is
                 * modified while an iteration is in progress, the results of the
                 * iteration are undefined.
                 *
                 * @return a read-only iterator over the set of mappings</member>
        <member name="M:biz.ritter.javapix.xml.crypto.dom.DOMCryptoContext.get(System.Object)">
                 * This implementation uses an internal {@link HashMap} to get the object
                 * that the specified key maps to.</member>
        <member name="M:biz.ritter.javapix.xml.crypto.dom.DOMCryptoContext.put(System.Object,System.Object)">
                 * This implementation uses an internal {@link HashMap} to map the key
                 * to the specified object.
                 *
                 * @throws IllegalArgumentException {@inheritDoc}</member>
        <member name="T:biz.ritter.javapi.util.logging.Filter">
                 * A {@code Filter} provides a mechanism for exercising fine-grained control
                 * over which records get logged.</member>
        <member name="M:biz.ritter.javapi.util.logging.Filter.isLoggable(biz.ritter.javapi.util.logging.LogRecord)">
                     * Checks {@code record} to determine if it should be logged.
                     *
                     * @param record
                     *            the {@link LogRecord} to be checked.
                     * @return {@code true} if the supplied log record needs to be logged,
                     *         {@code false} otherwise.</member>
        <member name="M:biz.ritter.javapi.util.logging.Handler.#ctor">
                 * Constructs a {@code Handler} object with a default error manager instance
                 * {@code ErrorManager}, the default encoding, and the default logging
                 * level {@code Level.ALL}. It has no filter and no formatter.</member>
        <member name="M:biz.ritter.javapi.util.logging.Handler.initProperties(System.String,System.String,System.String,System.String)">
                 * init the common properties, including filter, level, formatter, and
                 * encoding</member>
        <member name="M:biz.ritter.javapi.util.logging.Handler.close">
                     * Closes this handler. A flush operation will be performed and all the
                     * associated resources will be freed. Client applications should not use
                     * this handler after closing it.
                     *
                     * @throws SecurityException
                     *             if a security manager determines that the caller does not
                     *             have the required permission.</member>
        <member name="M:biz.ritter.javapi.util.logging.Handler.flush">
                     * Flushes any buffered output.</member>
        <member name="M:biz.ritter.javapi.util.logging.Handler.publish(biz.ritter.javapi.util.logging.LogRecord)">
                     * Accepts a logging request and sends it to the the target.
                     *
                     * @param record
                     *            the log record to be logged; {@code null} records are ignored.</member>
        <member name="M:biz.ritter.javapi.util.logging.Handler.setLevel(biz.ritter.javapi.util.logging.Level)">
                     * Sets the logging level of the messages logged by this handler, levels
                     * lower than this value will be dropped.
                     *
                     * @param newLevel
                     *            the logging level to set.
                     * @throws NullPointerException
                     *             if {@code newLevel} is {@code null}.
                     * @throws SecurityException
                     *             if a security manager determines that the caller does not
                     *             have the required permission.</member>
        <member name="M:biz.ritter.javapi.util.logging.Handler.getEncoding">
                 * Gets the character encoding used by this handler, {@code null} for
                 * default encoding.
                 *
                 * @return the character encoding used by this handler.</member>
        <member name="M:biz.ritter.javapi.util.logging.Handler.getErrorManager">
                 * Gets the error manager used by this handler to report errors during
                 * logging.
                 *
                 * @return the error manager used by this handler.
                 * @throws SecurityException
                 *             if a security manager determines that the caller does not
                 *             have the required permission.</member>
        <member name="M:biz.ritter.javapi.util.logging.Handler.getFilter">
                 * Gets the filter used by this handler.
                 *
                 * @return the filter used by this handler (possibly {@code null}).</member>
        <member name="M:biz.ritter.javapi.util.logging.Handler.getFormatter">
                 * Gets the formatter used by this handler to format the logging messages.
                 *
                 * @return the formatter used by this handler (possibly {@code null}).</member>
        <member name="M:biz.ritter.javapi.util.logging.Handler.getLevel">
                 * Gets the logging level of this handler, records with levels lower than
                 * this value will be dropped.
                 *
                 * @return the logging level of this handler.</member>
        <member name="M:biz.ritter.javapi.util.logging.Handler.isLoggable(biz.ritter.javapi.util.logging.LogRecord)">
                 * Determines whether the supplied log record needs to be logged. The
                 * logging levels will be checked as well as the filter.
                 *
                 * @param record
                 *            the log record to be checked.
                 * @return {@code true} if the supplied log record needs to be logged,
                 *         otherwise {@code false}.</member>
        <member name="M:biz.ritter.javapi.util.logging.Handler.reportError(System.String,biz.ritter.javapi.lang.Exception,System.Int32)">
                 * Reports an error to the error manager associated with this handler,
                 * {@code ErrorManager} is used for that purpose. No security checks are
                 * done, therefore this is compatible with environments where the caller
                 * is non-privileged.
                 *
                 * @param msg
                 *            the error message, may be {@code null}.
                 * @param ex
                 *            the associated exception, may be {@code null}.
                 * @param code
                 *            an {@code ErrorManager} error code.</member>
        <member name="M:biz.ritter.javapi.util.logging.Handler.internalSetEncoding(System.String)">
                 * Sets the character encoding used by this handler. A {@code null} value
                 * indicates the use of the default encoding. This internal method does
                 * not check security.
                 *
                 * @param newEncoding
                 *            the character encoding to set.
                 * @throws UnsupportedEncodingException
                 *             if the specified encoding is not supported by the runtime.</member>
        <member name="M:biz.ritter.javapi.util.logging.Handler.setEncoding(System.String)">
                 * Sets the character encoding used by this handler, {@code null} indicates
                 * a default encoding.
                 *
                 * @param encoding
                 *            the character encoding to set.
                 * @throws SecurityException
                 *             if a security manager determines that the caller does not
                 *             have the required permission.
                 * @throws UnsupportedEncodingException
                 *             if the specified encoding is not supported by the runtime.</member>
        <member name="M:biz.ritter.javapi.util.logging.Handler.setErrorManager(biz.ritter.javapi.util.logging.ErrorManager)">
                 * Sets the error manager for this handler.
                 *
                 * @param em
                 *            the error manager to set.
                 * @throws NullPointerException
                 *             if {@code em} is {@code null}.
                 * @throws SecurityException
                 *             if a security manager determines that the caller does not
                 *             have the required permission.</member>
        <member name="M:biz.ritter.javapi.util.logging.Handler.internalSetFormatter(biz.ritter.javapi.util.logging.Formatter)">
                 * Sets the formatter to be used by this handler. This internal method does
                 * not check security.
                 *
                 * @param newFormatter
                 *            the formatter to set.</member>
        <member name="M:biz.ritter.javapi.util.logging.Handler.setFormatter(biz.ritter.javapi.util.logging.Formatter)">
                 * Sets the formatter to be used by this handler.
                 *
                 * @param newFormatter
                 *            the formatter to set.
                 * @throws NullPointerException
                 *             if {@code newFormatter} is {@code null}.
                 * @throws SecurityException
                 *             if a security manager determines that the caller does not
                 *             have the required permission.</member>
        <!--FIXME: Invalid documentation markup was found for member T:biz.ritter.javapi.util.logging.Level-->
        <member name="F:biz.ritter.javapi.util.logging.Level.OFF">
                 * The OFF level provides no logging messages.</member>
        <member name="F:biz.ritter.javapi.util.logging.Level.SEVERE">
                 * The SEVERE level provides severe failure messages.</member>
        <member name="F:biz.ritter.javapi.util.logging.Level.WARNING">
                 * The WARNING level provides warnings.</member>
        <member name="F:biz.ritter.javapi.util.logging.Level.INFO">
                 * The INFO level provides informative messages.</member>
        <member name="F:biz.ritter.javapi.util.logging.Level.CONFIG">
                 * The CONFIG level provides static configuration messages.</member>
        <member name="F:biz.ritter.javapi.util.logging.Level.FINE">
                 * The FINE level provides tracing messages.</member>
        <member name="F:biz.ritter.javapi.util.logging.Level.FINER">
                 * The FINER level provides more detailed tracing messages.</member>
        <member name="F:biz.ritter.javapi.util.logging.Level.FINEST">
                 * The FINEST level provides highly detailed tracing messages.</member>
        <member name="F:biz.ritter.javapi.util.logging.Level.ALL">
                 * The ALL level provides all logging messages.</member>
        <member name="M:biz.ritter.javapi.util.logging.Level.parse(System.String)">
                 * Parses a level name into a {@code Level} object.
                 *
                 * @param name
                 *            the name of the desired {@code level}, which cannot be
                 *            {@code null}.
                 * @return the level with the specified name.
                 * @throws NullPointerException
                 *             if {@code name} is {@code null}.
                 * @throws IllegalArgumentException
                 *             if {@code name} is not valid.</member>
        <member name="F:biz.ritter.javapi.util.logging.Level.name">
                 * The name of this Level.
                 *
                 * @serial</member>
        <member name="F:biz.ritter.javapi.util.logging.Level.value">
                 * The integer value indicating the level.
                 *
                 * @serial</member>
        <member name="F:biz.ritter.javapi.util.logging.Level.resourceBundleName">
                 * The name of the resource bundle used to localize the level name.
                 *
                 * @serial</member>
        <member name="F:biz.ritter.javapi.util.logging.Level.rb">
                 * The resource bundle associated with this level, used to localize the
                 * level name.</member>
        <member name="M:biz.ritter.javapi.util.logging.Level.#ctor(System.String,System.Int32)">
                 * Constructs an instance of {@code Level} taking the supplied name and
                 * level value.
                 *
                 * @param name
                 *            the name of the level.
                 * @param level
                 *            an integer value indicating the level.
                 * @throws NullPointerException
                 *             if {@code name} is {@code null}.</member>
        <member name="M:biz.ritter.javapi.util.logging.Level.#ctor(System.String,System.Int32,System.String)">
                 * Constructs an instance of {@code Level} taking the supplied name, level
                 * value and resource bundle name.
                 *
                 * @param name
                 *            the name of the level.
                 * @param level
                 *            an integer value indicating the level.
                 * @param resourceBundleName
                 *            the name of the resource bundle to use.
                 * @throws NullPointerException
                 *             if {@code name} is {@code null}.</member>
        <member name="M:biz.ritter.javapi.util.logging.Level.getName">
                 * Gets the name of this level.
                 *
                 * @return this level's name.</member>
        <member name="M:biz.ritter.javapi.util.logging.Level.getResourceBundleName">
                 * Gets the name of the resource bundle associated with this level.
                 *
                 * @return the name of this level's resource bundle.</member>
        <member name="M:biz.ritter.javapi.util.logging.Level.intValue">
                 * Gets the integer value indicating this level.
                 *
                 * @return this level's integer value.</member>
        <member name="M:biz.ritter.javapi.util.logging.Level.readResolve">
                 * Serialization helper method to maintain singletons and add any new
                 * levels.
                 *
                 * @return the resolved instance.</member>
        <member name="M:biz.ritter.javapi.util.logging.Level.readObject(biz.ritter.javapi.io.ObjectInputStream)">
                 * Serialization helper to setup transient resource bundle instance.
                 *
                 * @param in
                 *            the input stream to read the instance data from.
                 * @throws IOException
                 *             if an IO error occurs.
                 * @throws ClassNotFoundException
                 *             if a class is not found.</member>
        <member name="M:biz.ritter.javapi.util.logging.Level.getLocalizedName">
                 * Gets the localized name of this level. The default locale is used. If no
                 * resource bundle is associated with this level then the original level
                 * name is returned.
                 *
                 * @return the localized name of this level.</member>
        <member name="M:biz.ritter.javapi.util.logging.Level.Equals(System.Object)">
                 * Compares two {@code Level} objects for equality. They are considered to
                 * be equal if they have the same level value.
                 *
                 * @param o
                 *            the other object to compare this level to.
                 * @return {@code true} if this object equals to the supplied object,
                 *         {@code false} otherwise.</member>
        <member name="M:biz.ritter.javapi.util.logging.Level.GetHashCode">
                 * Returns the hash code of this {@code Level} object.
                 *
                 * @return this level's hash code.</member>
        <member name="M:biz.ritter.javapi.util.logging.Level.ToString">
                 * Returns the string representation of this {@code Level} object. In
                 * this case, it is the level's name.
                 *
                 * @return the string representation of this level.</member>
        <!--FIXME: Invalid documentation markup was found for member T:biz.ritter.javapi.util.logging.Logger-->
        <member name="F:biz.ritter.javapi.util.logging.Logger.global">
                     * When converting the concurrent collection of handlers to an array, we
                     * always pass a zero-length array to avoid size miscalculations. Passing
                     * properly-sized arrays is non-atomic, and risks a null element in the
                     * result.
                     *
                     * @deprecated Use Logger.getLogger(Logger.GLOBAL_LOGGER_NAME) instead.</member>
        <member name="F:biz.ritter.javapi.util.logging.Logger.GLOBAL_LOGGER_NAME">
                     * @since 1.6</member>
        <member name="F:biz.ritter.javapi.util.logging.Logger.parent">
             The parent logger of this logger.</member>
        <member name="F:biz.ritter.javapi.util.logging.Logger.notifyParentHandlers">
             True to notify the parent's handlers of each log message.</member>
        <member name="F:biz.ritter.javapi.util.logging.Logger.levelObjVal">
             The logging level of this logger, or null if none is set.</member>
        <member name="F:biz.ritter.javapi.util.logging.Logger.children">
                 * Child loggers. Should be accessed only while synchronized on {@code
                 * LogManager.getLogManager()}.</member>
        <member name="F:biz.ritter.javapi.util.logging.Logger.filter">
             The filter.</member>
        <member name="F:biz.ritter.javapi.util.logging.Logger.isNamed">
                     * Indicates whether this logger is named. Only {@link #getAnonymousLogger
                     * anonymous loggers} are unnamed.</member>
        <member name="F:biz.ritter.javapi.util.logging.Logger.levelIntVal">
                     * The effective logging level of this logger. In order of preference this
                     * is the first applicable of:
                     * <ol>
                     * <li>the int value of this logger's {@link #levelObjVal}</li>
                     * <li>the logging level of the parent</li>
                     * <li>the default level ({@link Level#INFO})</li>
                     * </ol></member>
        <member name="F:biz.ritter.javapi.util.logging.Logger.resourceBundleName">
                     * The resource bundle used to localize logging messages. If null, no
                     * localization will be performed.</member>
        <member name="F:biz.ritter.javapi.util.logging.Logger.resourceBundle">
             The loaded resource bundle according to the specified name.</member>
        <member name="F:biz.ritter.javapi.util.logging.Logger.handlers">
                 * The handlers attached to this logger. Eagerly initialized and
                 * concurrently modified.</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.util.logging.Logger.#ctor(System.String,System.String)-->
        <member name="M:biz.ritter.javapi.util.logging.Logger.initResourceBundle(System.String)">
                 * Initializes this logger's resource bundle.
                 *
                 * @throws IllegalArgumentException if this logger's resource bundle already
                 *      exists and is different from the resource bundle specified.</member>
        <member name="M:biz.ritter.javapi.util.logging.Logger.internalIsLoggable(biz.ritter.javapi.util.logging.Level)">
                     * This method is for compatibility. Tests written to the reference
                     * implementation API imply that the isLoggable() method is not called
                     * directly. This behavior is important because subclass may override
                     * isLoggable() method, so that affect the result of log methods.</member>
        <member name="M:biz.ritter.javapi.util.logging.Logger.isLoggable(biz.ritter.javapi.util.logging.Level)">
                     * Determines whether this logger will actually log messages of the
                     * specified level. The effective level used to do the determination may be
                     * inherited from its parent. The default level is {@code Level.INFO}.
                     *
                     * @param l
                     *            the level to check.
                     * @return {@code true} if this logger will actually log this level,
                     *         otherwise {@code false}.</member>
        <member name="M:biz.ritter.javapi.util.logging.Logger.severe(System.String)">
                     * Logs a message of level {@code Level.SEVERE}; the message is transmitted
                     * to all subscribed handlers.
                     *
                     * @param msg
                     *            the message to log.</member>
        <member name="M:biz.ritter.javapi.util.logging.Logger.warning(System.String)">
                     * Logs a message of level {@code Level.WARNING}; the message is
                     * transmitted to all subscribed handlers.
                     *
                     * @param msg
                     *            the message to log.</member>
        <member name="M:biz.ritter.javapi.util.logging.Logger.info(System.String)">
                     * Logs a message of level {@code Level.INFO}; the message is transmitted
                     * to all subscribed handlers.
                     *
                     * @param msg
                     *            the message to log.</member>
        <member name="M:biz.ritter.javapi.util.logging.Logger.config(System.String)">
                     * Logs a message of level {@code Level.CONFIG}; the message is transmitted
                     * to all subscribed handlers.
                     *
                     * @param msg
                     *            the message to log.</member>
        <member name="M:biz.ritter.javapi.util.logging.Logger.fine(System.String)">
                     * Logs a message of level {@code Level.FINE}; the message is transmitted
                     * to all subscribed handlers.
                     *
                     * @param msg
                     *            the message to log.</member>
        <member name="M:biz.ritter.javapi.util.logging.Logger.finer(System.String)">
                     * Logs a message of level {@code Level.FINER}; the message is transmitted
                     * to all subscribed handlers.
                     *
                     * @param msg
                     *            the message to log.</member>
        <member name="M:biz.ritter.javapi.util.logging.Logger.finest(System.String)">
                     * Logs a message of level {@code Level.FINEST}; the message is transmitted
                     * to all subscribed handlers.
                     *
                     * @param msg
                     *            the message to log.</member>
        <member name="M:biz.ritter.javapi.util.logging.Logger.log(biz.ritter.javapi.util.logging.Level,System.String)">
                     * Logs a message of the specified level. The message is transmitted to all
                     * subscribed handlers.
                     *
                     * @param logLevel
                     *            the level of the specified message.
                     * @param msg
                     *            the message to log.</member>
        <member name="M:biz.ritter.javapi.util.logging.Logger.setResourceBundle(biz.ritter.javapi.util.logging.LogRecord)">
                     * Sets the resource bundle and its name for a supplied LogRecord object.
                     * This method first tries to use this logger's resource bundle if any,
                     * otherwise try to inherit from this logger's parent, recursively up the
                     * namespace.</member>
        <member name="M:biz.ritter.javapi.util.logging.Logger.log(biz.ritter.javapi.util.logging.LogRecord)">
                     * Logs a given log record. Only records with a logging level that is equal
                     * or greater than this logger's level will be submitted to this logger's
                     * handlers for logging. If {@code getUseParentHandlers()} returns {@code
                     * true}, the log record will also be submitted to the handlers of this
                     * logger's parent, potentially recursively up the namespace.
                     * <p>
                     * Since all other log methods call this method to actually perform the
                     * logging action, subclasses of this class can override this method to
                     * catch all logging activities.
                     * </p>
                     *
                     * @param record
                     *            the log record to be logged.</member>
        <member name="M:biz.ritter.javapi.util.logging.Logger.getHandlers">
                     * Gets all the handlers associated with this logger.
                     *
                     * @return an array of all the handlers associated with this logger.</member>
        <member name="M:biz.ritter.javapi.util.logging.Logger.getUseParentHandlers">
                     * Gets the flag which indicates whether to use the handlers of this
                     * logger's parent to publish incoming log records, potentially recursively
                     * up the namespace.
                     *
                     * @return {@code true} if set to use parent's handlers, {@code false}
                     *         otherwise.</member>
        <member name="M:biz.ritter.javapi.util.logging.Logger.getLogger(System.String)">
                     * Gets a named logger. The returned logger may already exist or may be
                     * newly created. In the latter case, its level will be set to the
                     * configured level according to the {@code LogManager}'s properties.
                     *
                     * @param name
                     *            the name of the logger to get, cannot be {@code null}.
                     * @return a named logger.
                     * @throws MissingResourceException
                     *             If the specified resource bundle can not be loaded.</member>
        <member name="M:biz.ritter.javapi.util.logging.Logger.setLevel(biz.ritter.javapi.util.logging.Level)">
                     * Sets the logging level for this logger. A {@code null} level indicates
                     * that this logger will inherit its parent's level.
                     *
                     * @param newLevel
                     *            the logging level to set.
                     * @throws SecurityException
                     *             if a security manager determines that the caller does not
                     *             have the required permission.</member>
        <member name="M:biz.ritter.javapi.util.logging.Logger.getName">
                     * Gets the name of this logger, {@code null} for anonymous loggers.
                     *
                     * @return the name of this logger.</member>
        <member name="M:biz.ritter.javapi.util.logging.Logger.setManager(biz.ritter.javapi.util.logging.LogManager)">
                 * Set the logger's manager and initializes its configuration from the
                 * manager's properties.</member>
        <member name="M:biz.ritter.javapi.util.logging.Logger.getParent">
                 * Gets the nearest parent of this logger in the namespace, a {@code null}
                 * value will be returned if called on the root logger.
                 *
                 * @return the parent of this logger in the namespace.</member>
        <member name="M:biz.ritter.javapi.util.logging.Logger.setParent(biz.ritter.javapi.util.logging.Logger)">
                 * Sets the parent of this logger in the namespace. This method should be
                 * used by the {@code LogManager} object only.
                 *
                 * @param parent
                 *            the parent logger to set.
                 * @throws SecurityException
                 *             if a security manager determines that the caller does not
                 *             have the required permission.</member>
        <!--FIXME: Invalid documentation markup was found for member T:biz.ritter.javapi.util.logging.LogManager-->
        <member name="F:biz.ritter.javapi.util.logging.LogManager.props">
             The configuration properties</member>
        <member name="F:biz.ritter.javapi.util.logging.LogManager.listeners">
             the property change listener</member>
        <member name="F:biz.ritter.javapi.util.logging.LogManager.manager">
             The singleton instance.</member>
        <member name="M:biz.ritter.javapi.util.logging.LogManager.getLogManager">
                     * Get the global {@code LogManager} instance.
                     *
                     * @return the global {@code LogManager} instance</member>
        <member name="M:biz.ritter.javapi.util.logging.LogManager.#ctor">
                     * Default constructor. This is not public because there should be only one
                     * {@code LogManager} instance, which can be get by
                     * {@code LogManager.getLogManager()}. This is protected so that
                     * application can subclass the object.</member>
        <member name="M:biz.ritter.javapi.util.logging.LogManager.readConfiguration">
                     * Re-initialize the properties and configuration. The initialization
                     * process is same as the {@code LogManager} instantiation.
                     * <p>
                     * Notice : No {@code PropertyChangeEvent} are fired.
                     * </p>
                     *
                     * @throws IOException
                     *             if any IO related problems happened.
                     * @throws SecurityException
                     *             if security manager exists and it determines that caller does
                     *             not have the required permissions to perform this action.</member>
        <member name="M:biz.ritter.javapi.util.logging.LogManager.readConfiguration(biz.ritter.javapi.io.InputStream)">
                     * Re-initialize the properties and configuration from the given
                     * {@code InputStream}
                     * <p>
                     * Notice : No {@code PropertyChangeEvent} are fired.
                     * </p>
                     *
                     * @param ins
                     *            the input stream
                     * @throws IOException
                     *             if any IO related problems happened.
                     * @throws SecurityException
                     *             if security manager exists and it determines that caller does
                     *             not have the required permissions to perform this action.</member>
        <member name="M:biz.ritter.javapi.util.logging.LogManager.checkAccess">
                     * Check that the caller has {@code LoggingPermission("control")} so
                     * that it is trusted to modify the configuration for logging framework. If
                     * the check passes, just return, otherwise {@code SecurityException}
                     * will be thrown.
                     *
                     * @throws SecurityException
                     *             if there is a security manager in operation and the invoker
                     *             of this method does not have the required security permission
                     *             {@code LoggingPermission("control")}</member>
        <member name="M:biz.ritter.javapi.util.logging.LogManager.getOrCreate(System.String,System.String)">
             * Returns a named logger associated with the supplied resource bundle.
             *
             * @param resourceBundleName the resource bundle to associate, or null for
             *      no associated resource bundle.</member>
        <member name="M:biz.ritter.javapi.util.logging.LogManager.getLogger(System.String)">
                     * Get the logger with the given name.
                     *
                     * @param name
                     *            name of logger
                     * @return logger with given name, or {@code null} if nothing is found.</member>
        <member name="M:biz.ritter.javapi.util.logging.LogManager.getProperty(System.String)">
                     * Get the value of property with given name.
                     *
                     * @param name
                     *            the name of property
                     * @return the value of property</member>
        <member name="M:biz.ritter.javapi.util.logging.LogManager.reset">
                     * Reset configuration.
                     * <p>
                     * All handlers are closed and removed from any named loggers. All loggers'
                     * level is set to null, except the root logger's level is set to
                     * {@code Level.INFO}.
                     * </p>
                     *
                     * @throws SecurityException
                     *             if security manager exists and it determines that caller does
                     *             not have the required permissions to perform this action.</member>
        <member name="M:biz.ritter.javapi.util.logging.LogManager.getLoggerNames">
                     * Get a {@code Enumeration} of all registered logger names.
                     *
                     * @return enumeration of registered logger names</member>
        <member name="M:biz.ritter.javapi.util.logging.LogManager.setLevelRecursively(biz.ritter.javapi.util.logging.Logger,biz.ritter.javapi.util.logging.Level)">
                     * Sets the level on {@code logger} to {@code newLevel}. Any child loggers
                     * currently inheriting their level from {@code logger} will be updated
                     * recursively.
                     *
                     * @param newLevel the new minimum logging threshold. If null, the logger's
                     *      parent level will be used; or {@code Level.INFO} for loggers with no
                     *      parent.</member>
        <member name="M:biz.ritter.javapi.util.logging.LogManager.addLogger(biz.ritter.javapi.util.logging.Logger)">
                     * Add a given logger into the hierarchical namespace. The
                     * {@code Logger.addLogger()} factory methods call this method to add newly
                     * created Logger. This returns false if a logger with the given name has
                     * existed in the namespace
                     * <p>
                     * Note that the {@code LogManager} may only retain weak references to
                     * registered loggers. In order to prevent {@code Logger} objects from being
                     * unexpectedly garbage collected it is necessary for <i>applications</i>
                     * to maintain references to them.
                     * </p>
                     *
                     * @param logger
                     *            the logger to be added.
                     * @return true if the given logger is added into the namespace
                     *         successfully, false if the given logger exists in the namespace.</member>
        <member name="M:biz.ritter.javapi.util.logging.LogManager.setParent(biz.ritter.javapi.util.logging.Logger,biz.ritter.javapi.util.logging.Logger)">
                     * Sets the parent of this logger in the namespace. Callers must first
                     * {@link #checkAccess() check security}.
                     *
                     * @param newParent
                     *            the parent logger to set.</member>
        <!--FIXME: Invalid documentation markup was found for member T:biz.ritter.javapi.util.logging.LogRecord-->
        <member name="F:biz.ritter.javapi.util.logging.LogRecord.level">
                 * The logging level.
                 *
                 * @serial</member>
        <member name="F:biz.ritter.javapi.util.logging.LogRecord.sequenceNumber">
                 * The sequence number.
                 *
                 * @serial</member>
        <member name="F:biz.ritter.javapi.util.logging.LogRecord.sourceClassName">
                 * The name of the class that issued the logging call.
                 *
                 * @serial</member>
        <member name="F:biz.ritter.javapi.util.logging.LogRecord.sourceMethodName">
                 * The name of the method that issued the logging call.
                 *
                 * @serial</member>
        <member name="F:biz.ritter.javapi.util.logging.LogRecord.message">
                 * The original message text.
                 *
                 * @serial</member>
        <member name="F:biz.ritter.javapi.util.logging.LogRecord.threadID">
                 * The ID of the thread that issued the logging call.
                 *
                 * @serial</member>
        <member name="F:biz.ritter.javapi.util.logging.LogRecord.millis">
                 * The time that the event occurred, in milliseconds since 1970.
                 *
                 * @serial</member>
        <member name="F:biz.ritter.javapi.util.logging.LogRecord.thrown">
                 * The associated {@code Throwable} object if any.
                 *
                 * @serial</member>
        <member name="F:biz.ritter.javapi.util.logging.LogRecord.loggerName">
                 * The name of the source logger.
                 *
                 * @serial</member>
        <member name="F:biz.ritter.javapi.util.logging.LogRecord.resourceBundleName">
                 * The name of the resource bundle used to localize the log message.
                 *
                 * @serial</member>
        <member name="M:biz.ritter.javapi.util.logging.LogRecord.#ctor(biz.ritter.javapi.util.logging.Level,System.String)">
                 * Constructs a {@code LogRecord} object using the supplied the logging
                 * level and message. The millis property is set to the current time. The
                 * sequence property is set to a new unique value, allocated in increasing
                 * order within the virtual machine. The thread ID is set to a unique value
                 * for the current thread. All other properties are set to {@code null}.
                 *
                 * @param level
                 *            the logging level, may not be {@code null}.
                 * @param msg
                 *            the raw message.
                 * @throws NullPointerException
                 *             if {@code level} is {@code null}.</member>
        <member name="M:biz.ritter.javapi.util.logging.LogRecord.getLevel">
                 * Gets the logging level.
                 *
                 * @return the logging level.</member>
        <member name="M:biz.ritter.javapi.util.logging.LogRecord.setLevel(biz.ritter.javapi.util.logging.Level)">
                 * Sets the logging level.
                 *
                 * @param level
                 *            the level to set.
                 * @throws NullPointerException
                 *             if {@code level} is {@code null}.</member>
        <member name="M:biz.ritter.javapi.util.logging.LogRecord.getLoggerName">
                 * Gets the name of the logger.
                 *
                 * @return the logger name.</member>
        <member name="M:biz.ritter.javapi.util.logging.LogRecord.setLoggerName(System.String)">
                 * Sets the name of the logger.
                 *
                 * @param loggerName
                 *            the logger name to set.</member>
        <member name="M:biz.ritter.javapi.util.logging.LogRecord.getMessage">
                 * Gets the raw message.
                 *
                 * @return the raw message, may be {@code null}.</member>
        <member name="M:biz.ritter.javapi.util.logging.LogRecord.setMessage(System.String)">
                 * Sets the raw message. When this record is formatted by a logger that has
                 * a localization resource bundle that contains an entry for {@code message},
                 * then the raw message is replaced with its localized version.
                 *
                 * @param message
                 *            the raw message to set, may be {@code null}.</member>
        <member name="M:biz.ritter.javapi.util.logging.LogRecord.getMillis">
                 * Gets the time when this event occurred, in milliseconds since 1970.
                 *
                 * @return the time when this event occurred, in milliseconds since 1970.</member>
        <member name="M:biz.ritter.javapi.util.logging.LogRecord.setMillis(System.Int64)">
                 * Sets the time when this event occurred, in milliseconds since 1970.
                 *
                 * @param millis
                 *            the time when this event occurred, in milliseconds since 1970.</member>
        <member name="M:biz.ritter.javapi.util.logging.LogRecord.getParameters">
                 * Gets the parameters.
                 *
                 * @return the array of parameters or {@code null} if there are no
                 *         parameters.</member>
        <member name="M:biz.ritter.javapi.util.logging.LogRecord.setParameters(System.Object[])">
                 * Sets the parameters.
                 *
                 * @param parameters
                 *            the array of parameters to set, may be {@code null}.</member>
        <member name="M:biz.ritter.javapi.util.logging.LogRecord.getResourceBundle">
                 * Gets the resource bundle used to localize the raw message during
                 * formatting.
                 *
                 * @return the associated resource bundle, {@code null} if none is
                 *         available or the message is not localizable.</member>
        <member name="M:biz.ritter.javapi.util.logging.LogRecord.setResourceBundle(biz.ritter.javapi.util.ResourceBundle)">
                 * Sets the resource bundle used to localize the raw message during
                 * formatting.
                 *
                 * @param resourceBundle
                 *            the resource bundle to set, may be {@code null}.</member>
        <member name="M:biz.ritter.javapi.util.logging.LogRecord.getResourceBundleName">
                 * Gets the name of the resource bundle.
                 *
                 * @return the name of the resource bundle, {@code null} if none is
                 *         available or the message is not localizable.</member>
        <member name="M:biz.ritter.javapi.util.logging.LogRecord.setResourceBundleName(System.String)">
                 * Sets the name of the resource bundle.
                 *
                 * @param resourceBundleName
                 *            the name of the resource bundle to set.</member>
        <member name="M:biz.ritter.javapi.util.logging.LogRecord.getSequenceNumber">
                 * Gets the sequence number.
                 *
                 * @return the sequence number.</member>
        <member name="M:biz.ritter.javapi.util.logging.LogRecord.setSequenceNumber(System.Int64)">
                 * Sets the sequence number. It is usually not necessary to call this method
                 * to change the sequence number because the number is allocated when this
                 * instance is constructed.
                 *
                 * @param sequenceNumber
                 *            the sequence number to set.</member>
        <member name="M:biz.ritter.javapi.util.logging.LogRecord.getSourceClassName">
                 * Gets the name of the class that is the source of this log record. This
                 * information can be changed, may be {@code null} and is untrusted.
                 *
                 * @return the name of the source class of this log record (possiblity {@code null})</member>
        <member name="M:biz.ritter.javapi.util.logging.LogRecord.setSourceClassName(System.String)">
                 * Sets the name of the class that is the source of this log record.
                 *
                 * @param sourceClassName
                 *            the name of the source class of this log record, may be
                 *            {@code null}.</member>
        <member name="M:biz.ritter.javapi.util.logging.LogRecord.getSourceMethodName">
                 * Gets the name of the method that is the source of this log record.
                 *
                 * @return the name of the source method of this log record.</member>
        <member name="M:biz.ritter.javapi.util.logging.LogRecord.setSourceMethodName(System.String)">
                 * Sets the name of the method that is the source of this log record.
                 *
                 * @param sourceMethodName
                 *            the name of the source method of this log record, may be
                 *            {@code null}.</member>
        <member name="M:biz.ritter.javapi.util.logging.LogRecord.getThreadID">
                 * Gets a unique ID of the thread originating the log record. Every thread
                 * becomes a different ID.
                 * <p>
                 * Notice : the ID doesn't necessary map the OS thread ID
                 * </p>
                 *
                 * @return the ID of the thread originating this log record.</member>
        <member name="M:biz.ritter.javapi.util.logging.LogRecord.setThreadID(System.Int32)">
                 * Sets the ID of the thread originating this log record.
                 *
                 * @param threadID
                 *            the new ID of the thread originating this log record.</member>
        <member name="M:biz.ritter.javapi.util.logging.LogRecord.getThrown">
                 * Gets the {@code Throwable} object associated with this log record.
                 *
                 * @return the {@code Throwable} object associated with this log record.</member>
        <member name="M:biz.ritter.javapi.util.logging.LogRecord.setThrown(biz.ritter.javapi.lang.Throwable)">
                 * Sets the {@code Throwable} object associated with this log record.
                 *
                 * @param thrown
                 *            the new {@code Throwable} object to associate with this log
                 *            record.</member>
        <member name="T:biz.ritter.javapi.util.logging.ErrorManager">
             * An error reporting facility for {@link Handler} implementations to record any
             * error that may happen during logging. {@code Handlers} should report errors
             * to an {@code ErrorManager}, instead of throwing exceptions, which would
             * interfere with the log issuer's execution.</member>
        <member name="F:biz.ritter.javapi.util.logging.ErrorManager.GENERIC_FAILURE">
                 * The error code indicating a failure that does not fit in any of the
                 * specific types of failures that follow.</member>
        <member name="F:biz.ritter.javapi.util.logging.ErrorManager.WRITE_FAILURE">
                 * The error code indicating a failure when writing to an output stream.</member>
        <member name="F:biz.ritter.javapi.util.logging.ErrorManager.FLUSH_FAILURE">
                 * The error code indicating a failure when flushing an output stream.</member>
        <member name="F:biz.ritter.javapi.util.logging.ErrorManager.CLOSE_FAILURE">
                 * The error code indicating a failure when closing an output stream.</member>
        <member name="F:biz.ritter.javapi.util.logging.ErrorManager.OPEN_FAILURE">
                 * The error code indicating a failure when opening an output stream.</member>
        <member name="F:biz.ritter.javapi.util.logging.ErrorManager.FORMAT_FAILURE">
                 * The error code indicating a failure when formatting the error messages.</member>
        <member name="F:biz.ritter.javapi.util.logging.ErrorManager.called">
                 * An indicator for determining if the error manager has been called at
                 * least once before.</member>
        <member name="M:biz.ritter.javapi.util.logging.ErrorManager.#ctor">
                 * Constructs an instance of {@code ErrorManager}.</member>
        <member name="M:biz.ritter.javapi.util.logging.ErrorManager.error(System.String,biz.ritter.javapi.lang.Exception,System.Int32)">
                 * Reports an error using the given message, exception and error code. This
                 * implementation will write out the message to {@link System#err} on the
                 * first call and all subsequent calls are ignored. A subclass of this class
                 * should override this method.
                 *
                 * @param message
                 *            the error message, which may be {@code null}.
                 * @param exception
                 *            the exception associated with the error, which may be
                 *            {@code null}.
                 * @param errorCode
                 *            the error code that identifies the type of error; see the
                 *            constant fields of this class for possible values.</member>
        <!--FIXME: Invalid documentation markup was found for member T:biz.ritter.javapi.util.logging.StreamHandler-->
        <member name="M:biz.ritter.javapi.util.logging.StreamHandler.#ctor">
                 * Constructs a {@code StreamHandler} object. The new stream handler
                 * does not have an associated output stream.</member>
        <member name="M:biz.ritter.javapi.util.logging.StreamHandler.#ctor(biz.ritter.javapi.io.OutputStream)">
                 * Constructs a {@code StreamHandler} object with the supplied output
                 * stream. Default properties are read.
                 *
                 * @param os
                 *            the output stream this handler writes to.</member>
        <member name="M:biz.ritter.javapi.util.logging.StreamHandler.#ctor(System.String,System.String,System.String,System.String)">
                 * Constructs a {@code StreamHandler} object. The specified default values
                 * will be used if the corresponding properties are not found in the log
                 * manager's properties.</member>
        <member name="M:biz.ritter.javapi.util.logging.StreamHandler.#ctor(biz.ritter.javapi.io.OutputStream,biz.ritter.javapi.util.logging.Formatter)">
                 * Constructs a {@code StreamHandler} object with the supplied output stream
                 * and formatter.
                 *
                 * @param os
                 *            the output stream this handler writes to.
                 * @param formatter
                 *            the formatter this handler uses to format the output.
                 * @throws NullPointerException
                 *             if {@code os} or {@code formatter} is {@code null}.</member>
        <member name="M:biz.ritter.javapi.util.logging.StreamHandler.internalSetOutputStream(biz.ritter.javapi.io.OutputStream)">
                 * Sets the output stream this handler writes to. Note it does nothing else.
                 *
                 * @param newOs
                 *            the new output stream</member>
        <member name="M:biz.ritter.javapi.util.logging.StreamHandler.setOutputStream(biz.ritter.javapi.io.OutputStream)">
                 * Sets the output stream this handler writes to. If there's an existing
                 * output stream, the tail string of the associated formatter will be
                 * written to it. Then it will be flushed, closed and replaced with
                 * {@code os}.
                 *
                 * @param os
                 *            the new output stream.
                 * @throws SecurityException
                 *             if a security manager determines that the caller does not
                 *             have the required permission.
                 * @throws NullPointerException
                 *             if {@code os} is {@code null}.</member>
        <member name="M:biz.ritter.javapi.util.logging.StreamHandler.setEncoding(System.String)">
                 * Sets the character encoding used by this handler. A {@code null} value
                 * indicates that the default encoding should be used.
                 *
                 * @param encoding
                 *            the character encoding to set.
                 * @throws SecurityException
                 *             if a security manager determines that the caller does not
                 *             have the required permission.
                 * @throws UnsupportedEncodingException
                 *             if the specified encoding is not supported by the runtime.</member>
        <member name="M:biz.ritter.javapi.util.logging.StreamHandler.close(System.Boolean)">
                 * Closes this handler, but the underlying output stream is only closed if
                 * {@code closeStream} is {@code true}. Security is not checked.
                 *
                 * @param closeStream
                 *            whether to close the underlying output stream.</member>
        <member name="M:biz.ritter.javapi.util.logging.StreamHandler.close">
                 * Closes this handler. The tail string of the formatter associated with
                 * this handler is written out. A flush operation and a subsequent close
                 * operation is then performed upon the output stream. Client applications
                 * should not use a handler after closing it.
                 *
                 * @throws SecurityException
                 *             if a security manager determines that the caller does not
                 *             have the required permission.</member>
        <member name="M:biz.ritter.javapi.util.logging.StreamHandler.flush">
                 * Flushes any buffered output.</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.util.logging.StreamHandler.publish(biz.ritter.javapi.util.logging.LogRecord)-->
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.util.logging.StreamHandler.isLoggable(biz.ritter.javapi.util.logging.LogRecord)-->
        <member name="T:biz.ritter.javapi.util.logging.Formatter">
             * {@code Formatter} objects are used to format {@link LogRecord} objects into a
             * string representation. Head and tail strings are sometimes used to wrap a set
             * of records. The {@code getHead} and {@code getTail} methods are used for this
             * purpose.</member>
        <member name="M:biz.ritter.javapi.util.logging.Formatter.#ctor">
                 * Constructs a {@code Formatter} object.</member>
        <member name="M:biz.ritter.javapi.util.logging.Formatter.format(biz.ritter.javapi.util.logging.LogRecord)">
                 * Converts a {@link LogRecord} object into a string representation. The
                 * resulted string is usually localized and includes the message field of
                 * the record.
                 *
                 * @param r
                 *            the log record to be formatted into a string.
                 * @return the formatted string.</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.util.logging.Formatter.formatMessage(biz.ritter.javapi.util.logging.LogRecord)-->
        <member name="M:biz.ritter.javapi.util.logging.Formatter.getHead(biz.ritter.javapi.util.logging.Handler)">
                 * Gets the head string used to wrap a set of log records. This base class
                 * always returns an empty string.
                 *
                 * @param h
                 *            the target handler.
                 * @return the head string used to wrap a set of log records, empty in this
                 *         implementation.</member>
        <member name="M:biz.ritter.javapi.util.logging.Formatter.getTail(biz.ritter.javapi.util.logging.Handler)">
                 * Gets the tail string used to wrap a set of log records. This base class
                 * always returns the empty string.
                 *
                 * @param h
                 *            the target handler.
                 * @return the tail string used to wrap a set of log records, empty in this
                 *         implementation.</member>
        <member name="T:biz.ritter.javapi.text.MessageFormat">
            <summary>
            Dummy Class to compile JavApi
            </summary>
        </member>
        <!--FIXME: Invalid documentation markup was found for member T:biz.ritter.javapi.util.logging.ConsoleHandler-->
        <member name="M:biz.ritter.javapi.util.logging.ConsoleHandler.#ctor">
                 * Constructs a {@code ConsoleHandler} object.</member>
        <member name="M:biz.ritter.javapi.util.logging.ConsoleHandler.close">
                 * Closes this handler. The {@code System.err} is flushed but not closed.</member>
        <member name="M:biz.ritter.javapi.util.logging.ConsoleHandler.publish(biz.ritter.javapi.util.logging.LogRecord)">
                 * Logs a record if necessary. A flush operation will be done.
                 *
                 * @param record
                 *            the log record to be logged.</member>
        <member name="T:biz.ritter.javapi.util.logging.SimpleFormatter">
             * {@code SimpleFormatter} can be used to print a summary of the information
             * contained in a {@code LogRecord} object in a human readable format.</member>
        <member name="M:biz.ritter.javapi.util.logging.SimpleFormatter.#ctor">
                 * Constructs a new {@code SimpleFormatter}.</member>
        <member name="M:biz.ritter.javapi.util.logging.SimpleFormatter.format(biz.ritter.javapi.util.logging.LogRecord)">
                 * Converts a {@link LogRecord} object into a human readable string
                 * representation.
                 *
                 * @param r
                 *            the log record to be formatted into a string.
                 * @return the formatted string.</member>
        <!--FIXME: Invalid documentation markup was found for member T:biz.ritter.javapi.util.logging.MemoryHandler-->
        <member name="M:biz.ritter.javapi.util.logging.MemoryHandler.#ctor">
                 * Default constructor, construct and init a {@code MemoryHandler} using
                 * {@code LogManager} properties or default values.
                 *
                 * @throws RuntimeException
                 *             if property value are invalid and no default value could be
                 *             used.</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.util.logging.MemoryHandler.#ctor(biz.ritter.javapi.util.logging.Handler,System.Int32,biz.ritter.javapi.util.logging.Level)-->
        <member name="M:biz.ritter.javapi.util.logging.MemoryHandler.close">
                 * Close this handler and target handler, free all associated resources.
                 *
                 * @throws SecurityException
                 *             if security manager exists and it determines that caller does
                 *             not have the required permissions to control this handler.</member>
        <member name="M:biz.ritter.javapi.util.logging.MemoryHandler.flush">
                 * Call target handler to flush any buffered output. Note that this doesn't
                 * cause this {@code MemoryHandler} to push.</member>
        <member name="M:biz.ritter.javapi.util.logging.MemoryHandler.publish(biz.ritter.javapi.util.logging.LogRecord)">
                 * Put a given {@code LogRecord} into internal buffer. If given record is
                 * not loggable, just return. Otherwise it is stored in the buffer.
                 * Furthermore if the record's level is not less than the push level, the
                 * push action is triggered to output all the buffered records to the target
                 * handler, and the target handler will publish them.
                 *
                 * @param record
                 *            the log record</member>
        <member name="M:biz.ritter.javapi.util.logging.MemoryHandler.getPushLevel">
                 * Return the push level.
                 *
                 * @return the push level</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.util.logging.MemoryHandler.isLoggable(biz.ritter.javapi.util.logging.LogRecord)-->
        <member name="M:biz.ritter.javapi.util.logging.MemoryHandler.push">
                 * Triggers a push action to output all buffered records to the target handler,
                 * and the target handler will publish them. Then the buffer is cleared.</member>
        <member name="M:biz.ritter.javapi.util.logging.MemoryHandler.setPushLevel(biz.ritter.javapi.util.logging.Level)">
                 * Set the push level. The push level is used to check the push action
                 * triggering. When a new {@code LogRecord} is put into the internal
                 * buffer and its level is not less than the push level, the push action
                 * will be triggered. Note that set new push level won't trigger push action.
                 *
                 * @param newLevel
                 *                 the new level to set.
                 * @throws SecurityException
                 *                 if security manager exists and it determines that caller
                 *                 does not have the required permissions to control this handler.</member>
        <!--FIXME: Invalid documentation markup was found for member T:biz.ritter.javapi.util.logging.FileHandler-->
        <member name="M:biz.ritter.javapi.util.logging.FileHandler.#ctor">
                 * Construct a {@code FileHandler} using {@code LogManager} properties or
                 * their default value.
                 *
                 * @throws IOException
                 *             if any I/O error occurs.
                 * @throws SecurityException
                 *             if a security manager exists and it determines that the
                 *             caller does not have the required permissions to control this
                 *             handler; required permissions include
                 *             {@code LogPermission("control")},
                 *             {@code FilePermission("write")} etc.</member>
        <member name="M:biz.ritter.javapi.util.logging.FileHandler.parseFileName(System.Int32)">
                 * Transform the pattern to the valid file name, replacing any patterns, and
                 * applying generation and uniqueID if present
                 *
                 * @param gen
                 *            generation of this file
                 * @return transformed filename ready for use</member>
        <member name="M:biz.ritter.javapi.util.logging.FileHandler.#ctor(System.String)">
                 * Constructs a new {@code FileHandler}. The given name pattern is used as
                 * output filename, the file limit is set to zero (no limit), the file count
                 * is set to one; the remaining configuration is done using
                 * {@code LogManager} properties or their default values. This handler
                 * writes to only one file with no size limit.
                 *
                 * @param pattern
                 *            the name pattern for the output file.
                 * @throws IOException
                 *             if any I/O error occurs.
                 * @throws SecurityException
                 *             if a security manager exists and it determines that the
                 *             caller does not have the required permissions to control this
                 *             handler; required permissions include
                 *             {@code LogPermission("control")},
                 *             {@code FilePermission("write")} etc.
                 * @throws IllegalArgumentException
                 *             if the pattern is empty.
                 * @throws NullPointerException
                 *             if the pattern is {@code null}.</member>
        <member name="M:biz.ritter.javapi.util.logging.FileHandler.#ctor(System.String,System.Boolean)">
                 * Construct a new {@code FileHandler}. The given name pattern is used as
                 * output filename, the file limit is set to zero (no limit), the file count
                 * is initialized to one and the value of {@code append} becomes the new
                 * instance's append mode. The remaining configuration is done using
                 * {@code LogManager} properties. This handler writes to only one file
                 * with no size limit.
                 *
                 * @param pattern
                 *            the name pattern for the output file.
                 * @param append
                 *            the append mode.
                 * @throws IOException
                 *             if any I/O error occurs.
                 * @throws SecurityException
                 *             if a security manager exists and it determines that the
                 *             caller does not have the required permissions to control this
                 *             handler; required permissions include
                 *             {@code LogPermission("control")},
                 *             {@code FilePermission("write")} etc.
                 * @throws IllegalArgumentException
                 *             if {@code pattern} is empty.
                 * @throws NullPointerException
                 *             if {@code pattern} is {@code null}.</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.util.logging.FileHandler.#ctor(System.String,System.Int32,System.Int32)-->
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.util.logging.FileHandler.#ctor(System.String,System.Int32,System.Int32,System.Boolean)-->
        <member name="M:biz.ritter.javapi.util.logging.FileHandler.close">
                 * Flushes and closes all opened files.
                 *
                 * @throws SecurityException
                 *             if a security manager exists and it determines that the
                 *             caller does not have the required permissions to control this
                 *             handler; required permissions include
                 *             {@code LogPermission("control")},
                 *             {@code FilePermission("write")} etc.</member>
        <member name="M:biz.ritter.javapi.util.logging.FileHandler.publish(biz.ritter.javapi.util.logging.LogRecord)">
                 * Publish a {@code LogRecord}.
                 *
                 * @param record
                 *            the log record to publish.</member>
        <member name="T:biz.ritter.javapi.util.logging.MeasureOutputStream">
                 * This output stream uses the decorator pattern to add measurement features
                 * to OutputStream which can detect the total size(in bytes) of output, the
                 * initial size can be set.</member>
        <member name="F:biz.ritter.javapi.nio.channels.FileChannel.delegateInstance">
            <summary>
                <para>
            Creating FileChannel instance over input stream returning an unique FileChannel object
            associated with this FileInputStream. The position in this Channel qill be equal to the
            number of bytes readed from file. Reading bytes from FileInputStream will also
            increment the position in this Channel. Also changing position in Channel changing
            position fin FileInputStream.
            </para>
                <para>
            Working over same delegate System.IO.FileStream object is the way to make this true.
            </para>
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.nio.channels.FileChannel.releaseFileLock(System.Int64,System.Int64)">
            <summary>
            Internal method calling from FileLock instance to release lock.
            </summary>
            <param name="pos">Position.</param>
            <param name="length">Length.</param>
        </member>
        <member name="T:biz.ritter.javapi.util.logging.LoggingPermission">
             * The permission required to control the logging when run with a
             * {@code SecurityManager}.</member>
        <member name="M:biz.ritter.javapi.util.logging.LoggingPermission.#ctor(System.String,System.String)">
                 * Constructs a {@code LoggingPermission} object required to control the
                 * logging. The {@code SecurityManager} checks the permissions.
                 * <p>
                 * {@code LoggingPermission} objects are created by the security policy code
                 * and depends on the security policy file, therefore programmers shouldn't
                 * normally use them directly.
                 * </p>
                 *
                 * @param name
                 *            currently must be "control".
                 * @param actions
                 *            currently must be either {@code null} or the empty string.
                 * @throws IllegalArgumentException
                 *             if name null or different from {@code string} control.</member>
        <member name="T:biz.ritter.javapi.util.logging.LoggingMXBean">
             * {@code LoggingMXBean} is the management interface for the logging sub-system.
             * <p>
             * The ObjectName for identifying the {@code LoggingMXBean} in a bean server is
             * {@link LogManager#LOGGING_MXBEAN_NAME}.
             * </p>
             *
             * @since 1.5</member>
        <member name="M:biz.ritter.javapi.util.logging.LoggingMXBean.getLoggerLevel(System.String)">
                 * Gets the string value of the logging level of a logger. An empty string
                 * is returned when the logger's level is defined by its parent. A
                 * {@code null} is returned if the specified logger does not exist.
                 *
                 * @param loggerName
                 *            the name of the logger lookup.
                 * @return a {@code String} if the logger is found, otherwise {@code null}.
                 * @see Level#getName()</member>
        <member name="M:biz.ritter.javapi.util.logging.LoggingMXBean.getLoggerNames">
                 * Gets a list of all currently registered logger names. This is performed
                 * using the {@link LogManager#getLoggerNames()}.
                 *
                 * @return a list of logger names.</member>
        <member name="M:biz.ritter.javapi.util.logging.LoggingMXBean.getParentLoggerName(System.String)">
                 * Gets the name of the parent logger of a logger. If the logger doesn't
                 * exist then {@code null} is returned. If the logger is the root logger,
                 * then an empty {@code String} is returned.
                 *
                 * @param loggerName
                 *            the name of the logger to lookup.
                 * @return a {@code String} if the logger was found, otherwise {@code null}.</member>
        <member name="M:biz.ritter.javapi.util.logging.LoggingMXBean.setLoggerLevel(System.String,System.String)">
                 * Sets the log level of a logger. LevelName set to {@code null} means the
                 * level is inherited from the nearest non-null ancestor.
                 *
                 * @param loggerName
                 *            the name of the logger to set the level on, which must not be
                 *            {@code null}.
                 * @param levelName
                 *            the level to set on the logger, which may be {@code null}.
                 * @throws IllegalArgumentException
                 *             if {@code loggerName} is not a registered logger or if
                 *             {@code levelName} is not null and not valid.
                 * @throws SecurityException
                 *             if a security manager exists and the caller doesn't have
                 *             LoggingPermission("control").
                 * @see Level#parse(String)</member>
        <member name="T:biz.ritter.javapi.util.InputMismatchException">
             * An {@code InputMismatchException} is thrown by a scanner to indicate that the
             * next token does not match or is out of range for the type specified in the
             * pattern.
             *
             * @see Scanner
             * @see java.lang.RuntimeException</member>
        <member name="M:biz.ritter.javapi.util.InputMismatchException.#ctor">
                 * Constructs a new {@code InputMismatchException} with the current stack
                 * trace filled in.</member>
        <member name="M:biz.ritter.javapi.util.InputMismatchException.#ctor(System.String)">
                 * Constructs a new {@code InputMismatchException} with the stack trace
                 * filled in and {@code msg} as its error message.
                 *
                 * @param msg
                 *           the specified error message.</member>
        <member name="T:biz.ritter.javapi.util.InvalidPropertiesFormatException">
             * An {@code InvalidPropertiesFormatException} is thrown if loading the XML
             * document defining the properties does not follow the {@code Properties}
             * specification.
             *
             * Even though this Exception inherits the {@code Serializable} interface, it is not
             * serializable. The methods used for serialization throw
             * {@code NotSerializableException}s.</member>
        <member name="M:biz.ritter.javapi.util.InvalidPropertiesFormatException.#ctor(System.String)">
                 * Constructs a new {@code InvalidPropertiesFormatException} with the
                 * current stack trace and message filled in.
                 *
                 * @param m
                 *           the detail message for the exception.</member>
        <member name="M:biz.ritter.javapi.util.InvalidPropertiesFormatException.#ctor(biz.ritter.javapi.lang.Throwable)">
                 * Constructs a new {@code InvalidPropertiesFormatException} with the cause
                 * for the Exception.
                 *
                 * @param c
                 *           the cause for the Exception.</member>
        <member name="T:biz.ritter.javapi.util.ServiceConfigurationError">
             * An Error that can be thrown when something wrong occurs in loading a service
             * provider.</member>
        <member name="M:biz.ritter.javapi.util.ServiceConfigurationError.#ctor(System.String)">
                 * The constructor
                 *
                 * @param msg
                 *            the message of this error</member>
        <member name="M:biz.ritter.javapi.util.ServiceConfigurationError.#ctor(System.String,biz.ritter.javapi.lang.Throwable)">
                 * The constructor
                 *
                 * @param msg
                 *            the message of this error
                 * @param cause
                 *            the cause of this error</member>
        <member name="T:biz.ritter.javapi.util.UnknownFormatFlagsException">
             * An {@code UnknownFormatFlagsException} will be thrown if there is
             * an unknown flag.
             *
             * @see java.lang.RuntimeException</member>
        <member name="M:biz.ritter.javapi.util.UnknownFormatFlagsException.#ctor(System.String)">
                 * Constructs a new {@code UnknownFormatFlagsException} with the specified
                 * flags.
                 *
                 * @param f
                 *           the specified flags.</member>
        <member name="M:biz.ritter.javapi.util.UnknownFormatFlagsException.getFlags">
                 * Returns the flags associated with the exception.
                 *
                 * @return the flags associated with the exception.</member>
        <member name="M:biz.ritter.javapi.util.UnknownFormatFlagsException.getMessage">
                 * Returns the message associated with the exception.
                 *
                 * @return the message associated with the exception.</member>
        <member name="T:biz.ritter.javapi.security.SecureRandomSpi">
             * {@code SecureRandomSpi} is the <i>Service Provider Interface</i> (<b>SPI</b>) definition
             * for {@link SecureRandom}.
             *
             * @see SecureRandom</member>
        <member name="M:biz.ritter.javapi.security.SecureRandomSpi.engineSetSeed(System.Byte[])">
                 * Reseeds this {@code SecureRandomSpi} instance with the specified {@code
                 * seed}. The seed of this {@code SecureRandomSpi} instance is supplemented,
                 * not replaced.
                 *
                 * @param seed
                 *            the new seed.</member>
        <member name="M:biz.ritter.javapi.security.SecureRandomSpi.engineNextBytes(System.Byte[])">
                 * Generates and stores random bytes in the given {@code byte[]} for each
                 * array element.
                 *
                 * @param bytes
                 *            the {@code byte[]} to be filled with random bytes.</member>
        <member name="M:biz.ritter.javapi.security.SecureRandomSpi.engineGenerateSeed(System.Int32)">
                 * Generates and returns the specified number of seed bytes, computed using
                 * the seed generation algorithm used by this {@code SecureRandomSpi}.
                 *
                 * @param numBytes
                 *            the number of seed bytes.
                 * @return the seed bytes</member>
        <member name="M:biz.ritter.javapi.dotnet.lang.ConsoleErrorPrintStream.println(System.String)">
            <summary>
            Override the PrintStream implementation with Console specific implementation
            </summary>
            <param name="output">
            </param>
        </member>
        <member name="T:biz.ritter.javapi.dotnet.lang.ConsoleOutputPrintStream">
                 * Default OutputStream to write something on Console.</member>
        <member name="M:biz.ritter.javapi.dotnet.lang.ConsoleOutputPrintStream.println(System.String)">
            <summary>
            Override the PrintStream implementation with Console specific implementation
            </summary>
            <param name="output">
            </param>
        </member>
        <member name="M:biz.ritter.javapi.dotnet.lang.Operator.shiftRightUnsignet(System.Int64,System.Int32)">
            <summary>
            CSharp has no &gt;&gt;&gt; operator. This method do same thing!
            </summary>
            <param name="value">value for shift operation</param>
            <param name="shift">shift operator</param>
            <returns>shifted value</returns>
        </member>
        <member name="M:biz.ritter.javapi.dotnet.lang.Operator.shiftRightUnsignet(System.UInt64,System.Int32)">
            <summary>
            CSharp has no &gt;&gt;&gt; operator. This method do same thing!
            </summary>
            <param name="value">value for shift operation</param>
            <param name="shift">shift operator</param>
            <returns>shifted value</returns>
        </member>
        <member name="M:biz.ritter.javapi.dotnet.lang.Operator.shiftRightUnsignet(System.Int32,System.Int32)">
            <summary>
            CSharp has no &gt;&gt;&gt; operator. This method do same thing!
            </summary>
            <param name="value">value for shift operation</param>
            <param name="shift">shift operator</param>
            <returns>shifted value</returns>
        </member>
        <member name="M:biz.ritter.javapi.lang.Runtime.exit(System.Int32)">
            <summary>
            Stop the current process.
            </summary>
            <param name="rc">return code for parent process</param>
        </member>
        <member name="M:biz.ritter.javapi.lang.Runtime.addShutdownHook(biz.ritter.javapi.lang.Thread)">
            <summary>
            Add an thread to running on exit the CLR.
            </summary>
            <param name="hook">
            </param>
        </member>
        <member name="T:biz.ritter.javapi.nio.BufferFactory">
            <summary>
            Provide factory service of buffer classes.
            <p>
            Since all buffer impl classes are package private (except DirectByteBuffer),
            this factory is the only entrance to access buffer functions from outside of
            the impl package.
            </p></summary>
            <remarks>Class is ported from Apache Harmony project.</remarks>
        </member>
        <member name="M:biz.ritter.javapi.nio.BufferFactory.newByteBuffer(System.Byte[])">
            <summary>
            Returns a new byte buffer based on the specified byte array.
            @param array
            The byte array
            @return A new byte buffer based on the specified byte array.
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.nio.BufferFactory.newByteBuffer(System.Int32)">
            <summary>
            Returns a new array based byte buffer with the specified capacity.
            @param capacity
            The capacity of the new buffer
            @return A new array based byte buffer with the specified capacity.
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.nio.BufferFactory.newCharBuffer(System.Char[])">
            <summary>
            Returns a new char buffer based on the specified char array.
            @param array
            The char array
            @return A new char buffer based on the specified char array.
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.nio.BufferFactory.newCharBuffer(biz.ritter.javapi.lang.CharSequence)">
            <summary>
            Returns a new readonly char buffer based on the specified char sequence.
            @param chseq
            The char sequence
            @return A new readonly char buffer based on the specified char sequence.
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.nio.BufferFactory.newCharBuffer(System.Int32)">
            <summary>
            Returns a new array based char buffer with the specified capacity.
            @param capacity
            The capacity of the new buffer
            @return A new array based char buffer with the specified capacity.
            </summary>
        </member>
        <member name="T:biz.ritter.javapi.nio.BufferOverflowException">
            <summary>
            A <code>BufferOverflowException</code> is thrown when elements are written
            to a buffer but there is not enough remaining space in the buffer.
            </summary>
            <remarks>Class is ported from Apache Harmony project.</remarks>
        </member>
        <member name="M:biz.ritter.javapi.nio.BufferOverflowException.#ctor">
            <summary>
            Constructs a <code>BufferOverflowException</code>.
            </summary>
        </member>
        <member name="T:biz.ritter.javapi.nio.BufferUnderflowException">
                 * A <code>BufferUnderflowException</code> is thrown when elements are read
                 * from a buffer but there are not enough remaining elements in the buffer.</member>
        <member name="M:biz.ritter.javapi.nio.BufferUnderflowException.#ctor">
                     * Constructs a <code>BufferUnderflowException</code>.</member>
        <member name="T:biz.ritter.javapi.nio.ByteBuffer">
                 * A buffer for bytes.
                 * <p />
                 * A byte buffer can be created in either one of the following ways:
                 * <ul>
                 * <li>{@link #allocate(int) Allocate} a new byte array and create a buffer
                 * based on it;</li>
                 * <li>{@link #allocateDirect(int) Allocate} a memory block and create a direct
                 * buffer based on it;</li>
                 * <li>{@link #wrap(byte[]) Wrap} an existing byte array to create a new
                 * buffer.</li>
                 * </ul>
                 *
                 <remarks>Class is ported from Apache Harmony project.</remarks></member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.nio.ByteBuffer.allocate(System.Int32)-->
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapi.nio.ByteBuffer.wrap(System.Byte[])-->
        <member name="M:biz.ritter.javapi.nio.ByteBuffer.wrap(System.Byte[],System.Int32,System.Int32)">
                     * Creates a new byte buffer by wrapping the given byte array.
                     * <p />
                     * The new buffer's position will be {@code start}, limit will be
                     * {@code start + len}, capacity will be the length of the array.
                     *
                     * @param array
                     *            the byte array which the new buffer will be based on.
                     * @param start
                     *            the start index, must not be negative and not greater than
                     *            {@code array.length}.
                     * @param len
                     *            the length, must not be negative and not greater than
                     *            {@code array.length - start}.
                     * @return the created byte buffer.
                     * @exception IndexOutOfBoundsException
                     *                if either {@code start} or {@code len} is invalid.</member>
        <member name="F:biz.ritter.javapi.nio.ByteBuffer.orderJ">
                     * The byte order of this buffer, default is {@code BIG_ENDIAN}.</member>
        <member name="M:biz.ritter.javapi.nio.ByteBuffer.#ctor(System.Int32)">
                     * Constructs a {@code ByteBuffer} with given capacity.
                     *
                     * @param capacity
                     *            the capacity of the buffer.</member>
        <member name="M:biz.ritter.javapi.nio.ByteBuffer.array">
                     * Returns the byte array which this buffer is based on, if there is one.
                     *
                     * @return the byte array which this buffer is based on.
                     * @exception ReadOnlyBufferException
                     *                if this buffer is based on a read-only array.
                     * @exception UnsupportedOperationException
                     *                if this buffer is not based on an array.</member>
        <member name="M:biz.ritter.javapi.nio.ByteBuffer.arrayOffset">
                     * Returns the offset of the byte array which this buffer is based on, if
                     * there is one.
                     * <p />
                     * The offset is the index of the array which corresponds to the zero
                     * position of the buffer.
                     *
                     * @return the offset of the byte array which this buffer is based on.
                     * @exception ReadOnlyBufferException
                     *                if this buffer is based on a read-only array.
                     * @exception UnsupportedOperationException
                     *                if this buffer is not based on an array.</member>
        <member name="M:biz.ritter.javapi.nio.ByteBuffer.asReadOnlyBuffer">
                     * Returns a read-only buffer that shares its content with this buffer.
                     * <p />
                     * The returned buffer is guaranteed to be a new instance, even if this
                     * buffer is read-only itself. The new buffer's position, limit, capacity
                     * and mark are the same as this buffer.
                     * <p />
                     * The new buffer shares its content with this buffer, which means this
                     * buffer's change of content will be visible to the new buffer. The two
                     * buffer's position, limit and mark are independent.
                     *
                     * @return a read-only version of this buffer.</member>
        <member name="M:biz.ritter.javapi.nio.ByteBuffer.compact">
                     * Compacts this byte buffer.
                     * <p />
                     * The remaining bytes will be moved to the head of the
                     * buffer, starting from position zero. Then the position is set to
                     * {@code remaining()}; the limit is set to capacity; the mark is
                     * cleared.
                     *
                     * @return this buffer.
                     * @exception ReadOnlyBufferException
                     *                if no changes may be made to the contents of this buffer.</member>
        <member name="M:biz.ritter.javapi.nio.ByteBuffer.compareTo(biz.ritter.javapi.nio.ByteBuffer)">
                     * Compares the remaining bytes of this buffer to another byte buffer's
                     * remaining bytes.
                     *
                     * @param otherBuffer
                     *            another byte buffer.
                     * @return a negative value if this is less than {@code other}; 0 if this
                     *         equals to {@code other}; a positive value if this is greater
                     *         than {@code other}.
                     * @exception ClassCastException
                     *                if {@code other} is not a byte buffer.</member>
        <member name="M:biz.ritter.javapi.nio.ByteBuffer.duplicate">
                     * Returns a duplicated buffer that shares its content with this buffer.
                     * <p />
                     * The duplicated buffer's position, limit, capacity and mark are the same
                     * as this buffer's. The duplicated buffer's read-only property and byte
                     * order are the same as this buffer's too.
                     * <p />
                     * The new buffer shares its content with this buffer, which means either
                     * buffer's change of content will be visible to the other. The two buffer's
                     * position, limit and mark are independent.
                     *
                     * @return a duplicated buffer that shares its content with this buffer.</member>
        <member name="M:biz.ritter.javapi.nio.ByteBuffer.Equals(System.Object)">
                     * Checks whether this byte buffer is equal to another object.
                     * <p />
                     * If {@code other} is not a byte buffer then {@code false} is returned. Two
                     * byte buffers are equal if and only if their remaining bytes are exactly
                     * the same. Position, limit, capacity and mark are not considered.
                     *
                     * @param other
                     *            the object to compare with this byte buffer.
                     * @return {@code true} if this byte buffer is equal to {@code other},
                     *         {@code false} otherwise.</member>
        <member name="M:biz.ritter.javapi.nio.ByteBuffer.get">
                     * Returns the byte at the current position and increases the position by 1.
                     *
                     * @return the byte at the current position.
                     * @exception BufferUnderflowException
                     *                if the position is equal or greater than limit.</member>
        <member name="M:biz.ritter.javapi.nio.ByteBuffer.get(System.Byte[])">
                     * Reads bytes from the current position into the specified byte array and
                     * increases the position by the number of bytes read.
                     * <p />
                     * Calling this method has the same effect as
                     * {@code get(dest, 0, dest.length)}.
                     *
                     * @param dest
                     *            the destination byte array.
                     * @return this buffer.
                     * @exception BufferUnderflowException
                     *                if {@code dest.length} is greater than {@code remaining()}.</member>
        <member name="M:biz.ritter.javapi.nio.ByteBuffer.get(System.Byte[],System.Int32,System.Int32)">
                     * Reads bytes from the current position into the specified byte array,
                     * starting at the specified offset, and increases the position by the
                     * number of bytes read.
                     *
                     * @param dest
                     *            the target byte array.
                     * @param off
                     *            the offset of the byte array, must not be negative and
                     *            not greater than {@code dest.length}.
                     * @param len
                     *            the number of bytes to read, must not be negative and not
                     *            greater than {@code dest.length - off}
                     * @return this buffer.
                     * @exception IndexOutOfBoundsException
                     *                if either {@code off} or {@code len} is invalid.
                     * @exception BufferUnderflowException
                     *                if {@code len} is greater than {@code remaining()}.</member>
        <member name="M:biz.ritter.javapi.nio.ByteBuffer.get(System.Int32)">
                     * Returns the byte at the specified index and does not change the position.
                     *
                     * @param index
                     *            the index, must not be negative and less than limit.
                     * @return the byte at the specified index.
                     * @exception IndexOutOfBoundsException
                     *                if index is invalid.</member>
        <member name="M:biz.ritter.javapi.nio.ByteBuffer.hasArray">
                     * Indicates whether this buffer is based on a byte array and provides
                     * read/write access.
                     *
                     * @return {@code true} if this buffer is based on a byte array and provides
                     *         read/write access, {@code false} otherwise.</member>
        <member name="M:biz.ritter.javapi.nio.ByteBuffer.GetHashCode">
                     * Calculates this buffer's hash code from the remaining chars. The
                     * position, limit, capacity and mark don't affect the hash code.
                     *
                     * @return the hash code calculated from the remaining bytes.</member>
        <member name="M:biz.ritter.javapi.nio.ByteBuffer.order">
                     * Returns the byte order used by this buffer when converting bytes from/to
                     * other primitive types.
                     * <p />
                     * The default byte order of byte buffer is always
                     * {@link ByteOrder#BIG_ENDIAN BIG_ENDIAN}
                     *
                     * @return the byte order used by this buffer when converting bytes from/to
                     *         other primitive types.</member>
        <member name="M:biz.ritter.javapi.nio.ByteBuffer.order(biz.ritter.javapi.nio.ByteOrder)">
                     * Sets the byte order of this buffer.
                     *
                     * @param byteOrder
                     *            the byte order to set. If {@code null} then the order
                     *            will be {@link ByteOrder#LITTLE_ENDIAN LITTLE_ENDIAN}.
                     * @return this buffer.
                     * @see ByteOrder</member>
        <member name="M:biz.ritter.javapi.nio.ByteBuffer.protectedArray">
                     * Child class implements this method to realize {@code array()}.
                     *
                     * @see #array()</member>
        <member name="M:biz.ritter.javapi.nio.ByteBuffer.protectedArrayOffset">
                     * Child class implements this method to realize {@code arrayOffset()}.
                     *
                     * @see #arrayOffset()</member>
        <member name="M:biz.ritter.javapi.nio.ByteBuffer.protectedHasArray">
                     * Child class implements this method to realize {@code hasArray()}.
                     *
                     * @see #hasArray()</member>
        <member name="M:biz.ritter.javapi.nio.ByteBuffer.put(System.Byte)">
                     * Writes the given byte to the current position and increases the position
                     * by 1.
                     *
                     * @param b
                     *            the byte to write.
                     * @return this buffer.
                     * @exception BufferOverflowException
                     *                if position is equal or greater than limit.
                     * @exception ReadOnlyBufferException
                     *                if no changes may be made to the contents of this buffer.</member>
        <member name="M:biz.ritter.javapi.nio.ByteBuffer.put(System.Byte[])">
                     * Writes bytes in the given byte array to the current position and
                     * increases the position by the number of bytes written.
                     * <p />
                     * Calling this method has the same effect as
                     * {@code put(src, 0, src.length)}.
                     *
                     * @param src
                     *            the source byte array.
                     * @return this buffer.
                     * @exception BufferOverflowException
                     *                if {@code remaining()} is less than {@code src.length}.
                     * @exception ReadOnlyBufferException
                     *                if no changes may be made to the contents of this buffer.</member>
        <member name="M:biz.ritter.javapi.nio.ByteBuffer.put(System.Byte[],System.Int32,System.Int32)">
                     * Writes bytes in the given byte array, starting from the specified offset,
                     * to the current position and increases the position by the number of bytes
                     * written.
                     *
                     * @param src
                     *            the source byte array.
                     * @param off
                     *            the offset of byte array, must not be negative and not greater
                     *            than {@code src.length}.
                     * @param len
                     *            the number of bytes to write, must not be negative and not
                     *            greater than {@code src.length - off}.
                     * @return this buffer.
                     * @exception BufferOverflowException
                     *                if {@code remaining()} is less than {@code len}.
                     * @exception IndexOutOfBoundsException
                     *                if either {@code off} or {@code len} is invalid.
                     * @exception ReadOnlyBufferException
                     *                if no changes may be made to the contents of this buffer.</member>
        <member name="M:biz.ritter.javapi.nio.ByteBuffer.put(biz.ritter.javapi.nio.ByteBuffer)">
                     * Writes all the remaining bytes of the {@code src} byte buffer to this
                     * buffer's current position, and increases both buffers' position by the
                     * number of bytes copied.
                     *
                     * @param src
                     *            the source byte buffer.
                     * @return this buffer.
                     * @exception BufferOverflowException
                     *                if {@code src.remaining()} is greater than this buffer's
                     *                {@code remaining()}.
                     * @exception IllegalArgumentException
                     *                if {@code src} is this buffer.
                     * @exception ReadOnlyBufferException
                     *                if no changes may be made to the contents of this buffer.</member>
        <member name="M:biz.ritter.javapi.nio.ByteBuffer.put(System.Int32,System.Byte)">
                     * Write a byte to the specified index of this buffer without changing the
                     * position.
                     *
                     * @param index
                     *            the index, must not be negative and less than the limit.
                     * @param b
                     *            the byte to write.
                     * @return this buffer.
                     * @exception IndexOutOfBoundsException
                     *                if {@code index} is invalid.
                     * @exception ReadOnlyBufferException
                     *                if no changes may be made to the contents of this buffer.</member>
        <member name="M:biz.ritter.javapi.nio.ByteBuffer.slice">
                     * Returns a sliced buffer that shares its content with this buffer.
                     * <p />
                     * The sliced buffer's capacity will be this buffer's
                     * {@code remaining()}, and it's zero position will correspond to
                     * this buffer's current position. The new buffer's position will be 0,
                     * limit will be its capacity, and its mark is cleared. The new buffer's
                     * read-only property and byte order are the same as this buffer's.
                     * <p />
                     * The new buffer shares its content with this buffer, which means either
                     * buffer's change of content will be visible to the other. The two buffer's
                     * position, limit and mark are independent.
                     *
                     * @return a sliced buffer that shares its content with this buffer.</member>
        <member name="M:biz.ritter.javapi.nio.ByteBuffer.ToString">
                     * Returns a string representing the state of this byte buffer.
                     *
                     * @return a string representing the state of this byte buffer.</member>
        <member name="M:biz.ritter.javapi.nio.ByteBuffer.getInt">
                     * Returns the int at the current position and increases the position by 4.
                     * <p />
                     * The 4 bytes starting at the current position are composed into a int
                     * according to the current byte order and returned.
                     *
                     * @return the int at the current position.
                     * @exception BufferUnderflowException
                     *                if the position is greater than {@code limit - 4}.</member>
        <member name="M:biz.ritter.javapi.nio.ByteBuffer.getInt(System.Int32)">
                     * Returns the int at the specified index.
                     * <p />
                     * The 4 bytes starting at the specified index are composed into a int
                     * according to the current byte order and returned. The position is not
                     * changed.
                     *
                     * @param index
                     *            the index, must not be negative and equal or less than
                     *            {@code limit - 4}.
                     * @return the int at the specified index.
                     * @exception IndexOutOfBoundsException
                     *                if {@code index} is invalid.</member>
        <member name="M:biz.ritter.javapi.nio.ByteBuffer.getLong">
                     * Returns the long at the current position and increases the position by 8.
                     * <p />
                     * The 8 bytes starting at the current position are composed into a long
                     * according to the current byte order and returned.
                     *
                     * @return the long at the current position.
                     * @exception BufferUnderflowException
                     *                if the position is greater than {@code limit - 8}.</member>
        <member name="M:biz.ritter.javapi.nio.ByteBuffer.getLong(System.Int32)">
                     * Returns the long at the specified index.
                     * <p />
                     * The 8 bytes starting at the specified index are composed into a long
                     * according to the current byte order and returned. The position is not
                     * changed.
                     *
                     * @param index
                     *            the index, must not be negative and equal or less than
                     *            {@code limit - 8}.
                     * @return the long at the specified index.
                     * @exception IndexOutOfBoundsException
                     *                if {@code index} is invalid.</member>
        <member name="M:biz.ritter.javapi.nio.ByteBuffer.getShort">
                     * Returns the short at the current position and increases the position by 2.
                     * <p />
                     * The 2 bytes starting at the current position are composed into a short
                     * according to the current byte order and returned.
                     *
                     * @return the short at the current position.
                     * @exception BufferUnderflowException
                     *                if the position is greater than {@code limit - 2}.</member>
        <member name="M:biz.ritter.javapi.nio.ByteBuffer.getShort(System.Int32)">
                     * Returns the short at the specified index.
                     * <p />
                     * The 2 bytes starting at the specified index are composed into a short
                     * according to the current byte order and returned. The position is not
                     * changed.
                     *
                     * @param index
                     *            the index, must not be negative and equal or less than
                     *            {@code limit - 2}.
                     * @return the short at the specified index.
                     * @exception IndexOutOfBoundsException
                     *                if {@code index} is invalid.</member>
        <member name="M:biz.ritter.javapi.nio.ByteBuffer.getChar">
                     * Returns the char at the current position and increases the position by 2.
                     * <p />
                     * The 2 bytes starting at the current position are composed into a char
                     * according to the current byte order and returned.
                     *
                     * @return the char at the current position.
                     * @exception BufferUnderflowException
                     *                if the position is greater than {@code limit - 2}.</member>
        <member name="M:biz.ritter.javapi.nio.ByteBuffer.getChar(System.Int32)">
                     * Returns the char at the specified index.
                     * <p />
                     * The 2 bytes starting from the specified index are composed into a char
                     * according to the current byte order and returned. The position is not
                     * changed.
                     *
                     * @param index
                     *            the index, must not be negative and equal or less than
                     *            {@code limit - 2}.
                     * @return the char at the specified index.
                     * @exception IndexOutOfBoundsException
                     *                if {@code index} is invalid.</member>
        <member name="M:biz.ritter.javapi.nio.ByteBuffer.putChar(System.Char)">
                     * Writes the given char to the current position and increases the position
                     * by 2.
                     * <p />
                     * The char is converted to bytes using the current byte order.
                     *
                     * @param value
                     *            the char to write.
                     * @return this buffer.
                     * @exception BufferOverflowException
                     *                if position is greater than {@code limit - 2}.
                     * @exception ReadOnlyBufferException
                     *                if no changes may be made to the contents of this buffer.</member>
        <member name="M:biz.ritter.javapi.nio.ByteBuffer.putChar(System.Int32,System.Char)">
                     * Writes the given char to the specified index of this buffer.
                     * <p />
                     * The char is converted to bytes using the current byte order. The position
                     * is not changed.
                     *
                     * @param index
                     *            the index, must not be negative and equal or less than
                     *            {@code limit - 2}.
                     * @param value
                     *            the char to write.
                     * @return this buffer.
                     * @exception IndexOutOfBoundsException
                     *                if {@code index} is invalid.
                     * @exception ReadOnlyBufferException
                     *                if no changes may be made to the contents of this buffer.</member>
        <member name="M:biz.ritter.javapi.nio.ByteBuffer.putShort(System.Int16)">
                     * Writes the given short to the current position and increases the position
                     * by 2.
                     * <p />
                     * The short is converted to bytes using the current byte order.
                     *
                     * @param value
                     *            the short to write.
                     * @return this buffer.
                     * @exception BufferOverflowException
                     *                if position is greater than {@code limit - 2}.
                     * @exception ReadOnlyBufferException
                     *                if no changes may be made to the contents of this buffer.</member>
        <member name="M:biz.ritter.javapi.nio.ByteBuffer.putShort(System.Int32,System.Int16)">
                     * Writes the given short to the specified index of this buffer.
                     * <p />
                     * The short is converted to bytes using the current byte order. The
                     * position is not changed.
                     *
                     * @param index
                     *            the index, must not be negative and equal or less than
                     *            {@code limit - 2}.
                     * @param value
                     *            the short to write.
                     * @return this buffer.
                     * @exception IndexOutOfBoundsException
                     *                if {@code index} is invalid.
                     * @exception ReadOnlyBufferException
                     *                if no changes may be made to the contents of this buffer.</member>
        <member name="T:biz.ritter.javapi.nio.ByteOrder">
                 * Defines byte order constants.
                 <remarks>Class is ported from Apache Harmony project.</remarks></member>
        <member name="F:biz.ritter.javapi.nio.ByteOrder.BIG_ENDIAN">
                     * This constant represents big endian.</member>
        <member name="F:biz.ritter.javapi.nio.ByteOrder.LITTLE_ENDIAN">
                     * This constant represents little endian.</member>
        <member name="M:biz.ritter.javapi.nio.ByteOrder.nativeOrder">
                     * Returns the current platform byte order.
                     *
                     * @return the byte order object, which is either LITTLE_ENDIAN or
                     *         BIG_ENDIAN.</member>
        <member name="M:biz.ritter.javapi.nio.ByteOrder.ToString">
                     * Returns a string that describes this object.
                     *
                     * @return "BIG_ENDIAN" for {@link #BIG_ENDIAN ByteOrder.BIG_ENDIAN}
                     *         objects, "LITTLE_ENDIAN" for
                     *         {@link #LITTLE_ENDIAN ByteOrder.LITTLE_ENDIAN} objects.</member>
        <member name="T:biz.ritter.javapi.nio.CharArrayBuffer">
                 * CharArrayBuffer, ReadWriteCharArrayBuffer and ReadOnlyCharArrayBuffer compose
                 * the implementation of array based char buffers.
                 * <p>
                 * CharArrayBuffer implements all the shared readonly methods and is extended by
                 * the other two classes.
                 * </p>
                 * <p>
                 * All methods are marked final for runtime performance.
                 * </p>
                 *</member>
        <member name="T:biz.ritter.javapi.nio.CharBuffer">
                 * A buffer of chars.
                 * <p />
                 * A char buffer can be created in either one of the following ways:
                 * <ul>
                 * <li>{@link #allocate(int) Allocate} a new char array and create a buffer
                 * based on it;</li>
                 * <li>{@link #wrap(char[]) Wrap} an existing char array to create a new
                 * buffer;</li>
                 * <li>{@link #wrap(CharSequence) Wrap} an existing char sequence to create a
                 * new buffer;</li>
                 * <li>Use {@link java.nio.ByteBuffer#asCharBuffer() ByteBuffer.asCharBuffer}
                 * to create a char buffer based on a byte buffer.</li>
                 * </ul></member>
        <member name="M:biz.ritter.javapi.nio.CharBuffer.allocate(System.Int32)">
                     * Creates a char buffer based on a newly allocated char array.
                     *
                     * @param capacity
                     *            the capacity of the new buffer.
                     * @return the created char buffer.
                     * @throws IllegalArgumentException
                     *             if {@code capacity} is less than zero.</member>
        <member name="M:biz.ritter.javapi.nio.CharBuffer.wrap(System.Char[])">
                     * Creates a new char buffer by wrapping the given char array.
                     * <p />
                     * Calling this method has the same effect as
                     * {@code wrap(array, 0, array.length)}.
                     *
                     * @param array
                     *            the char array which the new buffer will be based on.
                     * @return the created char buffer.</member>
        <member name="M:biz.ritter.javapi.nio.CharBuffer.wrap(System.Char[],System.Int32,System.Int32)">
                     * Creates a new char buffer by wrapping the given char array.
                     * <p />
                     * The new buffer's position will be {@code start}, limit will be
                     * {@code start + len}, capacity will be the length of the array.
                     *
                     * @param array
                     *            the char array which the new buffer will be based on.
                     * @param start
                     *            the start index, must not be negative and not greater than
                     *            {@code array.length}.
                     * @param len
                     *            the length, must not be negative and not greater than
                     *            {@code array.length - start}.
                     * @return the created char buffer.
                     * @exception IndexOutOfBoundsException
                     *                if either {@code start} or {@code len} is invalid.</member>
        <member name="M:biz.ritter.javapi.nio.CharBuffer.wrap(biz.ritter.javapi.lang.CharSequence)">
                     * Creates a new char buffer by wrapping the given char sequence.
                     * <p />
                     * Calling this method has the same effect as
                     * {@code wrap(chseq, 0, chseq.length())}.
                     *
                     * @param chseq
                     *            the char sequence which the new buffer will be based on.
                     * @return the created char buffer.</member>
        <member name="M:biz.ritter.javapi.nio.CharBuffer.wrap(System.String)">
            <summary>
            Internal helper method to wrap .net String in CharBuffer
            </summary>
            <param name="s">System.String instance</param>
            <returns>CharBuffer instance</returns>
        </member>
        <member name="M:biz.ritter.javapi.nio.CharBuffer.wrap(biz.ritter.javapi.lang.CharSequence,System.Int32,System.Int32)">
                     * Creates a new char buffer by wrapping the given char sequence.
                     * <p />
                     * The new buffer's position will be {@code start}, limit will be
                     * {@code end}, capacity will be the length of the char sequence. The new
                     * buffer is read-only.
                     *
                     * @param chseq
                     *            the char sequence which the new buffer will be based on.
                     * @param start
                     *            the start index, must not be negative and not greater than
                     *            {@code chseq.length()}.
                     * @param end
                     *            the end index, must be no less than {@code start} and no
                     *            greater than {@code chseq.length()}.
                     * @return the created char buffer.
                     * @exception IndexOutOfBoundsException
                     *                if either {@code start} or {@code end} is invalid.</member>
        <member name="M:biz.ritter.javapi.nio.CharBuffer.#ctor(System.Int32)">
                     * Constructs a {@code CharBuffer} with given capacity.
                     *
                     * @param capacity
                     *            the capacity of the buffer.</member>
        <member name="M:biz.ritter.javapi.nio.CharBuffer.array">
                     * Returns the char array which this buffer is based on, if there is one.
                     *
                     * @return the char array which this buffer is based on.
                     * @exception ReadOnlyBufferException
                     *                if this buffer is based on an array, but it is read-only.
                     * @exception UnsupportedOperationException
                     *                if this buffer is not based on an array.</member>
        <member name="M:biz.ritter.javapi.nio.CharBuffer.arrayOffset">
                     * Returns the offset of the char array which this buffer is based on, if
                     * there is one.
                     * <p />
                     * The offset is the index of the array corresponds to the zero position of
                     * the buffer.
                     *
                     * @return the offset of the char array which this buffer is based on.
                     * @exception ReadOnlyBufferException
                     *                if this buffer is based on an array but it is read-only.
                     * @exception UnsupportedOperationException
                     *                if this buffer is not based on an array.</member>
        <member name="M:biz.ritter.javapi.nio.CharBuffer.asReadOnlyBuffer">
                     * Returns a read-only buffer that shares its content with this buffer.
                     * <p />
                     * The returned buffer is guaranteed to be a new instance, even if this
                     * buffer is read-only itself. The new buffer's position, limit, capacity
                     * and mark are the same as this buffer's.
                     * <p />
                     * The new buffer shares its content with this buffer, which means this
                     * buffer's change of content will be visible to the new buffer. The two
                     * buffer's position, limit and mark are independent.
                     *
                     * @return a read-only version of this buffer.</member>
        <member name="M:biz.ritter.javapi.nio.CharBuffer.charAt(System.Int32)">
                     * Returns the character located at the specified index in the buffer. The
                     * index value is referenced from the current buffer position.
                     *
                     * @param index
                     *            the index referenced from the current buffer position. It must
                     *            not be less than zero but less than the value obtained from a
                     *            call to {@code remaining()}.
                     * @return the character located at the specified index (referenced from the
                     *         current position) in the buffer.
                     * @exception IndexOutOfBoundsException
                     *                if the index is invalid.</member>
        <member name="M:biz.ritter.javapi.nio.CharBuffer.compact">
                     * Compacts this char buffer.
                     * <p />
                     * The remaining chars will be moved to the head of the buffer,
                     * starting from position zero. Then the position is set to
                     * {@code remaining()}; the limit is set to capacity; the mark is cleared.
                     *
                     * @return this buffer.
                     * @exception ReadOnlyBufferException
                     *                if no changes may be made to the contents of this buffer.</member>
        <member name="M:biz.ritter.javapi.nio.CharBuffer.compareTo(biz.ritter.javapi.nio.CharBuffer)">
                     * Compare the remaining chars of this buffer to another char
                     * buffer's remaining chars.
                     *
                     * @param otherBuffer
                     *            another char buffer.
                     * @return a negative value if this is less than {@code otherBuffer}; 0 if
                     *         this equals to {@code otherBuffer}; a positive value if this is
                     *         greater than {@code otherBuffer}.
                     * @exception ClassCastException
                     *                if {@code otherBuffer} is not a char buffer.</member>
        <member name="M:biz.ritter.javapi.nio.CharBuffer.duplicate">
                     * Returns a duplicated buffer that shares its content with this buffer.
                     * <p />
                     * The duplicated buffer's initial position, limit, capacity and mark are
                     * the same as this buffer's. The duplicated buffer's read-only property and
                     * byte order are the same as this buffer's, too.
                     * <p />
                     * The new buffer shares its content with this buffer, which means either
                     * buffer's change of content will be visible to the other. The two buffer's
                     * position, limit and mark are independent.
                     *
                     * @return a duplicated buffer that shares its content with this buffer.</member>
        <member name="M:biz.ritter.javapi.nio.CharBuffer.Equals(System.Object)">
                     * Checks whether this char buffer is equal to another object.
                     * <p />
                     * If {@code other} is not a char buffer then {@code false} is returned. Two
                     * char buffers are equal if and only if their remaining chars are exactly
                     * the same. Position, limit, capacity and mark are not considered.
                     *
                     * @param other
                     *            the object to compare with this char buffer.
                     * @return {@code true} if this char buffer is equal to {@code other},
                     *         {@code false} otherwise.</member>
        <member name="M:biz.ritter.javapi.nio.CharBuffer.get">
                     * Returns the char at the current position and increases the position by 1.
                     *
                     * @return the char at the current position.
                     * @exception BufferUnderflowException
                     *                if the position is equal or greater than limit.</member>
        <member name="M:biz.ritter.javapi.nio.CharBuffer.get(System.Char[])">
                     * Reads chars from the current position into the specified char array and
                     * increases the position by the number of chars read.
                     * <p />
                     * Calling this method has the same effect as
                     * {@code get(dest, 0, dest.length)}.
                     *
                     * @param dest
                     *            the destination char array.
                     * @return this buffer.
                     * @exception BufferUnderflowException
                     *                if {@code dest.length} is greater than {@code remaining()}.</member>
        <member name="M:biz.ritter.javapi.nio.CharBuffer.get(System.Char[],System.Int32,System.Int32)">
                     * Reads chars from the current position into the specified char array,
                     * starting from the specified offset, and increases the position by the
                     * number of chars read.
                     *
                     * @param dest
                     *            the target char array.
                     * @param off
                     *            the offset of the char array, must not be negative and not
                     *            greater than {@code dest.length}.
                     * @param len
                     *            The number of chars to read, must be no less than zero and no
                     *            greater than {@code dest.length - off}.
                     * @return this buffer.
                     * @exception IndexOutOfBoundsException
                     *                if either {@code off} or {@code len} is invalid.
                     * @exception BufferUnderflowException
                     *                if {@code len} is greater than {@code remaining()}.</member>
        <member name="M:biz.ritter.javapi.nio.CharBuffer.get(System.Int32)">
                     * Returns a char at the specified index; the position is not changed.
                     *
                     * @param index
                     *            the index, must not be negative and less than limit.
                     * @return a char at the specified index.
                     * @exception IndexOutOfBoundsException
                     *                if index is invalid.</member>
        <member name="M:biz.ritter.javapi.nio.CharBuffer.hasArray">
                     * Indicates whether this buffer is based on a char array and is read/write.
                     *
                     * @return {@code true} if this buffer is based on a byte array and provides
                     *         read/write access, {@code false} otherwise.</member>
        <member name="M:biz.ritter.javapi.nio.CharBuffer.GetHashCode">
                     * Calculates this buffer's hash code from the remaining chars. The
                     * position, limit, capacity and mark don't affect the hash code.
                     *
                     * @return the hash code calculated from the remaining chars.</member>
        <member name="M:biz.ritter.javapi.nio.CharBuffer.length">
                     * Returns the number of remaining chars.
                     *
                     * @return the number of remaining chars.</member>
        <member name="M:biz.ritter.javapi.nio.CharBuffer.order">
                     * Returns the byte order used by this buffer when converting chars from/to
                     * bytes.
                     * <p />
                     * If this buffer is not based on a byte buffer, then this always returns
                     * the platform's native byte order.
                     *
                     * @return the byte order used by this buffer when converting chars from/to
                     *         bytes.</member>
        <member name="M:biz.ritter.javapi.nio.CharBuffer.protectedArray">
                     * Child class implements this method to realize {@code array()}.
                     *
                     * @see #array()</member>
        <member name="M:biz.ritter.javapi.nio.CharBuffer.protectedArrayOffset">
                     * Child class implements this method to realize {@code arrayOffset()}.
                     *
                     * @see #arrayOffset()</member>
        <member name="M:biz.ritter.javapi.nio.CharBuffer.protectedHasArray">
                     * Child class implements this method to realize {@code hasArray()}.
                     *
                     * @see #hasArray()</member>
        <member name="M:biz.ritter.javapi.nio.CharBuffer.put(System.Char)">
                     * Writes the given char to the current position and increases the position
                     * by 1.
                     *
                     * @param c
                     *            the char to write.
                     * @return this buffer.
                     * @exception BufferOverflowException
                     *                if position is equal or greater than limit.
                     * @exception ReadOnlyBufferException
                     *                if no changes may be made to the contents of this buffer.</member>
        <member name="M:biz.ritter.javapi.nio.CharBuffer.put(System.Char[])">
                     * Writes chars from the given char array to the current position and
                     * increases the position by the number of chars written.
                     * <p />
                     * Calling this method has the same effect as
                     * {@code put(src, 0, src.length)}.
                     *
                     * @param src
                     *            the source char array.
                     * @return this buffer.
                     * @exception BufferOverflowException
                     *                if {@code remaining()} is less than {@code src.length}.
                     * @exception ReadOnlyBufferException
                     *                if no changes may be made to the contents of this buffer.</member>
        <member name="M:biz.ritter.javapi.nio.CharBuffer.put(System.Char[],System.Int32,System.Int32)">
                     * Writes chars from the given char array, starting from the specified offset,
                     * to the current position and increases the position by the number of chars
                     * written.
                     *
                     * @param src
                     *            the source char array.
                     * @param off
                     *            the offset of char array, must not be negative and not greater
                     *            than {@code src.length}.
                     * @param len
                     *            the number of chars to write, must be no less than zero and no
                     *            greater than {@code src.length - off}.
                     * @return this buffer.
                     * @exception BufferOverflowException
                     *                if {@code remaining()} is less than {@code len}.
                     * @exception IndexOutOfBoundsException
                     *                if either {@code off} or {@code len} is invalid.
                     * @exception ReadOnlyBufferException
                     *                if no changes may be made to the contents of this buffer.</member>
        <member name="M:biz.ritter.javapi.nio.CharBuffer.put(biz.ritter.javapi.nio.CharBuffer)">
                     * Writes all the remaining chars of the {@code src} char buffer to this
                     * buffer's current position, and increases both buffers' position by the
                     * number of chars copied.
                     *
                     * @param src
                     *            the source char buffer.
                     * @return this buffer.
                     * @exception BufferOverflowException
                     *                if {@code src.remaining()} is greater than this buffer's
                     *                {@code remaining()}.
                     * @exception IllegalArgumentException
                     *                if {@code src} is this buffer.
                     * @exception ReadOnlyBufferException
                     *                if no changes may be made to the contents of this buffer.</member>
        <member name="M:biz.ritter.javapi.nio.CharBuffer.put(System.Int32,System.Char)">
                     * Writes a char to the specified index of this buffer; the position is not
                     * changed.
                     *
                     * @param index
                     *            the index, must be no less than zero and less than the limit.
                     * @param c
                     *            the char to write.
                     * @return this buffer.
                     * @exception IndexOutOfBoundsException
                     *                if index is invalid.
                     * @exception ReadOnlyBufferException
                     *                if no changes may be made to the contents of this buffer.</member>
        <member name="M:biz.ritter.javapi.nio.CharBuffer.put(System.String)">
                     * Writes all chars of the given string to the current position of this
                     * buffer, and increases the position by the length of string.
                     * <p />
                     * Calling this method has the same effect as
                     * {@code put(str, 0, str.length())}.
                     *
                     * @param str
                     *            the string to write.
                     * @return this buffer.
                     * @exception BufferOverflowException
                     *                if {@code remaining()} is less than the length of string.
                     * @exception ReadOnlyBufferException
                     *                if no changes may be made to the contents of this buffer.</member>
        <member name="M:biz.ritter.javapi.nio.CharBuffer.put(System.String,System.Int32,System.Int32)">
                     * Writes chars of the given string to the current position of this buffer,
                     * and increases the position by the number of chars written.
                     *
                     * @param str
                     *            the string to write.
                     * @param start
                     *            the first char to write, must not be negative and not greater
                     *            than {@code str.length()}.
                     * @param end
                     *            the last char to write (excluding), must be less than
                     *            {@code start} and not greater than {@code str.length()}.
                     * @return this buffer.
                     * @exception BufferOverflowException
                     *                if {@code remaining()} is less than {@code end - start}.
                     * @exception IndexOutOfBoundsException
                     *                if either {@code start} or {@code end} is invalid.
                     * @exception ReadOnlyBufferException
                     *                if no changes may be made to the contents of this buffer.</member>
        <member name="M:biz.ritter.javapi.nio.CharBuffer.slice">
                     * Returns a sliced buffer that shares its content with this buffer.
                     * <p />
                     * The sliced buffer's capacity will be this buffer's {@code remaining()},
                     * and its zero position will correspond to this buffer's current position.
                     * The new buffer's position will be 0, limit will be its capacity, and its
                     * mark is cleared. The new buffer's read-only property and byte order are
                     * same as this buffer.
                     * <p />
                     * The new buffer shares its content with this buffer, which means either
                     * buffer's change of content will be visible to the other. The two buffer's
                     * position, limit and mark are independent.
                     *
                     * @return a sliced buffer that shares its content with this buffer.</member>
        <member name="M:biz.ritter.javapi.nio.CharBuffer.subSequence(System.Int32,System.Int32)">
                     * Returns a new char buffer representing a sub-sequence of this buffer's
                     * current remaining content.
                     * <p />
                     * The new buffer's position will be {@code position() + start}, limit will
                     * be {@code position() + end}, capacity will be the same as this buffer.
                     * The new buffer's read-only property and byte order are the same as this
                     * buffer.
                     * <p />
                     * The new buffer shares its content with this buffer, which means either
                     * buffer's change of content will be visible to the other. The two buffer's
                     * position, limit and mark are independent.
                     *
                     * @param start
                     *            the start index of the sub-sequence, referenced from the
                     *            current buffer position. Must not be less than zero and not
                     *            greater than the value obtained from a call to
                     *            {@code remaining()}.
                     * @param end
                     *            the end index of the sub-sequence, referenced from the current
                     *            buffer position. Must not be less than {@code start} and not
                     *            be greater than the value obtained from a call to
                     *            {@code remaining()}.
                     * @return a new char buffer represents a sub-sequence of this buffer's
                     *         current remaining content.
                     * @exception IndexOutOfBoundsException
                     *                if either {@code start} or {@code end} is invalid.</member>
        <member name="M:biz.ritter.javapi.nio.CharBuffer.ToString">
                     * Returns a string representing the current remaining chars of this buffer.
                     *
                     * @return a string representing the current remaining chars of this buffer.</member>
        <member name="M:biz.ritter.javapi.nio.CharBuffer.append(System.Char)">
                     * Writes the given char to the current position and increases the position
                     * by 1.
                     *
                     * @param c
                     *            the char to write.
                     * @return this buffer.
                     * @exception BufferOverflowException
                     *                if position is equal or greater than limit.
                     * @exception ReadOnlyBufferException
                     *                if no changes may be made to the contents of this buffer.</member>
        <member name="M:biz.ritter.javapi.nio.CharBuffer.append(biz.ritter.javapi.lang.CharSequence)">
                     * Writes all chars of the given character sequence {@code csq} to the
                     * current position of this buffer, and increases the position by the length
                     * of the csq.
                     * <p />
                     * Calling this method has the same effect as {@code append(csq.toString())}.
                     * If the {@code CharSequence} is {@code null} the string "null" will be
                     * written to the buffer.
                     *
                     * @param csq
                     *            the {@code CharSequence} to write.
                     * @return this buffer.
                     * @exception BufferOverflowException
                     *                if {@code remaining()} is less than the length of csq.
                     * @exception ReadOnlyBufferException
                     *                if no changes may be made to the contents of this buffer.</member>
        <member name="M:biz.ritter.javapi.nio.CharBuffer.append(biz.ritter.javapi.lang.CharSequence,System.Int32,System.Int32)">
                     * Writes chars of the given {@code CharSequence} to the current position of
                     * this buffer, and increases the position by the number of chars written.
                     *
                     * @param csq
                     *            the {@code CharSequence} to write.
                     * @param start
                     *            the first char to write, must not be negative and not greater
                     *            than {@code csq.length()}.
                     * @param end
                     *            the last char to write (excluding), must be less than
                     *            {@code start} and not greater than {@code csq.length()}.
                     * @return this buffer.
                     * @exception BufferOverflowException
                     *                if {@code remaining()} is less than {@code end - start}.
                     * @exception IndexOutOfBoundsException
                     *                if either {@code start} or {@code end} is invalid.
                     * @exception ReadOnlyBufferException
                     *                if no changes may be made to the contents of this buffer.</member>
        <member name="M:biz.ritter.javapi.nio.CharBuffer.read(biz.ritter.javapi.nio.CharBuffer)">
                     * Reads characters from this buffer and puts them into {@code target}. The
                     * number of chars that are copied is either the number of remaining chars
                     * in this buffer or the number of remaining chars in {@code target},
                     * whichever is smaller.
                     *
                     * @param target
                     *            the target char buffer.
                     * @throws IllegalArgumentException
                     *             if {@code target} is this buffer.
                     * @throws IOException
                     *             if an I/O error occurs.
                     * @throws ReadOnlyBufferException
                     *             if no changes may be made to the contents of {@code target}.
                     * @return the number of chars copied or -1 if there are no chars left to be
                     *         read from this buffer.</member>
        <member name="T:biz.ritter.javapi.nio.CharSequenceAdapter">
                 * This class wraps a char sequence to be a char buffer.
                 * <p>
                 * Implementation notice:
                 * <ul>
                 * <li>Char sequence based buffer is always readonly.</li>
                 * </ul>
                 * </p>
                 *</member>
        <member name="T:biz.ritter.javapi.nio.HeapByteBuffer">
            <summary>
            HeapByteBuffer, ReadWriteHeapByteBuffer and ReadOnlyHeapByteBuffer compose
            the implementation of array based byte buffers.
            <p>
            HeapByteBuffer implements all the shared readonly methods and is extended by
            the other two classes.
            </p><p>
            All methods are marked final for runtime performance.
            </p></summary>
            <remarks>Class is ported from Apache Harmony project.</remarks>
        </member>
        <member name="T:biz.ritter.javapi.nio.InvalidMarkException">
                 * An {@code InvalidMarkException} is thrown when {@code reset()} is called on a
                 * buffer, but no mark has been set previously.
                 <remarks>Class is ported from Apache Harmony project.</remarks></member>
        <member name="M:biz.ritter.javapi.nio.InvalidMarkException.#ctor">
                     * Constructs an {@code InvalidMarkException}.</member>
        <member name="T:biz.ritter.javapi.nio.ReadOnlyBufferException">
                 * A {@code ReadOnlyBufferException} is thrown when some write operation is
                 * called on a read-only buffer.</member>
        <member name="M:biz.ritter.javapi.nio.ReadOnlyBufferException.#ctor">
                     * Constructs a {@code ReadOnlyBufferException}.</member>
        <member name="T:biz.ritter.javapi.nio.ReadWriteHeapByteBuffer">
            <summary>
            HeapByteBuffer, ReadWriteHeapByteBuffer and ReadOnlyHeapByteBuffer compose
            the implementation of array based byte buffers.
            <p>
            ReadWriteHeapByteBuffer extends HeapByteBuffer with all the write methods.
            </p><p>
            This class is marked final for runtime performance.
            </p></summary>
            <remarks>Class is ported from Apache Harmony project.</remarks>
        </member>
        <member name="T:biz.ritter.javapi.nio.ReadWriteCharArrayBuffer">
                 * CharArrayBuffer, ReadWriteCharArrayBuffer and ReadOnlyCharArrayBuffer compose
                 * the implementation of array based char buffers.
                 * <p>
                 * ReadWriteCharArrayBuffer extends CharArrayBuffer with all the write methods.
                 * </p>
                 * <p>
                 * This class is marked final for runtime performance.
                 * </p>
                 *</member>
        <member name="T:biz.ritter.javapi.nio.ReadOnlyHeapByteBuffer">
             * HeapByteBuffer, ReadWriteHeapByteBuffer and ReadOnlyHeapByteBuffer compose
             * the implementation of array based byte buffers.
             * <p>
             * ReadOnlyHeapByteBuffer extends HeapByteBuffer with all the write methods
             * throwing read only exception.
             * </p>
             * <p>
             * This class is marked final for runtime performance.
             * </p>
             *</member>
        <member name="T:biz.ritter.javapi.util.prefs.AbstractPreferences">
             * This abstract class is a partial implementation of the abstract class
             * Preferences, which can be used to simplify {@code Preferences} provider's
             * implementation. This class defines nine abstract SPI methods, which must be
             * implemented by a preference provider.
             *
             * @since 1.4
             * @see Preferences</member>
        <member name="F:biz.ritter.javapi.util.prefs.AbstractPreferences.events">
             the unhandled events collection</member>
        <member name="F:biz.ritter.javapi.util.prefs.AbstractPreferences.dispatcher">
             the event dispatcher thread</member>
        <member name="F:biz.ritter.javapi.util.prefs.AbstractPreferences.userNode">
             true if this node is in user preference hierarchy</member>
        <member name="T:biz.ritter.javapi.util.prefs.AbstractPreferences.Lock">
             Marker class for 'lock' field.</member>
        <member name="F:biz.ritter.javapi.util.prefs.AbstractPreferences.lockJ">
                 * The object used to lock this node.</member>
        <member name="F:biz.ritter.javapi.util.prefs.AbstractPreferences.newNode">
                 * This field is true if this node is created while it doesn't exist in the
                 * backing store. This field's default value is false, and it is checked
                 * when the node creation is completed, and if it is true, the node change
                 * event will be fired for this node's parent.</member>
        <member name="F:biz.ritter.javapi.util.prefs.AbstractPreferences.cachedNode">
             cached child nodes</member>
        <member name="M:biz.ritter.javapi.util.prefs.AbstractPreferences.#ctor(biz.ritter.javapi.util.prefs.AbstractPreferences,System.String)">
                 * Constructs a new {@code AbstractPreferences} instance using the given
                 * parent node and node name.
                 *
                 * @param parent
                 *            the parent node of the new node or {@code null} to indicate
                 *            that the new node is a root node.
                 * @param name
                 *            the name of the new node or an empty string to indicate that
                 *            this node is called "root".
                 * @throws IllegalArgumentException
                 *             if the name contains a slash character or is empty if {@code
                 *             parent} is not {@code null}.</member>
        <member name="M:biz.ritter.javapi.util.prefs.AbstractPreferences.cachedChildren">
                 * Returns an array of all cached child nodes.
                 *
                 * @return the array of cached child nodes.</member>
        <member name="M:biz.ritter.javapi.util.prefs.AbstractPreferences.getChild(System.String)">
                 * Returns the child node with the specified name or {@code null} if it
                 * doesn't exist. Implementers can assume that the name supplied to this
                 * method will be a valid node name string (conforming to the node naming
                 * format) and will not correspond to a node that has been cached or
                 * removed.
                 *
                 * @param name
                 *            the name of the desired child node.
                 * @return the child node with the given name or {@code null} if it doesn't
                 *         exist.
                 * @throws BackingStoreException
                 *             if the backing store is unavailable or causes an operation
                 *             failure.</member>
        <member name="M:biz.ritter.javapi.util.prefs.AbstractPreferences.isRemoved">
                 * Returns whether this node has been removed by invoking the method {@code
                 * removeNode()}.
                 *
                 * @return {@code true}, if this node has been removed, {@code false}
                 *         otherwise.</member>
        <member name="M:biz.ritter.javapi.util.prefs.AbstractPreferences.flushSpi">
                 * Flushes changes of this node to the backing store. This method should
                 * only flush this node and should not include the descendant nodes. Any
                 * implementation that wants to provide functionality to flush all nodes at
                 * once should override the method {@link #flush() flush()}.
                 *
                 * @throws BackingStoreException
                 *             if the backing store is unavailable or causes an operation
                 *             failure.</member>
        <member name="M:biz.ritter.javapi.util.prefs.AbstractPreferences.childrenNamesSpi">
                 * Returns the names of all of the child nodes of this node or an empty
                 * array if this node has no children. The names of cached children are not
                 * required to be returned.
                 *
                 * @return the names of this node's children.
                 * @throws BackingStoreException
                 *             if the backing store is unavailable or causes an operation
                 *             failure.</member>
        <member name="M:biz.ritter.javapi.util.prefs.AbstractPreferences.childSpi(System.String)">
                 * Returns the child preference node with the given name, creating it if it
                 * does not exist. The caller of this method should ensure that the given
                 * name is valid and that this node has not been removed or cached. If the
                 * named node has just been removed, the implementation of this method must
                 * create a new one instead of reactivating the removed one.
                 * <p>
                 * The new creation is not required to be persisted immediately until the
                 * flush method will be invoked.
                 * </p>
                 *
                 * @param name
                 *            the name of the child preference to be returned.
                 * @return the child preference node.</member>
        <member name="M:biz.ritter.javapi.util.prefs.AbstractPreferences.putSpi(System.String,System.String)">
                 * Puts the given key-value pair into this node. Caller of this method
                 * should ensure that both of the given values are valid and that this node
                 * has not been removed.
                 *
                 * @param name
                 *            the given preference key.
                 * @param value
                 *            the given preference value.</member>
        <member name="M:biz.ritter.javapi.util.prefs.AbstractPreferences.getSpi(System.String)">
                 * Gets the preference value mapped to the given key. The caller of this
                 * method should ensure that the given key is valid and that this node has
                 * not been removed. This method should not throw any exceptions but if it
                 * does, the caller will ignore the exception, regarding it as a {@code
                 * null} return value.
                 *
                 * @param key
                 *            the given key to be searched for.
                 * @return the preference value mapped to the given key.</member>
        <member name="M:biz.ritter.javapi.util.prefs.AbstractPreferences.keysSpi">
                 * Returns an array of all preference keys of this node or an empty array if
                 * no preferences have been found. The caller of this method should ensure
                 * that this node has not been removed.
                 *
                 * @return the array of all preference keys.
                 * @throws BackingStoreException
                 *             if the backing store is unavailable or causes an operation
                 *             failure.</member>
        <member name="M:biz.ritter.javapi.util.prefs.AbstractPreferences.removeNodeSpi">
                 * Removes this node from the preference hierarchy tree. The caller of this
                 * method should ensure that this node has no child nodes, which means the
                 * method {@link Preferences#removeNode() Preferences.removeNode()} should
                 * invoke this method multiple-times in bottom-up pattern. The removal is
                 * not required to be persisted until after it is flushed.
                 *
                 * @throws BackingStoreException
                 *             if the backing store is unavailable or causes an operation
                 *             failure.</member>
        <member name="M:biz.ritter.javapi.util.prefs.AbstractPreferences.removeSpi(System.String)">
                 * Removes the preference with the specified key. The caller of this method
                 * should ensure that the given key is valid and that this node has not been
                 * removed.
                 *
                 * @param key
                 *            the key of the preference that is to be removed.</member>
        <member name="M:biz.ritter.javapi.util.prefs.AbstractPreferences.syncSpi">
                 * Synchronizes this node with the backing store. This method should only
                 * synchronize this node and should not include the descendant nodes. An
                 * implementation that wants to provide functionality to synchronize all
                 * nodes at once should override the method {@link #sync() sync()}.
                 *
                 * @throws BackingStoreException
                 *             if the backing store is unavailable or causes an operation
                 *             failure.</member>
        <member name="T:biz.ritter.javapi.util.prefs.XMLParser">
             * Utility class for the Preferences import/export from XML file.</member>
        <member name="M:biz.ritter.javapi.util.prefs.XMLParser.loadFilePrefs(biz.ritter.javapi.io.File)">
                 * Load preferences from file, if cannot load, create a new one.
                 *
                 * @param file
                 *            the XML file to be read
                 * @return Properties instance which indicates the preferences key-value
                 *         pairs</member>
        <!--FIXME: Invalid documentation markup was found for member T:org.w3c.dom.ls.DOMImplementationLS-->
        <!--FIXME: Invalid documentation markup was found for member M:org.w3c.dom.ls.DOMImplementationLS.createLSParser(System.Int16,System.String)-->
        <!--FIXME: Invalid documentation markup was found for member M:org.w3c.dom.ls.DOMImplementationLS.createLSSerializer-->
        <member name="M:org.w3c.dom.ls.DOMImplementationLS.createLSInput">
                     *  Create a new empty input source object where
                     * <code>LSInput.characterStream</code>, <code>LSInput.byteStream</code>
                     * , <code>LSInput.stringData</code><code>LSInput.systemId</code>,
                     * <code>LSInput.publicId</code>, <code>LSInput.baseURI</code>, and
                     * <code>LSInput.encoding</code> are null, and
                     * <code>LSInput.certifiedText</code> is false.
                     * @return  The newly created input object.</member>
        <member name="M:org.w3c.dom.ls.DOMImplementationLS.createLSOutput">
                     *  Create a new empty output destination object where
                     * <code>LSOutput.characterStream</code>,
                     * <code>LSOutput.byteStream</code>, <code>LSOutput.systemId</code>,
                     * <code>LSOutput.encoding</code> are null.
                     * @return  The newly created output object.</member>
        <member name="F:org.w3c.dom.ls.DOMImplementationLSConstants.MODE_SYNCHRONOUS">
                     * Create a synchronous <code>LSParser</code>.</member>
        <member name="F:org.w3c.dom.ls.DOMImplementationLSConstants.MODE_ASYNCHRONOUS">
                     * Create an asynchronous <code>LSParser</code>.</member>
        <!--FIXME: Invalid documentation markup was found for member T:org.w3c.dom.ls.LSException-->
        <member name="F:org.w3c.dom.ls.LSException.PARSE_ERR">
                     *  If an attempt was made to load a document, or an XML Fragment, using
                     * <code>LSParser</code> and the processing has been stopped.</member>
        <member name="F:org.w3c.dom.ls.LSException.SERIALIZE_ERR">
                     *  If an attempt was made to serialize a <code>Node</code> using
                     * <code>LSSerializer</code> and the processing has been stopped.</member>
        <!--FIXME: Invalid documentation markup was found for member T:org.w3c.dom.ls.LSInput-->
        <member name="M:org.w3c.dom.ls.LSInput.getCharacterStream">
                     *  An attribute of a language and binding dependent type that represents
                     * a stream of 16-bit units. The application must encode the stream
                     * using UTF-16 (defined in [Unicode] and in [ISO/IEC 10646]). It is not a requirement to have an XML declaration when
                     * using character streams. If an XML declaration is present, the value
                     * of the encoding attribute will be ignored.</member>
        <member name="M:org.w3c.dom.ls.LSInput.setCharacterStream(biz.ritter.javapi.io.Reader)">
                     *  An attribute of a language and binding dependent type that represents
                     * a stream of 16-bit units. The application must encode the stream
                     * using UTF-16 (defined in [Unicode] and in [ISO/IEC 10646]). It is not a requirement to have an XML declaration when
                     * using character streams. If an XML declaration is present, the value
                     * of the encoding attribute will be ignored.</member>
        <!--FIXME: Invalid documentation markup was found for member M:org.w3c.dom.ls.LSInput.getByteStream-->
        <!--FIXME: Invalid documentation markup was found for member M:org.w3c.dom.ls.LSInput.setByteStream(biz.ritter.javapi.io.InputStream)-->
        <member name="M:org.w3c.dom.ls.LSInput.getStringData">
                     *  String data to parse. If provided, this will always be treated as a
                     * sequence of 16-bit units (UTF-16 encoded characters). It is not a
                     * requirement to have an XML declaration when using
                     * <code>stringData</code>. If an XML declaration is present, the value
                     * of the encoding attribute will be ignored.</member>
        <member name="M:org.w3c.dom.ls.LSInput.setStringData(System.String)">
                     *  String data to parse. If provided, this will always be treated as a
                     * sequence of 16-bit units (UTF-16 encoded characters). It is not a
                     * requirement to have an XML declaration when using
                     * <code>stringData</code>. If an XML declaration is present, the value
                     * of the encoding attribute will be ignored.</member>
        <!--FIXME: Invalid documentation markup was found for member M:org.w3c.dom.ls.LSInput.getSystemId-->
        <!--FIXME: Invalid documentation markup was found for member M:org.w3c.dom.ls.LSInput.setSystemId(System.String)-->
        <member name="M:org.w3c.dom.ls.LSInput.getPublicId">
                     *  The public identifier for this input source. This may be mapped to an
                     * input source using an implementation dependent mechanism (such as
                     * catalogues or other mappings). The public identifier, if specified,
                     * may also be reported as part of the location information when errors
                     * are reported.</member>
        <member name="M:org.w3c.dom.ls.LSInput.setPublicId(System.String)">
                     *  The public identifier for this input source. This may be mapped to an
                     * input source using an implementation dependent mechanism (such as
                     * catalogues or other mappings). The public identifier, if specified,
                     * may also be reported as part of the location information when errors
                     * are reported.</member>
        <!--FIXME: Invalid documentation markup was found for member M:org.w3c.dom.ls.LSInput.getBaseURI-->
        <!--FIXME: Invalid documentation markup was found for member M:org.w3c.dom.ls.LSInput.setBaseURI(System.String)-->
        <!--FIXME: Invalid documentation markup was found for member M:org.w3c.dom.ls.LSInput.getEncoding-->
        <!--FIXME: Invalid documentation markup was found for member M:org.w3c.dom.ls.LSInput.setEncoding(System.String)-->
        <member name="M:org.w3c.dom.ls.LSInput.getCertifiedText">
                     *  If set to true, assume that the input is certified (see section 2.13
                     * in [<a href="http://www.w3.org/TR/2004/REC-xml11-20040204/">XML 1.1</a>]) when
                     * parsing [<a href="http://www.w3.org/TR/2004/REC-xml11-20040204/">XML 1.1</a>].</member>
        <member name="M:org.w3c.dom.ls.LSInput.setCertifiedText(System.Boolean)">
                     *  If set to true, assume that the input is certified (see section 2.13
                     * in [<a href="http://www.w3.org/TR/2004/REC-xml11-20040204/">XML 1.1</a>]) when
                     * parsing [<a href="http://www.w3.org/TR/2004/REC-xml11-20040204/">XML 1.1</a>].</member>
        <!--FIXME: Invalid documentation markup was found for member T:org.w3c.dom.ls.LSLoadEvent-->
        <member name="M:org.w3c.dom.ls.LSLoadEvent.getNewDocument">
                     * The document that finished loading.</member>
        <member name="M:org.w3c.dom.ls.LSLoadEvent.getInput">
                     * The input source that was parsed.</member>
        <!--FIXME: Invalid documentation markup was found for member T:org.w3c.dom.ls.LSOutput-->
        <member name="M:org.w3c.dom.ls.LSOutput.getCharacterStream">
                     *  An attribute of a language and binding dependent type that represents
                     * a writable stream to which 16-bit units can be output.</member>
        <member name="M:org.w3c.dom.ls.LSOutput.setCharacterStream(biz.ritter.javapi.io.Writer)">
                     *  An attribute of a language and binding dependent type that represents
                     * a writable stream to which 16-bit units can be output.</member>
        <member name="M:org.w3c.dom.ls.LSOutput.getByteStream">
                     *  An attribute of a language and binding dependent type that represents
                     * a writable stream of bytes.</member>
        <member name="M:org.w3c.dom.ls.LSOutput.setByteStream(biz.ritter.javapi.io.OutputStream)">
                     *  An attribute of a language and binding dependent type that represents
                     * a writable stream of bytes.</member>
        <!--FIXME: Invalid documentation markup was found for member M:org.w3c.dom.ls.LSOutput.getSystemId-->
        <!--FIXME: Invalid documentation markup was found for member M:org.w3c.dom.ls.LSOutput.setSystemId(System.String)-->
        <member name="M:org.w3c.dom.ls.LSOutput.getEncoding">
                     *  The character encoding to use for the output. The encoding must be a
                     * string acceptable for an XML encoding declaration ([<a href="http://www.w3.org/TR/2004/REC-xml-20040204">XML 1.0</a>] section
                     * 4.3.3 "Character Encoding in Entities"), it is recommended that
                     * character encodings registered (as charsets) with the Internet
                     * Assigned Numbers Authority [<a href="ftp://ftp.isi.edu/in-notes/iana/assignments/character-sets">IANA-CHARSETS</a>]
                     *  should be referred to using their registered names.</member>
        <member name="M:org.w3c.dom.ls.LSOutput.setEncoding(System.String)">
                     *  The character encoding to use for the output. The encoding must be a
                     * string acceptable for an XML encoding declaration ([<a href="http://www.w3.org/TR/2004/REC-xml-20040204">XML 1.0</a>] section
                     * 4.3.3 "Character Encoding in Entities"), it is recommended that
                     * character encodings registered (as charsets) with the Internet
                     * Assigned Numbers Authority [<a href="ftp://ftp.isi.edu/in-notes/iana/assignments/character-sets">IANA-CHARSETS</a>]
                     *  should be referred to using their registered names.</member>
        <!--FIXME: Invalid documentation markup was found for member T:org.w3c.dom.ls.LSParser-->
        <!--FIXME: Invalid documentation markup was found for member M:org.w3c.dom.ls.LSParser.getDomConfig-->
        <!--FIXME: Invalid documentation markup was found for member M:org.w3c.dom.ls.LSParser.getFilter-->
        <!--FIXME: Invalid documentation markup was found for member M:org.w3c.dom.ls.LSParser.setFilter(org.w3c.dom.ls.LSParserFilter)-->
        <member name="M:org.w3c.dom.ls.LSParser.getAsync">
                     *  <code>true</code> if the <code>LSParser</code> is asynchronous,
                     * <code>false</code> if it is synchronous.</member>
        <member name="M:org.w3c.dom.ls.LSParser.getBusy">
                     *  <code>true</code> if the <code>LSParser</code> is currently busy
                     * loading a document, otherwise <code>false</code>.</member>
        <member name="M:org.w3c.dom.ls.LSParser.parse(org.w3c.dom.ls.LSInput)">
                     * Parse an XML document from a resource identified by a
                     * <code>LSInput</code>.
                     * @param input  The <code>LSInput</code> from which the source of the
                     *   document is to be read.
                     * @return  If the <code>LSParser</code> is a synchronous
                     *   <code>LSParser</code>, the newly created and populated
                     *   <code>Document</code> is returned. If the <code>LSParser</code> is
                     *   asynchronous, <code>null</code> is returned since the document
                     *   object may not yet be constructed when this method returns.
                     * @exception DOMException
                     *    INVALID_STATE_ERR: Raised if the <code>LSParser</code>'s
                     *   <code>LSParser.busy</code> attribute is <code>true</code>.
                     * @exception LSException
                     *    PARSE_ERR: Raised if the <code>LSParser</code> was unable to load
                     *   the XML document. DOM applications should attach a
                     *   <code>DOMErrorHandler</code> using the parameter "<a href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#parameter-error-handler">
                     *   error-handler</a>" if they wish to get details on the error.</member>
        <member name="M:org.w3c.dom.ls.LSParser.parseURI(System.String)">
                     *  Parse an XML document from a location identified by a URI reference [<a href="http://www.ietf.org/rfc/rfc2396.txt">IETF RFC 2396</a>]. If the URI
                     * contains a fragment identifier (see section 4.1 in [<a href="http://www.ietf.org/rfc/rfc2396.txt">IETF RFC 2396</a>]), the
                     * behavior is not defined by this specification, future versions of
                     * this specification may define the behavior.
                     * @param uri The location of the XML document to be read.
                     * @return  If the <code>LSParser</code> is a synchronous
                     *   <code>LSParser</code>, the newly created and populated
                     *   <code>Document</code> is returned, or <code>null</code> if an error
                     *   occured. If the <code>LSParser</code> is asynchronous,
                     *   <code>null</code> is returned since the document object may not yet
                     *   be constructed when this method returns.
                     * @exception DOMException
                     *    INVALID_STATE_ERR: Raised if the <code>LSParser.busy</code>
                     *   attribute is <code>true</code>.
                     * @exception LSException
                     *    PARSE_ERR: Raised if the <code>LSParser</code> was unable to load
                     *   the XML document. DOM applications should attach a
                     *   <code>DOMErrorHandler</code> using the parameter "<a href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#parameter-error-handler">
                     *   error-handler</a>" if they wish to get details on the error.</member>
        <!--FIXME: Invalid documentation markup was found for member M:org.w3c.dom.ls.LSParser.parseWithContext(org.w3c.dom.ls.LSInput,org.w3c.dom.Node,System.Int16)-->
        <member name="M:org.w3c.dom.ls.LSParser.abort">
                     *  Abort the loading of the document that is currently being loaded by
                     * the <code>LSParser</code>. If the <code>LSParser</code> is currently
                     * not busy, a call to this method does nothing.</member>
        <member name="F:org.w3c.dom.ls.LSParserConstants.ACTION_APPEND_AS_CHILDREN">
                     *  Append the result of the parse operation as children of the context
                     * node. For this action to work, the context node must be an
                     * <code>Element</code> or a <code>DocumentFragment</code>.</member>
        <member name="F:org.w3c.dom.ls.LSParserConstants.ACTION_REPLACE_CHILDREN">
                     *  Replace all the children of the context node with the result of the
                     * parse operation. For this action to work, the context node must be an
                     * <code>Element</code>, a <code>Document</code>, or a
                     * <code>DocumentFragment</code>.</member>
        <member name="F:org.w3c.dom.ls.LSParserConstants.ACTION_INSERT_BEFORE">
                     *  Insert the result of the parse operation as the immediately preceding
                     * sibling of the context node. For this action to work the context
                     * node's parent must be an <code>Element</code> or a
                     * <code>DocumentFragment</code>.</member>
        <member name="F:org.w3c.dom.ls.LSParserConstants.ACTION_INSERT_AFTER">
                     *  Insert the result of the parse operation as the immediately following
                     * sibling of the context node. For this action to work the context
                     * node's parent must be an <code>Element</code> or a
                     * <code>DocumentFragment</code>.</member>
        <member name="F:org.w3c.dom.ls.LSParserConstants.ACTION_REPLACE">
                     *  Replace the context node with the result of the parse operation. For
                     * this action to work, the context node must have a parent, and the
                     * parent must be an <code>Element</code> or a
                     * <code>DocumentFragment</code>.</member>
        <!--FIXME: Invalid documentation markup was found for member T:org.w3c.dom.ls.LSParserFilter-->
        <!--FIXME: Invalid documentation markup was found for member M:org.w3c.dom.ls.LSParserFilter.startElement(org.w3c.dom.Element)-->
        <!--FIXME: Invalid documentation markup was found for member M:org.w3c.dom.ls.LSParserFilter.acceptNode(org.w3c.dom.Node)-->
        <!--FIXME: Invalid documentation markup was found for member M:org.w3c.dom.ls.LSParserFilter.getWhatToShow-->
        <member name="F:org.w3c.dom.ls.LSParserFilterConstants.FILTER_ACCEPT">
                     * Accept the node.</member>
        <member name="F:org.w3c.dom.ls.LSParserFilterConstants.FILTER_REJECT">
                     * Reject the node and its children.</member>
        <member name="F:org.w3c.dom.ls.LSParserFilterConstants.FILTER_SKIP">
                     * Skip this single node. The children of this node will still be
                     * considered.</member>
        <member name="F:org.w3c.dom.ls.LSParserFilterConstants.FILTER_INTERRUPT">
                     *  Interrupt the normal processing of the document.</member>
        <!--FIXME: Invalid documentation markup was found for member T:org.w3c.dom.ls.LSProgressEvent-->
        <member name="M:org.w3c.dom.ls.LSProgressEvent.getInput">
                     * The input source that is being parsed.</member>
        <member name="M:org.w3c.dom.ls.LSProgressEvent.getPosition">
                     * The current position in the input source, including all external
                     * entities and other resources that have been read.</member>
        <member name="M:org.w3c.dom.ls.LSProgressEvent.getTotalSize">
                     * The total size of the document including all external resources, this
                     * number might change as a document is being parsed if references to
                     * more external resources are seen. A value of <code>0</code> is
                     * returned if the total size cannot be determined or estimated.</member>
        <!--FIXME: Invalid documentation markup was found for member T:org.w3c.dom.ls.LSResourceResolver-->
        <!--FIXME: Invalid documentation markup was found for member M:org.w3c.dom.ls.LSResourceResolver.resolveResource(System.String,System.String,System.String,System.String,System.String)-->
        <!--FIXME: Invalid documentation markup was found for member T:org.w3c.dom.ls.LSSerializer-->
        <!--FIXME: Invalid documentation markup was found for member M:org.w3c.dom.ls.LSSerializer.getDomConfig-->
        <!--FIXME: Invalid documentation markup was found for member M:org.w3c.dom.ls.LSSerializer.getNewLine-->
        <!--FIXME: Invalid documentation markup was found for member M:org.w3c.dom.ls.LSSerializer.setNewLine(System.String)-->
        <!--FIXME: Invalid documentation markup was found for member M:org.w3c.dom.ls.LSSerializer.getFilter-->
        <!--FIXME: Invalid documentation markup was found for member M:org.w3c.dom.ls.LSSerializer.setFilter(org.w3c.dom.ls.LSSerializerFilter)-->
        <!--FIXME: Invalid documentation markup was found for member M:org.w3c.dom.ls.LSSerializer.write(org.w3c.dom.Node,org.w3c.dom.ls.LSOutput)-->
        <member name="M:org.w3c.dom.ls.LSSerializer.writeToURI(org.w3c.dom.Node,System.String)">
                     *  A convenience method that acts as if <code>LSSerializer.write</code>
                     * was called with a <code>LSOutput</code> with no encoding specified
                     * and <code>LSOutput.systemId</code> set to the <code>uri</code>
                     * argument.
                     * @param nodeArg  The node to serialize.
                     * @param uri The URI to write to.
                     * @return  Returns <code>true</code> if <code>node</code> was
                     *   successfully serialized. Return <code>false</code> in case the
                     *   normal processing stopped but the implementation kept serializing
                     *   the document; the result of the serialization being implementation
                     *   dependent then.
                     * @exception LSException
                     *    SERIALIZE_ERR: Raised if the <code>LSSerializer</code> was unable to
                     *   serialize the node. DOM applications should attach a
                     *   <code>DOMErrorHandler</code> using the parameter "<a href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#parameter-error-handler">
                     *   error-handler</a>" if they wish to get details on the error.</member>
        <member name="M:org.w3c.dom.ls.LSSerializer.writeToString(org.w3c.dom.Node)">
                     *  Serialize the specified node as described above in the general
                     * description of the <code>LSSerializer</code> interface. The output is
                     * written to a <code>DOMString</code> that is returned to the caller.
                     * The encoding used is the encoding of the <code>DOMString</code> type,
                     * i.e. UTF-16. Note that no Byte Order Mark is generated in a
                     * <code>DOMString</code> object.
                     * @param nodeArg  The node to serialize.
                     * @return  Returns the serialized data.
                     * @exception DOMException
                     *    DOMSTRING_SIZE_ERR: Raised if the resulting string is too long to
                     *   fit in a <code>DOMString</code>.
                     * @exception LSException
                     *    SERIALIZE_ERR: Raised if the <code>LSSerializer</code> was unable to
                     *   serialize the node. DOM applications should attach a
                     *   <code>DOMErrorHandler</code> using the parameter "<a href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#parameter-error-handler">
                     *   error-handler</a>" if they wish to get details on the error.</member>
        <!--FIXME: Invalid documentation markup was found for member T:org.w3c.dom.ls.LSSerializerFilter-->
        <!--FIXME: Invalid documentation markup was found for member M:org.w3c.dom.ls.LSSerializerFilter.getWhatToShow-->
        <member name="T:org.w3c.dom.events.DocumentEvent">
                 *  The <code>DocumentEvent</code> interface provides a mechanism by which the
                 * a user can create an Event of a type supported by the implementation. It
                 * is expected that the <code>DocumentEvent</code> interface will be
                 * implemented on the same object which implements the <code>Document</code>
                 * interface in an implementation which supports the Event model.
                 * @since DOM Level 2</member>
        <member name="M:org.w3c.dom.events.DocumentEvent.createEvent(System.String)">
                     *
                     * @param type The <code>type</code> paramater specifies the type of
                     *   <code>Event</code> to be created.  If the <code>Event</code> type
                     *   specified is supported by the implementation  this method will return
                     *   a new <code>Event</code> of the type requested.  If the
                     *   <code> Event</code> is to be dispatched via the
                     *   <code>dispatchEvent</code> method the  appropriate event init method
                     *   must be called after creation in order to initialize the
                     *   <code>Event</code>'s values.
                     * @return The newly created <code>Event</code>
                     * @exception DOMException
                     *   UNSUPPORTED_EVENT_TYPE: Raised if the implementation does not support
                     *   the type of <code>Event</code> requested</member>
        <member name="T:org.w3c.dom.events.Event">
                 * The <code>Event</code> interface is used to provide contextual information
                 * about an event to the handler processing the event.  An object which
                 * implements the <code>Event</code> interface is generally passed as the
                 * first parameter to an event handler.  More specific  context information
                 * is passed to event handlers by deriving additional interfaces from
                 * <code>Event</code> which contain information directly relating to the type
                 * of event they accompany.  These derived interfaces are also implemented by
                 * the object passed to the event listener.
                 * @since DOM Level 2</member>
        <member name="M:org.w3c.dom.events.Event.getType">
                     * The <code>type</code> property represents the event name as a string
                     * property.</member>
        <member name="M:org.w3c.dom.events.Event.getTarget">
                     * The <code>target</code> property indicates the <code>EventTarget</code>
                     * to which the event  was originally dispatched.</member>
        <member name="M:org.w3c.dom.events.Event.getCurrentNode">
                     * The <code>currentNode</code> property indicates the <code>Node</code>
                     * whose <code>EventListener</code>s are currently being processed.  This
                     * is particularly  useful during capturing and bubbling.</member>
        <member name="M:org.w3c.dom.events.Event.getEventPhase">
                     * The <code>eventPhase</code> property indicates which phase of event flow
                     * is currently  being evaluated.</member>
        <member name="M:org.w3c.dom.events.Event.getBubbles">
                     * The <code>bubbles</code> property indicates whether or not an event is a
                     * bubbling event.  If the event can bubble the value is true, else the
                     * value is false.</member>
        <member name="M:org.w3c.dom.events.Event.getCancelable">
                     * The <code>cancelable</code> property indicates whether or not an event
                     * can have its default action prevented.  If the default action can be
                     * prevented the value is true, else the value is false.</member>
        <member name="M:org.w3c.dom.events.Event.preventBubble">
                     * The <code>preventBubble</code> method is used to end the bubbling phase
                     * of  event flow. If this method is called by any
                     * <code>EventListener</code>s registered on the same
                     * <code>EventTarget</code> during bubbling, the bubbling phase will cease
                     * at that level and the event will not be propagated upward within the
                     * tree.</member>
        <member name="M:org.w3c.dom.events.Event.preventCapture">
                     * The <code>preventCapture</code> method is used to end the capturing phase
                     * of  event flow. If this method is called by any
                     * <code>EventListener</code>s registered on the same
                     * <code>EventTarget</code> during capturing, the capturing phase will
                     * cease at that level and the event will not be propagated any further
                     * down.</member>
        <member name="M:org.w3c.dom.events.Event.preventDefault">
                     * If an event is cancelable, the <code>preventCapture</code> method is used
                     * to signify that the event is to be canceled, meaning any default action
                     * normally taken by the implementation as a result of the event will not
                     * occur.  If, during any stage of event flow, the
                     * <code>preventDefault</code> method is called the event is canceled. Any
                     * default action associated with the event will not occur.  Calling this
                     * method for a non-cancelable event has no effect.  Once
                     * <code>preventDefault</code> has been called it will remain in effect
                     * throughout the remainder of the event's propagation.</member>
        <member name="M:org.w3c.dom.events.Event.initEvent(System.String,System.Boolean,System.Boolean)">
                     *
                     * @param eventTypeArg Specifies the event type.  This type may be any event
                     *   type currently defined in this specification or a new event type.  Any
                     *   new event type must not begin with any upper, lower, or mixed case
                     *   version of the string  "DOM".  This prefix is reserved for future DOM
                     *   event sets.
                     * @param canBubbleArg Specifies whether or not the event can bubble.
                     * @param cancelableArg Specifies whether or not the event's default  action
                     *   can be prevented.</member>
        <member name="T:org.w3c.dom.events.EventListener">
                 * The <code>EventListener</code> interface is the primary method for handling
                 * events.  Users implement the <code>EventListener</code> interface and
                 * register their listener  on an <code>EventTarget</code> using the
                 * <code>AddEventListener</code> method.  The  users should also remove their
                 * <code>EventListener</code> from its  <code>EventTarget</code> after they
                 * have completed using the listener.
                 * @since DOM Level 2</member>
        <member name="M:org.w3c.dom.events.EventListener.handleEvent(org.w3c.dom.events.Event)">
                     * This method is called whenever an event occurs of the type for which the
                     * <code> EventListener</code> interface was registered.
                     * @param evt The <code>Event</code> contains contextual information about
                     *   the event.  It also contains the <code>preventDefault</code>,
                     *   <code>preventBubble</code>, and <code> preventCapture</code> methods
                     *   which are used in determining the event's flow and  default action.</member>
        <member name="T:org.w3c.dom.events.EventTarget">
                 * The <code>EventTarget</code> interface is implemented by all
                 * <code>Node</code>s in  an implementation which supports the DOM Event
                 * Model.  The interface allows registration and removal of
                 * <code>EventListener</code>s on an <code>EventTarget</code> and dispatch of
                 * events to that <code>EventTarget</code>.
                 * @since DOM Level 2</member>
        <member name="M:org.w3c.dom.events.EventTarget.addEventListener(System.String,org.w3c.dom.events.EventListener,System.Boolean)">
                     * This method allows the registration of event listeners on the event
                     * target.
                     * @param type The event type for which the user is registering
                     * @param listener The <code>listener</code> parameter takes an interface
                     *   implemented by the user which contains the methods to be called when
                     *   the event occurs.
                     * @param useCapture If true, <code>useCapture</code> indicates that the
                     *   user wishes to initiate capture.  After initiating capture, all events
                     *   of the specified type will be  dispatched to the registered
                     *   <code>EventListener</code> before being dispatched to any
                     *   <code>EventTarget</code>s beneath them in the tree.  Events which are
                     *   bubbling upward through the tree will not trigger an
                     *   <code>EventListener</code> designated to use capture.If an
                     *   <code>EventListener</code> is added to an <code>EventTarget</code>
                     *   which is  currently processing an event the new listener will not be
                     *   triggered by the current event.</member>
        <!--FIXME: Invalid documentation markup was found for member M:org.w3c.dom.events.EventTarget.removeEventListener(System.String,org.w3c.dom.events.EventListener,System.Boolean)-->
        <member name="M:org.w3c.dom.events.EventTarget.dispatchEvent(org.w3c.dom.events.Event)">
                     * This method allows the dispatch of events into the implementations event
                     * model.  Events dispatched in this manner will have the same capturing
                     * and bubbling behavior as events dispatched directly by the
                     * implementation.  The target of the event is the <code> EventTarget</code>
                     *  on which <code>dispatchEvent</code> is called.
                     * @param evt Specifies the event type, behavior, and contextual information
                     *   to be used in processing the event.
                     * @return The return value of <code>dispatchEvent</code> indicates whether
                     *   any of the listeners which handled the event called
                     *   <code>preventDefault</code>.  If <code>preventDefault</code> was
                     *   called the value is false, else the value is true.
                     * @exception DOMException
                     *   UNSPECIFIED_EVENT_TYPE: Raised if the <code>Event</code>'s type was
                     *   not specified by initializing the event before
                     *   <code>dispatchEvent</code> was called.</member>
        <member name="T:org.w3c.dom.events.KeyEvent">
                 * The <code>KeyEvent</code> interface provides specific contextual
                 * information associated with Key events.
                 * @since DOM Level 2</member>
        <member name="M:org.w3c.dom.events.KeyEvent.getCtrlKey">
                     *  <code>ctrlKey</code> indicates whether the 'ctrl' key was depressed
                     * during the firing of the event.</member>
        <member name="M:org.w3c.dom.events.KeyEvent.getShiftKey">
                     *  <code>shiftKey</code> indicates whether the 'shift' key was depressed
                     * during the firing of the event.</member>
        <member name="M:org.w3c.dom.events.KeyEvent.getAltKey">
                     *  <code>altKey</code> indicates whether the 'alt' key was depressed during
                     * the firing of the event.  On some platforms this key may map to an
                     * alternative key name.</member>
        <member name="M:org.w3c.dom.events.KeyEvent.getMetaKey">
                     *  <code>metaKey</code> indicates whether the 'meta' key was depressed
                     * during the firing of the event.  On some platforms this key may map to
                     * an alternative key name.</member>
        <member name="M:org.w3c.dom.events.KeyEvent.getKeyCode">
                     *  The value of <code>keyCode</code> holds the virtual key code value of
                     * the key which was depressed if the event is a key event.  Otherwise, the
                     * value is zero.</member>
        <member name="M:org.w3c.dom.events.KeyEvent.getCharCode">
                     *  <code>charCode</code> holds the value of the Unicode character
                     * associated with the depressed key if the event is a key event.
                     * Otherwise, the value is zero.</member>
        <member name="M:org.w3c.dom.events.KeyEvent.initKeyEvent(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32,org.w3c.dom.views.AbstractView)">
                     *
                     * @param typeArg Specifies the event type.
                     * @param canBubbleArg Specifies whether or not the event can bubble.
                     * @param cancelableArg Specifies whether or not the event's default  action
                     *   can be prevent.
                     * @param ctrlKeyArg Specifies whether or not control key was depressed
                     *   during the  <code>Event</code>.
                     * @param altKeyArg Specifies whether or not alt key was depressed during
                     *   the  <code>Event</code>.
                     * @param shiftKeyArg Specifies whether or not shift key was depressed
                     *   during the  <code>Event</code>.
                     * @param metaKeyArg Specifies whether or not meta key was depressed during
                     *   the  <code>Event</code>.
                     * @param keyCodeArg Specifies the <code>Event</code>'s <code>keyCode</code>
                     * @param charCodeArg Specifies the <code>Event</code>'s
                     *   <code>charCode</code>
                     * @param viewArg Specifies the <code>Event</code>'s
                     *   <code>AbstractView</code>.</member>
        <!--FIXME: Invalid documentation markup was found for member T:org.w3c.dom.events.MouseEvent-->
        <member name="M:org.w3c.dom.events.MouseEvent.getScreenX">
                     * <code>screenX</code> indicates the horizontal coordinate at which the
                     * event occurred in relative to the origin of the screen coordinate system.</member>
        <member name="M:org.w3c.dom.events.MouseEvent.getScreenY">
                     * <code>screenY</code> indicates the vertical coordinate at which the event
                     * occurred relative to the origin of the screen coordinate system.</member>
        <member name="M:org.w3c.dom.events.MouseEvent.getClientX">
                     * <code>clientX</code> indicates the horizontal coordinate at which the
                     * event occurred relative to the DOM implementation's client area.</member>
        <member name="M:org.w3c.dom.events.MouseEvent.getClientY">
                     * <code>clientY</code> indicates the vertical coordinate at which the event
                     * occurred relative to the DOM implementation's client area.</member>
        <member name="M:org.w3c.dom.events.MouseEvent.getCtrlKey">
                     * <code>ctrlKey</code> indicates whether the 'ctrl' key was depressed
                     * during the firing of the event.</member>
        <member name="M:org.w3c.dom.events.MouseEvent.getShiftKey">
                     * <code>shiftKey</code> indicates whether the 'shift' key was depressed
                     * during the firing of the event.</member>
        <member name="M:org.w3c.dom.events.MouseEvent.getAltKey">
                     * <code>altKey</code> indicates whether the 'alt' key was depressed during
                     * the firing of the event.  On some platforms this key may map to an
                     * alternative key name.</member>
        <member name="M:org.w3c.dom.events.MouseEvent.getMetaKey">
                     * <code>metaKey</code> indicates whether the 'meta' key was depressed
                     * during the firing of the event.  On some platforms this key may map to
                     * an alternative key name.</member>
        <member name="M:org.w3c.dom.events.MouseEvent.getButton">
                     * During mouse events caused by the depression or release of a mouse
                     * button, <code>button</code> is used to indicate which mouse button
                     * changed state.</member>
        <member name="M:org.w3c.dom.events.MouseEvent.getRelatedNode">
                     * <code>relatedNode</code> is used to identify a secondary node related to
                     * a UI event.</member>
        <member name="M:org.w3c.dom.events.MouseEvent.initMouseEvent(System.String,System.Boolean,System.Boolean,org.w3c.dom.views.AbstractView,System.Int16,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int16,org.w3c.dom.Node)">
                     *
                     * @param typeArg Specifies the event type.
                     * @param canBubbleArg Specifies whether or not the event can bubble.
                     * @param cancelableArg Specifies whether or not the event's default  action
                     *   can be prevent.
                     * @param viewArg Specifies the <code>Event</code>'s
                     *   <code>AbstractView</code>.
                     * @param detailArg Specifies the <code>Event</code>'s mouse click count.
                     * @param screenXArg Specifies the <code>Event</code>'s screen x coordinate
                     * @param screenYArg Specifies the <code>Event</code>'s screen y coordinate
                     * @param clientXArg Specifies the <code>Event</code>'s client x coordinate
                     * @param clientYArg Specifies the <code>Event</code>'s client y coordinate
                     * @param ctrlKeyArg Specifies whether or not control key was depressed
                     *   during the <code>Event</code>.
                     * @param altKeyArg Specifies whether or not alt key was depressed during
                     *   the  <code>Event</code>.
                     * @param shiftKeyArg Specifies whether or not shift key was depressed
                     *   during the <code>Event</code>.
                     * @param metaKeyArg Specifies whether or not meta key was depressed during
                     *   the  <code>Event</code>.
                     * @param buttonArg Specifies the <code>Event</code>'s mouse button.
                     * @param relatedNodeArg Specifies the <code>Event</code>'s related Node.</member>
        <member name="T:org.w3c.dom.events.MutationEvent">
                 * The <code>MutationEvent</code> interface provides specific contextual
                 * information associated with Mutation events.
                 * @since DOM Level 2</member>
        <member name="M:org.w3c.dom.events.MutationEvent.getRelatedNode">
                     *  <code>relatedNode</code> is used to identify a secondary node related to
                     * a mutation event. For example, if a mutation event is dispatched to a
                     * node indicating that its parent has changed, the <code>relatedNode</code>
                     *  is the changed parent.  If an event is instead dispatch to a subtree
                     * indicating a node was changed within it, the <code>relatedNode</code> is
                     * the changed node.</member>
        <member name="M:org.w3c.dom.events.MutationEvent.getPrevValue">
                     *  <code>prevValue</code> indicates the previous value of text nodes and
                     * attributes in attrModified and charDataModified events.</member>
        <member name="M:org.w3c.dom.events.MutationEvent.getNewValue">
                     *  <code>newValue</code> indicates the new value of text nodes and
                     * attributes in attrModified and charDataModified events.</member>
        <member name="M:org.w3c.dom.events.MutationEvent.getAttrName">
                     *  <code>attrName</code> indicates the changed attr in the attrModified
                     * event.</member>
        <member name="M:org.w3c.dom.events.MutationEvent.initMutationEvent(System.String,System.Boolean,System.Boolean,org.w3c.dom.Node,System.String,System.String,System.String)">
                     *
                     * @param typeArg Specifies the event type.
                     * @param canBubbleArg Specifies whether or not the event can bubble.
                     * @param cancelableArg Specifies whether or not the event's default  action
                     *   can be prevent.
                     * @param relatedNodeArg Specifies the <code>Event</code>'s related Node
                     * @param prevValueArg Specifies the <code>Event</code>'s
                     *   <code>prevValue</code> property
                     * @param newValueArg Specifies the <code>Event</code>'s
                     *   <code>newValue</code> property
                     * @param attrNameArg Specifies the <code>Event</code>'s
                     *   <code>attrName</code> property</member>
        <member name="T:org.w3c.dom.events.UIEvent">
                 * The <code>UIEvent</code> interface provides specific contextual
                 * information associated with User Interface events.
                 * @since DOM Level 2</member>
        <member name="M:org.w3c.dom.events.UIEvent.getView">
                     * The <code>view</code> attribute identifies the <code>AbstractView</code>
                     * from which the event was generated.</member>
        <member name="M:org.w3c.dom.events.UIEvent.getDetail">
                     * Specifies some detail information about the <code>Event</code>, depending
                     * on the type of event.</member>
        <member name="M:org.w3c.dom.events.UIEvent.initUIEvent(System.String,System.Boolean,System.Boolean,org.w3c.dom.views.AbstractView,System.Int16)">
                     *
                     * @param typeArg Specifies the event type.
                     * @param canBubbleArg Specifies whether or not the event can bubble.
                     * @param cancelableArg Specifies whether or not the event's default  action
                     *   can be prevent.
                     * @param viewArg Specifies the <code>Event</code>'s
                     *   <code>AbstractView</code>.
                     * @param detailArg Specifies the <code>Event</code>'s detail.</member>
        <member name="T:org.w3c.dom.traversal.DocumentTraversal">
                 * <code>DocumentTraversal</code> contains methods that creates Iterators to
                 * traverse a node and its children in document order (depth first, pre-order
                 * traversal, which is equivalent to the order in which the start tags occur
                 * in the text representation of the document).
                 * @since DOM Level 2</member>
        <member name="M:org.w3c.dom.traversal.DocumentTraversal.createNodeIterator(org.w3c.dom.Node,System.Int32,org.w3c.dom.traversal.NodeFilter,System.Boolean)">
                     *
                     * @param root The node which will be iterated together with its children.
                     *   The iterator is initially positioned just before this node. The
                     *   whatToShow flags and the filter, if any, are not considered when
                     *   setting this position.
                     * @param whatToShow This flag specifies which node types may appear in the
                     *   logical view of the tree presented by the Iterator. See the
                     *   description of Iterator for the set of possible values. These flags
                     *   can be combined using OR.These flags can be combined using
                     *   <code>OR</code>.
                     * @param filter The Filter to be used with this TreeWalker, or null to
                     *   indicate no filter.
                     * @param entityReferenceExpansion The value of this flag determines whether
                     *   entity reference nodes are expanded.
                     * @return The newly created <code>NodeIterator</code>.</member>
        <member name="M:org.w3c.dom.traversal.DocumentTraversal.createTreeWalker(org.w3c.dom.Node,System.Int32,org.w3c.dom.traversal.NodeFilter,System.Boolean)">
                     * Create a new TreeWalker over the subtree rooted by the specified node.
                     * @param root The node which will serve as the root for the
                     *   <code>TreeWalker</code>. The currentNode of the TreeWalker is set to
                     *   this node. The whatToShow flags and the NodeFilter are not considered
                     *   when setting this value; any node type will be accepted as the root.
                     *   The root must not be null.
                     * @param whatToShow This flag specifies which node types may appear in the
                     *   logical view of the tree presented by the Iterator. See the
                     *   description of TreeWalker for the set of possible values. These flags
                     *   can be combined using OR.These flags can be combined using
                     *   <code>OR</code>.
                     * @param filter The Filter to be used with this TreeWalker, or null to
                     *   indicate no filter.
                     * @param entityReferenceExpansion The value of this flag determines whether
                     *   entity reference nodes are expanded.
                     * @return The newly created <code>TreeWalker</code>.
                     * @exception DOMException
                     *    Raises the exception NOT_SUPPORTED_ERR if the specified root node is
                     *   null.</member>
        <!--FIXME: Invalid documentation markup was found for member T:org.w3c.dom.traversal.NodeFilter-->
        <member name="M:org.w3c.dom.traversal.NodeFilter.acceptNode(org.w3c.dom.Node)">
                     * Test whether a specified node is visible in the logical view of a
                     * TreeWalker or NodeIterator. This function will be called by the
                     * implementation of TreeWalker and NodeIterator; it is not intended to be
                     * called directly from user code.
                     * @param n The node to check to see if it passes the filter or not.
                     * @return a constant to determine whether the node is accepted, rejected,
                     *   or skipped, as defined above.</member>
        <!--FIXME: Invalid documentation markup was found for member T:org.w3c.dom.traversal.NodeIterator-->
        <member name="M:org.w3c.dom.traversal.NodeIterator.getWhatToShow">
                     * This attribute determines which node types are presented via the
                     * Iterator.</member>
        <member name="M:org.w3c.dom.traversal.NodeIterator.getFilter">
                     * The filter used to screen nodes.</member>
        <member name="M:org.w3c.dom.traversal.NodeIterator.getExpandEntityReferences">
                     * The value of this flag determines whether entity reference nodes are
                     * expanded. To produce a view of the document that has entity references
                     * expanded and does not expose the entity reference node itself, use the
                     * whatToShow flags to hide the entity reference node and set
                     * expandEntityReferences to true when creating the iterator. To produce a
                     * view of the document that has entity reference nodes but no entity
                     * expansion, use the whatToShow flags to show the entity reference node
                     * and set expandEntityReferences to true.</member>
        <member name="M:org.w3c.dom.traversal.NodeIterator.nextNode">
                     * Returns the next node in the set and advances the position of the
                     * Iterator in the set. After a NodeIterator is created, the first call to
                     * nextNode() returns the first node in the set.
                     * @return The next <code>Node</code> in the set being iterated over, or
                     *   <code>null</code> if there are no more members in that set.</member>
        <member name="M:org.w3c.dom.traversal.NodeIterator.previousNode">
                     * Returns the previous node in the set and moves the position of the
                     * Iterator backwards in the set.
                     * @return The previous <code>Node</code> in the set being iterated over, or
                     *   <code>null</code> if there are no more members in that set.</member>
        <!--FIXME: Invalid documentation markup was found for member T:org.w3c.dom.traversal.TreeWalker-->
        <member name="M:org.w3c.dom.traversal.TreeWalker.getWhatToShow">
                     * This attribute determines which node types are presented via the
                     * TreeWalker.</member>
        <member name="M:org.w3c.dom.traversal.TreeWalker.getFilter">
                     * The filter used to screen nodes.</member>
        <member name="M:org.w3c.dom.traversal.TreeWalker.getExpandEntityReferences">
                     * The value of this flag determines whether entity reference nodes are
                     * expanded. To produce a view of the document that has entity references
                     * expanded and does not expose the entity reference node itself, use the
                     * whatToShow flags to hide the entity reference node and set
                     * expandEntityReferences to true when creating the iterator. To produce a
                     * view of the document that has entity reference nodes but no entity
                     * expansion, use the whatToShow flags to show the entity reference node
                     * and set expandEntityReferences to true.</member>
        <!--FIXME: Invalid documentation markup was found for member M:org.w3c.dom.traversal.TreeWalker.getCurrentNode-->
        <member name="M:org.w3c.dom.traversal.TreeWalker.parentNode">
                     * Moves to and returns the parent node of the current node. If there is no
                     * parent node, or if the current node is the root node from which this
                     * TreeWalker was created, retains the current position and returns null.
                     * @return The new parent node, or null if the current node has no parent in
                     *   the TreeWalker's logical view.</member>
        <member name="M:org.w3c.dom.traversal.TreeWalker.firstChild">
                     * Moves the <code>TreeWalker</code> to the first child of the current node,
                     * and returns the new node. If the current node has no children, returns
                     * <code>null</code>, and retains the current node.
                     * @return The new node, or <code>null</code> if the current node has no
                     *   children.</member>
        <member name="M:org.w3c.dom.traversal.TreeWalker.lastChild">
                     * Moves the <code>TreeWalker</code> to the last child of the current node,
                     * and returns the new node. If the current node has no children, returns
                     * <code>null</code>, and retains the current node.
                     * @return The new node, or <code>null</code> if the current node has no
                     *   children.</member>
        <member name="M:org.w3c.dom.traversal.TreeWalker.previousSibling">
                     * Moves the <code>TreeWalker</code> to the previous sibling of the current
                     * node, and returns the new node. If the current node has no previous
                     * sibling, returns <code>null</code>, and retains the current node.
                     * @return The new node, or <code>null</code> if the current node has no
                     *   previous sibling.</member>
        <member name="M:org.w3c.dom.traversal.TreeWalker.nextSibling">
                     * Moves the <code>TreeWalker</code> to the next sibling of the current
                     * node, and returns the new node. If the current node has no next sibling,
                     * returns <code>null</code>, and retains the current node.
                     * @return The new node, or <code>null</code> if the current node has no
                     *   next sibling.</member>
        <member name="M:org.w3c.dom.traversal.TreeWalker.previousNode">
                     * Moves the <code>TreeWalker</code> to the previous node in document order
                     * relative to the current node, and returns the new node. If the current
                     * node has no previous node, returns <code>null</code>, and retains the
                     * current node.
                     * @return The new node, or <code>null</code> if the current node has no
                     *   previous node.</member>
        <member name="M:org.w3c.dom.traversal.TreeWalker.nextNode">
                     * Moves the <code>TreeWalker</code> to the next node in document order
                     * relative to the current node, and returns the new node. If the current
                     * node has no next node, returns <code>null</code>, and retains the
                     * current node.
                     * @return The new node, or <code>null</code> if the current node has no
                     *   next node.</member>
        <member name="T:org.w3c.dom.views.AbstractView">
                 * A base interface that all views shall derive from.
                 * @since DOM Level 2</member>
        <member name="M:org.w3c.dom.views.AbstractView.getDocument">
                     * The source <code>DocumentView</code> for which, this is an
                     * <code>AbstractView</code> of.</member>
        <member name="T:org.w3c.dom.views.DocumentView">
                 * The <code>DocumentView</code> interface is implemented by
                 * <code>Document</code> objects in DOM implementations supporting DOM Views.
                 * It provides an attribute to retrieve the default view of a document.
                 * @since DOM Level 2</member>
        <member name="M:org.w3c.dom.views.DocumentView.getDefaultView">
                     * The default <code>AbstractView</code> for this <code>Document</code>, or
                     * <code>null</code> if none available.</member>
        <member name="T:biz.ritter.javapix.xml.parsers.DocumentBuilderFactory">
             * Defines a factory API that enables applications to obtain a
             * parser that produces DOM object trees from XML documents.
             *
             * @author <a href="Jeff.Suttor@Sun.com">Jeff Suttor</a>
             * @version $Revision: 884950 $, $Date: 2009-11-27 13:46:18 -0500 (Fri, 27 Nov 2009) $</member>
        <member name="M:biz.ritter.javapix.xml.parsers.DocumentBuilderFactory.newInstance">
                 * Obtain a new instance of a
                 * <code>DocumentBuilderFactory</code>. This static method creates
                 * a new factory instance.
                 * This method uses the following ordered lookup procedure to determine
                 * the <code>DocumentBuilderFactory</code> implementation class to
                 * load:
                 * <ul>
                 * <li>
                 * Use the <code>javax.xml.parsers.DocumentBuilderFactory</code> system
                 * property.
                 * </li>
                 * <li>
                 * Use the properties file "lib/jaxp.properties" in the JRE directory.
                 * This configuration file is in standard <code>java.util.Properties
                 * </code> format and contains the fully qualified name of the
                 * implementation class with the key being the system property defined
                 * above.
                 *
                 * The jaxp.properties file is read only once by the JAXP implementation
                 * and it's values are then cached for future use.  If the file does not exist
                 * when the first attempt is made to read from it, no further attempts are
                 * made to check for its existence.  It is not possible to change the value
                 * of any property in jaxp.properties after it has been read for the first time.
                 * </li>
                 * <li>
                 * Use the Services API (as detailed in the JAR specification), if
                 * available, to determine the classname. The Services API will look
                 * for a classname in the file
                 * <code>META-INF/services/javax.xml.parsers.DocumentBuilderFactory</code>
                 * in jars available to the runtime.
                 * </li>
                 * <li>
                 * Platform default <code>DocumentBuilderFactory</code> instance.
                 * </li>
                 * </ul>
                 *
                 * Once an application has obtained a reference to a
                 * <code>DocumentBuilderFactory</code> it can use the factory to
                 * configure and obtain parser instances.
                 *
                 *
                 * <h2>Tip for Trouble-shooting</h2>
                 * <p>Setting the <code>jaxp.debug</code> system property will cause
                 * this method to print a lot of debug messages
                 * to <tt>System.err</tt> about what it is doing and where it is looking at.</p>
                 *
                 * <p> If you have problems loading {@link DocumentBuilder}s, try:</p>
                 * <pre>
                 * java -Djaxp.debug=1 YourProgram ....
                 * </pre>
                 *
                 * @return New instance of a <code>DocumentBuilderFactory</code>
                 *
                 * @exception FactoryConfigurationError if the implementation is not
                 * available or cannot be instantiated.</member>
        <member name="M:biz.ritter.javapix.xml.parsers.DocumentBuilderFactory.newInstance(System.String,biz.ritter.javapi.lang.ClassLoader)">
                 * @return New instance of a <code>DocumentBuilderFactory</code>
                 *
                 * @exception FactoryConfigurationError if the implementation is not
                 * available or cannot be instantiated.</member>
        <member name="M:biz.ritter.javapix.xml.parsers.DocumentBuilderFactory.newDocumentBuilder">
                 * Creates a new instance of a {@link javax.xml.parsers.DocumentBuilder}
                 * using the currently configured parameters.
                 *
                 * @exception ParserConfigurationException if a DocumentBuilder
                 * cannot be created which satisfies the configuration requested.
                 * @return A new instance of a DocumentBuilder.</member>
        <member name="M:biz.ritter.javapix.xml.parsers.DocumentBuilderFactory.setNamespaceAware(System.Boolean)">
                 * Specifies that the parser produced by this code will
                 * provide support for XML namespaces. By default the value of this is set
                 * to <code>false</code>
                 *
                 * @param awareness true if the parser produced will provide support
                 *                  for XML namespaces; false otherwise.</member>
        <member name="M:biz.ritter.javapix.xml.parsers.DocumentBuilderFactory.setValidating(System.Boolean)">
                 * Specifies that the parser produced by this code will
                 * validate documents as they are parsed. By default the value of this
                 * is set to <code>false</code>.
                 *
                 * <p>
                 * Note that "the validation" here means
                 * <a href="http://www.w3.org/TR/REC-xml#proc-types">a validating
                 * parser</a> as defined in the XML recommendation.
                 * In other words, it essentially just controls the DTD validation.
                 * (except the legacy two properties defined in JAXP 1.2.
                 * See <a href="#validationCompatibility">here</a> for more details.)
                 * </p>
                 *
                 * <p>
                 * To use modern schema languages such as W3C XML Schema or
                 * RELAX NG instead of DTD, you can configure your parser to be
                 * a non-validating parser by leaving the {@link #setValidating(boolean)}
                 * method <tt>false</tt>, then use the {@link #setSchema(Schema)}
                 * method to associate a schema to a parser.
                 * </p>
                 *
                 * @param validating true if the parser produced will validate documents
                 *                   as they are parsed; false otherwise.</member>
        <member name="M:biz.ritter.javapix.xml.parsers.DocumentBuilderFactory.setIgnoringElementContentWhitespace(System.Boolean)">
                 * Specifies that the parsers created by this  factory must eliminate
                 * whitespace in element content (sometimes known loosely as
                 * 'ignorable whitespace') when parsing XML documents (see XML Rec
                 * 2.10). Note that only whitespace which is directly contained within
                 * element content that has an element only content model (see XML
                 * Rec 3.2.1) will be eliminated. Due to reliance on the content model
                 * this setting requires the parser to be in validating mode. By default
                 * the value of this is set to <code>false</code>.
                 *
                 * @param whitespace true if the parser created must eliminate whitespace
                 *                   in the element content when parsing XML documents;
                 *                   false otherwise.</member>
        <member name="M:biz.ritter.javapix.xml.parsers.DocumentBuilderFactory.setExpandEntityReferences(System.Boolean)">
                 * Specifies that the parser produced by this code will
                 * expand entity reference nodes. By default the value of this is set to
                 * <code>true</code>
                 *
                 * @param expandEntityRef true if the parser produced will expand entity
                 *                        reference nodes; false otherwise.</member>
        <member name="M:biz.ritter.javapix.xml.parsers.DocumentBuilderFactory.setIgnoringComments(System.Boolean)">
                 * <p>Specifies that the parser produced by this code will
                 * ignore comments. By default the value of this is set to <code>false
                 * </code>.</p>
                 *
                 * @param ignoreComments <code>boolean</code> value to ignore comments during processing</member>
        <member name="M:biz.ritter.javapix.xml.parsers.DocumentBuilderFactory.setCoalescing(System.Boolean)">
                 * Specifies that the parser produced by this code will
                 * convert CDATA nodes to Text nodes and append it to the
                 * adjacent (if any) text node. By default the value of this is set to
                 * <code>false</code>
                 *
                 * @param coalescing  true if the parser produced will convert CDATA nodes
                 *                    to Text nodes and append it to the adjacent (if any)
                 *                    text node; false otherwise.</member>
        <member name="M:biz.ritter.javapix.xml.parsers.DocumentBuilderFactory.isNamespaceAware">
                 * Indicates whether or not the factory is configured to produce
                 * parsers which are namespace aware.
                 *
                 * @return  true if the factory is configured to produce parsers which
                 *          are namespace aware; false otherwise.</member>
        <member name="M:biz.ritter.javapix.xml.parsers.DocumentBuilderFactory.isValidating">
                 * Indicates whether or not the factory is configured to produce
                 * parsers which validate the XML content during parse.
                 *
                 * @return  true if the factory is configured to produce parsers
                 *          which validate the XML content during parse; false otherwise.</member>
        <member name="M:biz.ritter.javapix.xml.parsers.DocumentBuilderFactory.isIgnoringElementContentWhitespace">
                 * Indicates whether or not the factory is configured to produce
                 * parsers which ignore ignorable whitespace in element content.
                 *
                 * @return  true if the factory is configured to produce parsers
                 *          which ignore ignorable whitespace in element content;
                 *          false otherwise.</member>
        <member name="M:biz.ritter.javapix.xml.parsers.DocumentBuilderFactory.isExpandEntityReferences">
                 * Indicates whether or not the factory is configured to produce
                 * parsers which expand entity reference nodes.
                 *
                 * @return  true if the factory is configured to produce parsers
                 *          which expand entity reference nodes; false otherwise.</member>
        <member name="M:biz.ritter.javapix.xml.parsers.DocumentBuilderFactory.isIgnoringComments">
                 * Indicates whether or not the factory is configured to produce
                 * parsers which ignores comments.
                 *
                 * @return  true if the factory is configured to produce parsers
                 *          which ignores comments; false otherwise.</member>
        <member name="M:biz.ritter.javapix.xml.parsers.DocumentBuilderFactory.isCoalescing">
                 * Indicates whether or not the factory is configured to produce
                 * parsers which converts CDATA nodes to Text nodes and appends it to
                 * the adjacent (if any) Text node.
                 *
                 * @return  true if the factory is configured to produce parsers
                 *          which converts CDATA nodes to Text nodes and appends it to
                 *          the adjacent (if any) Text node; false otherwise.</member>
        <member name="M:biz.ritter.javapix.xml.parsers.DocumentBuilderFactory.setAttribute(System.String,System.Object)">
                 * Allows the user to set specific attributes on the underlying
                 * implementation.
                 * @param name The name of the attribute.
                 * @param value The value of the attribute.
                 * @exception IllegalArgumentException thrown if the underlying
                 * implementation doesn't recognize the attribute.</member>
        <member name="M:biz.ritter.javapix.xml.parsers.DocumentBuilderFactory.getAttribute(System.String)">
                 * Allows the user to retrieve specific attributes on the underlying
                 * implementation.
                 * @param name The name of the attribute.
                 * @return value The value of the attribute.
                 * @exception IllegalArgumentException thrown if the underlying
                 * implementation doesn't recognize the attribute.</member>
        <member name="M:biz.ritter.javapix.xml.parsers.DocumentBuilderFactory.setFeature(System.String,System.Boolean)">
            	 * <p>Set a feature for this <code>DocumentBuilderFactory</code> and <code>DocumentBuilder</code>s created by this factory.</p>
            	 *
            	 * <p>
            	 * Feature names are fully qualified {@link java.net.URI}s.
            	 * Implementations may define their own features.
            	 * An {@link ParserConfigurationException} is thrown if this <code>DocumentBuilderFactory</code> or the
            	 * <code>DocumentBuilder</code>s it creates cannot support the feature.
            	 * It is possible for an <code>DocumentBuilderFactory</code> to expose a feature value but be unable to change its state.
            	 * </p>
            	 *
            	 * <p>
            	 * All implementations are required to support the {@link javax.xml.XMLConstants#FEATURE_SECURE_PROCESSING} feature.
            	 * When the feature is:</p>
            	 * <ul>
            	 *   <li>
            	 *     <code>true</code>: the implementation will limit XML processing to conform to implementation limits.
            	 *     Examples include entity expansion limits and XML Schema constructs that would consume large amounts of resources.
            	 *     If XML processing is limited for security reasons, it will be reported via a call to the registered
            	 *    {@link org.xml.sax.ErrorHandler#fatalError(SAXParseException exception)}.
            	 *     See {@link  DocumentBuilder#setErrorHandler(org.xml.sax.ErrorHandler errorHandler)}.
            	 *   </li>
            	 *   <li>
            	 *     <code>false</code>: the implementation will processing XML according to the XML specifications without
            	 *     regard to possible implementation limits.
            	 *   </li>
            	 * </ul>
            	 *
            	 * @param name Feature name.
            	 * @param value Is feature state <code>true</code> or <code>false</code>.
            	 *
            	 * @throws ParserConfigurationException if this <code>DocumentBuilderFactory</code> or the <code>DocumentBuilder</code>s
            	 *   it creates cannot support this feature.
                 * @throws NullPointerException If the <code>name</code> parameter is null.</member>
        <member name="M:biz.ritter.javapix.xml.parsers.DocumentBuilderFactory.getFeature(System.String)">
            	 * <p>Get the state of the named feature.</p>
            	 *
            	 * <p>
            	 * Feature names are fully qualified {@link java.net.URI}s.
            	 * Implementations may define their own features.
            	 * An {@link ParserConfigurationException} is thrown if this <code>DocumentBuilderFactory</code> or the
            	 * <code>DocumentBuilder</code>s it creates cannot support the feature.
            	 * It is possible for an <code>DocumentBuilderFactory</code> to expose a feature value but be unable to change its state.
            	 * </p>
            	 *
            	 * @param name Feature name.
            	 *
            	 * @return State of the named feature.
            	 *
            	 * @throws ParserConfigurationException if this <code>DocumentBuilderFactory</code>
            	 *   or the <code>DocumentBuilder</code>s it creates cannot support this feature.</member>
        <member name="M:biz.ritter.javapix.xml.parsers.DocumentBuilderFactory.getSchema">
                 * Gets the {@link Schema} object specified through
                 * the {@link #setSchema(Schema schema)} method.
                 *
                 *
                 * @throws UnsupportedOperationException
                 *      For backward compatibility, when implementations for
                 *      earlier versions of JAXP is used, this exception will be
                 *      thrown.
                 *
                 * @return
                 *      the {@link Schema} object that was last set through
                 *      the {@link #setSchema(Schema)} method, or null
                 *      if the method was not invoked since a {@link DocumentBuilderFactory}
                 *      is created.
                 *
                 * @since 1.5</member>
        <member name="M:biz.ritter.javapix.xml.parsers.DocumentBuilderFactory.setSchema(biz.ritter.javapix.xml.validation.Schema)">
                 * <p />Set the {@link Schema} to be used by parsers created
                 * from this factory.
                 *
                 * <p />
                 * When a {@link Schema} is non-null, a parser will use a validator
                 * created from it to validate documents before it passes information
                 * down to the application.
                 *
                 * <p />When errors are found by the validator, the parser is responsible
                 * to report them to the user-specified {@link org.xml.sax.ErrorHandler}
                 * (or if the error handler is not set, ignore them or throw them), just
                 * like any other errors found by the parser itself.
                 * In other words, if the user-specified {@link org.xml.sax.ErrorHandler}
                 * is set, it must receive those errors, and if not, they must be
                 * treated according to the implementation specific
                 * default error handling rules.
                 *
                 * <p />
                 * A validator may modify the outcome of a parse (for example by
                 * adding default values that were missing in documents), and a parser
                 * is responsible to make sure that the application will receive
                 * modified DOM trees.
                 *
                 * <p />
                 * Initially, null is set as the {@link Schema}.
                 *
                 * <p />
                 * This processing will take effect even if
                 * the {@link #isValidating()} method returns <tt>false</tt>.
                 *
                 * <p>It is an error to use
                 * the <code>http://java.sun.com/xml/jaxp/properties/schemaSource</code>
                 * property and/or the <code>http://java.sun.com/xml/jaxp/properties/schemaLanguage</code>
                 * property in conjunction with a {@link Schema} object.
                 * Such configuration will cause a {@link ParserConfigurationException}
                 * exception when the {@link #newDocumentBuilder()} is invoked.</p>
                 *
                 *
                 * <h4>Note for implementors</h4>
                 * <p />
                 * A parser must be able to work with any {@link Schema}
                 * implementation. However, parsers and schemas are allowed
                 * to use implementation-specific custom mechanisms
                 * as long as they yield the result described in the specification.
                 *
                 * @param schema <code>Schema</code> to use or <code>null</code> to remove a schema.
                 *
                 * @throws UnsupportedOperationException
                 *      For backward compatibility, when implementations for
                 *      earlier versions of JAXP is used, this exception will be
                 *      thrown.
                 *
                 * @since 1.5</member>
        <member name="M:biz.ritter.javapix.xml.parsers.DocumentBuilderFactory.setXIncludeAware(System.Boolean)">
                 * <p>Set state of XInclude processing.</p>
                 *
                 * <p>If XInclude markup is found in the document instance, should it be
                 * processed as specified in <a href="http://www.w3.org/TR/xinclude/">
                 * XML Inclusions (XInclude) Version 1.0</a>.</p>
                 *
                 * <p>XInclude processing defaults to <code>false</code>.</p>
                 *
                 * @param state Set XInclude processing to <code>true</code> or
                 *   <code>false</code>
                 *
                 * @throws UnsupportedOperationException
                 *      For backward compatibility, when implementations for
                 *      earlier versions of JAXP is used, this exception will be
                 *      thrown.
                 *
                 * @since 1.5</member>
        <member name="M:biz.ritter.javapix.xml.parsers.DocumentBuilderFactory.isXIncludeAware">
                 * <p>Get state of XInclude processing.</p>
                 *
                 * @return current state of XInclude processing
                 *
                 * @throws UnsupportedOperationException
                 *      For backward compatibility, when implementations for
                 *      earlier versions of JAXP is used, this exception will be
                 *      thrown.
                 *
                 * @since 1.5</member>
        <member name="T:biz.ritter.javapix.xml.validation.Schema">
             * Immutable in-memory representation of grammar.
             *
             * <p />
             * This object represents a set of constraints that can be checked/
             * enforced against an XML document.
             *
             * <p />
             * A {@link Schema} object is thread safe and applications are
             * encouraged to share it across many parsers in many threads.
             *
             * <p />
             * A {@link Schema} object is immutable in the sense that it shouldn't
             * change the set of constraints once it is created. In other words,
             * if an application validates the same document twice against the same
             * {@link Schema}, it must always produce the same result.
             *
             * <p />
             * A {@link Schema} object is usually created from {@link SchemaFactory}.
             *
             * <p />
             * Two kinds of validators can be created from a {@link Schema} object.
             * One is {@link Validator}, which provides highly-level validation
             * operations that cover typical use cases. The other is
             * {@link ValidatorHandler}, which works on top of SAX for better
             * modularity.
             *
             * <p />
             * This specification does not refine
             * the {@link java.lang.Object#equals(java.lang.Object)} method.
             * In other words, if you parse the same schema twice, you may
             * still get <code>!schemaA.equals(schemaB)</code>.
             *
             * @author <a href="mailto:Kohsuke.Kawaguchi@Sun.com">Kohsuke Kawaguchi</a>
             * @version $Revision: 446598 $, $Date: 2006-09-15 08:55:40 -0400 (Fri, 15 Sep 2006) $
             * @see <a href="http://www.w3.org/TR/xmlschema-1/">XML Schema Part 1: Structures</a>
             * @see <a href="http://www.w3.org/TR/xml11/">Extensible Markup Language (XML) 1.1</a>
             * @see <a href="http://www.w3.org/TR/REC-xml">Extensible Markup Language (XML) 1.0 (Second Edition)</a>
             * @since 1.5</member>
        <member name="M:biz.ritter.javapix.xml.validation.Schema.#ctor">
                 * Constructor for the derived class.
                 *
                 * <p />
                 * The constructor does nothing.</member>
        <member name="M:biz.ritter.javapix.xml.validation.Schema.newValidator">
                 * Creates a new {@link Validator} for this {@link Schema}.
                 *
                 * <p />
                 * A validator enforces/checks the set of constraints this object
                 * represents.
                 *
                 * @return
                 *      Always return a non-null valid object.</member>
        <member name="M:biz.ritter.javapix.xml.validation.Schema.newValidatorHandler">
                 * Creates a new {@link ValidatorHandler} for this {@link Schema}.
                 *
                 * @return
                 *      Always return a non-null valid object.</member>
        <member name="T:biz.ritter.javapix.xml.validation.Validator">
             * <p>A processor that checks an XML document against {@link Schema}.</p>
             *
             * <p />
             * A validator is a thread-unsafe and non-reentrant object.
             * In other words, it is the application's responsibility to make
             * sure that one {@link Validator} object is not used from
             * more than one thread at any given time, and while the <tt>validate</tt>
             * method is invoked, applications may not recursively call
             * the <tt>validate</tt> method.
             * <p />
             *
             * Note that while the {@link #validate(javax.xml.transform.Source)} and {@link #validate(javax.xml.transform.Source, javax.xml.transform.Result)}
             * methods take a {@link Source} instance, the <code>Source</code>
             * instance must be a <code>SAXSource</code>, <code>DOMSource</code>, <code>StAXSource</code> or <code>StreamSource</code>.
             *
             * @author  <a href="mailto:Kohsuke.Kawaguchi@Sun.com">Kohsuke Kawaguchi</a>
             * @version $Revision: 888884 $, $Date: 2009-12-09 12:36:46 -0500 (Wed, 09 Dec 2009) $
             * @since 1.5</member>
        <member name="M:biz.ritter.javapix.xml.validation.Validator.#ctor">
                 * Constructor for derived classes.
                 *
                 * <p />
                 * The constructor does nothing.
                 *
                 * <p />
                 * Derived classes must create {@link Validator} objects that have
                 * <tt>null</tt> {@link ErrorHandler} and
                 * <tt>null</tt> {@link LSResourceResolver}.</member>
        <member name="M:biz.ritter.javapix.xml.validation.Validator.reset">
            	 * <p>Reset this <code>Validator</code> to its original configuration.</p>
            	 *
            	 * <p><code>Validator</code> is reset to the same state as when it was created with
            	 * {@link Schema#newValidator()}.
            	 * <code>reset()</code> is designed to allow the reuse of existing <code>Validator</code>s
            	 * thus saving resources associated with the creation of new <code>Validator</code>s.</p>
            	 *
            	 * <p>The reset <code>Validator</code> is not guaranteed to have the same {@link LSResourceResolver} or {@link ErrorHandler}
            	 * <code>Object</code>s, e.g. {@link Object#equals(Object obj)}.  It is guaranteed to have a functionally equal
            	 * <code>LSResourceResolver</code> and <code>ErrorHandler</code>.</p></member>
        <member name="M:biz.ritter.javapix.xml.validation.Validator.validate(biz.ritter.javapix.xml.transform.Source)">
                 * Validates the specified input.
                 *
                 * <p />
                 * This is just a convenience method of:
                 * <pre>
                 * validate(source,null);
                 * </pre>
                 *
                 * @see #setErrorHandler(ErrorHandler)</member>
        <member name="M:biz.ritter.javapix.xml.validation.Validator.validate(biz.ritter.javapix.xml.transform.Source,biz.ritter.javapix.xml.transform.Result)">
                 * Validates the specified input and send the augmented validation
                 * result to the specified output.
                 *
                 * <p />
                 * This method places the following restrictions on the types of
                 * the {@link Source}/{@link Result} accepted.
                 *
                 * <h4>{@link Source}/{@link Result} accepted:</h4>
                 * <table border="1">
                 * <thead>
                 *  <tr>
                 *   <td></td>
                 *   <td>{@link javax.xml.transform.sax.SAXSource}</td>
                 *   <td>{@link javax.xml.transform.dom.DOMSource}</td>
                 *   <td>{@link javax.xml.transform.stax.StAXSource}</td>
                 *   <td>{@link javax.xml.transform.stream.StreamSource}</td>
                 *  </tr>
                 * </thead>
                 * <tbody>
                 *  <tr>
                 *   <td><tt>null</tt></td>
                 *   <td>OK</td>
                 *   <td>OK</td>
                 *   <td>OK</td>
                 *   <td>OK</td>
                 *  </tr>
                 *  <tr>
                 *   <td>{@link javax.xml.transform.sax.SAXResult}</td>
                 *   <td>OK</td>
                 *   <td>Err</td>
                 *   <td>Err</td>
                 *   <td>Err</td>
                 *  </tr>
                 *  <tr>
                 *   <td>{@link javax.xml.transform.dom.DOMResult}</td>
                 *   <td>Err</td>
                 *   <td>OK</td>
                 *   <td>Err</td>
                 *   <td>Err</td>
                 *  </tr>
                 *  <tr>
                 *   <td>{@link javax.xml.transform.stax.StAXResult}</td>
                 *   <td>Err</td>
                 *   <td>Err</td>
                 *   <td>OK</td>
                 *   <td>Err</td>
                 *  </tr>
                 *  <tr>
                 *   <td>{@link javax.xml.transform.stream.StreamResult}</td>
                 *   <td>Err</td>
                 *   <td>Err</td>
                 *   <td>Err</td>
                 *   <td>OK</td>
                 *  </tr>
                 * </tbody>
                 * </table>
                 *
                 * <p />
                 * To validate one {@link Source} into another kind of {@link Result}, use the identity transformer
                 * (see {@link javax.xml.transform.TransformerFactory#newTransformer()}).
                 *
                 * <p />
                 * Errors found during the validation is sent to the specified
                 * {@link ErrorHandler}.
                 *
                 * <p />
                 * If a document is valid, or if a document contains some errors
                 * but none of them were fatal and the {@link ErrorHandler} didn't
                 * throw any exception, then the method returns normally.
                 *
                 * @param source
                 *      XML to be validated. Must not be null.
                 *
                 * @param result
                 *      The {@link Result} object that receives (possibly augmented)
                 *      XML. This parameter can be null if the caller is not interested
                 *      in it.
                 *
                 *      Note that when a {@link javax.xml.transform.dom.DOMResult} is used,
                 *      a validator might just pass the same DOM node from
                 *      {@link javax.xml.transform.dom.DOMSource} to
                 *      {@link javax.xml.transform.dom.DOMResult}
                 *      (in which case <tt>source.getNode()==result.getNode()</tt>),
                 *      it might copy the entire DOM tree, or it might alter the
                 *      node given by the source.
                 *
                 * @throws IllegalArgumentException
                 *      If the {@link Result} type doesn't match the {@link Source} type,
                 *      or if the specified source is not a
                 *      {@link javax.xml.transform.sax.SAXSource},
                 *      {@link javax.xml.transform.dom.DOMSource},
                 *      {@link javax.xml.transform.stax.StAXSource} or
                 *      {@link javax.xml.transform.stream.StreamSource}.
                 *
                 * @throws SAXException
                 *      If the {@link ErrorHandler} throws a {@link SAXException} or
                 *      if a fatal error is found and the {@link ErrorHandler} returns
                 *      normally.
                 *
                 * @throws IOException
                 *      If the validator is processing a
                 *      {@link javax.xml.transform.sax.SAXSource} and the
                 *      underlying {@link org.xml.sax.XMLReader} throws an
                 *      {@link IOException}.
                 *
                 * @throws NullPointerException
                 *      If the <tt>source</tt> parameter is null.
                 *
                 * @see #validate(Source)</member>
        <member name="M:biz.ritter.javapix.xml.validation.Validator.setErrorHandler(org.xml.sax.ErrorHandler)">
                 * Sets the {@link ErrorHandler} to receive errors encountered
                 * during the <code>validate</code> method invocation.
                 *
                 * <p />
                 * Error handler can be used to customize the error handling process
                 * during a validation. When an {@link ErrorHandler} is set,
                 * errors found during the validation will be first sent
                 * to the {@link ErrorHandler}.
                 *
                 * <p />
                 * The error handler can abort further validation immediately
                 * by throwing {@link SAXException} from the handler. Or for example
                 * it can print an error to the screen and try to continue the
                 * validation by returning normally from the {@link ErrorHandler}
                 *
                 * <p />
                 * If any {@link Throwable} is thrown from an {@link ErrorHandler},
                 * the caller of the <code>validate</code> method will be thrown
                 * the same {@link Throwable} object.
                 *
                 * <p />
                 * {@link Validator} is not allowed to
                 * throw {@link SAXException} without first reporting it to
                 * {@link ErrorHandler}.
                 *
                 * <p />
                 * When the {@link ErrorHandler} is null, the implementation will
                 * behave as if the following {@link ErrorHandler} is set:
                 * <pre>
                 * class DraconianErrorHandler implements {@link ErrorHandler} {
                 *     public void fatalError( {@link org.xml.sax.SAXParseException} e ) throws {@link SAXException} {
                 *         throw e;
                 *     }
                 *     public void error( {@link org.xml.sax.SAXParseException} e ) throws {@link SAXException} {
                 *         throw e;
                 *     }
                 *     public void warning( {@link org.xml.sax.SAXParseException} e ) throws {@link SAXException} {
                 *         // noop
                 *     }
                 * }
                 * </pre>
                 *
                 * <p />
                 * When a new {@link Validator} object is created, initially
                 * this field is set to null.
                 *
                 * @param   errorHandler
                 *      A new error handler to be set. This parameter can be null.</member>
        <member name="M:biz.ritter.javapix.xml.validation.Validator.getErrorHandler">
                 * Gets the current {@link ErrorHandler} set to this {@link Validator}.
                 *
                 * @return
                 *      This method returns the object that was last set through
                 *      the {@link #setErrorHandler(ErrorHandler)} method, or null
                 *      if that method has never been called since this {@link Validator}
                 *      has created.
                 *
                 * @see #setErrorHandler(ErrorHandler)</member>
        <member name="M:biz.ritter.javapix.xml.validation.Validator.setResourceResolver(org.w3c.dom.ls.LSResourceResolver)">
                 * Sets the {@link LSResourceResolver} to customize
                 * resource resolution while in a validation episode.
                 *
                 * <p />
                 * {@link Validator} uses a {@link LSResourceResolver}
                 * when it needs to locate external resources while a validation,
                 * although exactly what constitutes "locating external resources" is
                 * up to each schema language.
                 *
                 * <p />
                 * When the {@link LSResourceResolver} is null, the implementation will
                 * behave as if the following {@link LSResourceResolver} is set:
                 * <pre>
                 * class DumbLSResourceResolver implements {@link LSResourceResolver} {
                 *     public {@link org.w3c.dom.ls.LSInput} resolveResource(
                 *         String publicId, String systemId, String baseURI) {
                 *
                 *         return null; // always return null
                 *     }
                 * }
                 * </pre>
                 *
                 * <p />
                 * If a {@link LSResourceResolver} throws a {@link RuntimeException}
                 *  (or instances of its derived classes),
                 * then the {@link Validator} will abort the parsing and
                 * the caller of the <code>validate</code> method will receive
                 * the same {@link RuntimeException}.
                 *
                 * <p />
                 * When a new {@link Validator} object is created, initially
                 * this field is set to null.
                 *
                 * @param   resourceResolver
                 *      A new resource resolver to be set. This parameter can be null.</member>
        <member name="M:biz.ritter.javapix.xml.validation.Validator.getResourceResolver">
                 * Gets the current {@link LSResourceResolver} set to this {@link Validator}.
                 *
                 * @return
                 *      This method returns the object that was last set through
                 *      the {@link #setResourceResolver(LSResourceResolver)} method, or null
                 *      if that method has never been called since this {@link Validator}
                 *      has created.
                 *
                 * @see #setErrorHandler(ErrorHandler)</member>
        <member name="M:biz.ritter.javapix.xml.validation.Validator.getFeature(System.String)">
                 * Look up the value of a feature flag.
                 *
                 * <p />The feature name is any fully-qualified URI.  It is
                 * possible for a {@link Validator} to recognize a feature name but
                 * temporarily be unable to return its value.
                 * Some feature values may be available only in specific
                 * contexts, such as before, during, or after a validation.
                 *
                 * <p>Implementors are free (and encouraged) to invent their own features,
                 * using names built on their own URIs.</p>
                 *
                 * @param name The feature name, which is a non-null fully-qualified URI.
                 * @return The current value of the feature (true or false).
                 * @exception org.xml.sax.SAXNotRecognizedException If the feature
                 *            value can't be assigned or retrieved.
                 * @exception org.xml.sax.SAXNotSupportedException When the
                 *            {@link Validator} recognizes the feature name but
                 *            cannot determine its value at this time.
                 * @throws NullPointerException
                 *          When the name parameter is null.
                 * @see #setFeature(String, boolean)</member>
        <member name="M:biz.ritter.javapix.xml.validation.Validator.setFeature(System.String,System.Boolean)">
                 * Set the value of a feature flag.
                 *
                 * <p>
                 * Feature can be used to control the way a {@link Validator}
                 * parses schemas, although {@link Validator}s are not required
                 * to recognize any specific property names.</p>
                 *
                 * <p>The feature name is any fully-qualified URI.  It is
                 * possible for a {@link Validator} to expose a feature value but
                 * to be unable to change the current value.
                 * Some feature values may be immutable or mutable only
                 * in specific contexts, such as before, during, or after
                 * a validation.</p>
                 *
                 * @param name The feature name, which is a non-null fully-qualified URI.
                 * @param value The requested value of the feature (true or false).
                 *
                 * @exception org.xml.sax.SAXNotRecognizedException If the feature
                 *            value can't be assigned or retrieved.
                 * @exception org.xml.sax.SAXNotSupportedException When the
                 *            {@link Validator} recognizes the feature name but
                 *            cannot set the requested value.
                 * @throws NullPointerException
                 *          When the name parameter is null.
                 *
                 * @see #getFeature(String)</member>
        <member name="M:biz.ritter.javapix.xml.validation.Validator.setProperty(System.String,System.Object)">
                 * Set the value of a property.
                 *
                 * <p>The property name is any fully-qualified URI.  It is
                 * possible for a {@link Validator} to recognize a property name but
                 * to be unable to change the current value.
                 * Some property values may be immutable or mutable only
                 * in specific contexts, such as before, during, or after
                 * a validation.</p>
                 *
                 * <p>{@link Validator}s are not required to recognize setting
                 * any specific property names.</p>
                 *
                 * @param name The property name, which is a non-null fully-qualified URI.
                 * @param object The requested value for the property.
                 * @exception org.xml.sax.SAXNotRecognizedException If the property
                 *            value can't be assigned or retrieved.
                 * @exception org.xml.sax.SAXNotSupportedException When the
                 *            {@link Validator} recognizes the property name but
                 *            cannot set the requested value.
                 * @throws NullPointerException
                 *          When the name parameter is null.</member>
        <member name="M:biz.ritter.javapix.xml.validation.Validator.getProperty(System.String)">
                 * Look up the value of a property.
                 *
                 * <p>The property name is any fully-qualified URI.  It is
                 * possible for a {@link Validator} to recognize a property name but
                 * temporarily be unable to return its value.
                 * Some property values may be available only in specific
                 * contexts, such as before, during, or after a validation.</p>
                 *
                 * <p>{@link Validator}s are not required to recognize any specific
                 * property names.</p>
                 *
                 * <p>Implementors are free (and encouraged) to invent their own properties,
                 * using names built on their own URIs.</p>
                 *
                 * @param name The property name, which is a non-null fully-qualified URI.
                 * @return The current value of the property.
                 * @exception org.xml.sax.SAXNotRecognizedException If the property
                 *            value can't be assigned or retrieved.
                 * @exception org.xml.sax.SAXNotSupportedException When the
                 *            XMLReader recognizes the property name but
                 *            cannot determine its value at this time.
                 * @throws NullPointerException
                 *          When the name parameter is null.
                 * @see #setProperty(String, Object)</member>
        <member name="T:biz.ritter.javapix.xml.validation.ValidatorHandler">
             * Streaming validator that works on SAX stream.
             *
             * <p />
             * A {@link ValidatorHandler} object is a thread-unsafe, non-reentrant object.
             * In other words, it is the application's responsibility to make
             * sure that one {@link ValidatorHandler} object is not used from
             * more than one thread at any given time.
             *
             * <p />
             * {@link ValidatorHandler} checks if the SAX events follow
             * the set of constraints described in the associated {@link Schema},
             * and additionally it may modify the SAX events (for example
             * by adding default values, etc.)
             *
             * <p />
             * {@link ValidatorHandler} extends from {@link ContentHandler},
             * but it refines the underlying {@link ContentHandler} in
             * the following way:
             * <ol>
             *  <li>startElement/endElement events must receive non-null String
             *      for <code>uri</code>, <code>localName</code>, and <code>qname</code>,
             *      even though SAX allows some of them to be null.
             *      Similarly, the user-specified {@link ContentHandler} will receive non-null
             *      Strings for all three parameters.</li>
             *
             *  <li>Applications must ensure that {@link ValidatorHandler}'s
             *      {@link ContentHandler#startPrefixMapping(String,String)} and
             *      {@link ContentHandler#endPrefixMapping(String)} are invoked
             *      properly. Similarly, the user-specified {@link ContentHandler}
             *      will receive startPrefixMapping/endPrefixMapping events.
             *      If the {@link ValidatorHandler} introduces additional namespace
             *      bindings, the user-specified {@link ContentHandler} will receive
             *      additional startPrefixMapping/endPrefixMapping events.</li>
             *
             *  <li>{@link org.xml.sax.Attributes} for the
             *      {@link ContentHandler#startElement(String,String,String,Attributes)} method
             *      may or may not include xmlns* attributes.</li>
             * </ol>
             *
             * <p />
             * A {@link ValidatorHandler} is automatically reset every time
             * the startDocument method is invoked.
             *
             * <h2>Recognized Properties and Features</h2>
             * <p />
             * This spec defines the following feature that must be recognized
             * by all {@link ValidatorHandler} implementations.
             *
             * <h3><code>http://xml.org/sax/features/namespace-prefixes</code></h3>
             * <p />
             * This feature controls how a {@link ValidatorHandler} introduces
             * namespace bindings that were not present in the original SAX event
             * stream.
             * When this feature is set to true, it must make
             * sure that the user's {@link ContentHandler} will see
             * the corresponding <code>xmlns*</code> attribute in
             * the {@link org.xml.sax.Attributes} object of the
             * {@link ContentHandler#startElement(String,String,String,Attributes)}
             * callback. Otherwise, <code>xmlns*</code> attributes must not be
             * added to {@link org.xml.sax.Attributes} that's passed to the
             * user-specified {@link ContentHandler}.
             * <p />
             * (Note that regardless of this switch, namespace bindings are
             * always notified to applications through
             * {@link ContentHandler#startPrefixMapping(String,String)} and
             * {@link ContentHandler#endPrefixMapping(String)} methods of the
             * {@link ContentHandler} specified by the user.)
             *
             * <p />
             * Note that this feature does <em>NOT</em> affect the way
             * a {@link ValidatorHandler} receives SAX events. It merely
             * changes the way it augments SAX events.
             *
             * <p>This feature is set to <code>false</code> by default.</p>
             *
             * @author  <a href="mailto:Kohsuke.Kawaguchi@Sun.com">Kohsuke Kawaguchi</a>
             * @version $Revision: 446598 $, $Date: 2006-09-15 08:55:40 -0400 (Fri, 15 Sep 2006) $
             * @since 1.5</member>
        <member name="M:biz.ritter.javapix.xml.validation.ValidatorHandler.#ctor">
                 * Constructor for derived classes.
                 *
                 * <p />
                 * The constructor does nothing.
                 *
                 * <p />
                 * Derived classes must create {@link ValidatorHandler} objects that have
                 * <tt>null</tt> {@link ErrorHandler} and
                 * <tt>null</tt> {@link LSResourceResolver}.</member>
        <member name="M:biz.ritter.javapix.xml.validation.ValidatorHandler.setContentHandler(org.xml.sax.ContentHandler)">
                 * Sets the {@link ContentHandler} which receives
                 * the augmented validation result.
                 *
                 * <p />
                 * When a {@link ContentHandler} is specified, a
                 * {@link ValidatorHandler} will work as a filter
                 * and basically copy the incoming events to the
                 * specified {@link ContentHandler}.
                 *
                 * <p />
                 * In doing so, a {@link ValidatorHandler} may modify
                 * the events, for example by adding defaulted attributes.
                 *
                 * <p />
                 * A {@link ValidatorHandler} may buffer events to certain
                 * extent, but to allow {@link ValidatorHandler} to be used
                 * by a parser, the following requirement has to be met.
                 *
                 * <ol>
                 *  <li>When
                 *      {@link ContentHandler#startElement(String, String, String, Attributes)},
                 *      {@link ContentHandler#endElement(String, String, String)},
                 *      {@link ContentHandler#startDocument()}, or
                 *      {@link ContentHandler#endDocument()}
                 *      are invoked on a {@link ValidatorHandler},
                 *      the same method on the user-specified {@link ContentHandler}
                 *      must be invoked for the same event before the callback
                 *      returns.</li>
                 *  <li>{@link ValidatorHandler} may not introduce new elements that
                 *      were not present in the input.</li>
                 *
                 *  <li>{@link ValidatorHandler} may not remove attributes that were
                 *      present in the input.</li>
                 * </ol>
                 *
                 * <p />
                 * When a callback method on the specified {@link ContentHandler}
                 * throws an exception, the same exception object must be thrown
                 * from the {@link ValidatorHandler}. The {@link ErrorHandler}
                 * should not be notified of such an exception.
                 *
                 * <p />
                 * This method can be called even during a middle of a validation.
                 *
                 * @param receiver
                 *      A {@link ContentHandler} or a null value.</member>
        <member name="M:biz.ritter.javapix.xml.validation.ValidatorHandler.getContentHandler">
                 * Gets the {@link ContentHandler} which receives the
                 * augmented validation result.
                 *
                 * @return
                 *      This method returns the object that was last set through
                 *      the {@link #getContentHandler()} method, or null
                 *      if that method has never been called since this {@link ValidatorHandler}
                 *      has created.
                 *
                 * @see #setContentHandler(ContentHandler)</member>
        <member name="M:biz.ritter.javapix.xml.validation.ValidatorHandler.setErrorHandler(org.xml.sax.ErrorHandler)">
                 * Sets the {@link ErrorHandler} to receive errors encountered
                 * during the validation.
                 *
                 * <p />
                 * Error handler can be used to customize the error handling process
                 * during a validation. When an {@link ErrorHandler} is set,
                 * errors found during the validation will be first sent
                 * to the {@link ErrorHandler}.
                 *
                 * <p />
                 * The error handler can abort further validation immediately
                 * by throwing {@link org.xml.sax.SAXException} from the handler. Or for example
                 * it can print an error to the screen and try to continue the
                 * validation by returning normally from the {@link ErrorHandler}
                 *
                 * <p />
                 * If any {@link Throwable} is thrown from an {@link ErrorHandler},
                 * the same {@link Throwable} object will be thrown toward the
                 * root of the call stack.
                 *
                 * <p />
                 * {@link ValidatorHandler} is not allowed to
                 * throw {@link org.xml.sax.SAXException} without first reporting it to
                 * {@link ErrorHandler}.
                 *
                 * <p />
                 * When the {@link ErrorHandler} is null, the implementation will
                 * behave as if the following {@link ErrorHandler} is set:
                 * <pre>
                 * class DraconianErrorHandler implements {@link ErrorHandler} {
                 *     public void fatalError( {@link org.xml.sax.SAXParseException} e ) throws {@link org.xml.sax.SAXException} {
                 *         throw e;
                 *     }
                 *     public void error( {@link org.xml.sax.SAXParseException} e ) throws {@link org.xml.sax.SAXException} {
                 *         throw e;
                 *     }
                 *     public void warning( {@link org.xml.sax.SAXParseException} e ) throws {@link org.xml.sax.SAXException} {
                 *         // noop
                 *     }
                 * }
                 * </pre>
                 *
                 * <p />
                 * When a new {@link ValidatorHandler} object is created, initially
                 * this field is set to null.
                 *
                 * @param   errorHandler
                 *      A new error handler to be set. This parameter can be null.</member>
        <member name="M:biz.ritter.javapix.xml.validation.ValidatorHandler.getErrorHandler">
                 * Gets the current {@link ErrorHandler} set to this {@link ValidatorHandler}.
                 *
                 * @return
                 *      This method returns the object that was last set through
                 *      the {@link #setErrorHandler(ErrorHandler)} method, or null
                 *      if that method has never been called since this {@link ValidatorHandler}
                 *      has created.
                 *
                 * @see #setErrorHandler(ErrorHandler)</member>
        <member name="M:biz.ritter.javapix.xml.validation.ValidatorHandler.setResourceResolver(org.w3c.dom.ls.LSResourceResolver)">
                 * Sets the {@link LSResourceResolver} to customize
                 * resource resolution while in a validation episode.
                 *
                 * <p />
                 * {@link ValidatorHandler} uses a {@link LSResourceResolver}
                 * when it needs to locate external resources while a validation,
                 * although exactly what constitutes "locating external resources" is
                 * up to each schema language.
                 *
                 * <p />
                 * When the {@link LSResourceResolver} is null, the implementation will
                 * behave as if the following {@link LSResourceResolver} is set:
                 * <pre>
                 * class DumbLSResourceResolver implements {@link LSResourceResolver} {
                 *     public {@link org.w3c.dom.ls.LSInput} resolveResource(
                 *         String publicId, String systemId, String baseURI) {
                 *
                 *         return null; // always return null
                 *     }
                 * }
                 * </pre>
                 *
                 * <p />
                 * If a {@link LSResourceResolver} throws a {@link RuntimeException}
                 *  (or instances of its derived classes),
                 * then the {@link ValidatorHandler} will abort the parsing and
                 * the caller of the <code>validate</code> method will receive
                 * the same {@link RuntimeException}.
                 *
                 * <p />
                 * When a new {@link ValidatorHandler} object is created, initially
                 * this field is set to null.
                 *
                 * @param   resourceResolver
                 *      A new resource resolver to be set. This parameter can be null.</member>
        <member name="M:biz.ritter.javapix.xml.validation.ValidatorHandler.getResourceResolver">
                 * Gets the current {@link LSResourceResolver} set to this {@link ValidatorHandler}.
                 *
                 * @return
                 *      This method returns the object that was last set through
                 *      the {@link #setResourceResolver(LSResourceResolver)} method, or null
                 *      if that method has never been called since this {@link ValidatorHandler}
                 *      has created.
                 *
                 * @see #setErrorHandler(ErrorHandler)</member>
        <member name="M:biz.ritter.javapix.xml.validation.ValidatorHandler.getTypeInfoProvider">
                 * Obtains the {@link TypeInfoProvider} implementation of this
                 * {@link ValidatorHandler}.
                 *
                 * <p />
                 * The obtained {@link TypeInfoProvider} can be queried during a parse
                 * to access the type information determined by the validator.
                 *
                 * <p />
                 * Some schema languages do not define the notion of type,
                 * for those languages, this method may not be supported.
                 * However, to be compliant with this specification, implementations
                 * for W3C XML Schema 1.0 must support this operation.
                 *
                 * @return
                 *      null if the validator / schema language does not support
                 *      the notion of {@link org.w3c.dom.TypeInfo}.
                 *      Otherwise a non-null valid {@link TypeInfoProvider}.</member>
        <member name="M:biz.ritter.javapix.xml.validation.ValidatorHandler.getFeature(System.String)">
                 * Look up the value of a feature flag.
                 *
                 * <p />The feature name is any fully-qualified URI.  It is
                 * possible for a {@link ValidatorHandler} to recognize a feature name but
                 * temporarily be unable to return its value.
                 * Some feature values may be available only in specific
                 * contexts, such as before, during, or after a validation.
                 *
                 * <p>Implementors are free (and encouraged) to invent their own features,
                 * using names built on their own URIs.</p>
                 *
                 * @param name The feature name, which is a non-null fully-qualified URI.
                 * @return The current value of the feature (true or false).
                 * @exception org.xml.sax.SAXNotRecognizedException If the feature
                 *            value can't be assigned or retrieved.
                 * @exception org.xml.sax.SAXNotSupportedException When the
                 *            {@link ValidatorHandler} recognizes the feature name but
                 *            cannot determine its value at this time.
                 * @throws NullPointerException
                 *          When the name parameter is null.
                 * @see #setFeature(String, boolean)</member>
        <member name="M:biz.ritter.javapix.xml.validation.ValidatorHandler.setFeature(System.String,System.Boolean)">
                 * Set the value of a feature flag.
                 *
                 * <p>
                 * Feature can be used to control the way a {@link ValidatorHandler}
                 * parses schemas, although {@link ValidatorHandler}s are not required
                 * to recognize any specific property names.</p>
                 *
                 * <p>The feature name is any fully-qualified URI.  It is
                 * possible for a {@link ValidatorHandler} to expose a feature value but
                 * to be unable to change the current value.
                 * Some feature values may be immutable or mutable only
                 * in specific contexts, such as before, during, or after
                 * a validation.</p>
                 *
                 * @param name The feature name, which is a non-null fully-qualified URI.
                 * @param value The requested value of the feature (true or false).
                 *
                 * @exception org.xml.sax.SAXNotRecognizedException If the feature
                 *            value can't be assigned or retrieved.
                 * @exception org.xml.sax.SAXNotSupportedException When the
                 *            {@link ValidatorHandler} recognizes the feature name but
                 *            cannot set the requested value.
                 * @throws NullPointerException
                 *          When the name parameter is null.
                 *
                 * @see #getFeature(String)</member>
        <member name="M:biz.ritter.javapix.xml.validation.ValidatorHandler.setProperty(System.String,System.Object)">
                 * Set the value of a property.
                 *
                 * <p>The property name is any fully-qualified URI.  It is
                 * possible for a {@link ValidatorHandler} to recognize a property name but
                 * to be unable to change the current value.
                 * Some property values may be immutable or mutable only
                 * in specific contexts, such as before, during, or after
                 * a validation.</p>
                 *
                 * <p>{@link ValidatorHandler}s are not required to recognize setting
                 * any specific property names.</p>
                 *
                 * @param name The property name, which is a non-null fully-qualified URI.
                 * @param object The requested value for the property.
                 *
                 * @exception org.xml.sax.SAXNotRecognizedException If the property
                 *            value can't be assigned or retrieved.
                 * @exception org.xml.sax.SAXNotSupportedException When the
                 *            {@link ValidatorHandler} recognizes the property name but
                 *            cannot set the requested value.
                 * @throws NullPointerException
                 *          When the name parameter is null.</member>
        <member name="M:biz.ritter.javapix.xml.validation.ValidatorHandler.getProperty(System.String)">
                 * Look up the value of a property.
                 *
                 * <p>The property name is any fully-qualified URI.  It is
                 * possible for a {@link ValidatorHandler} to recognize a property name but
                 * temporarily be unable to return its value.
                 * Some property values may be available only in specific
                 * contexts, such as before, during, or after a validation.</p>
                 *
                 * <p>{@link ValidatorHandler}s are not required to recognize any specific
                 * property names.</p>
                 *
                 * <p>Implementors are free (and encouraged) to invent their own properties,
                 * using names built on their own URIs.</p>
                 *
                 * @param name The property name, which is a non-null fully-qualified URI.
                 * @return The current value of the property.
                 * @exception org.xml.sax.SAXNotRecognizedException If the property
                 *            value can't be assigned or retrieved.
                 * @exception org.xml.sax.SAXNotSupportedException When the
                 *            XMLReader recognizes the property name but
                 *            cannot determine its value at this time.
                 * @throws NullPointerException
                 *          When the name parameter is null.
                 * @see #setProperty(String, Object)</member>
        <!--FIXME: Invalid documentation markup was found for member T:biz.ritter.javapix.xml.validation.TypeInfoProvider-->
        <member name="M:biz.ritter.javapix.xml.validation.TypeInfoProvider.#ctor">
                 * Constructor for the derived class.
                 *
                 * <p />
                 * The constructor does nothing.</member>
        <!--FIXME: Invalid documentation markup was found for member M:biz.ritter.javapix.xml.validation.TypeInfoProvider.getElementTypeInfo-->
        <member name="M:biz.ritter.javapix.xml.validation.TypeInfoProvider.getAttributeTypeInfo(System.Int32)">
                 * Returns the immutable {@link TypeInfo} object for the specified
                 * attribute of the current element.
                 *
                 * <p />
                 * The method may only be called by the startElement event of
                 * the {@link org.xml.sax.ContentHandler} that the application sets to the
                 * {@link ValidatorHandler}.
                 *
                 * @param index
                 *      The index of the attribute. The same index for
                 *      the {@link org.xml.sax.Attributes} object passed to the
                 *      <tt>startElement</tt> callback.
                 *
                 * @throws IndexOutOfBoundsException
                 *      If the index is invalid.
                 * @throws IllegalStateException
                 *      If this method is called from other {@link org.xml.sax.ContentHandler}
                 *      methods.
                 *
                 * @return
                 *      An immutable {@link TypeInfo} object that represents the
                 *      type of the specified attribute.
                 *      Note that the caller can keep references to the obtained
                 *      {@link TypeInfo} longer than the callback scope.
                 *
                 *      Otherwise, this method returns
                 *      null if the validator is unable to
                 *      determine the type.</member>
        <member name="M:biz.ritter.javapix.xml.validation.TypeInfoProvider.isIdAttribute(System.Int32)">
                 * Returns <tt>true</tt> if the specified attribute is determined
                 * to be ID.
                 *
                 * <p />
                 * Exactly how an attribute is "determined to be ID" is up to the
                 * schema language. In case of W3C XML Schema, this means
                 * that the actual type of the attribute is the built-in ID type
                 * or its derived type.
                 *
                 * <p />
                 * A {@link javax.xml.parsers.DocumentBuilder} uses this information
                 * to properly implement {@link org.w3c.dom.Attr#isId()}.
                 *
                 * <p />
                 * The method may only be called by the startElement event of
                 * the {@link org.xml.sax.ContentHandler} that the application sets to the
                 * {@link ValidatorHandler}.
                 *
                 * @param index
                 *      The index of the attribute. The same index for
                 *      the {@link org.xml.sax.Attributes} object passed to the
                 *      <tt>startElement</tt> callback.
                 *
                 * @throws IndexOutOfBoundsException
                 *      If the index is invalid.
                 * @throws IllegalStateException
                 *      If this method is called from other {@link org.xml.sax.ContentHandler}
                 *      methods.
                 *
                 * @return true
                 *      if the type of the specified attribute is ID.</member>
        <member name="M:biz.ritter.javapix.xml.validation.TypeInfoProvider.isSpecified(System.Int32)">
                 * Returns <tt>false</tt> if the attribute was added by the validator.
                 *
                 * <p />
                 * This method provides information necessary for
                 * a {@link javax.xml.parsers.DocumentBuilder} to determine what
                 * the DOM tree should return from the {@link org.w3c.dom.Attr#getSpecified()} method.
                 *
                 * <p />
                 * The method may only be called by the startElement event of
                 * the {@link org.xml.sax.ContentHandler} that the application sets to the
                 * {@link ValidatorHandler}.
                 *
                 * <p />
                 * A general guideline for validators is to return true if
                 * the attribute was originally present in the pipeline, and
                 * false if it was added by the validator.
                 *
                 * @param index
                 *      The index of the attribute. The same index for
                 *      the {@link org.xml.sax.Attributes} object passed to the
                 *      <tt>startElement</tt> callback.
                 *
                 * @throws IndexOutOfBoundsException
                 *      If the index is invalid.
                 * @throws IllegalStateException
                 *      If this method is called from other {@link org.xml.sax.ContentHandler}
                 *      methods.
                 *
                 * @return
                 *      <tt>true</tt> if the attribute was present before the validator
                 *      processes input. <tt>false</tt> if the attribute was added
                 *      by the validator.</member>
        <member name="T:biz.ritter.javapix.xml.parsers.DocumentBuilder">
             * Defines the API to obtain DOM Document instances from an XML
             * document. Using this class, an application programmer can obtain a
             * {@link Document} from XML.<p />
             *
             * An instance of this class can be obtained from the
             * {@link DocumentBuilderFactory#newDocumentBuilder()} method. Once
             * an instance of this class is obtained, XML can be parsed from a
             * variety of input sources. These input sources are InputStreams,
             * Files, URLs, and SAX InputSources.<p />
             *
             * Note that this class reuses several classes from the SAX API. This
             * does not require that the implementor of the underlying DOM
             * implementation use a SAX parser to parse XML document into a
             * <code>Document</code>. It merely requires that the implementation
             * communicate with the application using these existing APIs.
             *
             * @author <a href="mailto:Jeff.Suttor@Sun.com">Jeff Suttor</a>
             * @version $Revision: 584483 $, $Date: 2007-10-13 22:54:48 -0400 (Sat, 13 Oct 2007) $</member>
        <member name="M:biz.ritter.javapix.xml.parsers.DocumentBuilder.#ctor">
             Protected constructor</member>
        <member name="M:biz.ritter.javapix.xml.parsers.DocumentBuilder.reset">
            	  * <p>Reset this <code>DocumentBuilder</code> to its original configuration.</p>
            	  *
            	  * <p><code>DocumentBuilder</code> is reset to the same state as when it was created with
            	  * {@link DocumentBuilderFactory#newDocumentBuilder()}.
            	  * <code>reset()</code> is designed to allow the reuse of existing <code>DocumentBuilder</code>s
            	  * thus saving resources associated with the creation of new <code>DocumentBuilder</code>s.</p>
            	  *
            	  * <p>The reset <code>DocumentBuilder</code> is not guaranteed to have the same {@link EntityResolver} or {@link ErrorHandler}
            	  * <code>Object</code>s, e.g. {@link Object#equals(Object obj)}.  It is guaranteed to have a functionally equal
            	  * <code>EntityResolver</code> and <code>ErrorHandler</code>.</p>
            	  *
            	  * @since 1.5</member>
        <member name="M:biz.ritter.javapix.xml.parsers.DocumentBuilder.parse(biz.ritter.javapi.io.InputStream)">
                 * Parse the content of the given <code>InputStream</code> as an XML
                 * document and return a new DOM {@link Document} object.
                 * An <code>IllegalArgumentException</code> is thrown if the
                 * <code>InputStream</code> is null.
                 *
                 * @param is InputStream containing the content to be parsed.
                 * @return <code>Document</code> result of parsing the
                 *  <code>InputStream</code>
                 * @exception IOException If any IO errors occur.
                 * @exception SAXException If any parse errors occur.
                 * @see org.xml.sax.DocumentHandler</member>
        <member name="M:biz.ritter.javapix.xml.parsers.DocumentBuilder.parse(biz.ritter.javapi.io.InputStream,System.String)">
                 * Parse the content of the given <code>InputStream</code> as an
                 * XML document and return a new DOM {@link Document} object.
                 * An <code>IllegalArgumentException</code> is thrown if the
                 * <code>InputStream</code> is null.
                 *
                 * @param is InputStream containing the content to be parsed.
                 * @param systemId Provide a base for resolving relative URIs.
                 * @return A new DOM Document object.
                 * @exception IOException If any IO errors occur.
                 * @exception SAXException If any parse errors occur.
                 * @see org.xml.sax.DocumentHandler</member>
        <member name="M:biz.ritter.javapix.xml.parsers.DocumentBuilder.parse(System.String)">
                 * Parse the content of the given URI as an XML document
                 * and return a new DOM {@link Document} object.
                 * An <code>IllegalArgumentException</code> is thrown if the
                 * URI is <code>null</code> null.
                 *
                 * @param uri The location of the content to be parsed.
                 * @return A new DOM Document object.
                 * @exception IOException If any IO errors occur.
                 * @exception SAXException If any parse errors occur.
                 * @see org.xml.sax.DocumentHandler</member>
        <member name="M:biz.ritter.javapix.xml.parsers.DocumentBuilder.parse(biz.ritter.javapi.io.File)">
                 * Parse the content of the given file as an XML document
                 * and return a new DOM {@link Document} object.
                 * An <code>IllegalArgumentException</code> is thrown if the
                 * <code>File</code> is <code>null</code> null.
                 *
                 * @param f The file containing the XML to parse.
                 * @exception IOException If any IO errors occur.
                 * @exception SAXException If any parse errors occur.
                 * @see org.xml.sax.DocumentHandler
                 * @return A new DOM Document object.</member>
        <member name="M:biz.ritter.javapix.xml.parsers.DocumentBuilder.parse(org.xml.sax.InputSource)">
                 * Parse the content of the given input source as an XML document
                 * and return a new DOM {@link Document} object.
                 * An <code>IllegalArgumentException</code> is thrown if the
                 * <code>InputSource</code> is <code>null</code> null.
                 *
                 * @param is InputSource containing the content to be parsed.
                 * @exception IOException If any IO errors occur.
                 * @exception SAXException If any parse errors occur.
                 * @see org.xml.sax.DocumentHandler
                 * @return A new DOM Document object.</member>
        <member name="M:biz.ritter.javapix.xml.parsers.DocumentBuilder.isNamespaceAware">
                 * Indicates whether or not this parser is configured to
                 * understand namespaces.
                 *
                 * @return true if this parser is configured to understand
                 *         namespaces; false otherwise.</member>
        <member name="M:biz.ritter.javapix.xml.parsers.DocumentBuilder.isValidating">
                 * Indicates whether or not this parser is configured to
                 * validate XML documents.
                 *
                 * @return true if this parser is configured to validate
                 *         XML documents; false otherwise.</member>
        <member name="M:biz.ritter.javapix.xml.parsers.DocumentBuilder.setEntityResolver(org.xml.sax.EntityResolver)">
                 * Specify the {@link EntityResolver} to be used to resolve
                 * entities present in the XML document to be parsed. Setting
                 * this to <code>null</code> will result in the underlying
                 * implementation using it's own default implementation and
                 * behavior.
                 *
                 * @param er The <code>EntityResolver</code> to be used to resolve entities
                 *           present in the XML document to be parsed.</member>
        <member name="M:biz.ritter.javapix.xml.parsers.DocumentBuilder.setErrorHandler(org.xml.sax.ErrorHandler)">
                 * Specify the {@link ErrorHandler} to be used by the parser.
                 * Setting this to <code>null</code> will result in the underlying
                 * implementation using it's own default implementation and
                 * behavior.
                 *
                 * @param eh The <code>ErrorHandler</code> to be used by the parser.</member>
        <member name="M:biz.ritter.javapix.xml.parsers.DocumentBuilder.newDocument">
                 * Obtain a new instance of a DOM {@link Document} object
                 * to build a DOM tree with.
                 *
                 * @return A new instance of a DOM Document object.</member>
        <member name="M:biz.ritter.javapix.xml.parsers.DocumentBuilder.getDOMImplementation">
                 * Obtain an instance of a {@link DOMImplementation} object.
                 *
                 * @return A new instance of a <code>DOMImplementation</code>.</member>
        <member name="M:biz.ritter.javapix.xml.parsers.DocumentBuilder.getSchema">
            <p>Get a reference to the the {@link Schema} being used by
                 * the XML processor.</p>
                 *
                 * <p>If no schema is being used, <code>null</code> is returned.</p>
                 *
                 * @return {@link Schema} being used or <code>null</code>
                 *  if none in use
                 *
                 * @throws UnsupportedOperationException
                 *      For backward compatibility, when implementations for
                 *      earlier versions of JAXP is used, this exception will be
                 *      thrown.
                 *
                 * @since 1.5</member>
        <member name="M:biz.ritter.javapix.xml.parsers.DocumentBuilder.isXIncludeAware">
                 * <p>Get the XInclude processing mode for this parser.</p>
                 *
                 * @return
                 *      the return value of
                 *      the {@link DocumentBuilderFactory#isXIncludeAware()}
                 *      when this parser was created from factory.
                 *
                 * @throws UnsupportedOperationException
                 *      For backward compatibility, when implementations for
                 *      earlier versions of JAXP is used, this exception will be
                 *      thrown.
                 *
                 * @since 1.5
                 *
                 * @see DocumentBuilderFactory#setXIncludeAware(boolean)</member>
        <member name="T:biz.ritter.javapix.xml.transform.TransformerException">
             * This class specifies an exceptional condition that occurred
             * during the transformation process.</member>
        <member name="F:biz.ritter.javapix.xml.transform.TransformerException.locator">
             Field locator specifies where the error occurred</member>
        <member name="M:biz.ritter.javapix.xml.transform.TransformerException.getLocator">
                 * Method getLocator retrieves an instance of a SourceLocator
                 * object that specifies where an error occurred.
                 *
                 * @return A SourceLocator object, or null if none was specified.</member>
        <member name="M:biz.ritter.javapix.xml.transform.TransformerException.setLocator(biz.ritter.javapix.xml.transform.SourceLocator)">
                 * Method setLocator sets an instance of a SourceLocator
                 * object that specifies where an error occurred.
                 *
                 * @param location A SourceLocator object, or null to clear the location.</member>
        <member name="F:biz.ritter.javapix.xml.transform.TransformerException.containedException">
             Field containedException specifies a wrapped exception.  May be null.</member>
        <member name="M:biz.ritter.javapix.xml.transform.TransformerException.getException">
                 * This method retrieves an exception that this exception wraps.
                 *
                 * @return An Throwable object, or null.
                 * @see #getCause</member>
        <member name="M:biz.ritter.javapix.xml.transform.TransformerException.getCause">
                 * Returns the cause of this throwable or <code>null</code> if the
                 * cause is nonexistent or unknown.  (The cause is the throwable that
                 * caused this throwable to get thrown.)</member>
        <member name="M:biz.ritter.javapix.xml.transform.TransformerException.initCause(biz.ritter.javapi.lang.Throwable)">
                 * Initializes the <i>cause</i> of this throwable to the specified value.
                 * (The cause is the throwable that caused this throwable to get thrown.)
                 *
                 * <p />This method can be called at most once.  It is generally called from
                 * within the constructor, or immediately after creating the
                 * throwable.  If this throwable was created
                 * with {@link #TransformerException(Throwable)} or
                 * {@link #TransformerException(String,Throwable)}, this method cannot be called
                 * even once.
                 *
                 * @param  cause the cause (which is saved for later retrieval by the
                 *         {@link #getCause()} method).  (A <tt>null</tt> value is
                 *         permitted, and indicates that the cause is nonexistent or
                 *         unknown.)
                 * @return  a reference to this <code>Throwable</code> instance.
                 * @throws IllegalArgumentException if <code>cause</code> is this
                 *         throwable.  (A throwable cannot
                 *         be its own cause.)
                 * @throws IllegalStateException if this throwable was
                 *         created with {@link #TransformerException(Throwable)} or
                 *         {@link #TransformerException(String,Throwable)}, or this method has already
                 *         been called on this throwable.</member>
        <member name="M:biz.ritter.javapix.xml.transform.TransformerException.#ctor(System.String)">
                 * Create a new TransformerException.
                 *
                 * @param message The error or warning message.</member>
        <member name="M:biz.ritter.javapix.xml.transform.TransformerException.#ctor(biz.ritter.javapi.lang.Throwable)">
                 * Create a new TransformerException wrapping an existing exception.
                 *
                 * @param e The exception to be wrapped.</member>
        <member name="M:biz.ritter.javapix.xml.transform.TransformerException.#ctor(System.String,biz.ritter.javapi.lang.Throwable)">
                 * Wrap an existing exception in a TransformerException.
                 *
                 * <p>This is used for throwing processor exceptions before
                 * the processing has started.</p>
                 *
                 * @param message The error or warning message, or null to
                 *                use the message from the embedded exception.
                 * @param e Any exception</member>
        <member name="M:biz.ritter.javapix.xml.transform.TransformerException.#ctor(System.String,biz.ritter.javapix.xml.transform.SourceLocator)">
                 * Create a new TransformerException from a message and a Locator.
                 *
                 * <p>This constructor is especially useful when an application is
                 * creating its own exception from within a DocumentHandler
                 * callback.</p>
                 *
                 * @param message The error or warning message.
                 * @param locator The locator object for the error or warning.</member>
        <member name="M:biz.ritter.javapix.xml.transform.TransformerException.#ctor(System.String,biz.ritter.javapix.xml.transform.SourceLocator,biz.ritter.javapi.lang.Throwable)">
                 * Wrap an existing exception in a TransformerException.
                 *
                 * @param message The error or warning message, or null to
                 *                use the message from the embedded exception.
                 * @param locator The locator object for the error or warning.
                 * @param e Any exception</member>
        <member name="M:biz.ritter.javapix.xml.transform.TransformerException.getMessageAndLocation">
                 * Get the error message with location information
                 * appended.
                 *
                 * @return A <code>String</code> representing the error message with
                 *         location information appended.</member>
        <member name="M:biz.ritter.javapix.xml.transform.TransformerException.getLocationAsString">
                 * Get the location information as a string.
                 *
                 * @return A string with location info, or null
                 * if there is no location information.</member>
        <member name="M:biz.ritter.javapix.xml.transform.TransformerException.printStackTrace">
                 * Print the the trace of methods from where the error
                 * originated.  This will trace all nested exception
                 * objects, as well as this object.</member>
        <member name="M:biz.ritter.javapix.xml.transform.TransformerException.printStackTrace(biz.ritter.javapi.io.PrintStream)">
                 * Print the the trace of methods from where the error
                 * originated.  This will trace all nested exception
                 * objects, as well as this object.
                 * @param s The stream where the dump will be sent to.</member>
        <member name="M:biz.ritter.javapix.xml.transform.TransformerException.printStackTrace(biz.ritter.javapi.io.PrintWriter)">
                 * Print the the trace of methods from where the error
                 * originated.  This will trace all nested exception
                 * objects, as well as this object.
                 * @param s The writer where the dump will be sent to.</member>
        <member name="T:biz.ritter.javapix.xml.transform.SourceLocator">
             * This interface is primarily for the purposes of reporting where
             * an error occurred in the XML source or transformation instructions.</member>
        <member name="M:biz.ritter.javapix.xml.transform.SourceLocator.getPublicId">
                 * Return the public identifier for the current document event.
                 *
                 * <p>The return value is the public identifier of the document
                 * entity or of the external parsed entity in which the markup that
                 * triggered the event appears.</p>
                 *
                 * @return A string containing the public identifier, or
                 *         null if none is available.
                 * @see #getSystemId</member>
        <member name="M:biz.ritter.javapix.xml.transform.SourceLocator.getSystemId">
                 * Return the system identifier for the current document event.
                 *
                 * <p>The return value is the system identifier of the document
                 * entity or of the external parsed entity in which the markup that
                 * triggered the event appears.</p>
                 *
                 * <p>If the system identifier is a URL, the parser must resolve it
                 * fully before passing it to the application.</p>
                 *
                 * @return A string containing the system identifier, or null
                 *         if none is available.
                 * @see #getPublicId</member>
        <member name="M:biz.ritter.javapix.xml.transform.SourceLocator.getLineNumber">
                 * Return the line number where the current document event ends.
                 *
                 * <p><strong>Warning:</strong> The return value from the method
                 * is intended only as an approximation for the sake of error
                 * reporting; it is not intended to provide sufficient information
                 * to edit the character content of the original XML document.</p>
                 *
                 * <p>The return value is an approximation of the line number
                 * in the document entity or external parsed entity where the
                 * markup that triggered the event appears.</p>
                 *
                 * @return The line number, or -1 if none is available.
                 * @see #getColumnNumber</member>
        <member name="M:biz.ritter.javapix.xml.transform.SourceLocator.getColumnNumber">
                 * Return the character position where the current document event ends.
                 *
                 * <p><strong>Warning:</strong> The return value from the method
                 * is intended only as an approximation for the sake of error
                 * reporting; it is not intended to provide sufficient information
                 * to edit the character content of the original XML document.</p>
                 *
                 * <p>The return value is an approximation of the column number
                 * in the document entity or external parsed entity where the
                 * markup that triggered the event appears.</p>
                 *
                 * @return The column number, or -1 if none is available.
                 * @see #getLineNumber</member>
        <member name="T:biz.ritter.javapix.xml.parsers.ParserConfigurationException">
             * Indicates a serious configuration error.
             *
             * @author <a href="mailto:Jeff.Suttor@Sun.com">Jeff Suttor</a>
             * @version $Revision: 569981 $, $Date: 2007-08-26 23:59:07 -0400 (Sun, 26 Aug 2007) $</member>
        <member name="M:biz.ritter.javapix.xml.parsers.ParserConfigurationException.#ctor">
                 * Create a new <code>ParserConfigurationException</code> with no
                 * detail message.</member>
        <member name="M:biz.ritter.javapix.xml.parsers.ParserConfigurationException.#ctor(System.String)">
                 * Create a new <code>ParserConfigurationException</code> with
                 * the <code>String</code> specified as an error message.
                 *
                 * @param msg The error message for the exception.</member>
        <member name="T:biz.ritter.javapix.xml.parsers.FactoryFinder">
             * This class is duplicated for each JAXP subpackage so keep it in
             * sync.  It is package private.
             *
             * This code is designed to implement the JAXP 1.1 spec pluggability
             * feature and is designed to run on JDK version 1.1 and later including
             * JVMs that perform early linking like the Microsoft JVM in IE 5.  Note
             * however that it must be compiled on a JDK version 1.2 or later system
             * since it calls Thread#getContextClassLoader().  The code also runs both
             * as part of an unbundled jar file and when bundled as part of the JDK.</member>
        <member name="F:biz.ritter.javapix.xml.parsers.FactoryFinder.debug">
                 * <p>Debug flag to trace loading process.</p></member>
        <member name="F:biz.ritter.javapix.xml.parsers.FactoryFinder.cacheProps">
                 * <p>Cache properties for performance.</p></member>
        <member name="F:biz.ritter.javapix.xml.parsers.FactoryFinder.firstTime">
                 * <p>First time requires initialization overhead.</p></member>
        <member name="F:biz.ritter.javapix.xml.parsers.FactoryFinder.DEFAULT_LINE_LENGTH">
                 * Default columns per line.</member>
        <member name="M:biz.ritter.javapix.xml.parsers.FactoryFinder.newInstance(System.String,biz.ritter.javapi.lang.ClassLoader,System.Boolean)">
                 * Create an instance of a class using the specified ClassLoader and
                 * optionally fall back to the current ClassLoader if not found.
                 *
                 * @param className Name of the concrete class corresponding to the
                 * service provider
                 *
                 * @param cl ClassLoader to use to load the class, null means to use
                 * the bootstrap ClassLoader
                 *
                 * @param doFallback true if the current ClassLoader should be tried as
                 * a fallback if the class is not found using cl</member>
        <member name="M:biz.ritter.javapix.xml.parsers.FactoryFinder.find(System.String,System.String)">
                 * Finds the implementation Class object in the specified order.  Main
                 * entry point.
                 * @return Class object of factory, never null
                 *
                 * @param factoryId             Name of the factory to find, same as
                 *                              a property name
                 * @param fallbackClassName     Implementation class name, if nothing else
                 *                              is found.  Use null to mean no fallback.
                 *
                 * Package private so this code can be shared.</member>
        <member name="M:biz.ritter.javapix.xml.parsers.FactoryFinder.ConfigurationError.#ctor(System.String,biz.ritter.javapi.lang.Exception)">
                     * Construct a new instance with the specified detail string and
                     * exception.</member>
        <member name="T:biz.ritter.javapix.xml.parsers.SecuritySupport">
             * This class is duplicated for each JAXP subpackage so keep it in sync.
             * It is package private and therefore is not exposed as part of the JAXP
             * API.
             *
             * Security related methods that only work on J2SE 1.2 and newer.</member>
        <member name="T:biz.ritter.javapix.xml.parsers.FactoryConfigurationError">
             * Thrown when a problem with configuration with the Parser Factories
             * exists. This error will typically be thrown when the class of a
             * parser factory specified in the system properties cannot be found
             * or instantiated.
             *
             * @author <a href="mailto:Jeff.Suttor@Sun.com">Jeff Suttor</a>
             * @version $Revision: 569980 $, $Date: 2007-08-26 23:58:15 -0400 (Sun, 26 Aug 2007) $</member>
        <member name="F:biz.ritter.javapix.xml.parsers.FactoryConfigurationError.exception">
                 *<code>Exception</code> that represents the error.</member>
        <member name="M:biz.ritter.javapix.xml.parsers.FactoryConfigurationError.#ctor">
                 * Create a new <code>FactoryConfigurationError</code> with no
                 * detail message.</member>
        <member name="M:biz.ritter.javapix.xml.parsers.FactoryConfigurationError.#ctor(System.String)">
                 * Create a new <code>FactoryConfigurationError</code> with
                 * the <code>String </code> specified as an error message.
                 *
                 * @param msg The error message for the exception.</member>
        <member name="M:biz.ritter.javapix.xml.parsers.FactoryConfigurationError.#ctor(biz.ritter.javapi.lang.Exception)">
                 * Create a new <code>FactoryConfigurationError</code> with a
                 * given <code>Exception</code> base cause of the error.
                 *
                 * @param e The exception to be encapsulated in a
                 * FactoryConfigurationError.</member>
        <member name="M:biz.ritter.javapix.xml.parsers.FactoryConfigurationError.#ctor(biz.ritter.javapi.lang.Exception,System.String)">
                 * Create a new <code>FactoryConfigurationError</code> with the
                 * given <code>Exception</code> base cause and detail message.
                 *
                 * @param e The exception to be encapsulated in a
                 * FactoryConfigurationError
                 * @param msg The detail message.</member>
        <member name="M:biz.ritter.javapix.xml.parsers.FactoryConfigurationError.getMessage">
                 * Return the message (if any) for this error . If there is no
                 * message for the exception and there is an encapsulated
                 * exception then the message of that exception, if it exists will be
                 * returned. Else the name of the encapsulated exception will be
                 * returned.
                 *
                 * @return The error message.</member>
        <member name="M:biz.ritter.javapix.xml.parsers.FactoryConfigurationError.getException">
                 * Return the actual exception (if any) that caused this exception to
                 * be raised.
                 *
                 * @return The encapsulated exception, or null if there is none.</member>
        <member name="T:org.apache.xpath.XPathAPI">
             * The methods in this class are convenience methods into the
             * low-level XPath API.
             * These functions tend to be a little slow, since a number of objects must be
             * created for each evaluation.  A faster way is to precompile the
             * XPaths using the low-level API, and then just use the XPaths
             * over and over.
             *
             * NOTE: In particular, each call to this method will create a new
             * XPathContext, a new DTMManager... and thus a new DTM. That's very
             * safe, since it guarantees that you're always processing against a
             * fully up-to-date view of your document. But it's also portentially
             * very expensive, since you're rebuilding the DTM every time. You should
             * consider using an instance of CachedXPathAPI rather than these static
             * methods.
             *
             * @see <a href="http://www.w3.org/TR/xpath">XPath Specification</a>
             *</member>
        <member name="M:org.apache.xpath.XPathAPI.selectNodeList(org.w3c.dom.Node,System.String)">
               *  Use an XPath string to select a nodelist.
               *  XPath namespace prefixes are resolved from the contextNode.
               *
               *  @param contextNode The node to start searching from.
               *  @param str A valid XPath string.
               *  @return A NodeIterator, should never be null.
               *
               * @throws TransformerException</member>
        <member name="M:org.apache.xpath.XPathAPI.selectNodeList(org.w3c.dom.Node,System.String,org.w3c.dom.Node)">
               *  Use an XPath string to select a nodelist.
               *  XPath namespace prefixes are resolved from the namespaceNode.
               *
               *  @param contextNode The node to start searching from.
               *  @param str A valid XPath string.
               *  @param namespaceNode The node from which prefixes in the XPath will be resolved to namespaces.
               *  @return A NodeIterator, should never be null.
               *
               * @throws TransformerException</member>
        <member name="T:biz.ritter.javapi.lang.annotation.Annotation">
            <summary>
            Do not use directly, better use AbstractAnnotation!!!
            </summary>
        </member>
        <member name="T:biz.ritter.javapi.lang.annotation.AbstractAnnotation">
                 * Defines the interface implemented by all annotations. Note that the interface
                 * itself is <i>not</i> an annotation, and neither is an interface that simply
                 * extends this one. Only the compiler is able to create proper annotation
                 * types.
                 *
                 * <strong>Basties Note: implemented as abstract class</strong>
                 * @since 1.5</member>
        <member name="M:biz.ritter.javapi.lang.annotation.AbstractAnnotation.annotationType">
                     * Returns the type of this annotation.
                     *
                     * @return A {@code Class} instance representing the annotation type.</member>
        <member name="M:biz.ritter.javapi.lang.annotation.AbstractAnnotation.equals(System.Object)">
                     * Determines whether or not this annotation is equivalent to the annotation
                     * passed. This is determined according to the following rules:
                     *
                     * <ul>
                     *     <li>
                     *         Two annotations {@code x} and {@code y} are equal if and only if
                     *         they are members of the same annotation type and all the member
                     *         values of {@code x} are equal to the corresponding member values
                     *         of {@code y}.
                     *     </li>
                     *     <li>
                     *         The equality of primitive member values {@code x} and {@code y}
                     *         is determined (in a way similar to) using the corresponding
                     *         wrapper classes. For example,
                     *         {@code Integer.valueOf(x).equals(Integer.valueOf(y)} is used for
                     *         {@code int} values. Note: The behavior is identical to the
                     *         {@code ==} operator for all but the floating point type, so the
                     *         implementation may as well use {@code ==} in these cases for
                     *         performance reasons. Only for the {@code float} and {@code double}
                     *         types the result will be slightly different: {@code NaN} is equal
                     *         to {@code NaN}, and {@code -0.0} is equal to {@code 0.0}, both of
                     *         which is normally not the case.
                     *     </li>
                     *     <li>
                     *         The equality of two array member values {@code x} and {@code y}
                     *         is determined using the corresponding {@code equals(x, y)}
                     *         helper function in {@link java.util.Arrays}.
                     *     </li>
                     *     <li>
                     *         The hash code for all other member values is determined by simply
                     *         calling their {@code equals()} method.
                     *     </li>
                     * </ul>
                     *
                     * @param obj
                     *            The object to compare to.
                     *
                     * @return {@code true} if {@code obj} is equal to this annotation,
                     *            {@code false} otherwise.</member>
        <member name="M:biz.ritter.javapi.lang.annotation.AbstractAnnotation.hashCode">
                     * Returns the hash code of this annotation. The hash code is determined
                     * according to the following rules:
                     *
                     * <ul>
                     *     <li>
                     *         The hash code of an annotation is the sum of the hash codes of
                     *         its annotation members.
                     *     </li>
                     *     <li>
                     *         The hash code of an annotation member is calculated as {@code
                     *         (0x7f * n.hashCode()) ^ v.hashCode())}, where {@code n} is the
                     *         name of the member (as a {@code String}) and {@code v} its value.
                     *     </li>
                     *     <li>
                     *         The hash code for a primitive member value is determined using
                     *         the corresponding wrapper type. For example, {@code
                     *         Integer.valueOf(v).hashCode()} is used for an {@code int} value
                     *         {@code v}.
                     *     </li>
                     *     <li>
                     *         The hash code for an array member value {@code v} is determined
                     *         using the corresponding {@code hashCode(v)} helper function in
                     *         {@link java.util.Arrays}.
                     *     </li>
                     *     <li>
                     *         The hash code for all other member values is determined by simply
                     *         calling their {@code hashCode} method.
                     *     </li>
                     * </ul>
                     *
                     * @return the hash code.</member>
        <member name="M:biz.ritter.javapi.lang.annotation.AbstractAnnotation.toString">
                     * Returns a {@code String} representation of this annotation. It is not
                     * strictly defined what the representation has to look like, but it usually
                     * consists of the name of the annotation, preceded by a "@". If the
                     * annotation contains field members, their names and values are also
                     * included in the result.
                     *
                     * @return the {@code String} that represents this annotation.</member>
        <member name="T:biz.ritter.javapi.lang.annotation.RetentionPolicy">
             * Defines an enumeration for annotation retention policies. Used in conjunction
             * with the {@link Retention} annotation to specify an annotation's time-to-live
             * in the overall development life cycle.
             *
             * @since 1.5</member>
        <member name="F:biz.ritter.javapi.lang.annotation.RetentionPolicy.SOURCE">
                 * Annotation is only available in the source code.</member>
        <member name="F:biz.ritter.javapi.lang.annotation.RetentionPolicy.CLASS">
                 * Annotation is available in the source code and in the class file, but not
                 * at runtime. This is the default policy.</member>
        <member name="F:biz.ritter.javapi.lang.annotation.RetentionPolicy.RUNTIME">
                 * Annotation is available in the source code, the class file and is
                 * available at runtime.</member>
        <member name="T:biz.ritter.javapi.lang.annotation.Documented">
             * Defines a meta-annotation for indicating that an annotation is documented and
             * considered part of the public API.
             *
             * @since 1.5</member>
        <member name="T:biz.ritter.javapi.lang.annotation.Retention">
             * Defines a meta-annotation for determining the scope of retention for an
             * annotation. If the retention annotation is not set {@code
             * RetentionPolicy.CLASS} is used as default retention.
             *
             * @see RetentionPolicy
             * @since 1.5</member>
        <member name="M:biz.ritter.javapi.lang.annotation.Retention.value">
                 * Returns the retention policy for the annotation.
                 *
                 * @return a retention policy as defined in {@code RetentionPolicy}</member>
        <member name="T:biz.ritter.javapi.lang.annotation.Target">
             * Defines a meta-annotation for determining what {@link ElementType}s an
             * annotation can be applied to.
             *
             * @see ElementType
             * @since 1.5</member>
        <member name="M:biz.ritter.javapi.lang.annotation.Target.value">
                 * Returns the program element types for which this annotation is applied.
                 *
                 * @return the types of element as defined by {@code ElementType}</member>
        <member name="T:biz.ritter.javapi.lang.annotation.ElementType">
             * Defines an enumeration for Java program elements. It is used in conjunction
             * with the {@link Target} meta-annotation to restrict the use of an annotation
             * to certain program elements.
             *
             * @since 1.5</member>
        <member name="F:biz.ritter.javapi.lang.annotation.ElementType.TYPE">
                 * Class, interface or enum declaration.</member>
        <member name="F:biz.ritter.javapi.lang.annotation.ElementType.FIELD">
                 * Field declaration.</member>
        <member name="F:biz.ritter.javapi.lang.annotation.ElementType.METHOD">
                 * Method declaration.</member>
        <member name="F:biz.ritter.javapi.lang.annotation.ElementType.PARAMETER">
                 * Parameter declaration.</member>
        <member name="F:biz.ritter.javapi.lang.annotation.ElementType.CONSTRUCTOR">
                 * Constructor declaration.</member>
        <member name="F:biz.ritter.javapi.lang.annotation.ElementType.LOCAL_VARIABLE">
                 * Local variable declaration.</member>
        <member name="F:biz.ritter.javapi.lang.annotation.ElementType.ANNOTATION_TYPE">
                 * Annotation type declaration.</member>
        <member name="F:biz.ritter.javapi.lang.annotation.ElementType.PACKAGE">
                 * Package declaration.</member>
        <member name="T:biz.ritter.javapi.lang.annotation.AnnotationFormatError">
             * Indicates that an annotation in the binary representation of a class is
             * syntactically incorrect and the annotation parser is unable to process it.
             * This exception is unlikely to ever occur, given that the code has been
             * compiled by an ordinary Java compiler.
             *
             * @since 1.5</member>
        <member name="M:biz.ritter.javapi.lang.annotation.AnnotationFormatError.#ctor(System.String)">
                 * Constructs an instance with the message provided.
                 *
                 * @param message
                 *            the details of the error.</member>
        <member name="M:biz.ritter.javapi.lang.annotation.AnnotationFormatError.#ctor(System.String,biz.ritter.javapi.lang.Throwable)">
                 * Constructs an instance with a message and a cause.
                 *
                 * @param message
                 *            the details of the error.
                 * @param cause
                 *            the cause of the error or {@code null} if none.</member>
        <member name="M:biz.ritter.javapi.lang.annotation.AnnotationFormatError.#ctor(biz.ritter.javapi.lang.Throwable)">
                 * Constructs an instance with a cause. If the cause is not
                 * {@code null}, then {@code cause.toString()} is used as the
                 * error's message.
                 *
                 * @param cause
                 *            the cause of the error or {@code null} if none.</member>
        <member name="T:biz.ritter.javapi.lang.annotation.AnnotationTypeMismatchException">
             * Indicates that an annotation type has changed since it was compiled or
             * serialized.
             *
             * @since 1.5</member>
        <member name="M:biz.ritter.javapi.lang.annotation.AnnotationTypeMismatchException.#ctor(biz.ritter.javapi.lang.reflect.Method,System.String)">
                 * Constructs an instance for the given type element and the type found.
                 *
                 * @param element
                 *            the annotation type element.
                 * @param foundType
                 *            the invalid type that was found. This is actually the textual
                 *            type description found in the binary class representation,
                 *            so it may not be human-readable.</member>
        <member name="M:biz.ritter.javapi.lang.annotation.AnnotationTypeMismatchException.element">
                 * Returns the method object for the invalid type.
                 *
                 * @return a {@link Method} instance.</member>
        <member name="M:biz.ritter.javapi.lang.annotation.AnnotationTypeMismatchException.foundType">
                 * Returns the invalid type.
                 *
                 * @return a string describing the invalid data.</member>
        <member name="T:biz.ritter.javapi.lang.annotation.IncompleteAnnotationException">
             * Indicates that an element of an annotation type was accessed that was added
             * after the type was compiled or serialized. This does not apply to new
             * elements that have default values.
             *
             * @since 1.5</member>
        <member name="M:biz.ritter.javapi.lang.annotation.IncompleteAnnotationException.#ctor(biz.ritter.javapi.lang.Class,System.String)">
                 * Constructs an instance with the incomplete annotation type and the name
                 * of the element that's missing.
                 *
                 * @param annotationType
                 *            the annotation type.
                 * @param elementName
                 *            the name of the incomplete element.</member>
        <member name="M:biz.ritter.javapi.lang.annotation.IncompleteAnnotationException.annotationType">
                 * Returns the annotation type.
                 *
                 * @return a Class instance.</member>
        <member name="M:biz.ritter.javapi.lang.annotation.IncompleteAnnotationException.elementName">
                 * Returns the incomplete element's name.
                 *
                 * @return the name of the element.</member>
        <member name="M:biz.ritter.javapi.MessageFormatConverter.convert(System.String)">
            <summary>
            Convert formatted Java Message to formatted C# Message
            </summary>
            <para>
                <strong>Java:</strong>
                <code>%[argument_index$][flags][width][.precision]conversion</code>
                <br />
                <strong>C#:</strong>
                <code>{index[,alignment][:formatString]}</code>
            </para>
            <para>
                <strong>Java:</strong>
                <code>"The %s costs $%.2f for %d months.%n", "studio", 499.0, 3</code>
                <br />
                <strong>C#:</strong>
                <code>"The {0} costs {1:C} for {2} months.\n", "studio", 499.0, 3</code>
            </para>
            <para>
                <strong>Java:</strong>
                <code>"Today is %tD%n", new java.util.Date()</code>
                <br />
                <strong>C#:</strong>
                <code>"Today is " + DateTime.Now.ToShortDateString()</code>
            </para>
            <param name="msg">Message.</param>
        </member>
        <member name="T:biz.ritter.javapi.lang.reflect.Proxy">
             * {@code Proxy} defines methods for creating dynamic proxy classes and instances.
             * A proxy class implements a declared set of interfaces and delegates method
             * invocations to an {@code InvocationHandler}.
             *
             * @see InvocationHandler
             * @since 1.3</member>
        <member name="F:biz.ritter.javapi.lang.reflect.Proxy.h">
                 * The invocation handler on which the method calls are dispatched.</member>
        <member name="M:biz.ritter.javapi.lang.reflect.Proxy.#ctor(biz.ritter.javapi.lang.reflect.InvocationHandler)">
                 * Constructs a new {@code Proxy} instance with the specified invocation
                 * handler.
                 *
                 * @param h
                 *            the invocation handler for the newly created proxy</member>
        <member name="M:biz.ritter.javapi.lang.reflect.Proxy.isProxyClass(biz.ritter.javapi.lang.Class)">
                 * Indicates whether or not the specified class is a dynamically generated
                 * proxy class.
                 *
                 * @param cl
                 *            the class
                 * @return {@code true} if the class is a proxy class, {@code false}
                 *         otherwise
                 * @throws NullPointerException
                 *                if the class is {@code null}</member>
        <member name="M:biz.ritter.javapi.lang.reflect.Proxy.getInvocationHandler(System.Object)">
                 * Returns the invocation handler of the specified proxy instance.
                 *
                 * @param proxy
                 *            the proxy instance
                 * @return the invocation handler of the specified proxy instance
                 * @throws IllegalArgumentException
                 *                if the supplied {@code proxy} is not a proxy object</member>
        <member name="T:biz.ritter.javapi.util.WeakHashMap`2">
             * WeakHashMap is an implementation of Map with keys which are WeakReferences. A
             * key/value mapping is removed when the key is no longer referenced. All
             * optional operations (adding and removing) are supported. Keys and values can
             * be any objects. Note that the garbage collector acts similar to a second
             * thread on this collection, possibly removing keys.
             *
             * @since 1.2
             * @see HashMap
             * @see WeakReference</member>
        <member name="M:biz.ritter.javapi.util.WeakHashMap`2.#ctor">
                 * Constructs a new empty {@code WeakHashMap} instance.</member>
        <member name="M:biz.ritter.javapi.util.WeakHashMap`2.#ctor(System.Int32)">
                 * Constructs a new {@code WeakHashMap} instance with the specified
                 * capacity.
                 *
                 * @param capacity
                 *            the initial capacity of this map.
                 * @throws IllegalArgumentException
                 *                if the capacity is less than zero.</member>
        <member name="M:biz.ritter.javapi.util.WeakHashMap`2.#ctor(System.Int32,System.Single)">
                 * Constructs a new {@code WeakHashMap} instance with the specified capacity
                 * and load factor.
                 *
                 * @param capacity
                 *            the initial capacity of this map.
                 * @param loadFactor
                 *            the initial load factor.
                 * @throws IllegalArgumentException
                 *             if the capacity is less than zero or the load factor is less
                 *             or equal to zero.</member>
        <member name="M:biz.ritter.javapi.util.WeakHashMap`2.#ctor(biz.ritter.javapi.util.Map{`0,`1})">
                 * Constructs a new {@code WeakHashMap} instance containing the mappings
                 * from the specified map.
                 *
                 * @param map
                 *            the mappings to add.</member>
        <member name="M:biz.ritter.javapi.util.WeakHashMap`2.clear">
                 * Removes all mappings from this map, leaving it empty.
                 *
                 * @see #isEmpty()
                 * @see #size()</member>
        <member name="M:biz.ritter.javapi.util.WeakHashMap`2.containsKey(System.Object)">
                 * Returns whether this map contains the specified key.
                 *
                 * @param key
                 *            the key to search for.
                 * @return {@code true} if this map contains the specified key,
                 *         {@code false} otherwise.</member>
        <member name="M:biz.ritter.javapi.util.WeakHashMap`2.entrySet">
                 * Returns a set containing all of the mappings in this map. Each mapping is
                 * an instance of {@link Map.Entry}. As the set is backed by this map,
                 * changes in one will be reflected in the other. It does not support adding
                 * operations.
                 *
                 * @return a set of the mappings.</member>
        <member name="M:biz.ritter.javapi.util.WeakHashMap`2.keySet">
                 * Returns a set of the keys contained in this map. The set is backed by
                 * this map so changes to one are reflected by the other. The set does not
                 * support adding.
                 *
                 * @return a set of the keys.</member>
        <member name="M:biz.ritter.javapi.util.WeakHashMap`2.values">
                 * Returns a collection of the values contained in this map. The collection
                 * is backed by this map so changes to one are reflected by the other. The
                 * collection supports remove, removeAll, retainAll and clear operations,
                 * and it does not support add or addAll operations.
                 * <p />
                 * This method returns a collection which is the subclass of
                 * AbstractCollection. The iterator method of this subclass returns a
                 * "wrapper object" over the iterator of map's entrySet(). The size method
                 * wraps the map's size method and the contains method wraps the map's
                 * containsValue method.
                 * <p />
                 * The collection is created when this method is called at first time and
                 * returned in response to all subsequent calls. This method may return
                 * different Collection when multiple calls to this method, since it has no
                 * synchronization performed.
                 *
                 * @return a collection of the values contained in this map.</member>
        <member name="M:biz.ritter.javapi.util.WeakHashMap`2.get(System.Object)">
                 * Returns the value of the mapping with the specified key.
                 *
                 * @param key
                 *            the key.
                 * @return the value of the mapping with the specified key, or {@code null}
                 *         if no mapping for the specified key is found.</member>
        <member name="M:biz.ritter.javapi.util.WeakHashMap`2.containsValue(System.Object)">
                 * Returns whether this map contains the specified value.
                 *
                 * @param value
                 *            the value to search for.
                 * @return {@code true} if this map contains the specified value,
                 *         {@code false} otherwise.</member>
        <member name="M:biz.ritter.javapi.util.WeakHashMap`2.isEmpty">
                 * Returns the number of elements in this map.
                 *
                 * @return the number of elements in this map.</member>
        <member name="M:biz.ritter.javapi.util.WeakHashMap`2.put(`0,`1)">
                 * Maps the specified key to the specified value.
                 *
                 * @param key
                 *            the key.
                 * @param value
                 *            the value.
                 * @return the value of any previous mapping with the specified key or
                 *         {@code null} if there was no mapping.</member>
        <member name="M:biz.ritter.javapi.util.WeakHashMap`2.putAll(biz.ritter.javapi.util.Map{`0,`1})">
                 * Copies all the mappings in the given map to this map. These mappings will
                 * replace all mappings that this map had for any of the keys currently in
                 * the given map.
                 *
                 * @param map
                 *            the map to copy mappings from.
                 * @throws NullPointerException
                 *             if {@code map} is {@code null}.</member>
        <member name="M:biz.ritter.javapi.util.WeakHashMap`2.remove(System.Object)">
                 * Removes the mapping with the specified key from this map.
                 *
                 * @param key
                 *            the key of the mapping to remove.
                 * @return the value of the removed mapping or {@code null} if no mapping
                 *         for the specified key was found.</member>
        <member name="M:biz.ritter.javapi.util.WeakHashMap`2.size">
                 * Returns the number of elements in this map.
                 *
                 * @return the number of elements in this map.</member>
    </members>
</doc>
